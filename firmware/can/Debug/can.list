
can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         00004238  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080043c0  080043c0  000143c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004468  08004468  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004468  08004468  00014468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004470  08004470  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004470  08004470  00014470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004474  08004474  00014474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004478  00020000  2**2
=======
  1 .text         00003a78  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003c00  08003c00  00013c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c18  08003c18  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c18  08003c18  00013c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c20  08003c20  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c20  08003c20  00013c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c24  08003c24  00013c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003c28  00020000  2**2
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001a4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001b0  200001b0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 14 .debug_info   0000d935  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002845  00000000  00000000  0002d9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c00  00000000  00000000  00030200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000911  00000000  00000000  00030e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000218b2  00000000  00000000  00031711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f136  00000000  00000000  00052fc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c7301  00000000  00000000  000620f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002f1c  00000000  00000000  001293fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0012c318  2**0
=======
 14 .debug_info   0000a457  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001e36  00000000  00000000  0002a4d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000830  00000000  00000000  0002c310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000062b  00000000  00000000  0002cb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020267  00000000  00000000  0002d16b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b2f8  00000000  00000000  0004d3d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c15f1  00000000  00000000  000586ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000020bc  00000000  00000000  00119cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0011bd78  2**0
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001a8:	080043a8 	.word	0x080043a8
=======
 80001a8:	08003be8 	.word	0x08003be8
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
<<<<<<< HEAD
 80001c4:	080043a8 	.word	0x080043a8
=======
 80001c4:	08003be8 	.word	0x08003be8
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @brief          hal��CAN�ص�����,���յ������
  * @param[in]      hcan:CAN���ָ��
  * @retval         none
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08c      	sub	sp, #48	; 0x30
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];

    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
<<<<<<< HEAD
 80004dc:	f107 030c 	add.w	r3, r7, #12
 80004e0:	f107 0214 	add.w	r2, r7, #20
 80004e4:	2100      	movs	r1, #0
 80004e6:	6878      	ldr	r0, [r7, #4]
 80004e8:	f001 fdd1 	bl	800208e <HAL_CAN_GetRxMessage>
=======
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	f107 0214 	add.w	r2, r7, #20
 8000d10:	2100      	movs	r1, #0
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f001 f8f3 	bl	8001efe <HAL_CAN_GetRxMessage>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

    switch (rx_header.StdId)
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80004f2:	d203      	bcs.n	80004fc <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
 80004f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80004f8:	d804      	bhi.n	8000504 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
        	measuredSpeed[0] = rx_data[3];
        	break;

        default:
        {
            break;
 80004fa:	e06c      	b.n	80005d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x102>
    switch (rx_header.StdId)
 80004fc:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8000500:	d062      	beq.n	80005c8 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>
            break;
 8000502:	e068      	b.n	80005d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x102>
            i = rx_header.StdId - CAN_3508_M1_ID;
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	b2db      	uxtb	r3, r3
 8000508:	3b01      	subs	r3, #1
 800050a:	b2da      	uxtb	r2, r3
 800050c:	4b34      	ldr	r3, [pc, #208]	; (80005e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800050e:	701a      	strb	r2, [r3, #0]
            get_motor_measure(&motor_chassis[i], rx_data);
 8000510:	4b33      	ldr	r3, [pc, #204]	; (80005e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	4a33      	ldr	r2, [pc, #204]	; (80005e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8000518:	460b      	mov	r3, r1
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	440b      	add	r3, r1
 800051e:	005b      	lsls	r3, r3, #1
 8000520:	4413      	add	r3, r2
 8000522:	881a      	ldrh	r2, [r3, #0]
 8000524:	4b2e      	ldr	r3, [pc, #184]	; (80005e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	4619      	mov	r1, r3
 800052a:	b210      	sxth	r0, r2
 800052c:	4a2d      	ldr	r2, [pc, #180]	; (80005e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 800052e:	460b      	mov	r3, r1
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	440b      	add	r3, r1
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	4413      	add	r3, r2
 8000538:	3308      	adds	r3, #8
 800053a:	4602      	mov	r2, r0
 800053c:	801a      	strh	r2, [r3, #0]
 800053e:	7b3b      	ldrb	r3, [r7, #12]
 8000540:	021b      	lsls	r3, r3, #8
 8000542:	b21a      	sxth	r2, r3
 8000544:	7b7b      	ldrb	r3, [r7, #13]
 8000546:	b21b      	sxth	r3, r3
 8000548:	4313      	orrs	r3, r2
 800054a:	b21a      	sxth	r2, r3
 800054c:	4b24      	ldr	r3, [pc, #144]	; (80005e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	4619      	mov	r1, r3
 8000552:	b290      	uxth	r0, r2
 8000554:	4a23      	ldr	r2, [pc, #140]	; (80005e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8000556:	460b      	mov	r3, r1
 8000558:	009b      	lsls	r3, r3, #2
 800055a:	440b      	add	r3, r1
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	4413      	add	r3, r2
 8000560:	4602      	mov	r2, r0
 8000562:	801a      	strh	r2, [r3, #0]
 8000564:	7bbb      	ldrb	r3, [r7, #14]
 8000566:	021b      	lsls	r3, r3, #8
 8000568:	b21a      	sxth	r2, r3
 800056a:	7bfb      	ldrb	r3, [r7, #15]
 800056c:	b21b      	sxth	r3, r3
 800056e:	491c      	ldr	r1, [pc, #112]	; (80005e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8000570:	7809      	ldrb	r1, [r1, #0]
 8000572:	4313      	orrs	r3, r2
 8000574:	b218      	sxth	r0, r3
 8000576:	4a1b      	ldr	r2, [pc, #108]	; (80005e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8000578:	460b      	mov	r3, r1
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	440b      	add	r3, r1
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	4413      	add	r3, r2
 8000582:	3302      	adds	r3, #2
 8000584:	4602      	mov	r2, r0
 8000586:	801a      	strh	r2, [r3, #0]
 8000588:	7c3b      	ldrb	r3, [r7, #16]
 800058a:	021b      	lsls	r3, r3, #8
 800058c:	b21a      	sxth	r2, r3
 800058e:	7c7b      	ldrb	r3, [r7, #17]
 8000590:	b21b      	sxth	r3, r3
 8000592:	4913      	ldr	r1, [pc, #76]	; (80005e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8000594:	7809      	ldrb	r1, [r1, #0]
 8000596:	4313      	orrs	r3, r2
 8000598:	b218      	sxth	r0, r3
 800059a:	4a12      	ldr	r2, [pc, #72]	; (80005e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 800059c:	460b      	mov	r3, r1
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	440b      	add	r3, r1
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	4413      	add	r3, r2
 80005a6:	3304      	adds	r3, #4
 80005a8:	4602      	mov	r2, r0
 80005aa:	801a      	strh	r2, [r3, #0]
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	4619      	mov	r1, r3
 80005b2:	7cb8      	ldrb	r0, [r7, #18]
 80005b4:	4a0b      	ldr	r2, [pc, #44]	; (80005e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80005b6:	460b      	mov	r3, r1
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	440b      	add	r3, r1
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	4413      	add	r3, r2
 80005c0:	3306      	adds	r3, #6
 80005c2:	4602      	mov	r2, r0
 80005c4:	701a      	strb	r2, [r3, #0]
            break;
 80005c6:	e006      	b.n	80005d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x102>
        	measuredSpeed[1] = rx_data[2];
 80005c8:	7bba      	ldrb	r2, [r7, #14]
 80005ca:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80005cc:	705a      	strb	r2, [r3, #1]
        	measuredSpeed[0] = rx_data[3];
 80005ce:	7bfa      	ldrb	r2, [r7, #15]
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80005d2:	701a      	strb	r2, [r3, #0]
        	break;
 80005d4:	bf00      	nop
        }
    }
}
 80005d6:	bf00      	nop
 80005d8:	3730      	adds	r7, #48	; 0x30
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000094 	.word	0x20000094
 80005e4:	2000002c 	.word	0x2000002c
 80005e8:	20000028 	.word	0x20000028

080005ec <CAN_cmd_chassis>:
  * @param[in]      motor3: (0x203) 3508������Ƶ���, ��Χ [-16384,16384]
  * @param[in]      motor4: (0x204) 3508������Ƶ���, ��Χ [-16384,16384]
  * @retval         none
  */
void CAN_cmd_chassis(int16_t motor1, int16_t motor2, int16_t motor3, int16_t motor4)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4604      	mov	r4, r0
 80005f4:	4608      	mov	r0, r1
 80005f6:	4611      	mov	r1, r2
 80005f8:	461a      	mov	r2, r3
 80005fa:	4623      	mov	r3, r4
 80005fc:	80fb      	strh	r3, [r7, #6]
 80005fe:	4603      	mov	r3, r0
 8000600:	80bb      	strh	r3, [r7, #4]
 8000602:	460b      	mov	r3, r1
 8000604:	807b      	strh	r3, [r7, #2]
 8000606:	4613      	mov	r3, r2
 8000608:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    chassis_tx_message.StdId = SSL_MOTOR_ID;//CAN_CHASSIS_ALL_ID;
 800060a:	4b22      	ldr	r3, [pc, #136]	; (8000694 <CAN_cmd_chassis+0xa8>)
 800060c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000610:	601a      	str	r2, [r3, #0]
    chassis_tx_message.IDE = CAN_ID_STD;
 8000612:	4b20      	ldr	r3, [pc, #128]	; (8000694 <CAN_cmd_chassis+0xa8>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
    chassis_tx_message.RTR = CAN_RTR_DATA;
 8000618:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <CAN_cmd_chassis+0xa8>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
    chassis_tx_message.DLC = 0x08;
 800061e:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <CAN_cmd_chassis+0xa8>)
 8000620:	2208      	movs	r2, #8
 8000622:	611a      	str	r2, [r3, #16]
    chassis_can_send_data[0] = motor1 >> 8;
 8000624:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000628:	121b      	asrs	r3, r3, #8
 800062a:	b21b      	sxth	r3, r3
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <CAN_cmd_chassis+0xac>)
 8000630:	701a      	strb	r2, [r3, #0]
    chassis_can_send_data[1] = motor1;
 8000632:	88fb      	ldrh	r3, [r7, #6]
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4b18      	ldr	r3, [pc, #96]	; (8000698 <CAN_cmd_chassis+0xac>)
 8000638:	705a      	strb	r2, [r3, #1]
    chassis_can_send_data[2] = motor2 >> 8;
 800063a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800063e:	121b      	asrs	r3, r3, #8
 8000640:	b21b      	sxth	r3, r3
 8000642:	b2da      	uxtb	r2, r3
 8000644:	4b14      	ldr	r3, [pc, #80]	; (8000698 <CAN_cmd_chassis+0xac>)
 8000646:	709a      	strb	r2, [r3, #2]
    chassis_can_send_data[3] = motor2;
 8000648:	88bb      	ldrh	r3, [r7, #4]
 800064a:	b2da      	uxtb	r2, r3
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <CAN_cmd_chassis+0xac>)
 800064e:	70da      	strb	r2, [r3, #3]
    chassis_can_send_data[4] = motor3 >> 8;
 8000650:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000654:	121b      	asrs	r3, r3, #8
 8000656:	b21b      	sxth	r3, r3
 8000658:	b2da      	uxtb	r2, r3
 800065a:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <CAN_cmd_chassis+0xac>)
 800065c:	711a      	strb	r2, [r3, #4]
    chassis_can_send_data[5] = motor3;
 800065e:	887b      	ldrh	r3, [r7, #2]
 8000660:	b2da      	uxtb	r2, r3
 8000662:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <CAN_cmd_chassis+0xac>)
 8000664:	715a      	strb	r2, [r3, #5]
    chassis_can_send_data[6] = motor4 >> 8;
 8000666:	f9b7 3000 	ldrsh.w	r3, [r7]
 800066a:	121b      	asrs	r3, r3, #8
 800066c:	b21b      	sxth	r3, r3
 800066e:	b2da      	uxtb	r2, r3
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <CAN_cmd_chassis+0xac>)
 8000672:	719a      	strb	r2, [r3, #6]
    chassis_can_send_data[7] = motor4;
 8000674:	883b      	ldrh	r3, [r7, #0]
 8000676:	b2da      	uxtb	r2, r3
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <CAN_cmd_chassis+0xac>)
 800067a:	71da      	strb	r2, [r3, #7]

    HAL_CAN_AddTxMessage(&CHASSIS_CAN, &chassis_tx_message, chassis_can_send_data, &send_mail_box);
<<<<<<< HEAD
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	4a05      	ldr	r2, [pc, #20]	; (8000698 <CAN_cmd_chassis+0xac>)
 8000682:	4904      	ldr	r1, [pc, #16]	; (8000694 <CAN_cmd_chassis+0xa8>)
 8000684:	4805      	ldr	r0, [pc, #20]	; (800069c <CAN_cmd_chassis+0xb0>)
 8000686:	f001 fc27 	bl	8001ed8 <HAL_CAN_AddTxMessage>
=======
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <CAN_cmd_chassis+0xac>)
 8000eae:	4904      	ldr	r1, [pc, #16]	; (8000ec0 <CAN_cmd_chassis+0xa8>)
 8000eb0:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <CAN_cmd_chassis+0xb0>)
 8000eb2:	f000 ff49 	bl	8001d48 <HAL_CAN_AddTxMessage>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
}
 800068a:	bf00      	nop
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	bd90      	pop	{r4, r7, pc}
 8000692:	bf00      	nop
 8000694:	20000074 	.word	0x20000074
 8000698:	2000008c 	.word	0x2000008c
 800069c:	20000098 	.word	0x20000098

080006a0 <can_filter_init>:

extern CAN_HandleTypeDef hcan1;
extern CAN_HandleTypeDef hcan2;

void can_filter_init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	; 0x28
 80006a4:	af00      	add	r7, sp, #0

    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 80006a6:	2301      	movs	r3, #1
 80006a8:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 80006ae:	2301      	movs	r3, #1
 80006b0:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 80006b2:	2300      	movs	r3, #0
 80006b4:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
    can_filter_st.FilterBank = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
<<<<<<< HEAD
 80006ca:	463b      	mov	r3, r7
 80006cc:	4619      	mov	r1, r3
 80006ce:	480f      	ldr	r0, [pc, #60]	; (800070c <can_filter_init+0x6c>)
 80006d0:	f001 fade 	bl	8001c90 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 80006d4:	480d      	ldr	r0, [pc, #52]	; (800070c <can_filter_init+0x6c>)
 80006d6:	f001 fbbb 	bl	8001e50 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80006da:	2102      	movs	r1, #2
 80006dc:	480b      	ldr	r0, [pc, #44]	; (800070c <can_filter_init+0x6c>)
 80006de:	f001 fde8 	bl	80022b2 <HAL_CAN_ActivateNotification>
=======
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	4619      	mov	r1, r3
 8000efa:	480f      	ldr	r0, [pc, #60]	; (8000f38 <can_filter_init+0x6c>)
 8000efc:	f000 fe00 	bl	8001b00 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 8000f00:	480d      	ldr	r0, [pc, #52]	; (8000f38 <can_filter_init+0x6c>)
 8000f02:	f000 fedd 	bl	8001cc0 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000f06:	2102      	movs	r1, #2
 8000f08:	480b      	ldr	r0, [pc, #44]	; (8000f38 <can_filter_init+0x6c>)
 8000f0a:	f001 f90a 	bl	8002122 <HAL_CAN_ActivateNotification>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f


    can_filter_st.SlaveStartFilterBank = 14;
 80006e2:	230e      	movs	r3, #14
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
    can_filter_st.FilterBank = 14;
 80006e6:	230e      	movs	r3, #14
 80006e8:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
<<<<<<< HEAD
 80006ea:	463b      	mov	r3, r7
 80006ec:	4619      	mov	r1, r3
 80006ee:	4808      	ldr	r0, [pc, #32]	; (8000710 <can_filter_init+0x70>)
 80006f0:	f001 face 	bl	8001c90 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 80006f4:	4806      	ldr	r0, [pc, #24]	; (8000710 <can_filter_init+0x70>)
 80006f6:	f001 fbab 	bl	8001e50 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80006fa:	2102      	movs	r1, #2
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <can_filter_init+0x70>)
 80006fe:	f001 fdd8 	bl	80022b2 <HAL_CAN_ActivateNotification>
=======
 8000f16:	463b      	mov	r3, r7
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4808      	ldr	r0, [pc, #32]	; (8000f3c <can_filter_init+0x70>)
 8000f1c:	f000 fdf0 	bl	8001b00 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 8000f20:	4806      	ldr	r0, [pc, #24]	; (8000f3c <can_filter_init+0x70>)
 8000f22:	f000 fecd 	bl	8001cc0 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000f26:	2102      	movs	r1, #2
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <can_filter_init+0x70>)
 8000f2a:	f001 f8fa 	bl	8002122 <HAL_CAN_ActivateNotification>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f



}
 8000702:	bf00      	nop
 8000704:	3728      	adds	r7, #40	; 0x28
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000098 	.word	0x20000098
 8000710:	200000c0 	.word	0x200000c0

08000714 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000718:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_CAN1_Init+0x64>)
 800071a:	4a18      	ldr	r2, [pc, #96]	; (800077c <MX_CAN1_Init+0x68>)
 800071c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800071e:	4b16      	ldr	r3, [pc, #88]	; (8000778 <MX_CAN1_Init+0x64>)
 8000720:	2203      	movs	r2, #3
 8000722:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_CAN1_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800072a:	4b13      	ldr	r3, [pc, #76]	; (8000778 <MX_CAN1_Init+0x64>)
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_CAN1_Init+0x64>)
 8000732:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000736:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_CAN1_Init+0x64>)
 800073a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800073e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000740:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <MX_CAN1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_CAN1_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <MX_CAN1_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_CAN1_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000758:	4b07      	ldr	r3, [pc, #28]	; (8000778 <MX_CAN1_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_CAN1_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
<<<<<<< HEAD
 8000764:	4804      	ldr	r0, [pc, #16]	; (8000778 <MX_CAN1_Init+0x64>)
 8000766:	f001 f997 	bl	8001a98 <HAL_CAN_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000770:	f000 fa36 	bl	8000be0 <Error_Handler>
=======
 8000f90:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <MX_CAN1_Init+0x64>)
 8000f92:	f000 fcb9 	bl	8001908 <HAL_CAN_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000f9c:	f000 fb08 	bl	80015b0 <Error_Handler>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000098 	.word	0x20000098
 800077c:	40006400 	.word	0x40006400

08000780 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000784:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_CAN2_Init+0x64>)
 8000786:	4a18      	ldr	r2, [pc, #96]	; (80007e8 <MX_CAN2_Init+0x68>)
 8000788:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 800078a:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_CAN2_Init+0x64>)
 800078c:	2203      	movs	r2, #3
 800078e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000790:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_CAN2_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000796:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_CAN2_Init+0x64>)
 8000798:	2200      	movs	r2, #0
 800079a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_CAN2_Init+0x64>)
 800079e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80007a2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_CAN2_Init+0x64>)
 80007a6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80007aa:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80007ac:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <MX_CAN2_Init+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_CAN2_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80007b8:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <MX_CAN2_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_CAN2_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <MX_CAN2_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_CAN2_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
<<<<<<< HEAD
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_CAN2_Init+0x64>)
 80007d2:	f001 f961 	bl	8001a98 <HAL_CAN_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80007dc:	f000 fa00 	bl	8000be0 <Error_Handler>
=======
 8000ffc:	4804      	ldr	r0, [pc, #16]	; (8001010 <MX_CAN2_Init+0x64>)
 8000ffe:	f000 fc83 	bl	8001908 <HAL_CAN_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001008:	f000 fad2 	bl	80015b0 <Error_Handler>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200000c0 	.word	0x200000c0
 80007e8:	40006800 	.word	0x40006800

080007ec <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08c      	sub	sp, #48	; 0x30
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a4a      	ldr	r2, [pc, #296]	; (8000934 <HAL_CAN_MspInit+0x148>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d13d      	bne.n	800088a <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800080e:	4b4a      	ldr	r3, [pc, #296]	; (8000938 <HAL_CAN_MspInit+0x14c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	3301      	adds	r3, #1
 8000814:	4a48      	ldr	r2, [pc, #288]	; (8000938 <HAL_CAN_MspInit+0x14c>)
 8000816:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000818:	4b47      	ldr	r3, [pc, #284]	; (8000938 <HAL_CAN_MspInit+0x14c>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d10d      	bne.n	800083c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000820:	2300      	movs	r3, #0
 8000822:	61bb      	str	r3, [r7, #24]
 8000824:	4b45      	ldr	r3, [pc, #276]	; (800093c <HAL_CAN_MspInit+0x150>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000828:	4a44      	ldr	r2, [pc, #272]	; (800093c <HAL_CAN_MspInit+0x150>)
 800082a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800082e:	6413      	str	r3, [r2, #64]	; 0x40
 8000830:	4b42      	ldr	r3, [pc, #264]	; (800093c <HAL_CAN_MspInit+0x150>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000838:	61bb      	str	r3, [r7, #24]
 800083a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	4b3e      	ldr	r3, [pc, #248]	; (800093c <HAL_CAN_MspInit+0x150>)
 8000842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000844:	4a3d      	ldr	r2, [pc, #244]	; (800093c <HAL_CAN_MspInit+0x150>)
 8000846:	f043 0308 	orr.w	r3, r3, #8
 800084a:	6313      	str	r3, [r2, #48]	; 0x30
 800084c:	4b3b      	ldr	r3, [pc, #236]	; (800093c <HAL_CAN_MspInit+0x150>)
 800084e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000850:	f003 0308 	and.w	r3, r3, #8
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000858:	2303      	movs	r3, #3
 800085a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000864:	2303      	movs	r3, #3
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000868:	2309      	movs	r3, #9
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
<<<<<<< HEAD
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	4833      	ldr	r0, [pc, #204]	; (8000940 <HAL_CAN_MspInit+0x154>)
 8000874:	f002 f884 	bl	8002980 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000878:	2200      	movs	r2, #0
 800087a:	2100      	movs	r1, #0
 800087c:	2014      	movs	r0, #20
 800087e:	f002 f848 	bl	8002912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000882:	2014      	movs	r0, #20
 8000884:	f002 f861 	bl	800294a <HAL_NVIC_EnableIRQ>
=======
 8001098:	f107 031c 	add.w	r3, r7, #28
 800109c:	4619      	mov	r1, r3
 800109e:	4833      	ldr	r0, [pc, #204]	; (800116c <HAL_CAN_MspInit+0x154>)
 80010a0:	f001 fba6 	bl	80027f0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2100      	movs	r1, #0
 80010a8:	2014      	movs	r0, #20
 80010aa:	f001 fb6a 	bl	8002782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80010ae:	2014      	movs	r0, #20
 80010b0:	f001 fb83 	bl	80027ba <HAL_NVIC_EnableIRQ>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000888:	e04f      	b.n	800092a <HAL_CAN_MspInit+0x13e>
  else if(canHandle->Instance==CAN2)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a2d      	ldr	r2, [pc, #180]	; (8000944 <HAL_CAN_MspInit+0x158>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d14a      	bne.n	800092a <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000894:	2300      	movs	r3, #0
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	4b28      	ldr	r3, [pc, #160]	; (800093c <HAL_CAN_MspInit+0x150>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	4a27      	ldr	r2, [pc, #156]	; (800093c <HAL_CAN_MspInit+0x150>)
 800089e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80008a2:	6413      	str	r3, [r2, #64]	; 0x40
 80008a4:	4b25      	ldr	r3, [pc, #148]	; (800093c <HAL_CAN_MspInit+0x150>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80008b0:	4b21      	ldr	r3, [pc, #132]	; (8000938 <HAL_CAN_MspInit+0x14c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	3301      	adds	r3, #1
 80008b6:	4a20      	ldr	r2, [pc, #128]	; (8000938 <HAL_CAN_MspInit+0x14c>)
 80008b8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80008ba:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <HAL_CAN_MspInit+0x14c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d10d      	bne.n	80008de <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	4b1d      	ldr	r3, [pc, #116]	; (800093c <HAL_CAN_MspInit+0x150>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	4a1c      	ldr	r2, [pc, #112]	; (800093c <HAL_CAN_MspInit+0x150>)
 80008cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008d0:	6413      	str	r3, [r2, #64]	; 0x40
 80008d2:	4b1a      	ldr	r3, [pc, #104]	; (800093c <HAL_CAN_MspInit+0x150>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	4b16      	ldr	r3, [pc, #88]	; (800093c <HAL_CAN_MspInit+0x150>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a15      	ldr	r2, [pc, #84]	; (800093c <HAL_CAN_MspInit+0x150>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <HAL_CAN_MspInit+0x150>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80008fa:	2360      	movs	r3, #96	; 0x60
 80008fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000906:	2303      	movs	r3, #3
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800090a:	2309      	movs	r3, #9
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
<<<<<<< HEAD
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	480c      	ldr	r0, [pc, #48]	; (8000948 <HAL_CAN_MspInit+0x15c>)
 8000916:	f002 f833 	bl	8002980 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2100      	movs	r1, #0
 800091e:	2040      	movs	r0, #64	; 0x40
 8000920:	f001 fff7 	bl	8002912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000924:	2040      	movs	r0, #64	; 0x40
 8000926:	f002 f810 	bl	800294a <HAL_NVIC_EnableIRQ>
=======
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	4619      	mov	r1, r3
 8001140:	480c      	ldr	r0, [pc, #48]	; (8001174 <HAL_CAN_MspInit+0x15c>)
 8001142:	f001 fb55 	bl	80027f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	2040      	movs	r0, #64	; 0x40
 800114c:	f001 fb19 	bl	8002782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001150:	2040      	movs	r0, #64	; 0x40
 8001152:	f001 fb32 	bl	80027ba <HAL_NVIC_EnableIRQ>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
}
 800092a:	bf00      	nop
 800092c:	3730      	adds	r7, #48	; 0x30
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40006400 	.word	0x40006400
 8000938:	200000e8 	.word	0x200000e8
 800093c:	40023800 	.word	0x40023800
 8000940:	40020c00 	.word	0x40020c00
 8000944:	40006800 	.word	0x40006800
 8000948:	40020400 	.word	0x40020400

0800094c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08c      	sub	sp, #48	; 0x30
 8000950:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	61bb      	str	r3, [r7, #24]
 8000966:	4b50      	ldr	r3, [pc, #320]	; (8000aa8 <MX_GPIO_Init+0x15c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a4f      	ldr	r2, [pc, #316]	; (8000aa8 <MX_GPIO_Init+0x15c>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b4d      	ldr	r3, [pc, #308]	; (8000aa8 <MX_GPIO_Init+0x15c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	61bb      	str	r3, [r7, #24]
 800097c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	4b49      	ldr	r3, [pc, #292]	; (8000aa8 <MX_GPIO_Init+0x15c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a48      	ldr	r2, [pc, #288]	; (8000aa8 <MX_GPIO_Init+0x15c>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b46      	ldr	r3, [pc, #280]	; (8000aa8 <MX_GPIO_Init+0x15c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b42      	ldr	r3, [pc, #264]	; (8000aa8 <MX_GPIO_Init+0x15c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a41      	ldr	r2, [pc, #260]	; (8000aa8 <MX_GPIO_Init+0x15c>)
 80009a4:	f043 0308 	orr.w	r3, r3, #8
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b3f      	ldr	r3, [pc, #252]	; (8000aa8 <MX_GPIO_Init+0x15c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0308 	and.w	r3, r3, #8
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b3b      	ldr	r3, [pc, #236]	; (8000aa8 <MX_GPIO_Init+0x15c>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a3a      	ldr	r2, [pc, #232]	; (8000aa8 <MX_GPIO_Init+0x15c>)
 80009c0:	f043 0320 	orr.w	r3, r3, #32
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b38      	ldr	r3, [pc, #224]	; (8000aa8 <MX_GPIO_Init+0x15c>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0320 	and.w	r3, r3, #32
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	4b34      	ldr	r3, [pc, #208]	; (8000aa8 <MX_GPIO_Init+0x15c>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a33      	ldr	r2, [pc, #204]	; (8000aa8 <MX_GPIO_Init+0x15c>)
 80009dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b31      	ldr	r3, [pc, #196]	; (8000aa8 <MX_GPIO_Init+0x15c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b2d      	ldr	r3, [pc, #180]	; (8000aa8 <MX_GPIO_Init+0x15c>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a2c      	ldr	r2, [pc, #176]	; (8000aa8 <MX_GPIO_Init+0x15c>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <MX_GPIO_Init+0x15c>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	4827      	ldr	r0, [pc, #156]	; (8000aac <MX_GPIO_Init+0x160>)
 8000a10:	f002 f952 	bl	8002cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_SET);
<<<<<<< HEAD
 8000a14:	2201      	movs	r2, #1
 8000a16:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000a1a:	4825      	ldr	r0, [pc, #148]	; (8000ab0 <MX_GPIO_Init+0x164>)
 8000a1c:	f002 f94c 	bl	8002cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a26:	4823      	ldr	r0, [pc, #140]	; (8000ab4 <MX_GPIO_Init+0x168>)
 8000a28:	f002 f946 	bl	8002cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	4619      	mov	r1, r3
 8000a42:	481a      	ldr	r0, [pc, #104]	; (8000aac <MX_GPIO_Init+0x160>)
 8000a44:	f001 ff9c 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a4c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4813      	ldr	r0, [pc, #76]	; (8000aac <MX_GPIO_Init+0x160>)
 8000a5e:	f001 ff8f 	bl	8002980 <HAL_GPIO_Init>
=======
 8001236:	2201      	movs	r2, #1
 8001238:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800123c:	480b      	ldr	r0, [pc, #44]	; (800126c <MX_GPIO_Init+0xf4>)
 800123e:	f001 fc73 	bl	8002b28 <HAL_GPIO_WritePin>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 8000a62:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
<<<<<<< HEAD
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	480d      	ldr	r0, [pc, #52]	; (8000ab0 <MX_GPIO_Init+0x164>)
 8000a7c:	f001 ff80 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin;
 8000a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a86:	2301      	movs	r3, #1
 8000a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(NRF_CSN_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	4619      	mov	r1, r3
 8000a98:	4806      	ldr	r0, [pc, #24]	; (8000ab4 <MX_GPIO_Init+0x168>)
 8000a9a:	f001 ff71 	bl	8002980 <HAL_GPIO_Init>
=======
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	4619      	mov	r1, r3
 800125a:	4804      	ldr	r0, [pc, #16]	; (800126c <MX_GPIO_Init+0xf4>)
 800125c:	f001 fac8 	bl	80027f0 <HAL_GPIO_Init>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

}
 8000a9e:	bf00      	nop
 8000aa0:	3730      	adds	r7, #48	; 0x30
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40021400 	.word	0x40021400
 8000ab0:	40021c00 	.word	0x40021c00
 8000ab4:	40020400 	.word	0x40020400

08000ab8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
<<<<<<< HEAD
 8000abc:	f000 ff56 	bl	800196c <HAL_Init>
=======
 8001276:	f000 fad5 	bl	8001824 <HAL_Init>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
<<<<<<< HEAD
 8000ac0:	f000 f824 	bl	8000b0c <SystemClock_Config>
=======
 800127a:	f000 f92f 	bl	80014dc <SystemClock_Config>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ac4:	f7ff ff42 	bl	800094c <MX_GPIO_Init>
	MX_CAN1_Init();
 8000ac8:	f7ff fe24 	bl	8000714 <MX_CAN1_Init>
	MX_CAN2_Init();
 8000acc:	f7ff fe58 	bl	8000780 <MX_CAN2_Init>
	MX_USART6_UART_Init();
<<<<<<< HEAD
 8000ad0:	f000 feb0 	bl	8001834 <MX_USART6_UART_Init>
	MX_SPI2_Init();
 8000ad4:	f000 fdb8 	bl	8001648 <MX_SPI2_Init>
=======
 800128a:	f000 fa0f 	bl	80016ac <MX_USART6_UART_Init>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
	/* USER CODE BEGIN 2 */
	can_filter_init();
 8000ad8:	f7ff fde2 	bl	80006a0 <can_filter_init>

	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, RESET);
<<<<<<< HEAD
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae2:	4809      	ldr	r0, [pc, #36]	; (8000b08 <main+0x50>)
 8000ae4:	f002 f8e8 	bl	8002cb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aee:	4806      	ldr	r0, [pc, #24]	; (8000b08 <main+0x50>)
 8000af0:	f002 f8e2 	bl	8002cb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000afa:	4803      	ldr	r0, [pc, #12]	; (8000b08 <main+0x50>)
 8000afc:	f002 f8dc 	bl	8002cb8 <HAL_GPIO_WritePin>

	runRadio();
 8000b00:	f000 fce6 	bl	80014d0 <runRadio>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000b04:	e7fe      	b.n	8000b04 <main+0x4c>
 8000b06:	bf00      	nop
 8000b08:	40021c00 	.word	0x40021c00

08000b0c <SystemClock_Config>:
=======
 8001292:	2200      	movs	r2, #0
 8001294:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001298:	4889      	ldr	r0, [pc, #548]	; (80014c0 <main+0x250>)
 800129a:	f001 fc45 	bl	8002b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012a4:	4886      	ldr	r0, [pc, #536]	; (80014c0 <main+0x250>)
 80012a6:	f001 fc3f 	bl	8002b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012b0:	4883      	ldr	r0, [pc, #524]	; (80014c0 <main+0x250>)
 80012b2:	f001 fc39 	bl	8002b28 <HAL_GPIO_WritePin>

	uint32_t previousTime = HAL_GetTick();
 80012b6:	f000 fb1b 	bl	80018f0 <HAL_GetTick>
 80012ba:	62f8      	str	r0, [r7, #44]	; 0x2c

	float kp = 2;
 80012bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
	float ki = 0; // In RPM
 80012c2:	f04f 0300 	mov.w	r3, #0
 80012c6:	623b      	str	r3, [r7, #32]
	float kd = 0; // In RPM
 80012c8:	f04f 0300 	mov.w	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]

	float targetRPM = 25; // In RPM
 80012ce:	4b7d      	ldr	r3, [pc, #500]	; (80014c4 <main+0x254>)
 80012d0:	61bb      	str	r3, [r7, #24]
	float currentRPM = 0; // In RPM
 80012d2:	f04f 0300 	mov.w	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
	float currentError = 0; // In RPM
 80012d8:	f04f 0300 	mov.w	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
	float totalError = 0;
 80012de:	f04f 0300 	mov.w	r3, #0
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28
	float errorChange = 0;
 80012e4:	f04f 0300 	mov.w	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
	float previousError = 0;
 80012ea:	f04f 0300 	mov.w	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]
	float outputY = 0;
 80012f0:	f04f 0300 	mov.w	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
//			HAL_UART_Transmit(&huart6, delme, 2, 100);
//			counter = 0;
//		}


		if ((HAL_GetTick() - previousTime) > 50){
 80012f6:	f000 fafb 	bl	80018f0 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b32      	cmp	r3, #50	; 0x32
 8001302:	d9f8      	bls.n	80012f6 <main+0x86>
			previousTime = HAL_GetTick();
 8001304:	f000 faf4 	bl	80018f0 <HAL_GetTick>
 8001308:	62f8      	str	r0, [r7, #44]	; 0x2c

			currentRPM = (measuredSpeed[1] << 8) | measuredSpeed[0];
 800130a:	4b6f      	ldr	r3, [pc, #444]	; (80014c8 <main+0x258>)
 800130c:	785b      	ldrb	r3, [r3, #1]
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	4a6d      	ldr	r2, [pc, #436]	; (80014c8 <main+0x258>)
 8001312:	7812      	ldrb	r2, [r2, #0]
 8001314:	4313      	orrs	r3, r2
 8001316:	ee07 3a90 	vmov	s15, r3
 800131a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800131e:	edc7 7a05 	vstr	s15, [r7, #20]

			currentError = targetRPM - currentRPM;
 8001322:	ed97 7a06 	vldr	s14, [r7, #24]
 8001326:	edd7 7a05 	vldr	s15, [r7, #20]
 800132a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800132e:	edc7 7a04 	vstr	s15, [r7, #16]
			totalError += currentError * 0.05;
 8001332:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001334:	f7ff f8ac 	bl	8000490 <__aeabi_f2d>
 8001338:	4604      	mov	r4, r0
 800133a:	460d      	mov	r5, r1
 800133c:	6938      	ldr	r0, [r7, #16]
 800133e:	f7ff f8a7 	bl	8000490 <__aeabi_f2d>
 8001342:	a35d      	add	r3, pc, #372	; (adr r3, 80014b8 <main+0x248>)
 8001344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001348:	f7ff f8fa 	bl	8000540 <__aeabi_dmul>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4620      	mov	r0, r4
 8001352:	4629      	mov	r1, r5
 8001354:	f7fe ff3e 	bl	80001d4 <__adddf3>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4610      	mov	r0, r2
 800135e:	4619      	mov	r1, r3
 8001360:	f7ff fb00 	bl	8000964 <__aeabi_d2f>
 8001364:	4603      	mov	r3, r0
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
			errorChange = (currentError - previousError) / 0.05;
 8001368:	ed97 7a04 	vldr	s14, [r7, #16]
 800136c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001370:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001374:	ee17 0a90 	vmov	r0, s15
 8001378:	f7ff f88a 	bl	8000490 <__aeabi_f2d>
 800137c:	a34e      	add	r3, pc, #312	; (adr r3, 80014b8 <main+0x248>)
 800137e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001382:	f7ff fa07 	bl	8000794 <__aeabi_ddiv>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4610      	mov	r0, r2
 800138c:	4619      	mov	r1, r3
 800138e:	f7ff fae9 	bl	8000964 <__aeabi_d2f>
 8001392:	4603      	mov	r3, r0
 8001394:	60fb      	str	r3, [r7, #12]


			outputY = constrain(100 * (kp * currentError + ki * totalError + kd * errorChange), -30000, 30000);
 8001396:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800139a:	edd7 7a04 	vldr	s15, [r7, #16]
 800139e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013a2:	edd7 6a08 	vldr	s13, [r7, #32]
 80013a6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80013aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80013b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80013ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c2:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80014cc <main+0x25c>
 80013c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ca:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80014d0 <main+0x260>
 80013ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d6:	d502      	bpl.n	80013de <main+0x16e>
 80013d8:	eddf 7a3d 	vldr	s15, [pc, #244]	; 80014d0 <main+0x260>
 80013dc:	e03d      	b.n	800145a <main+0x1ea>
 80013de:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80013e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80013e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ea:	edd7 6a08 	vldr	s13, [r7, #32]
 80013ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80013f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80013fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001402:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800140a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80014cc <main+0x25c>
 800140e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001412:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80014d4 <main+0x264>
 8001416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800141a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141e:	dd02      	ble.n	8001426 <main+0x1b6>
 8001420:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80014d4 <main+0x264>
 8001424:	e019      	b.n	800145a <main+0x1ea>
 8001426:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800142a:	edd7 7a04 	vldr	s15, [r7, #16]
 800142e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001432:	edd7 6a08 	vldr	s13, [r7, #32]
 8001436:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800143a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800143e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001442:	edd7 6a07 	vldr	s13, [r7, #28]
 8001446:	edd7 7a03 	vldr	s15, [r7, #12]
 800144a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800144e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001452:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80014cc <main+0x25c>
 8001456:	ee67 7a87 	vmul.f32	s15, s15, s14
 800145a:	edc7 7a01 	vstr	s15, [r7, #4]

			CAN_cmd_chassis(outputY, outputY, outputY, outputY);
 800145e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001462:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001466:	ee17 3a90 	vmov	r3, s15
 800146a:	b218      	sxth	r0, r3
 800146c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001470:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001474:	ee17 3a90 	vmov	r3, s15
 8001478:	b219      	sxth	r1, r3
 800147a:	edd7 7a01 	vldr	s15, [r7, #4]
 800147e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001482:	ee17 3a90 	vmov	r3, s15
 8001486:	b21a      	sxth	r2, r3
 8001488:	edd7 7a01 	vldr	s15, [r7, #4]
 800148c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001490:	ee17 3a90 	vmov	r3, s15
 8001494:	b21b      	sxth	r3, r3
 8001496:	f7ff fcbf 	bl	8000e18 <CAN_cmd_chassis>

			HAL_UART_Transmit(&huart6, (int32_t) outputY , 4, 100);
 800149a:	edd7 7a01 	vldr	s15, [r7, #4]
 800149e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014a2:	ee17 1a90 	vmov	r1, s15
 80014a6:	2364      	movs	r3, #100	; 0x64
 80014a8:	2204      	movs	r2, #4
 80014aa:	480b      	ldr	r0, [pc, #44]	; (80014d8 <main+0x268>)
 80014ac:	f001 fffb 	bl	80034a6 <HAL_UART_Transmit>
		if ((HAL_GetTick() - previousTime) > 50){
 80014b0:	e721      	b.n	80012f6 <main+0x86>
 80014b2:	bf00      	nop
 80014b4:	f3af 8000 	nop.w
 80014b8:	9999999a 	.word	0x9999999a
 80014bc:	3fa99999 	.word	0x3fa99999
 80014c0:	40021c00 	.word	0x40021c00
 80014c4:	41c80000 	.word	0x41c80000
 80014c8:	20000028 	.word	0x20000028
 80014cc:	42c80000 	.word	0x42c80000
 80014d0:	c6ea6000 	.word	0xc6ea6000
 80014d4:	46ea6000 	.word	0x46ea6000
 80014d8:	200000ec 	.word	0x200000ec

080014dc <SystemClock_Config>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b094      	sub	sp, #80	; 0x50
 8000b10:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b12:	f107 0320 	add.w	r3, r7, #32
 8000b16:	2230      	movs	r2, #48	; 0x30
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f003 fc18 	bl	8004350 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
=======
 80014dc:	b580      	push	{r7, lr}
 80014de:	b094      	sub	sp, #80	; 0x50
 80014e0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e2:	f107 0320 	add.w	r3, r7, #32
 80014e6:	2230      	movs	r2, #48	; 0x30
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f002 fb50 	bl	8003b90 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f0:	f107 030c 	add.w	r3, r7, #12
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 8000b30:	2300      	movs	r3, #0
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	4b28      	ldr	r3, [pc, #160]	; (8000bd8 <SystemClock_Config+0xcc>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b38:	4a27      	ldr	r2, [pc, #156]	; (8000bd8 <SystemClock_Config+0xcc>)
 8000b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b40:	4b25      	ldr	r3, [pc, #148]	; (8000bd8 <SystemClock_Config+0xcc>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	4b22      	ldr	r3, [pc, #136]	; (8000bdc <SystemClock_Config+0xd0>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a21      	ldr	r2, [pc, #132]	; (8000bdc <SystemClock_Config+0xd0>)
 8000b56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b5a:	6013      	str	r3, [r2, #0]
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <SystemClock_Config+0xd0>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	687b      	ldr	r3, [r7, #4]
=======
 8001500:	2300      	movs	r3, #0
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	4b28      	ldr	r3, [pc, #160]	; (80015a8 <SystemClock_Config+0xcc>)
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	4a27      	ldr	r2, [pc, #156]	; (80015a8 <SystemClock_Config+0xcc>)
 800150a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150e:	6413      	str	r3, [r2, #64]	; 0x40
 8001510:	4b25      	ldr	r3, [pc, #148]	; (80015a8 <SystemClock_Config+0xcc>)
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800151c:	2300      	movs	r3, #0
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	4b22      	ldr	r3, [pc, #136]	; (80015ac <SystemClock_Config+0xd0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a21      	ldr	r2, [pc, #132]	; (80015ac <SystemClock_Config+0xd0>)
 8001526:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <SystemClock_Config+0xd0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	687b      	ldr	r3, [r7, #4]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
<<<<<<< HEAD
 8000b68:	2301      	movs	r3, #1
 8000b6a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b72:	2302      	movs	r3, #2
 8000b74:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 6;
 8000b7c:	2306      	movs	r3, #6
 8000b7e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000b80:	23a8      	movs	r3, #168	; 0xa8
 8000b82:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b84:	2302      	movs	r3, #2
 8000b86:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b88:	2304      	movs	r3, #4
 8000b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b8c:	f107 0320 	add.w	r3, r7, #32
 8000b90:	4618      	mov	r0, r3
 8000b92:	f002 f8c5 	bl	8002d20 <HAL_RCC_OscConfig>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000b9c:	f000 f820 	bl	8000be0 <Error_Handler>
=======
 8001538:	2301      	movs	r3, #1
 800153a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800153c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001542:	2302      	movs	r3, #2
 8001544:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001546:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800154a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 6;
 800154c:	2306      	movs	r3, #6
 800154e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8001550:	23a8      	movs	r3, #168	; 0xa8
 8001552:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001554:	2302      	movs	r3, #2
 8001556:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001558:	2304      	movs	r3, #4
 800155a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155c:	f107 0320 	add.w	r3, r7, #32
 8001560:	4618      	mov	r0, r3
 8001562:	f001 fafb 	bl	8002b5c <HAL_RCC_OscConfig>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <SystemClock_Config+0x94>
	{
		Error_Handler();
 800156c:	f000 f820 	bl	80015b0 <Error_Handler>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 8000ba0:	230f      	movs	r3, #15
 8000ba2:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bb0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bb8:	f107 030c 	add.w	r3, r7, #12
 8000bbc:	2105      	movs	r1, #5
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f002 fb26 	bl	8003210 <HAL_RCC_ClockConfig>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8000bca:	f000 f809 	bl	8000be0 <Error_Handler>
	}
}
 8000bce:	bf00      	nop
 8000bd0:	3750      	adds	r7, #80	; 0x50
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40007000 	.word	0x40007000

08000be0 <Error_Handler>:
=======
 8001570:	230f      	movs	r3, #15
 8001572:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001574:	2302      	movs	r3, #2
 8001576:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800157c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001580:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001582:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001586:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	2105      	movs	r1, #5
 800158e:	4618      	mov	r0, r3
 8001590:	f001 fd5c 	bl	800304c <HAL_RCC_ClockConfig>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <SystemClock_Config+0xc2>
	{
		Error_Handler();
 800159a:	f000 f809 	bl	80015b0 <Error_Handler>
	}
}
 800159e:	bf00      	nop
 80015a0:	3750      	adds	r7, #80	; 0x50
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40007000 	.word	0x40007000

080015b0 <Error_Handler>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
<<<<<<< HEAD
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
=======
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop
=======
 80015b4:	b672      	cpsid	i
}
 80015b6:	bf00      	nop
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
<<<<<<< HEAD
 8000be8:	e7fe      	b.n	8000be8 <Error_Handler+0x8>
	...

08000bec <nRF24_CSN_L>:

static inline void nRF24_CE_H() {
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
}

static inline void nRF24_CSN_L() {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bf6:	4802      	ldr	r0, [pc, #8]	; (8000c00 <nRF24_CSN_L+0x14>)
 8000bf8:	f002 f85e 	bl	8002cb8 <HAL_GPIO_WritePin>
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40020400 	.word	0x40020400

08000c04 <nRF24_CSN_H>:

static inline void nRF24_CSN_H() {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c0e:	4802      	ldr	r0, [pc, #8]	; (8000c18 <nRF24_CSN_H+0x14>)
 8000c10:	f002 f852 	bl	8002cb8 <HAL_GPIO_WritePin>
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40020400 	.word	0x40020400

08000c1c <nRF24_LL_RW>:


static inline uint8_t nRF24_LL_RW(uint8_t data) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af02      	add	r7, sp, #8
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
    // Wait until TX buffer is empty
    uint8_t result;
    if(HAL_SPI_TransmitReceive(&hspi2,&data,&result,1,2000)!=HAL_OK) {
 8000c26:	f107 020f 	add.w	r2, r7, #15
 8000c2a:	1df9      	adds	r1, r7, #7
 8000c2c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	2301      	movs	r3, #1
 8000c34:	4806      	ldr	r0, [pc, #24]	; (8000c50 <nRF24_LL_RW+0x34>)
 8000c36:	f002 fd54 	bl	80036e2 <HAL_SPI_TransmitReceive>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <nRF24_LL_RW+0x28>
        Error_Handler();
 8000c40:	f7ff ffce 	bl	8000be0 <Error_Handler>
    };
    return result;
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000110 	.word	0x20000110

08000c54 <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8000c5e:	f7ff ffc5 	bl	8000bec <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	f003 031f 	and.w	r3, r3, #31
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff ffd6 	bl	8000c1c <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8000c70:	20ff      	movs	r0, #255	; 0xff
 8000c72:	f7ff ffd3 	bl	8000c1c <nRF24_LL_RW>
 8000c76:	4603      	mov	r3, r0
 8000c78:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8000c7a:	f7ff ffc3 	bl	8000c04 <nRF24_CSN_H>

	return value;
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	460a      	mov	r2, r1
 8000c92:	71fb      	strb	r3, [r7, #7]
 8000c94:	4613      	mov	r3, r2
 8000c96:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000c98:	f7ff ffa8 	bl	8000bec <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER) {
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	2b1f      	cmp	r3, #31
 8000ca0:	d810      	bhi.n	8000cc4 <nRF24_WriteReg+0x3c>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	f003 031f 	and.w	r3, r3, #31
 8000caa:	b25b      	sxtb	r3, r3
 8000cac:	f043 0320 	orr.w	r3, r3, #32
 8000cb0:	b25b      	sxtb	r3, r3
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ffb1 	bl	8000c1c <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8000cba:	79bb      	ldrb	r3, [r7, #6]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff ffad 	bl	8000c1c <nRF24_LL_RW>
 8000cc2:	e013      	b.n	8000cec <nRF24_WriteReg+0x64>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff ffa8 	bl	8000c1c <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	2be1      	cmp	r3, #225	; 0xe1
 8000cd0:	d00c      	beq.n	8000cec <nRF24_WriteReg+0x64>
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2be2      	cmp	r3, #226	; 0xe2
 8000cd6:	d009      	beq.n	8000cec <nRF24_WriteReg+0x64>
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	2be3      	cmp	r3, #227	; 0xe3
 8000cdc:	d006      	beq.n	8000cec <nRF24_WriteReg+0x64>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	2bff      	cmp	r3, #255	; 0xff
 8000ce2:	d003      	beq.n	8000cec <nRF24_WriteReg+0x64>
			// Send register value
			nRF24_LL_RW(value);
 8000ce4:	79bb      	ldrb	r3, [r7, #6]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff98 	bl	8000c1c <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8000cec:	f7ff ff8a 	bl	8000c04 <nRF24_CSN_H>
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	71fb      	strb	r3, [r7, #7]
 8000d04:	4613      	mov	r3, r2
 8000d06:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000d08:	f7ff ff70 	bl	8000bec <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ff84 	bl	8000c1c <nRF24_LL_RW>
	while (count--) {
 8000d14:	e007      	b.n	8000d26 <nRF24_ReadMBReg+0x2e>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8000d16:	683c      	ldr	r4, [r7, #0]
 8000d18:	1c63      	adds	r3, r4, #1
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	20ff      	movs	r0, #255	; 0xff
 8000d1e:	f7ff ff7d 	bl	8000c1c <nRF24_LL_RW>
 8000d22:	4603      	mov	r3, r0
 8000d24:	7023      	strb	r3, [r4, #0]
	while (count--) {
 8000d26:	79bb      	ldrb	r3, [r7, #6]
 8000d28:	1e5a      	subs	r2, r3, #1
 8000d2a:	71ba      	strb	r2, [r7, #6]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1f2      	bne.n	8000d16 <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 8000d30:	f7ff ff68 	bl	8000c04 <nRF24_CSN_H>
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd90      	pop	{r4, r7, pc}

08000d3c <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000d4c:	f7ff ff4e 	bl	8000bec <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff ff62 	bl	8000c1c <nRF24_LL_RW>
	while (count--) {
 8000d58:	e006      	b.n	8000d68 <nRF24_WriteMBReg+0x2c>
		nRF24_LL_RW(*pBuf++);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	1c5a      	adds	r2, r3, #1
 8000d5e:	603a      	str	r2, [r7, #0]
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ff5a 	bl	8000c1c <nRF24_LL_RW>
	while (count--) {
 8000d68:	79bb      	ldrb	r3, [r7, #6]
 8000d6a:	1e5a      	subs	r2, r3, #1
 8000d6c:	71ba      	strb	r2, [r7, #6]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d1f3      	bne.n	8000d5a <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 8000d72:	f7ff ff47 	bl	8000c04 <nRF24_CSN_H>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 8000d82:	2108      	movs	r1, #8
 8000d84:	2000      	movs	r0, #0
 8000d86:	f7ff ff7f 	bl	8000c88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 8000d8a:	213f      	movs	r1, #63	; 0x3f
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	f7ff ff7b 	bl	8000c88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 8000d92:	2103      	movs	r1, #3
 8000d94:	2002      	movs	r0, #2
 8000d96:	f7ff ff77 	bl	8000c88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 8000d9a:	2103      	movs	r1, #3
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f7ff ff73 	bl	8000c88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 8000da2:	2103      	movs	r1, #3
 8000da4:	2004      	movs	r0, #4
 8000da6:	f7ff ff6f 	bl	8000c88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 8000daa:	2102      	movs	r1, #2
 8000dac:	2005      	movs	r0, #5
 8000dae:	f7ff ff6b 	bl	8000c88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 8000db2:	210e      	movs	r1, #14
 8000db4:	2006      	movs	r0, #6
 8000db6:	f7ff ff67 	bl	8000c88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 8000dba:	2100      	movs	r1, #0
 8000dbc:	2007      	movs	r0, #7
 8000dbe:	f7ff ff63 	bl	8000c88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	2011      	movs	r0, #17
 8000dc6:	f7ff ff5f 	bl	8000c88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2012      	movs	r0, #18
 8000dce:	f7ff ff5b 	bl	8000c88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2013      	movs	r0, #19
 8000dd6:	f7ff ff57 	bl	8000c88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 8000dda:	2100      	movs	r1, #0
 8000ddc:	2014      	movs	r0, #20
 8000dde:	f7ff ff53 	bl	8000c88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8000de2:	2100      	movs	r1, #0
 8000de4:	2015      	movs	r0, #21
 8000de6:	f7ff ff4f 	bl	8000c88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8000dea:	2100      	movs	r1, #0
 8000dec:	2016      	movs	r0, #22
 8000dee:	f7ff ff4b 	bl	8000c88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 8000df2:	2100      	movs	r1, #0
 8000df4:	201c      	movs	r0, #28
 8000df6:	f7ff ff47 	bl	8000c88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	201d      	movs	r0, #29
 8000dfe:	f7ff ff43 	bl	8000c88 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 8000e02:	f000 f9ea 	bl	80011da <nRF24_FlushRX>
	nRF24_FlushTX();
 8000e06:	f000 f9e0 	bl	80011ca <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 8000e0a:	f000 f9ee 	bl	80011ea <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 8000e0e:	f7ff fef9 	bl	8000c04 <nRF24_CSN_H>
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 8000e1e:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <nRF24_Check+0x58>)
 8000e20:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8000e22:	2205      	movs	r2, #5
 8000e24:	68b9      	ldr	r1, [r7, #8]
 8000e26:	2030      	movs	r0, #48	; 0x30
 8000e28:	f7ff ff88 	bl	8000d3c <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	2205      	movs	r2, #5
 8000e30:	4619      	mov	r1, r3
 8000e32:	2010      	movs	r0, #16
 8000e34:	f7ff ff60 	bl	8000cf8 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 8000e38:	2300      	movs	r3, #0
 8000e3a:	73fb      	strb	r3, [r7, #15]
 8000e3c:	e00f      	b.n	8000e5e <nRF24_Check+0x46>
		if (rxbuf[i] != *ptr++) return 0;
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	3310      	adds	r3, #16
 8000e42:	443b      	add	r3, r7
 8000e44:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	1c59      	adds	r1, r3, #1
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d001      	beq.n	8000e58 <nRF24_Check+0x40>
 8000e54:	2300      	movs	r3, #0
 8000e56:	e006      	b.n	8000e66 <nRF24_Check+0x4e>
	for (i = 0; i < 5; i++) {
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	73fb      	strb	r3, [r7, #15]
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	2b04      	cmp	r3, #4
 8000e62:	d9ec      	bls.n	8000e3e <nRF24_Check+0x26>
	}

	return 1;
 8000e64:	2301      	movs	r3, #1
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	080043c0 	.word	0x080043c0

08000e74 <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f7ff fee8 	bl	8000c54 <nRF24_ReadReg>
 8000e84:	4603      	mov	r3, r0
 8000e86:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d104      	bne.n	8000e98 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
 8000e90:	f043 0302 	orr.w	r3, r3, #2
 8000e94:	73fb      	strb	r3, [r7, #15]
 8000e96:	e003      	b.n	8000ea0 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
 8000e9a:	f023 0302 	bic.w	r3, r3, #2
 8000e9e:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	f7ff feef 	bl	8000c88 <nRF24_WriteReg>
}
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b084      	sub	sp, #16
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f7ff fec9 	bl	8000c54 <nRF24_ReadReg>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	f023 0301 	bic.w	r3, r3, #1
 8000ecc:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	b25a      	sxtb	r2, r3
 8000ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	b25b      	sxtb	r3, r3
 8000ee0:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f7ff fece 	bl	8000c88 <nRF24_WriteReg>
}
 8000eec:	bf00      	nop
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <nRF24_SetDynamicPayloadLength>:

// Set transceiver DynamicPayloadLength feature for all the pipes
// input:
//   mode - status, one of nRF24_DPL_xx values
void nRF24_SetDynamicPayloadLength(uint8_t mode) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg  = nRF24_ReadReg(nRF24_REG_FEATURE);
 8000efe:	201d      	movs	r0, #29
 8000f00:	f7ff fea8 	bl	8000c54 <nRF24_ReadReg>
 8000f04:	4603      	mov	r3, r0
 8000f06:	73fb      	strb	r3, [r7, #15]
	if(mode) {
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d00c      	beq.n	8000f28 <nRF24_SetDynamicPayloadLength+0x34>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg | nRF24_FEATURE_EN_DPL);
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	f043 0304 	orr.w	r3, r3, #4
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	4619      	mov	r1, r3
 8000f18:	201d      	movs	r0, #29
 8000f1a:	f7ff feb5 	bl	8000c88 <nRF24_WriteReg>
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x1F);
 8000f1e:	211f      	movs	r1, #31
 8000f20:	201c      	movs	r0, #28
 8000f22:	f7ff feb1 	bl	8000c88 <nRF24_WriteReg>
	} else {
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_DPL);
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x0);
	}
}
 8000f26:	e00b      	b.n	8000f40 <nRF24_SetDynamicPayloadLength+0x4c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_DPL);
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	f023 0304 	bic.w	r3, r3, #4
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	4619      	mov	r1, r3
 8000f32:	201d      	movs	r0, #29
 8000f34:	f7ff fea8 	bl	8000c88 <nRF24_WriteReg>
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x0);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	201c      	movs	r0, #28
 8000f3c:	f7ff fea4 	bl	8000c88 <nRF24_WriteReg>
}
 8000f40:	bf00      	nop
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <nRF24_SetPayloadWithAck>:

// Enables Payload With Ack. NB Refer to the datasheet for proper retransmit timing.
// input:
//   mode - status, 1 or 0
void nRF24_SetPayloadWithAck(uint8_t mode) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg  = nRF24_ReadReg(nRF24_REG_FEATURE);
 8000f52:	201d      	movs	r0, #29
 8000f54:	f7ff fe7e 	bl	8000c54 <nRF24_ReadReg>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	73fb      	strb	r3, [r7, #15]
	if(mode) {
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d008      	beq.n	8000f74 <nRF24_SetPayloadWithAck+0x2c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg | nRF24_FEATURE_EN_ACK_PAY);
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	f043 0302 	orr.w	r3, r3, #2
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	201d      	movs	r0, #29
 8000f6e:	f7ff fe8b 	bl	8000c88 <nRF24_WriteReg>
	} else {
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_ACK_PAY);
	}
}
 8000f72:	e007      	b.n	8000f84 <nRF24_SetPayloadWithAck+0x3c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_ACK_PAY);
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	f023 0302 	bic.w	r3, r3, #2
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	201d      	movs	r0, #29
 8000f80:	f7ff fe82 	bl	8000c88 <nRF24_WriteReg>
}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f7ff fe5c 	bl	8000c54 <nRF24_ReadReg>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	f023 030c 	bic.w	r3, r3, #12
 8000fa6:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	f003 030c 	and.w	r3, r3, #12
 8000fb0:	b25a      	sxtb	r2, r3
 8000fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	b25b      	sxtb	r3, r3
 8000fba:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f7ff fe61 	bl	8000c88 <nRF24_WriteReg>
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	2005      	movs	r0, #5
 8000fde:	f7ff fe53 	bl	8000c88 <nRF24_WriteReg>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	3b02      	subs	r3, #2
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	2003      	movs	r0, #3
 8000ffe:	f7ff fe43 	bl	8000c88 <nRF24_WriteReg>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	2b06      	cmp	r3, #6
 800101c:	d00a      	beq.n	8001034 <nRF24_SetAddr+0x28>
 800101e:	2b06      	cmp	r3, #6
 8001020:	dc36      	bgt.n	8001090 <nRF24_SetAddr+0x84>
 8001022:	2b01      	cmp	r3, #1
 8001024:	dc02      	bgt.n	800102c <nRF24_SetAddr+0x20>
 8001026:	2b00      	cmp	r3, #0
 8001028:	da04      	bge.n	8001034 <nRF24_SetAddr+0x28>
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
			break;
		default:
			// Incorrect pipe number -> do nothing
			break;
 800102a:	e031      	b.n	8001090 <nRF24_SetAddr+0x84>
 800102c:	3b02      	subs	r3, #2
	switch (pipe) {
 800102e:	2b03      	cmp	r3, #3
 8001030:	d82e      	bhi.n	8001090 <nRF24_SetAddr+0x84>
 8001032:	e023      	b.n	800107c <nRF24_SetAddr+0x70>
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8001034:	2003      	movs	r0, #3
 8001036:	f7ff fe0d 	bl	8000c54 <nRF24_ReadReg>
 800103a:	4603      	mov	r3, r0
 800103c:	3301      	adds	r3, #1
 800103e:	73fb      	strb	r3, [r7, #15]
			addr += addr_width;
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	4413      	add	r3, r2
 8001046:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 8001048:	f7ff fdd0 	bl	8000bec <nRF24_CSN_L>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	4a13      	ldr	r2, [pc, #76]	; (800109c <nRF24_SetAddr+0x90>)
 8001050:	5cd3      	ldrb	r3, [r2, r3]
 8001052:	f043 0320 	orr.w	r3, r3, #32
 8001056:	b2db      	uxtb	r3, r3
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fddf 	bl	8000c1c <nRF24_LL_RW>
				nRF24_LL_RW(*addr--);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	1e5a      	subs	r2, r3, #1
 8001062:	603a      	str	r2, [r7, #0]
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fdd8 	bl	8000c1c <nRF24_LL_RW>
			} while (addr_width--);
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	1e5a      	subs	r2, r3, #1
 8001070:	73fa      	strb	r2, [r7, #15]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1f3      	bne.n	800105e <nRF24_SetAddr+0x52>
			nRF24_CSN_H();
 8001076:	f7ff fdc5 	bl	8000c04 <nRF24_CSN_H>
			break;
 800107a:	e00a      	b.n	8001092 <nRF24_SetAddr+0x86>
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	4a07      	ldr	r2, [pc, #28]	; (800109c <nRF24_SetAddr+0x90>)
 8001080:	5cd2      	ldrb	r2, [r2, r3]
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	4619      	mov	r1, r3
 8001088:	4610      	mov	r0, r2
 800108a:	f7ff fdfd 	bl	8000c88 <nRF24_WriteReg>
			break;
 800108e:	e000      	b.n	8001092 <nRF24_SetAddr+0x86>
			break;
 8001090:	bf00      	nop
	}
}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	08004444 	.word	0x08004444

080010a0 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 80010aa:	2006      	movs	r0, #6
 80010ac:	f7ff fdd2 	bl	8000c54 <nRF24_ReadReg>
 80010b0:	4603      	mov	r3, r0
 80010b2:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	f023 0306 	bic.w	r3, r3, #6
 80010ba:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 80010bc:	7bfa      	ldrb	r2, [r7, #15]
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	4619      	mov	r1, r3
 80010c8:	2006      	movs	r0, #6
 80010ca:	f7ff fddd 	bl	8000c88 <nRF24_WriteReg>
}
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b084      	sub	sp, #16
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 80010e0:	2006      	movs	r0, #6
 80010e2:	f7ff fdb7 	bl	8000c54 <nRF24_ReadReg>
 80010e6:	4603      	mov	r3, r0
 80010e8:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80010f0:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 80010f2:	7bfa      	ldrb	r2, [r7, #15]
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	4619      	mov	r1, r3
 80010fe:	2006      	movs	r0, #6
 8001100:	f7ff fdc2 	bl	8000c88 <nRF24_WriteReg>
}
 8001104:	bf00      	nop
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
 8001116:	460b      	mov	r3, r1
 8001118:	71bb      	strb	r3, [r7, #6]
 800111a:	4613      	mov	r3, r2
 800111c:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 800111e:	2002      	movs	r0, #2
 8001120:	f7ff fd98 	bl	8000c54 <nRF24_ReadReg>
 8001124:	4603      	mov	r3, r0
 8001126:	b25a      	sxtb	r2, r3
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	2101      	movs	r1, #1
 800112c:	fa01 f303 	lsl.w	r3, r1, r3
 8001130:	b25b      	sxtb	r3, r3
 8001132:	4313      	orrs	r3, r2
 8001134:	b25b      	sxtb	r3, r3
 8001136:	b2db      	uxtb	r3, r3
 8001138:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800113c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	4619      	mov	r1, r3
 8001142:	2002      	movs	r0, #2
 8001144:	f7ff fda0 	bl	8000c88 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	4a19      	ldr	r2, [pc, #100]	; (80011b0 <nRF24_SetRXPipe+0xa4>)
 800114c:	5cd2      	ldrb	r2, [r2, r3]
 800114e:	797b      	ldrb	r3, [r7, #5]
 8001150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001154:	b2db      	uxtb	r3, r3
 8001156:	4619      	mov	r1, r3
 8001158:	4610      	mov	r0, r2
 800115a:	f7ff fd95 	bl	8000c88 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 800115e:	2001      	movs	r0, #1
 8001160:	f7ff fd78 	bl	8000c54 <nRF24_ReadReg>
 8001164:	4603      	mov	r3, r0
 8001166:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 8001168:	79bb      	ldrb	r3, [r7, #6]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d10a      	bne.n	8001184 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	2201      	movs	r2, #1
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	b25a      	sxtb	r2, r3
 8001178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117c:	4313      	orrs	r3, r2
 800117e:	b25b      	sxtb	r3, r3
 8001180:	73fb      	strb	r3, [r7, #15]
 8001182:	e00b      	b.n	800119c <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	2201      	movs	r2, #1
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	b25b      	sxtb	r3, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	b25a      	sxtb	r2, r3
 8001192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001196:	4013      	ands	r3, r2
 8001198:	b25b      	sxtb	r3, r3
 800119a:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	4619      	mov	r1, r3
 80011a0:	2001      	movs	r0, #1
 80011a2:	f7ff fd71 	bl	8000c88 <nRF24_WriteReg>
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	0800443c 	.word	0x0800443c

080011b4 <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 80011b8:	2017      	movs	r0, #23
 80011ba:	f7ff fd4b 	bl	8000c54 <nRF24_ReadReg>
 80011be:	4603      	mov	r3, r0
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	b2db      	uxtb	r3, r3
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	bd80      	pop	{r7, pc}

080011ca <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 80011ca:	b580      	push	{r7, lr}
 80011cc:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 80011ce:	21ff      	movs	r1, #255	; 0xff
 80011d0:	20e1      	movs	r0, #225	; 0xe1
 80011d2:	f7ff fd59 	bl	8000c88 <nRF24_WriteReg>
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}

080011da <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 80011da:	b580      	push	{r7, lr}
 80011dc:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 80011de:	21ff      	movs	r1, #255	; 0xff
 80011e0:	20e2      	movs	r0, #226	; 0xe2
 80011e2:	f7ff fd51 	bl	8000c88 <nRF24_WriteReg>
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}

080011ea <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 80011f0:	2007      	movs	r0, #7
 80011f2:	f7ff fd2f 	bl	8000c54 <nRF24_ReadReg>
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001200:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	4619      	mov	r1, r3
 8001206:	2007      	movs	r0, #7
 8001208:	f7ff fd3e 	bl	8000c88 <nRF24_WriteReg>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <nRF24_GetRxDplPayloadWidth>:
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
}

static uint8_t nRF24_GetRxDplPayloadWidth() {
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
	uint8_t value;

	nRF24_CSN_L();
 800121a:	f7ff fce7 	bl	8000bec <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 800121e:	2060      	movs	r0, #96	; 0x60
 8001220:	f7ff fcfc 	bl	8000c1c <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8001224:	20ff      	movs	r0, #255	; 0xff
 8001226:	f7ff fcf9 	bl	8000c1c <nRF24_LL_RW>
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	nRF24_CSN_H();
 800122e:	f7ff fce9 	bl	8000c04 <nRF24_CSN_H>

	return value;
 8001232:	79fb      	ldrb	r3, [r7, #7]

}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <nRF24_ReadPayloadGeneric>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	4613      	mov	r3, r2
 8001248:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 800124a:	2007      	movs	r0, #7
 800124c:	f7ff fd02 	bl	8000c54 <nRF24_ReadReg>
 8001250:	4603      	mov	r3, r0
 8001252:	105b      	asrs	r3, r3, #1
 8001254:	b2db      	uxtb	r3, r3
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6) {
 800125c:	7dfb      	ldrb	r3, [r7, #23]
 800125e:	2b05      	cmp	r3, #5
 8001260:	d829      	bhi.n	80012b6 <nRF24_ReadPayloadGeneric+0x7a>
		// Get payload length
		if(dpl) {
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d00f      	beq.n	8001288 <nRF24_ReadPayloadGeneric+0x4c>
			*length = nRF24_GetRxDplPayloadWidth();
 8001268:	f7ff ffd4 	bl	8001214 <nRF24_GetRxDplPayloadWidth>
 800126c:	4603      	mov	r3, r0
 800126e:	461a      	mov	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	701a      	strb	r2, [r3, #0]
			if(*length>32) { //broken packet
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b20      	cmp	r3, #32
 800127a:	d90f      	bls.n	800129c <nRF24_ReadPayloadGeneric+0x60>
				*length = 0;
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
				nRF24_FlushRX();
 8001282:	f7ff ffaa 	bl	80011da <nRF24_FlushRX>
 8001286:	e009      	b.n	800129c <nRF24_ReadPayloadGeneric+0x60>
			}
		} else {
			*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 8001288:	7dfb      	ldrb	r3, [r7, #23]
 800128a:	4a0f      	ldr	r2, [pc, #60]	; (80012c8 <nRF24_ReadPayloadGeneric+0x8c>)
 800128c:	5cd3      	ldrb	r3, [r2, r3]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fce0 	bl	8000c54 <nRF24_ReadReg>
 8001294:	4603      	mov	r3, r0
 8001296:	461a      	mov	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	701a      	strb	r2, [r3, #0]
		}

		// Read a payload from the RX FIFO
		if (*length) {
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d006      	beq.n	80012b2 <nRF24_ReadPayloadGeneric+0x76>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	68f9      	ldr	r1, [r7, #12]
 80012ac:	2061      	movs	r0, #97	; 0x61
 80012ae:	f7ff fd23 	bl	8000cf8 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 80012b2:	7dfb      	ldrb	r3, [r7, #23]
 80012b4:	e003      	b.n	80012be <nRF24_ReadPayloadGeneric+0x82>
	}

	// The RX FIFO is empty
	*length = 0;
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 80012bc:	23ff      	movs	r3, #255	; 0xff
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	0800443c 	.word	0x0800443c

080012cc <nRF24_ReadPayloadDpl>:
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
	return nRF24_ReadPayloadGeneric(pBuf, length,0);
}

nRF24_RXResult nRF24_ReadPayloadDpl(uint8_t *pBuf, uint8_t *length) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
	return nRF24_ReadPayloadGeneric(pBuf, length,1);
 80012d6:	2201      	movs	r2, #1
 80012d8:	6839      	ldr	r1, [r7, #0]
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ffae 	bl	800123c <nRF24_ReadPayloadGeneric>
 80012e0:	4603      	mov	r3, r0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <nRF24_WriteAckPayload>:
    nRF24_CSN_L();
    nRF24_LL_RW(nRF24_CMD_ACTIVATE);
    nRF24_LL_RW(0x73);
    nRF24_CSN_H();
}
void nRF24_WriteAckPayload(nRF24_RXResult pipe, char *payload, uint8_t length) {
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	6039      	str	r1, [r7, #0]
 80012f4:	71fb      	strb	r3, [r7, #7]
 80012f6:	4613      	mov	r3, r2
 80012f8:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80012fa:	f7ff fc77 	bl	8000bec <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_W_ACK_PAYLOAD | pipe);
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	f063 0357 	orn	r3, r3, #87	; 0x57
 8001304:	b2db      	uxtb	r3, r3
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fc88 	bl	8000c1c <nRF24_LL_RW>
	while (length--) {
 800130c:	e006      	b.n	800131c <nRF24_WriteAckPayload+0x32>
		nRF24_LL_RW((uint8_t) *payload++);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	1c5a      	adds	r2, r3, #1
 8001312:	603a      	str	r2, [r7, #0]
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fc80 	bl	8000c1c <nRF24_LL_RW>
	while (length--) {
 800131c:	79bb      	ldrb	r3, [r7, #6]
 800131e:	1e5a      	subs	r2, r3, #1
 8001320:	71ba      	strb	r2, [r7, #6]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f3      	bne.n	800130e <nRF24_WriteAckPayload+0x24>
	}
	nRF24_CSN_H();
 8001326:	f7ff fc6d 	bl	8000c04 <nRF24_CSN_H>

}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <nRF24_CE_L>:
static inline void nRF24_CE_L() {
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8001338:	2200      	movs	r2, #0
 800133a:	2101      	movs	r1, #1
 800133c:	4802      	ldr	r0, [pc, #8]	; (8001348 <nRF24_CE_L+0x14>)
 800133e:	f001 fcbb 	bl	8002cb8 <HAL_GPIO_WritePin>
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40021400 	.word	0x40021400

0800134c <nRF24_CE_H>:
static inline void nRF24_CE_H() {
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8001350:	2201      	movs	r2, #1
 8001352:	2101      	movs	r1, #1
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <nRF24_CE_H+0x14>)
 8001356:	f001 fcaf 	bl	8002cb8 <HAL_GPIO_WritePin>
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40021400 	.word	0x40021400

08001364 <Delay_ms>:


static inline void Delay_ms(uint32_t ms) { HAL_Delay(ms); }
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 fb6f 	bl	8001a50 <HAL_Delay>
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <UART_SendChar>:

#define HEX_CHARS      "0123456789ABCDEF"

extern UART_HandleTypeDef huart6;

void UART_SendChar(char b) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart6, (uint8_t *) &b, 1, 200);
 8001386:	1df9      	adds	r1, r7, #7
 8001388:	23c8      	movs	r3, #200	; 0xc8
 800138a:	2201      	movs	r2, #1
 800138c:	4803      	ldr	r0, [pc, #12]	; (800139c <UART_SendChar+0x20>)
 800138e:	f002 fc6a 	bl	8003c66 <HAL_UART_Transmit>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000168 	.word	0x20000168

080013a0 <UART_SendStr>:

void UART_SendStr(char *string) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t *) string, (uint16_t) strlen(string), 200);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7fe ff0d 	bl	80001c8 <strlen>
 80013ae:	4603      	mov	r3, r0
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	23c8      	movs	r3, #200	; 0xc8
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	4803      	ldr	r0, [pc, #12]	; (80013c4 <UART_SendStr+0x24>)
 80013b8:	f002 fc55 	bl	8003c66 <HAL_UART_Transmit>
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000168 	.word	0x20000168

080013c8 <Toggle_LED>:

void Toggle_LED() {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_R_GPIO_Port,LED_R_Pin);
 80013cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <Toggle_LED+0x14>)
 80013d2:	f001 fc8a 	bl	8002cea <HAL_GPIO_TogglePin>
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40021c00 	.word	0x40021c00

080013e0 <UART_SendBufHex>:

void UART_SendBufHex(char *buf, uint16_t bufsize) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	char ch;
	for (i = 0; i < bufsize; i++) {
 80013ec:	2300      	movs	r3, #0
 80013ee:	81fb      	strh	r3, [r7, #14]
 80013f0:	e018      	b.n	8001424 <UART_SendBufHex+0x44>
		ch = *buf++;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	1c5a      	adds	r2, r3, #1
 80013f6:	607a      	str	r2, [r7, #4]
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	737b      	strb	r3, [r7, #13]
		UART_SendChar(HEX_CHARS[(ch >> 4) % 0x10]);
 80013fc:	7b7b      	ldrb	r3, [r7, #13]
 80013fe:	091b      	lsrs	r3, r3, #4
 8001400:	b2db      	uxtb	r3, r3
 8001402:	461a      	mov	r2, r3
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <UART_SendBufHex+0x58>)
 8001406:	5c9b      	ldrb	r3, [r3, r2]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ffb7 	bl	800137c <UART_SendChar>
		UART_SendChar(HEX_CHARS[(ch & 0x0f) % 0x10]);
 800140e:	7b7b      	ldrb	r3, [r7, #13]
 8001410:	f003 030f 	and.w	r3, r3, #15
 8001414:	4a08      	ldr	r2, [pc, #32]	; (8001438 <UART_SendBufHex+0x58>)
 8001416:	5cd3      	ldrb	r3, [r2, r3]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ffaf 	bl	800137c <UART_SendChar>
	for (i = 0; i < bufsize; i++) {
 800141e:	89fb      	ldrh	r3, [r7, #14]
 8001420:	3301      	adds	r3, #1
 8001422:	81fb      	strh	r3, [r7, #14]
 8001424:	89fa      	ldrh	r2, [r7, #14]
 8001426:	887b      	ldrh	r3, [r7, #2]
 8001428:	429a      	cmp	r2, r3
 800142a:	d3e2      	bcc.n	80013f2 <UART_SendBufHex+0x12>
	}
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	080043c8 	.word	0x080043c8

0800143c <UART_SendInt>:
void UART_SendHex8(uint16_t num) {
	UART_SendChar(HEX_CHARS[(num >> 4) % 0x10]);
	UART_SendChar(HEX_CHARS[(num & 0x0f) % 0x10]);
}

void UART_SendInt(int32_t num) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	char str[10]; // 10 chars max for INT32_MAX
	int i = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
	if (num < 0) {
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	da05      	bge.n	800145a <UART_SendInt+0x1e>
		UART_SendChar('-');
 800144e:	202d      	movs	r0, #45	; 0x2d
 8001450:	f7ff ff94 	bl	800137c <UART_SendChar>
		num *= -1;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	425b      	negs	r3, r3
 8001458:	607b      	str	r3, [r7, #4]
	}
	do str[i++] = (char) (num % 10 + '0'); while ((num /= 10) > 0);
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <UART_SendInt+0x90>)
 800145e:	fb83 1302 	smull	r1, r3, r3, r2
 8001462:	1099      	asrs	r1, r3, #2
 8001464:	17d3      	asrs	r3, r2, #31
 8001466:	1ac9      	subs	r1, r1, r3
 8001468:	460b      	mov	r3, r1
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	1ad1      	subs	r1, r2, r3
 8001472:	b2ca      	uxtb	r2, r1
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	1c59      	adds	r1, r3, #1
 8001478:	6179      	str	r1, [r7, #20]
 800147a:	3230      	adds	r2, #48	; 0x30
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	3318      	adds	r3, #24
 8001480:	443b      	add	r3, r7
 8001482:	f803 2c10 	strb.w	r2, [r3, #-16]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a10      	ldr	r2, [pc, #64]	; (80014cc <UART_SendInt+0x90>)
 800148a:	fb82 1203 	smull	r1, r2, r2, r3
 800148e:	1092      	asrs	r2, r2, #2
 8001490:	17db      	asrs	r3, r3, #31
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	dcde      	bgt.n	800145a <UART_SendInt+0x1e>
	for (i--; i >= 0; i--) UART_SendChar(str[i]);
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	3b01      	subs	r3, #1
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	e00a      	b.n	80014ba <UART_SendInt+0x7e>
 80014a4:	f107 0208 	add.w	r2, r7, #8
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	4413      	add	r3, r2
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff64 	bl	800137c <UART_SendChar>
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	daf1      	bge.n	80014a4 <UART_SendInt+0x68>
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	66666667 	.word	0x66666667

080014d0 <runRadio>:
uint8_t payload_length;

#define CUSTOM_ESB_RX		1


int runRadio(void) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
	UART_SendStr("\r\nRX is online.\r\n");
 80014d6:	484f      	ldr	r0, [pc, #316]	; (8001614 <runRadio+0x144>)
 80014d8:	f7ff ff62 	bl	80013a0 <UART_SendStr>

	// RX/TX disabled
	nRF24_CE_L();
 80014dc:	f7ff ff2a 	bl	8001334 <nRF24_CE_L>

	// Configure the nRF24L01+
	UART_SendStr("nRF24L01+ check: ");
 80014e0:	484d      	ldr	r0, [pc, #308]	; (8001618 <runRadio+0x148>)
 80014e2:	f7ff ff5d 	bl	80013a0 <UART_SendStr>

	if (!nRF24_Check()) {
 80014e6:	f7ff fc97 	bl	8000e18 <nRF24_Check>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d108      	bne.n	8001502 <runRadio+0x32>
		UART_SendStr("FAIL\r\n");
 80014f0:	484a      	ldr	r0, [pc, #296]	; (800161c <runRadio+0x14c>)
 80014f2:	f7ff ff55 	bl	80013a0 <UART_SendStr>
		while (1) {
			Toggle_LED();
 80014f6:	f7ff ff67 	bl	80013c8 <Toggle_LED>
			Delay_ms(50);
 80014fa:	2032      	movs	r0, #50	; 0x32
 80014fc:	f7ff ff32 	bl	8001364 <Delay_ms>
			Toggle_LED();
 8001500:	e7f9      	b.n	80014f6 <runRadio+0x26>
		}
	}

	UART_SendStr("OK\r\n");
 8001502:	4847      	ldr	r0, [pc, #284]	; (8001620 <runRadio+0x150>)
 8001504:	f7ff ff4c 	bl	80013a0 <UART_SendStr>

	// Initialize the nRF24L01 to its default state
	nRF24_Init();
 8001508:	f7ff fc39 	bl	8000d7e <nRF24_Init>
	//   - CRC scheme: 2 byte

	// The transmitter sends a 10-byte packets to the address 'ESB' with Auto-ACK (ShockBurst enabled)

	// Set RF channel
	nRF24_SetRFChannel(40);
 800150c:	2028      	movs	r0, #40	; 0x28
 800150e:	f7ff fd5e 	bl	8000fce <nRF24_SetRFChannel>

	// Set data rate
	nRF24_SetDataRate(nRF24_DR_2Mbps);
 8001512:	2008      	movs	r0, #8
 8001514:	f7ff fddf 	bl	80010d6 <nRF24_SetDataRate>

	// Set CRC scheme
	nRF24_SetCRCScheme(nRF24_CRC_2byte);
 8001518:	200c      	movs	r0, #12
 800151a:	f7ff fd37 	bl	8000f8c <nRF24_SetCRCScheme>

	// Set address width, its common for all pipes (RX and TX)
	nRF24_SetAddrWidth(3);
 800151e:	2003      	movs	r0, #3
 8001520:	f7ff fd63 	bl	8000fea <nRF24_SetAddrWidth>

	// Configure RX PIPE
	static const uint8_t nRF24_ADDR[] = {'E', 'S', 'B'};
	nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR); // program address for pipe
 8001524:	493f      	ldr	r1, [pc, #252]	; (8001624 <runRadio+0x154>)
 8001526:	2001      	movs	r0, #1
 8001528:	f7ff fd70 	bl	800100c <nRF24_SetAddr>
	nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_ON, 10); // Auto-ACK: enabled, payload length: 10 bytes
 800152c:	220a      	movs	r2, #10
 800152e:	2101      	movs	r1, #1
 8001530:	2001      	movs	r0, #1
 8001532:	f7ff fdeb 	bl	800110c <nRF24_SetRXPipe>

	// Set TX power for Auto-ACK (maximum, to ensure that transmitter will hear ACK reply)
	nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 8001536:	2006      	movs	r0, #6
 8001538:	f7ff fdb2 	bl	80010a0 <nRF24_SetTXPower>

	// Set operational mode (PRX == receiver)
	nRF24_SetOperationalMode(nRF24_MODE_RX);
 800153c:	2001      	movs	r0, #1
 800153e:	f7ff fcb8 	bl	8000eb2 <nRF24_SetOperationalMode>

	// Clear any pending IRQ flags
	nRF24_ClearIRQFlags();
 8001542:	f7ff fe52 	bl	80011ea <nRF24_ClearIRQFlags>

	// Wake the transceiver
	nRF24_SetPowerMode(nRF24_PWR_UP);
 8001546:	2002      	movs	r0, #2
 8001548:	f7ff fc94 	bl	8000e74 <nRF24_SetPowerMode>

	// Enable DPL
	nRF24_SetDynamicPayloadLength(nRF24_DPL_ON);
 800154c:	2001      	movs	r0, #1
 800154e:	f7ff fcd1 	bl	8000ef4 <nRF24_SetDynamicPayloadLength>

	nRF24_SetPayloadWithAck(1);
 8001552:	2001      	movs	r0, #1
 8001554:	f7ff fcf8 	bl	8000f48 <nRF24_SetPayloadWithAck>


	// Put the transceiver to the RX mode
	nRF24_CE_H();
 8001558:	f7ff fef8 	bl	800134c <nRF24_CE_H>
		// More smart way is to use the IRQ pin :)
		//

		uint8_t payload;

		if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) {
 800155c:	f7ff fe2a 	bl	80011b4 <nRF24_GetStatus_RXFIFO>
 8001560:	4603      	mov	r3, r0
 8001562:	2b01      	cmp	r3, #1
 8001564:	d0fa      	beq.n	800155c <runRadio+0x8c>
			// Get a payload from the transceiver
			pipe = nRF24_ReadPayloadDpl(&payload, &payload_length);
 8001566:	1dfb      	adds	r3, r7, #7
 8001568:	492f      	ldr	r1, [pc, #188]	; (8001628 <runRadio+0x158>)
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff feae 	bl	80012cc <nRF24_ReadPayloadDpl>
 8001570:	4603      	mov	r3, r0
 8001572:	461a      	mov	r2, r3
 8001574:	4b2d      	ldr	r3, [pc, #180]	; (800162c <runRadio+0x15c>)
 8001576:	701a      	strb	r2, [r3, #0]
			if(payload_length > 0) {
 8001578:	4b2b      	ldr	r3, [pc, #172]	; (8001628 <runRadio+0x158>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d008      	beq.n	8001592 <runRadio+0xc2>
				Toggle_LED();
 8001580:	f7ff ff22 	bl	80013c8 <Toggle_LED>
				nRF24_WriteAckPayload(pipe, "aCk PaYlOaD",11);
 8001584:	4b29      	ldr	r3, [pc, #164]	; (800162c <runRadio+0x15c>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	220b      	movs	r2, #11
 800158a:	4929      	ldr	r1, [pc, #164]	; (8001630 <runRadio+0x160>)
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff feac 	bl	80012ea <nRF24_WriteAckPayload>
			}

			// Clear all pending IRQ flags
			nRF24_ClearIRQFlags();
 8001592:	f7ff fe2a 	bl	80011ea <nRF24_ClearIRQFlags>

			switch (payload){
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	3b30      	subs	r3, #48	; 0x30
 800159a:	2b03      	cmp	r3, #3
 800159c:	d824      	bhi.n	80015e8 <runRadio+0x118>
 800159e:	a201      	add	r2, pc, #4	; (adr r2, 80015a4 <runRadio+0xd4>)
 80015a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a4:	080015b5 	.word	0x080015b5
 80015a8:	080015cf 	.word	0x080015cf
 80015ac:	080015e9 	.word	0x080015e9
 80015b0:	080015e9 	.word	0x080015e9

			case (0x30):
					CAN_cmd_chassis(0, 0, 0, 0);
 80015b4:	2300      	movs	r3, #0
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	2000      	movs	r0, #0
 80015bc:	f7ff f816 	bl	80005ec <CAN_cmd_chassis>
					HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, RESET);
 80015c0:	2200      	movs	r2, #0
 80015c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015c6:	481b      	ldr	r0, [pc, #108]	; (8001634 <runRadio+0x164>)
 80015c8:	f001 fb76 	bl	8002cb8 <HAL_GPIO_WritePin>
					break;
 80015cc:	e00c      	b.n	80015e8 <runRadio+0x118>
			case (0x31):
					CAN_cmd_chassis(100, 100, 100, 100);
 80015ce:	2364      	movs	r3, #100	; 0x64
 80015d0:	2264      	movs	r2, #100	; 0x64
 80015d2:	2164      	movs	r1, #100	; 0x64
 80015d4:	2064      	movs	r0, #100	; 0x64
 80015d6:	f7ff f809 	bl	80005ec <CAN_cmd_chassis>
					HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, SET);
 80015da:	2201      	movs	r2, #1
 80015dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015e0:	4814      	ldr	r0, [pc, #80]	; (8001634 <runRadio+0x164>)
 80015e2:	f001 fb69 	bl	8002cb8 <HAL_GPIO_WritePin>
					break;
 80015e6:	bf00      	nop

			}


			// Print a payload contents to UART
			UART_SendStr("RCV PIPE#");
 80015e8:	4813      	ldr	r0, [pc, #76]	; (8001638 <runRadio+0x168>)
 80015ea:	f7ff fed9 	bl	80013a0 <UART_SendStr>
			UART_SendInt(pipe);
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <runRadio+0x15c>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff ff22 	bl	800143c <UART_SendInt>
			UART_SendStr(" PAYLOAD:>");
 80015f8:	4810      	ldr	r0, [pc, #64]	; (800163c <runRadio+0x16c>)
 80015fa:	f7ff fed1 	bl	80013a0 <UART_SendStr>
			UART_SendBufHex((char *) nRF24_payload, payload_length);
 80015fe:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <runRadio+0x158>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	b29b      	uxth	r3, r3
 8001604:	4619      	mov	r1, r3
 8001606:	480e      	ldr	r0, [pc, #56]	; (8001640 <runRadio+0x170>)
 8001608:	f7ff feea 	bl	80013e0 <UART_SendBufHex>
			UART_SendStr("<\r\n");
 800160c:	480d      	ldr	r0, [pc, #52]	; (8001644 <runRadio+0x174>)
 800160e:	f7ff fec7 	bl	80013a0 <UART_SendStr>
	while (1) {
 8001612:	e7a3      	b.n	800155c <runRadio+0x8c>
 8001614:	080043dc 	.word	0x080043dc
 8001618:	080043f0 	.word	0x080043f0
 800161c:	08004404 	.word	0x08004404
 8001620:	0800440c 	.word	0x0800440c
 8001624:	0800444c 	.word	0x0800444c
 8001628:	2000010d 	.word	0x2000010d
 800162c:	2000010c 	.word	0x2000010c
 8001630:	08004414 	.word	0x08004414
 8001634:	40021c00 	.word	0x40021c00
 8001638:	08004420 	.word	0x08004420
 800163c:	0800442c 	.word	0x0800442c
 8001640:	200000ec 	.word	0x200000ec
 8001644:	08004438 	.word	0x08004438

08001648 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <MX_SPI2_Init+0x64>)
 800164e:	4a18      	ldr	r2, [pc, #96]	; (80016b0 <MX_SPI2_Init+0x68>)
 8001650:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <MX_SPI2_Init+0x64>)
 8001654:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001658:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800165a:	4b14      	ldr	r3, [pc, #80]	; (80016ac <MX_SPI2_Init+0x64>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <MX_SPI2_Init+0x64>)
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <MX_SPI2_Init+0x64>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800166c:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <MX_SPI2_Init+0x64>)
 800166e:	2200      	movs	r2, #0
 8001670:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MX_SPI2_Init+0x64>)
 8001674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001678:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800167a:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <MX_SPI2_Init+0x64>)
 800167c:	2220      	movs	r2, #32
 800167e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001680:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <MX_SPI2_Init+0x64>)
 8001682:	2200      	movs	r2, #0
 8001684:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <MX_SPI2_Init+0x64>)
 8001688:	2200      	movs	r2, #0
 800168a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800168c:	4b07      	ldr	r3, [pc, #28]	; (80016ac <MX_SPI2_Init+0x64>)
 800168e:	2200      	movs	r2, #0
 8001690:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_SPI2_Init+0x64>)
 8001694:	220a      	movs	r2, #10
 8001696:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001698:	4804      	ldr	r0, [pc, #16]	; (80016ac <MX_SPI2_Init+0x64>)
 800169a:	f001 ff99 	bl	80035d0 <HAL_SPI_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80016a4:	f7ff fa9c 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000110 	.word	0x20000110
 80016b0:	40003800 	.word	0x40003800

080016b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a19      	ldr	r2, [pc, #100]	; (8001738 <HAL_SPI_MspInit+0x84>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d12c      	bne.n	8001730 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	4b18      	ldr	r3, [pc, #96]	; (800173c <HAL_SPI_MspInit+0x88>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	4a17      	ldr	r2, [pc, #92]	; (800173c <HAL_SPI_MspInit+0x88>)
 80016e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e4:	6413      	str	r3, [r2, #64]	; 0x40
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <HAL_SPI_MspInit+0x88>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	4b11      	ldr	r3, [pc, #68]	; (800173c <HAL_SPI_MspInit+0x88>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a10      	ldr	r2, [pc, #64]	; (800173c <HAL_SPI_MspInit+0x88>)
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b0e      	ldr	r3, [pc, #56]	; (800173c <HAL_SPI_MspInit+0x88>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800170e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001714:	2302      	movs	r3, #2
 8001716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001720:	2305      	movs	r3, #5
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4619      	mov	r1, r3
 800172a:	4805      	ldr	r0, [pc, #20]	; (8001740 <HAL_SPI_MspInit+0x8c>)
 800172c:	f001 f928 	bl	8002980 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001730:	bf00      	nop
 8001732:	3728      	adds	r7, #40	; 0x28
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40003800 	.word	0x40003800
 800173c:	40023800 	.word	0x40023800
 8001740:	40020400 	.word	0x40020400

08001744 <HAL_MspInit>:
=======
 80015b8:	e7fe      	b.n	80015b8 <Error_Handler+0x8>
	...

080015bc <HAL_MspInit>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
=======
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <HAL_MspInit+0x4c>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	4a0f      	ldr	r2, [pc, #60]	; (8001790 <HAL_MspInit+0x4c>)
 8001754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001758:	6453      	str	r3, [r2, #68]	; 0x44
 800175a:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <HAL_MspInit+0x4c>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	603b      	str	r3, [r7, #0]
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_MspInit+0x4c>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	4a08      	ldr	r2, [pc, #32]	; (8001790 <HAL_MspInit+0x4c>)
 8001770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001774:	6413      	str	r3, [r2, #64]	; 0x40
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_MspInit+0x4c>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	683b      	ldr	r3, [r7, #0]
=======
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <HAL_MspInit+0x4c>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	4a0f      	ldr	r2, [pc, #60]	; (8001608 <HAL_MspInit+0x4c>)
 80015cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d0:	6453      	str	r3, [r2, #68]	; 0x44
 80015d2:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <HAL_MspInit+0x4c>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	603b      	str	r3, [r7, #0]
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <HAL_MspInit+0x4c>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	4a08      	ldr	r2, [pc, #32]	; (8001608 <HAL_MspInit+0x4c>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ec:	6413      	str	r3, [r2, #64]	; 0x40
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_MspInit+0x4c>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800

08001794 <NMI_Handler>:
=======
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800

0800160c <NMI_Handler>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
=======
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 8001798:	e7fe      	b.n	8001798 <NMI_Handler+0x4>

0800179a <HardFault_Handler>:
=======
 8001610:	e7fe      	b.n	8001610 <NMI_Handler+0x4>

08001612 <HardFault_Handler>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
=======
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 800179e:	e7fe      	b.n	800179e <HardFault_Handler+0x4>

080017a0 <MemManage_Handler>:
=======
 8001616:	e7fe      	b.n	8001616 <HardFault_Handler+0x4>

08001618 <MemManage_Handler>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
=======
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80017a4:	e7fe      	b.n	80017a4 <MemManage_Handler+0x4>

080017a6 <BusFault_Handler>:
=======
 800161c:	e7fe      	b.n	800161c <MemManage_Handler+0x4>

0800161e <BusFault_Handler>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
=======
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80017aa:	e7fe      	b.n	80017aa <BusFault_Handler+0x4>

080017ac <UsageFault_Handler>:
=======
 8001622:	e7fe      	b.n	8001622 <BusFault_Handler+0x4>

08001624 <UsageFault_Handler>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
=======
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80017b0:	e7fe      	b.n	80017b0 <UsageFault_Handler+0x4>

080017b2 <SVC_Handler>:
=======
 8001628:	e7fe      	b.n	8001628 <UsageFault_Handler+0x4>

0800162a <SVC_Handler>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0
=======
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <DebugMon_Handler>:
=======
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <DebugMon_Handler>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
=======
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <PendSV_Handler>:
=======
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <PendSV_Handler>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
=======
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <SysTick_Handler>:
=======
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <SysTick_Handler>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
=======
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 80017e0:	f000 f916 	bl	8001a10 <HAL_IncTick>
=======
 8001658:	f000 f936 	bl	80018c8 <HAL_IncTick>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <CAN1_RX0_IRQHandler>:
=======
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}

08001660 <CAN1_RX0_IRQHandler>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
<<<<<<< HEAD
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
=======
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
<<<<<<< HEAD
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <CAN1_RX0_IRQHandler+0x10>)
 80017ee:	f000 fd86 	bl	80022fe <HAL_CAN_IRQHandler>
=======
 8001664:	4802      	ldr	r0, [pc, #8]	; (8001670 <CAN1_RX0_IRQHandler+0x10>)
 8001666:	f000 fd82 	bl	800216e <HAL_CAN_IRQHandler>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
<<<<<<< HEAD
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000098 	.word	0x20000098

080017fc <CAN2_RX0_IRQHandler>:
=======
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000098 	.word	0x20000098

08001674 <CAN2_RX0_IRQHandler>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
<<<<<<< HEAD
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
=======
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
<<<<<<< HEAD
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <CAN2_RX0_IRQHandler+0x10>)
 8001802:	f000 fd7c 	bl	80022fe <HAL_CAN_IRQHandler>
=======
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <CAN2_RX0_IRQHandler+0x10>)
 800167a:	f000 fd78 	bl	800216e <HAL_CAN_IRQHandler>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
<<<<<<< HEAD
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200000c0 	.word	0x200000c0

08001810 <SystemInit>:
=======
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200000c0 	.word	0x200000c0

08001688 <SystemInit>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <SystemInit+0x20>)
 8001816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800181a:	4a05      	ldr	r2, [pc, #20]	; (8001830 <SystemInit+0x20>)
 800181c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <SystemInit+0x20>)
 800168e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001692:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <SystemInit+0x20>)
 8001694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <MX_USART6_UART_Init>:
=======
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <MX_USART6_UART_Init>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
<<<<<<< HEAD
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
=======
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
<<<<<<< HEAD
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <MX_USART6_UART_Init+0x4c>)
 800183a:	4a12      	ldr	r2, [pc, #72]	; (8001884 <MX_USART6_UART_Init+0x50>)
 800183c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <MX_USART6_UART_Init+0x4c>)
 8001840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001844:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001846:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <MX_USART6_UART_Init+0x4c>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <MX_USART6_UART_Init+0x4c>)
 800184e:	2200      	movs	r2, #0
 8001850:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <MX_USART6_UART_Init+0x4c>)
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX;
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <MX_USART6_UART_Init+0x4c>)
 800185a:	2208      	movs	r2, #8
 800185c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800185e:	4b08      	ldr	r3, [pc, #32]	; (8001880 <MX_USART6_UART_Init+0x4c>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <MX_USART6_UART_Init+0x4c>)
 8001866:	2200      	movs	r2, #0
 8001868:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 800186a:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_USART6_UART_Init+0x4c>)
 800186c:	f002 f9a6 	bl	8003bbc <HAL_HalfDuplex_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001876:	f7ff f9b3 	bl	8000be0 <Error_Handler>
=======
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <MX_USART6_UART_Init+0x4c>)
 80016b2:	4a12      	ldr	r2, [pc, #72]	; (80016fc <MX_USART6_UART_Init+0x50>)
 80016b4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80016b6:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <MX_USART6_UART_Init+0x4c>)
 80016b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016bc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <MX_USART6_UART_Init+0x4c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <MX_USART6_UART_Init+0x4c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80016ca:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <MX_USART6_UART_Init+0x4c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80016d0:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <MX_USART6_UART_Init+0x4c>)
 80016d2:	220c      	movs	r2, #12
 80016d4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016d6:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <MX_USART6_UART_Init+0x4c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <MX_USART6_UART_Init+0x4c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80016e2:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_USART6_UART_Init+0x4c>)
 80016e4:	f001 fe92 	bl	800340c <HAL_UART_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80016ee:	f7ff ff5f 	bl	80015b0 <Error_Handler>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
<<<<<<< HEAD
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000168 	.word	0x20000168
 8001884:	40011400 	.word	0x40011400

08001888 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	; 0x28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a19      	ldr	r2, [pc, #100]	; (800190c <HAL_UART_MspInit+0x84>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d12b      	bne.n	8001902 <HAL_UART_MspInit+0x7a>
=======
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200000ec 	.word	0x200000ec
 80016fc:	40011400 	.word	0x40011400

08001700 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08a      	sub	sp, #40	; 0x28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a28      	ldr	r2, [pc, #160]	; (80017c0 <HAL_UART_MspInit+0xc0>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d14a      	bne.n	80017b8 <HAL_UART_MspInit+0xb8>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
<<<<<<< HEAD
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	4b18      	ldr	r3, [pc, #96]	; (8001910 <HAL_UART_MspInit+0x88>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	4a17      	ldr	r2, [pc, #92]	; (8001910 <HAL_UART_MspInit+0x88>)
 80018b4:	f043 0320 	orr.w	r3, r3, #32
 80018b8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <HAL_UART_MspInit+0x88>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	f003 0320 	and.w	r3, r3, #32
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <HAL_UART_MspInit+0x88>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a10      	ldr	r2, [pc, #64]	; (8001910 <HAL_UART_MspInit+0x88>)
 80018d0:	f043 0304 	orr.w	r3, r3, #4
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <HAL_UART_MspInit+0x88>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
=======
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b27      	ldr	r3, [pc, #156]	; (80017c4 <HAL_UART_MspInit+0xc4>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	4a26      	ldr	r2, [pc, #152]	; (80017c4 <HAL_UART_MspInit+0xc4>)
 800172c:	f043 0320 	orr.w	r3, r3, #32
 8001730:	6453      	str	r3, [r2, #68]	; 0x44
 8001732:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <HAL_UART_MspInit+0xc4>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	f003 0320 	and.w	r3, r3, #32
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <HAL_UART_MspInit+0xc4>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a1f      	ldr	r2, [pc, #124]	; (80017c4 <HAL_UART_MspInit+0xc4>)
 8001748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <HAL_UART_MspInit+0xc4>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <HAL_UART_MspInit+0xc4>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a18      	ldr	r2, [pc, #96]	; (80017c4 <HAL_UART_MspInit+0xc4>)
 8001764:	f043 0304 	orr.w	r3, r3, #4
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <HAL_UART_MspInit+0xc4>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    */
<<<<<<< HEAD
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018e2:	2340      	movs	r3, #64	; 0x40
 80018e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018e6:	2312      	movs	r3, #18
 80018e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ee:	2303      	movs	r3, #3
 80018f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80018f2:	2308      	movs	r3, #8
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	4805      	ldr	r0, [pc, #20]	; (8001914 <HAL_UART_MspInit+0x8c>)
 80018fe:	f001 f83f 	bl	8002980 <HAL_GPIO_Init>
=======
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001776:	f44f 7300 	mov.w	r3, #512	; 0x200
 800177a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001784:	2303      	movs	r3, #3
 8001786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001788:	2308      	movs	r3, #8
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	4619      	mov	r1, r3
 8001792:	480d      	ldr	r0, [pc, #52]	; (80017c8 <HAL_UART_MspInit+0xc8>)
 8001794:	f001 f82c 	bl	80027f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001798:	2340      	movs	r3, #64	; 0x40
 800179a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a4:	2303      	movs	r3, #3
 80017a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80017a8:	2308      	movs	r3, #8
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	4619      	mov	r1, r3
 80017b2:	4806      	ldr	r0, [pc, #24]	; (80017cc <HAL_UART_MspInit+0xcc>)
 80017b4:	f001 f81c 	bl	80027f0 <HAL_GPIO_Init>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
<<<<<<< HEAD
 8001902:	bf00      	nop
 8001904:	3728      	adds	r7, #40	; 0x28
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40011400 	.word	0x40011400
 8001910:	40023800 	.word	0x40023800
 8001914:	40020800 	.word	0x40020800

08001918 <Reset_Handler>:
 8001918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001950 <LoopFillZerobss+0x12>
 800191c:	480d      	ldr	r0, [pc, #52]	; (8001954 <LoopFillZerobss+0x16>)
 800191e:	490e      	ldr	r1, [pc, #56]	; (8001958 <LoopFillZerobss+0x1a>)
 8001920:	4a0e      	ldr	r2, [pc, #56]	; (800195c <LoopFillZerobss+0x1e>)
 8001922:	2300      	movs	r3, #0
 8001924:	e002      	b.n	800192c <LoopCopyDataInit>

08001926 <CopyDataInit>:
 8001926:	58d4      	ldr	r4, [r2, r3]
 8001928:	50c4      	str	r4, [r0, r3]
 800192a:	3304      	adds	r3, #4

0800192c <LoopCopyDataInit>:
 800192c:	18c4      	adds	r4, r0, r3
 800192e:	428c      	cmp	r4, r1
 8001930:	d3f9      	bcc.n	8001926 <CopyDataInit>
 8001932:	4a0b      	ldr	r2, [pc, #44]	; (8001960 <LoopFillZerobss+0x22>)
 8001934:	4c0b      	ldr	r4, [pc, #44]	; (8001964 <LoopFillZerobss+0x26>)
 8001936:	2300      	movs	r3, #0
 8001938:	e001      	b.n	800193e <LoopFillZerobss>

0800193a <FillZerobss>:
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	3204      	adds	r2, #4

0800193e <LoopFillZerobss>:
 800193e:	42a2      	cmp	r2, r4
 8001940:	d3fb      	bcc.n	800193a <FillZerobss>
 8001942:	f7ff ff65 	bl	8001810 <SystemInit>
 8001946:	f002 fd0b 	bl	8004360 <__libc_init_array>
 800194a:	f7ff f8b5 	bl	8000ab8 <main>
 800194e:	4770      	bx	lr
 8001950:	20020000 	.word	0x20020000
 8001954:	20000000 	.word	0x20000000
 8001958:	2000000c 	.word	0x2000000c
 800195c:	08004478 	.word	0x08004478
 8001960:	2000000c 	.word	0x2000000c
 8001964:	200001b0 	.word	0x200001b0

08001968 <ADC_IRQHandler>:
 8001968:	e7fe      	b.n	8001968 <ADC_IRQHandler>
	...

0800196c <HAL_Init>:
=======
 80017b8:	bf00      	nop
 80017ba:	3728      	adds	r7, #40	; 0x28
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40011400 	.word	0x40011400
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40021800 	.word	0x40021800
 80017cc:	40020800 	.word	0x40020800

080017d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001808 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017d4:	480d      	ldr	r0, [pc, #52]	; (800180c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017d6:	490e      	ldr	r1, [pc, #56]	; (8001810 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017d8:	4a0e      	ldr	r2, [pc, #56]	; (8001814 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017dc:	e002      	b.n	80017e4 <LoopCopyDataInit>

080017de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e2:	3304      	adds	r3, #4

080017e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e8:	d3f9      	bcc.n	80017de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ea:	4a0b      	ldr	r2, [pc, #44]	; (8001818 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017ec:	4c0b      	ldr	r4, [pc, #44]	; (800181c <LoopFillZerobss+0x26>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f0:	e001      	b.n	80017f6 <LoopFillZerobss>

080017f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f4:	3204      	adds	r2, #4

080017f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f8:	d3fb      	bcc.n	80017f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017fa:	f7ff ff45 	bl	8001688 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017fe:	f002 f9cf 	bl	8003ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001802:	f7ff fd35 	bl	8001270 <main>
  bx  lr    
 8001806:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001808:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800180c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001810:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001814:	08003c28 	.word	0x08003c28
  ldr r2, =_sbss
 8001818:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800181c:	20000134 	.word	0x20000134

08001820 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001820:	e7fe      	b.n	8001820 <ADC_IRQHandler>
	...

08001824 <HAL_Init>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001970:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <HAL_Init+0x40>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a0d      	ldr	r2, [pc, #52]	; (80019ac <HAL_Init+0x40>)
 8001976:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800197a:	6013      	str	r3, [r2, #0]
=======
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001828:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <HAL_Init+0x40>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a0d      	ldr	r2, [pc, #52]	; (8001864 <HAL_Init+0x40>)
 800182e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001832:	6013      	str	r3, [r2, #0]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< HEAD
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <HAL_Init+0x40>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <HAL_Init+0x40>)
 8001982:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001986:	6013      	str	r3, [r2, #0]
=======
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <HAL_Init+0x40>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <HAL_Init+0x40>)
 800183a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800183e:	6013      	str	r3, [r2, #0]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <HAL_Init+0x40>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a07      	ldr	r2, [pc, #28]	; (80019ac <HAL_Init+0x40>)
 800198e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001992:	6013      	str	r3, [r2, #0]
=======
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <HAL_Init+0x40>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a07      	ldr	r2, [pc, #28]	; (8001864 <HAL_Init+0x40>)
 8001846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184a:	6013      	str	r3, [r2, #0]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8001994:	2003      	movs	r0, #3
 8001996:	f000 ffb1 	bl	80028fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800199a:	2000      	movs	r0, #0
 800199c:	f000 f808 	bl	80019b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a0:	f7ff fed0 	bl	8001744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023c00 	.word	0x40023c00

080019b0 <HAL_InitTick>:
=======
 800184c:	2003      	movs	r0, #3
 800184e:	f000 ff8d 	bl	800276c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001852:	2000      	movs	r0, #0
 8001854:	f000 f808 	bl	8001868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001858:	f7ff feb0 	bl	80015bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40023c00 	.word	0x40023c00

08001868 <HAL_InitTick>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_InitTick+0x54>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_InitTick+0x58>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	4619      	mov	r1, r3
 80019c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 ffc9 	bl	8002966 <HAL_SYSTICK_Config>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e00e      	b.n	80019fc <HAL_InitTick+0x4c>
=======
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <HAL_InitTick+0x54>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <HAL_InitTick+0x58>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001882:	fbb2 f3f3 	udiv	r3, r2, r3
 8001886:	4618      	mov	r0, r3
 8001888:	f000 ffa5 	bl	80027d6 <HAL_SYSTICK_Config>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e00e      	b.n	80018b4 <HAL_InitTick+0x4c>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b0f      	cmp	r3, #15
 80019e2:	d80a      	bhi.n	80019fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e4:	2200      	movs	r2, #0
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ec:	f000 ff91 	bl	8002912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f0:	4a06      	ldr	r2, [pc, #24]	; (8001a0c <HAL_InitTick+0x5c>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6013      	str	r3, [r2, #0]
=======
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b0f      	cmp	r3, #15
 800189a:	d80a      	bhi.n	80018b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800189c:	2200      	movs	r2, #0
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	f04f 30ff 	mov.w	r0, #4294967295
 80018a4:	f000 ff6d 	bl	8002782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a8:	4a06      	ldr	r2, [pc, #24]	; (80018c4 <HAL_InitTick+0x5c>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6013      	str	r3, [r2, #0]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80019f6:	2300      	movs	r3, #0
 80019f8:	e000      	b.n	80019fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000000 	.word	0x20000000
 8001a08:	20000008 	.word	0x20000008
 8001a0c:	20000004 	.word	0x20000004

08001a10 <HAL_IncTick>:
=======
 80018ae:	2300      	movs	r3, #0
 80018b0:	e000      	b.n	80018b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000000 	.word	0x20000000
 80018c0:	20000008 	.word	0x20000008
 80018c4:	20000004 	.word	0x20000004

080018c8 <HAL_IncTick>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_IncTick+0x20>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_IncTick+0x24>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4413      	add	r3, r2
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <HAL_IncTick+0x24>)
 8001a22:	6013      	str	r3, [r2, #0]
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	20000008 	.word	0x20000008
 8001a34:	200001ac 	.word	0x200001ac

08001a38 <HAL_GetTick>:
=======
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_IncTick+0x20>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_IncTick+0x24>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4413      	add	r3, r2
 80018d8:	4a04      	ldr	r2, [pc, #16]	; (80018ec <HAL_IncTick+0x24>)
 80018da:	6013      	str	r3, [r2, #0]
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000008 	.word	0x20000008
 80018ec:	20000130 	.word	0x20000130

080018f0 <HAL_GetTick>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <HAL_GetTick+0x14>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	200001ac 	.word	0x200001ac

08001a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a58:	f7ff ffee 	bl	8001a38 <HAL_GetTick>
 8001a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a68:	d005      	beq.n	8001a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_Delay+0x44>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4413      	add	r3, r2
 8001a74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a76:	bf00      	nop
 8001a78:	f7ff ffde 	bl	8001a38 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d8f7      	bhi.n	8001a78 <HAL_Delay+0x28>
  {
  }
}
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000008 	.word	0x20000008

08001a98 <HAL_CAN_Init>:
=======
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return uwTick;
 80018f4:	4b03      	ldr	r3, [pc, #12]	; (8001904 <HAL_GetTick+0x14>)
 80018f6:	681b      	ldr	r3, [r3, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000130 	.word	0x20000130

08001908 <HAL_CAN_Init>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
=======
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
<<<<<<< HEAD
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e0ed      	b.n	8001c86 <HAL_CAN_Init+0x1ee>
=======
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e0ed      	b.n	8001af6 <HAL_CAN_Init+0x1ee>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
<<<<<<< HEAD
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d102      	bne.n	8001abc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7fe fe98 	bl	80007ec <HAL_CAN_MspInit>
=======
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d102      	bne.n	800192c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff fb76 	bl	8001018 <HAL_CAN_MspInit>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
<<<<<<< HEAD
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0201 	orr.w	r2, r2, #1
 8001aca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001acc:	f7ff ffb4 	bl	8001a38 <HAL_GetTick>
 8001ad0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ad2:	e012      	b.n	8001afa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ad4:	f7ff ffb0 	bl	8001a38 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b0a      	cmp	r3, #10
 8001ae0:	d90b      	bls.n	8001afa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2205      	movs	r2, #5
 8001af2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e0c5      	b.n	8001c86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0e5      	beq.n	8001ad4 <HAL_CAN_Init+0x3c>
=======
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 0201 	orr.w	r2, r2, #1
 800193a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800193c:	f7ff ffd8 	bl	80018f0 <HAL_GetTick>
 8001940:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001942:	e012      	b.n	800196a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001944:	f7ff ffd4 	bl	80018f0 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b0a      	cmp	r3, #10
 8001950:	d90b      	bls.n	800196a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001956:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2205      	movs	r2, #5
 8001962:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e0c5      	b.n	8001af6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0e5      	beq.n	8001944 <HAL_CAN_Init+0x3c>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
<<<<<<< HEAD
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0202 	bic.w	r2, r2, #2
 8001b16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b18:	f7ff ff8e 	bl	8001a38 <HAL_GetTick>
 8001b1c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b1e:	e012      	b.n	8001b46 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b20:	f7ff ff8a 	bl	8001a38 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b0a      	cmp	r3, #10
 8001b2c:	d90b      	bls.n	8001b46 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2205      	movs	r2, #5
 8001b3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e09f      	b.n	8001c86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1e5      	bne.n	8001b20 <HAL_CAN_Init+0x88>
=======
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0202 	bic.w	r2, r2, #2
 8001986:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001988:	f7ff ffb2 	bl	80018f0 <HAL_GetTick>
 800198c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800198e:	e012      	b.n	80019b6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001990:	f7ff ffae 	bl	80018f0 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b0a      	cmp	r3, #10
 800199c:	d90b      	bls.n	80019b6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2205      	movs	r2, #5
 80019ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e09f      	b.n	8001af6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1e5      	bne.n	8001990 <HAL_CAN_Init+0x88>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
<<<<<<< HEAD
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	7e1b      	ldrb	r3, [r3, #24]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d108      	bne.n	8001b6e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	e007      	b.n	8001b7e <HAL_CAN_Init+0xe6>
=======
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	7e1b      	ldrb	r3, [r3, #24]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d108      	bne.n	80019de <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	e007      	b.n	80019ee <HAL_CAN_Init+0xe6>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
<<<<<<< HEAD
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b7c:	601a      	str	r2, [r3, #0]
=======
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019ec:	601a      	str	r2, [r3, #0]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
<<<<<<< HEAD
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	7e5b      	ldrb	r3, [r3, #25]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d108      	bne.n	8001b98 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	e007      	b.n	8001ba8 <HAL_CAN_Init+0x110>
=======
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	7e5b      	ldrb	r3, [r3, #25]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d108      	bne.n	8001a08 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	e007      	b.n	8001a18 <HAL_CAN_Init+0x110>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
<<<<<<< HEAD
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ba6:	601a      	str	r2, [r3, #0]
=======
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a16:	601a      	str	r2, [r3, #0]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
<<<<<<< HEAD
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	7e9b      	ldrb	r3, [r3, #26]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d108      	bne.n	8001bc2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0220 	orr.w	r2, r2, #32
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	e007      	b.n	8001bd2 <HAL_CAN_Init+0x13a>
=======
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	7e9b      	ldrb	r3, [r3, #26]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d108      	bne.n	8001a32 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f042 0220 	orr.w	r2, r2, #32
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	e007      	b.n	8001a42 <HAL_CAN_Init+0x13a>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
<<<<<<< HEAD
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0220 	bic.w	r2, r2, #32
 8001bd0:	601a      	str	r2, [r3, #0]
=======
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0220 	bic.w	r2, r2, #32
 8001a40:	601a      	str	r2, [r3, #0]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
<<<<<<< HEAD
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	7edb      	ldrb	r3, [r3, #27]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d108      	bne.n	8001bec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0210 	bic.w	r2, r2, #16
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	e007      	b.n	8001bfc <HAL_CAN_Init+0x164>
=======
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	7edb      	ldrb	r3, [r3, #27]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d108      	bne.n	8001a5c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 0210 	bic.w	r2, r2, #16
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	e007      	b.n	8001a6c <HAL_CAN_Init+0x164>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
<<<<<<< HEAD
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0210 	orr.w	r2, r2, #16
 8001bfa:	601a      	str	r2, [r3, #0]
=======
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 0210 	orr.w	r2, r2, #16
 8001a6a:	601a      	str	r2, [r3, #0]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
<<<<<<< HEAD
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	7f1b      	ldrb	r3, [r3, #28]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d108      	bne.n	8001c16 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0208 	orr.w	r2, r2, #8
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	e007      	b.n	8001c26 <HAL_CAN_Init+0x18e>
=======
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	7f1b      	ldrb	r3, [r3, #28]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d108      	bne.n	8001a86 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 0208 	orr.w	r2, r2, #8
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	e007      	b.n	8001a96 <HAL_CAN_Init+0x18e>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
<<<<<<< HEAD
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0208 	bic.w	r2, r2, #8
 8001c24:	601a      	str	r2, [r3, #0]
=======
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 0208 	bic.w	r2, r2, #8
 8001a94:	601a      	str	r2, [r3, #0]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
<<<<<<< HEAD
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	7f5b      	ldrb	r3, [r3, #29]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d108      	bne.n	8001c40 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f042 0204 	orr.w	r2, r2, #4
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	e007      	b.n	8001c50 <HAL_CAN_Init+0x1b8>
=======
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7f5b      	ldrb	r3, [r3, #29]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d108      	bne.n	8001ab0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f042 0204 	orr.w	r2, r2, #4
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	e007      	b.n	8001ac0 <HAL_CAN_Init+0x1b8>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
<<<<<<< HEAD
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0204 	bic.w	r2, r2, #4
 8001c4e:	601a      	str	r2, [r3, #0]
=======
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0204 	bic.w	r2, r2, #4
 8001abe:	601a      	str	r2, [r3, #0]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
<<<<<<< HEAD
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	ea42 0103 	orr.w	r1, r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	1e5a      	subs	r2, r3, #1
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	61da      	str	r2, [r3, #28]
=======
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	ea42 0103 	orr.w	r1, r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	1e5a      	subs	r2, r3, #1
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	61da      	str	r2, [r3, #28]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
<<<<<<< HEAD
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <HAL_CAN_ConfigFilter>:
=======
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <HAL_CAN_ConfigFilter>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
<<<<<<< HEAD
 8001c90:	b480      	push	{r7}
 8001c92:	b087      	sub	sp, #28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ca6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ca8:	7cfb      	ldrb	r3, [r7, #19]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d003      	beq.n	8001cb6 <HAL_CAN_ConfigFilter+0x26>
 8001cae:	7cfb      	ldrb	r3, [r7, #19]
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	f040 80be 	bne.w	8001e32 <HAL_CAN_ConfigFilter+0x1a2>
=======
 8001b00:	b480      	push	{r7}
 8001b02:	b087      	sub	sp, #28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b16:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b18:	7cfb      	ldrb	r3, [r7, #19]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d003      	beq.n	8001b26 <HAL_CAN_ConfigFilter+0x26>
 8001b1e:	7cfb      	ldrb	r3, [r7, #19]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	f040 80be 	bne.w	8001ca2 <HAL_CAN_ConfigFilter+0x1a2>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
<<<<<<< HEAD
 8001cb6:	4b65      	ldr	r3, [pc, #404]	; (8001e4c <HAL_CAN_ConfigFilter+0x1bc>)
 8001cb8:	617b      	str	r3, [r7, #20]
=======
 8001b26:	4b65      	ldr	r3, [pc, #404]	; (8001cbc <HAL_CAN_ConfigFilter+0x1bc>)
 8001b28:	617b      	str	r3, [r7, #20]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
<<<<<<< HEAD
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001cc0:	f043 0201 	orr.w	r2, r3, #1
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
=======
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b30:	f043 0201 	orr.w	r2, r3, #1
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
<<<<<<< HEAD
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001cd0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	021b      	lsls	r3, r3, #8
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
=======
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b40:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	021b      	lsls	r3, r3, #8
 8001b56:	431a      	orrs	r2, r3
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
<<<<<<< HEAD
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	f003 031f 	and.w	r3, r3, #31
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	401a      	ands	r2, r3
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d123      	bne.n	8001d60 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	401a      	ands	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
=======
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	f003 031f 	and.w	r3, r3, #31
 8001b66:	2201      	movs	r2, #1
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	43db      	mvns	r3, r3
 8001b78:	401a      	ands	r2, r3
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	69db      	ldr	r3, [r3, #28]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d123      	bne.n	8001bd0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	401a      	ands	r2, r3
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
<<<<<<< HEAD
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d3a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	3248      	adds	r2, #72	; 0x48
 8001d40:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
=======
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001baa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	3248      	adds	r2, #72	; 0x48
 8001bb0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
<<<<<<< HEAD
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d54:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d56:	6979      	ldr	r1, [r7, #20]
 8001d58:	3348      	adds	r3, #72	; 0x48
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	440b      	add	r3, r1
 8001d5e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	69db      	ldr	r3, [r3, #28]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d122      	bne.n	8001dae <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	431a      	orrs	r2, r3
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
=======
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bc4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bc6:	6979      	ldr	r1, [r7, #20]
 8001bc8:	3348      	adds	r3, #72	; 0x48
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	440b      	add	r3, r1
 8001bce:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d122      	bne.n	8001c1e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	431a      	orrs	r2, r3
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
<<<<<<< HEAD
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d88:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	3248      	adds	r2, #72	; 0x48
 8001d8e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
=======
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bf8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	3248      	adds	r2, #72	; 0x48
 8001bfe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
<<<<<<< HEAD
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001da2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001da4:	6979      	ldr	r1, [r7, #20]
 8001da6:	3348      	adds	r3, #72	; 0x48
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	440b      	add	r3, r1
 8001dac:	605a      	str	r2, [r3, #4]
=======
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c12:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c14:	6979      	ldr	r1, [r7, #20]
 8001c16:	3348      	adds	r3, #72	; 0x48
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	440b      	add	r3, r1
 8001c1c:	605a      	str	r2, [r3, #4]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
<<<<<<< HEAD
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d109      	bne.n	8001dca <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	401a      	ands	r2, r3
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001dc8:	e007      	b.n	8001dda <HAL_CAN_ConfigFilter+0x14a>
=======
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d109      	bne.n	8001c3a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	401a      	ands	r2, r3
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001c38:	e007      	b.n	8001c4a <HAL_CAN_ConfigFilter+0x14a>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
<<<<<<< HEAD
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
=======
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	431a      	orrs	r2, r3
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
<<<<<<< HEAD
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d109      	bne.n	8001df6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	401a      	ands	r2, r3
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001df4:	e007      	b.n	8001e06 <HAL_CAN_ConfigFilter+0x176>
=======
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d109      	bne.n	8001c66 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	401a      	ands	r2, r3
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001c64:	e007      	b.n	8001c76 <HAL_CAN_ConfigFilter+0x176>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
<<<<<<< HEAD
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
=======
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
<<<<<<< HEAD
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d107      	bne.n	8001e1e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	431a      	orrs	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
=======
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d107      	bne.n	8001c8e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	431a      	orrs	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
<<<<<<< HEAD
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e24:	f023 0201 	bic.w	r2, r3, #1
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	e006      	b.n	8001e40 <HAL_CAN_ConfigFilter+0x1b0>
=======
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c94:	f023 0201 	bic.w	r2, r3, #1
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	e006      	b.n	8001cb0 <HAL_CAN_ConfigFilter+0x1b0>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
<<<<<<< HEAD
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e36:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
  }
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	371c      	adds	r7, #28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	40006400 	.word	0x40006400

08001e50 <HAL_CAN_Start>:
=======
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
  }
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	371c      	adds	r7, #28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	40006400 	.word	0x40006400

08001cc0 <HAL_CAN_Start>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d12e      	bne.n	8001ec2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2202      	movs	r2, #2
 8001e68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0201 	bic.w	r2, r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e7c:	f7ff fddc 	bl	8001a38 <HAL_GetTick>
 8001e80:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e82:	e012      	b.n	8001eaa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e84:	f7ff fdd8 	bl	8001a38 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b0a      	cmp	r3, #10
 8001e90:	d90b      	bls.n	8001eaa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2205      	movs	r2, #5
 8001ea2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e012      	b.n	8001ed0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1e5      	bne.n	8001e84 <HAL_CAN_Start+0x34>
=======
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d12e      	bne.n	8001d32 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0201 	bic.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cec:	f7ff fe00 	bl	80018f0 <HAL_GetTick>
 8001cf0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cf2:	e012      	b.n	8001d1a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cf4:	f7ff fdfc 	bl	80018f0 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b0a      	cmp	r3, #10
 8001d00:	d90b      	bls.n	8001d1a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2205      	movs	r2, #5
 8001d12:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e012      	b.n	8001d40 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1e5      	bne.n	8001cf4 <HAL_CAN_Start+0x34>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
<<<<<<< HEAD
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e006      	b.n	8001ed0 <HAL_CAN_Start+0x80>
=======
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e006      	b.n	8001d40 <HAL_CAN_Start+0x80>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
<<<<<<< HEAD
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
  }
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_CAN_AddTxMessage>:
=======
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d36:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
  }
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_CAN_AddTxMessage>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
<<<<<<< HEAD
 8001ed8:	b480      	push	{r7}
 8001eda:	b089      	sub	sp, #36	; 0x24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
 8001ee4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eec:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	61bb      	str	r3, [r7, #24]
=======
 8001d48:	b480      	push	{r7}
 8001d4a:	b089      	sub	sp, #36	; 0x24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
 8001d54:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d5c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	61bb      	str	r3, [r7, #24]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
<<<<<<< HEAD
 8001ef6:	7ffb      	ldrb	r3, [r7, #31]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d003      	beq.n	8001f04 <HAL_CAN_AddTxMessage+0x2c>
 8001efc:	7ffb      	ldrb	r3, [r7, #31]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	f040 80b8 	bne.w	8002074 <HAL_CAN_AddTxMessage+0x19c>
=======
 8001d66:	7ffb      	ldrb	r3, [r7, #31]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d003      	beq.n	8001d74 <HAL_CAN_AddTxMessage+0x2c>
 8001d6c:	7ffb      	ldrb	r3, [r7, #31]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	f040 80b8 	bne.w	8001ee4 <HAL_CAN_AddTxMessage+0x19c>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
<<<<<<< HEAD
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10a      	bne.n	8001f24 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d105      	bne.n	8001f24 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 80a0 	beq.w	8002064 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	0e1b      	lsrs	r3, r3, #24
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d907      	bls.n	8001f44 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e09e      	b.n	8002082 <HAL_CAN_AddTxMessage+0x1aa>
=======
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10a      	bne.n	8001d94 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d105      	bne.n	8001d94 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 80a0 	beq.w	8001ed4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	0e1b      	lsrs	r3, r3, #24
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d907      	bls.n	8001db4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e09e      	b.n	8001ef2 <HAL_CAN_AddTxMessage+0x1aa>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
<<<<<<< HEAD
 8001f44:	2201      	movs	r2, #1
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10d      	bne.n	8001f72 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f60:	68f9      	ldr	r1, [r7, #12]
 8001f62:	6809      	ldr	r1, [r1, #0]
 8001f64:	431a      	orrs	r2, r3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	3318      	adds	r3, #24
 8001f6a:	011b      	lsls	r3, r3, #4
 8001f6c:	440b      	add	r3, r1
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	e00f      	b.n	8001f92 <HAL_CAN_AddTxMessage+0xba>
=======
 8001db4:	2201      	movs	r2, #1
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	409a      	lsls	r2, r3
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10d      	bne.n	8001de2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001dd0:	68f9      	ldr	r1, [r7, #12]
 8001dd2:	6809      	ldr	r1, [r1, #0]
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	3318      	adds	r3, #24
 8001dda:	011b      	lsls	r3, r3, #4
 8001ddc:	440b      	add	r3, r1
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	e00f      	b.n	8001e02 <HAL_CAN_AddTxMessage+0xba>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
<<<<<<< HEAD
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f7c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f82:	68f9      	ldr	r1, [r7, #12]
 8001f84:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001f86:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	3318      	adds	r3, #24
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	440b      	add	r3, r1
 8001f90:	601a      	str	r2, [r3, #0]
=======
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dec:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001df2:	68f9      	ldr	r1, [r7, #12]
 8001df4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001df6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	3318      	adds	r3, #24
 8001dfc:	011b      	lsls	r3, r3, #4
 8001dfe:	440b      	add	r3, r1
 8001e00:	601a      	str	r2, [r3, #0]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
<<<<<<< HEAD
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6819      	ldr	r1, [r3, #0]
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	691a      	ldr	r2, [r3, #16]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	3318      	adds	r3, #24
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	440b      	add	r3, r1
 8001fa2:	3304      	adds	r3, #4
 8001fa4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	7d1b      	ldrb	r3, [r3, #20]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d111      	bne.n	8001fd2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	3318      	adds	r3, #24
 8001fb6:	011b      	lsls	r3, r3, #4
 8001fb8:	4413      	add	r3, r2
 8001fba:	3304      	adds	r3, #4
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	6811      	ldr	r1, [r2, #0]
 8001fc2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	3318      	adds	r3, #24
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	440b      	add	r3, r1
 8001fce:	3304      	adds	r3, #4
 8001fd0:	601a      	str	r2, [r3, #0]
=======
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6819      	ldr	r1, [r3, #0]
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	691a      	ldr	r2, [r3, #16]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	3318      	adds	r3, #24
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	440b      	add	r3, r1
 8001e12:	3304      	adds	r3, #4
 8001e14:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	7d1b      	ldrb	r3, [r3, #20]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d111      	bne.n	8001e42 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	3318      	adds	r3, #24
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	4413      	add	r3, r2
 8001e2a:	3304      	adds	r3, #4
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	6811      	ldr	r1, [r2, #0]
 8001e32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	3318      	adds	r3, #24
 8001e3a:	011b      	lsls	r3, r3, #4
 8001e3c:	440b      	add	r3, r1
 8001e3e:	3304      	adds	r3, #4
 8001e40:	601a      	str	r2, [r3, #0]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
<<<<<<< HEAD
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3307      	adds	r3, #7
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	061a      	lsls	r2, r3, #24
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3306      	adds	r3, #6
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	041b      	lsls	r3, r3, #16
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3305      	adds	r3, #5
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	021b      	lsls	r3, r3, #8
 8001fec:	4313      	orrs	r3, r2
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	3204      	adds	r2, #4
 8001ff2:	7812      	ldrb	r2, [r2, #0]
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	6811      	ldr	r1, [r2, #0]
 8001ffa:	ea43 0200 	orr.w	r2, r3, r0
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	440b      	add	r3, r1
 8002004:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002008:	601a      	str	r2, [r3, #0]
=======
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3307      	adds	r3, #7
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	061a      	lsls	r2, r3, #24
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3306      	adds	r3, #6
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	041b      	lsls	r3, r3, #16
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3305      	adds	r3, #5
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	021b      	lsls	r3, r3, #8
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	3204      	adds	r2, #4
 8001e62:	7812      	ldrb	r2, [r2, #0]
 8001e64:	4610      	mov	r0, r2
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	6811      	ldr	r1, [r2, #0]
 8001e6a:	ea43 0200 	orr.w	r2, r3, r0
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	011b      	lsls	r3, r3, #4
 8001e72:	440b      	add	r3, r1
 8001e74:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001e78:	601a      	str	r2, [r3, #0]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
<<<<<<< HEAD
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3303      	adds	r3, #3
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	061a      	lsls	r2, r3, #24
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3302      	adds	r3, #2
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	041b      	lsls	r3, r3, #16
 800201a:	431a      	orrs	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3301      	adds	r3, #1
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	021b      	lsls	r3, r3, #8
 8002024:	4313      	orrs	r3, r2
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	7812      	ldrb	r2, [r2, #0]
 800202a:	4610      	mov	r0, r2
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	6811      	ldr	r1, [r2, #0]
 8002030:	ea43 0200 	orr.w	r2, r3, r0
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	440b      	add	r3, r1
 800203a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800203e:	601a      	str	r2, [r3, #0]
=======
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3303      	adds	r3, #3
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	061a      	lsls	r2, r3, #24
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3302      	adds	r3, #2
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	041b      	lsls	r3, r3, #16
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	021b      	lsls	r3, r3, #8
 8001e94:	4313      	orrs	r3, r2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	7812      	ldrb	r2, [r2, #0]
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	6811      	ldr	r1, [r2, #0]
 8001ea0:	ea43 0200 	orr.w	r2, r3, r0
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	011b      	lsls	r3, r3, #4
 8001ea8:	440b      	add	r3, r1
 8001eaa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001eae:	601a      	str	r2, [r3, #0]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
<<<<<<< HEAD
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	3318      	adds	r3, #24
 8002048:	011b      	lsls	r3, r3, #4
 800204a:	4413      	add	r3, r2
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	6811      	ldr	r1, [r2, #0]
 8002052:	f043 0201 	orr.w	r2, r3, #1
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	3318      	adds	r3, #24
 800205a:	011b      	lsls	r3, r3, #4
 800205c:	440b      	add	r3, r1
 800205e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	e00e      	b.n	8002082 <HAL_CAN_AddTxMessage+0x1aa>
=======
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	3318      	adds	r3, #24
 8001eb8:	011b      	lsls	r3, r3, #4
 8001eba:	4413      	add	r3, r2
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	6811      	ldr	r1, [r2, #0]
 8001ec2:	f043 0201 	orr.w	r2, r3, #1
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	3318      	adds	r3, #24
 8001eca:	011b      	lsls	r3, r3, #4
 8001ecc:	440b      	add	r3, r1
 8001ece:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	e00e      	b.n	8001ef2 <HAL_CAN_AddTxMessage+0x1aa>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
<<<<<<< HEAD
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e006      	b.n	8002082 <HAL_CAN_AddTxMessage+0x1aa>
=======
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e006      	b.n	8001ef2 <HAL_CAN_AddTxMessage+0x1aa>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
<<<<<<< HEAD
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
  }
}
 8002082:	4618      	mov	r0, r3
 8002084:	3724      	adds	r7, #36	; 0x24
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <HAL_CAN_GetRxMessage>:
=======
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
  }
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3724      	adds	r7, #36	; 0x24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <HAL_CAN_GetRxMessage>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
<<<<<<< HEAD
 800208e:	b480      	push	{r7}
 8002090:	b087      	sub	sp, #28
 8002092:	af00      	add	r7, sp, #0
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
 800209a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020a2:	75fb      	strb	r3, [r7, #23]
=======
 8001efe:	b480      	push	{r7}
 8001f00:	b087      	sub	sp, #28
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	60f8      	str	r0, [r7, #12]
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	607a      	str	r2, [r7, #4]
 8001f0a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f12:	75fb      	strb	r3, [r7, #23]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
<<<<<<< HEAD
 80020a4:	7dfb      	ldrb	r3, [r7, #23]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d003      	beq.n	80020b2 <HAL_CAN_GetRxMessage+0x24>
 80020aa:	7dfb      	ldrb	r3, [r7, #23]
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	f040 80f3 	bne.w	8002298 <HAL_CAN_GetRxMessage+0x20a>
=======
 8001f14:	7dfb      	ldrb	r3, [r7, #23]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d003      	beq.n	8001f22 <HAL_CAN_GetRxMessage+0x24>
 8001f1a:	7dfb      	ldrb	r3, [r7, #23]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	f040 80f3 	bne.w	8002108 <HAL_CAN_GetRxMessage+0x20a>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
<<<<<<< HEAD
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10e      	bne.n	80020d6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d116      	bne.n	80020f4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e0e7      	b.n	80022a6 <HAL_CAN_GetRxMessage+0x218>
=======
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10e      	bne.n	8001f46 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d116      	bne.n	8001f64 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e0e7      	b.n	8002116 <HAL_CAN_GetRxMessage+0x218>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
<<<<<<< HEAD
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d107      	bne.n	80020f4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0d8      	b.n	80022a6 <HAL_CAN_GetRxMessage+0x218>
=======
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d107      	bne.n	8001f64 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0d8      	b.n	8002116 <HAL_CAN_GetRxMessage+0x218>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
<<<<<<< HEAD
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	331b      	adds	r3, #27
 80020fc:	011b      	lsls	r3, r3, #4
 80020fe:	4413      	add	r3, r2
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0204 	and.w	r2, r3, #4
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10c      	bne.n	800212c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	331b      	adds	r3, #27
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	4413      	add	r3, r2
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	0d5b      	lsrs	r3, r3, #21
 8002122:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	e00b      	b.n	8002144 <HAL_CAN_GetRxMessage+0xb6>
=======
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	331b      	adds	r3, #27
 8001f6c:	011b      	lsls	r3, r3, #4
 8001f6e:	4413      	add	r3, r2
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0204 	and.w	r2, r3, #4
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10c      	bne.n	8001f9c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	331b      	adds	r3, #27
 8001f8a:	011b      	lsls	r3, r3, #4
 8001f8c:	4413      	add	r3, r2
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	0d5b      	lsrs	r3, r3, #21
 8001f92:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	e00b      	b.n	8001fb4 <HAL_CAN_GetRxMessage+0xb6>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
<<<<<<< HEAD
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	331b      	adds	r3, #27
 8002134:	011b      	lsls	r3, r3, #4
 8002136:	4413      	add	r3, r2
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	08db      	lsrs	r3, r3, #3
 800213c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	331b      	adds	r3, #27
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	4413      	add	r3, r2
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0202 	and.w	r2, r3, #2
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	331b      	adds	r3, #27
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	4413      	add	r3, r2
 8002166:	3304      	adds	r3, #4
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 020f 	and.w	r2, r3, #15
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	331b      	adds	r3, #27
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	4413      	add	r3, r2
 800217e:	3304      	adds	r3, #4
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	0a1b      	lsrs	r3, r3, #8
 8002184:	b2da      	uxtb	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	331b      	adds	r3, #27
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	4413      	add	r3, r2
 8002196:	3304      	adds	r3, #4
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	0c1b      	lsrs	r3, r3, #16
 800219c:	b29a      	uxth	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	011b      	lsls	r3, r3, #4
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	0a1a      	lsrs	r2, r3, #8
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	3301      	adds	r3, #1
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	011b      	lsls	r3, r3, #4
 80021da:	4413      	add	r3, r2
 80021dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	0c1a      	lsrs	r2, r3, #16
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	3302      	adds	r3, #2
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	0e1a      	lsrs	r2, r3, #24
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	3303      	adds	r3, #3
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	4413      	add	r3, r2
 8002210:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	3304      	adds	r3, #4
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	4413      	add	r3, r2
 8002228:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	0a1a      	lsrs	r2, r3, #8
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	3305      	adds	r3, #5
 8002234:	b2d2      	uxtb	r2, r2
 8002236:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	011b      	lsls	r3, r3, #4
 8002240:	4413      	add	r3, r2
 8002242:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	0c1a      	lsrs	r2, r3, #16
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	3306      	adds	r3, #6
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	4413      	add	r3, r2
 800225c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	0e1a      	lsrs	r2, r3, #24
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	3307      	adds	r3, #7
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d108      	bne.n	8002284 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f042 0220 	orr.w	r2, r2, #32
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	e007      	b.n	8002294 <HAL_CAN_GetRxMessage+0x206>
=======
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	331b      	adds	r3, #27
 8001fa4:	011b      	lsls	r3, r3, #4
 8001fa6:	4413      	add	r3, r2
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	08db      	lsrs	r3, r3, #3
 8001fac:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	331b      	adds	r3, #27
 8001fbc:	011b      	lsls	r3, r3, #4
 8001fbe:	4413      	add	r3, r2
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0202 	and.w	r2, r3, #2
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	331b      	adds	r3, #27
 8001fd2:	011b      	lsls	r3, r3, #4
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 020f 	and.w	r2, r3, #15
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	331b      	adds	r3, #27
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	4413      	add	r3, r2
 8001fee:	3304      	adds	r3, #4
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	0a1b      	lsrs	r3, r3, #8
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	331b      	adds	r3, #27
 8002002:	011b      	lsls	r3, r3, #4
 8002004:	4413      	add	r3, r2
 8002006:	3304      	adds	r3, #4
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	0c1b      	lsrs	r3, r3, #16
 800200c:	b29a      	uxth	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	011b      	lsls	r3, r3, #4
 800201a:	4413      	add	r3, r2
 800201c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	b2da      	uxtb	r2, r3
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	011b      	lsls	r3, r3, #4
 8002030:	4413      	add	r3, r2
 8002032:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	0a1a      	lsrs	r2, r3, #8
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	3301      	adds	r3, #1
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	011b      	lsls	r3, r3, #4
 800204a:	4413      	add	r3, r2
 800204c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	0c1a      	lsrs	r2, r3, #16
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	3302      	adds	r3, #2
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	011b      	lsls	r3, r3, #4
 8002064:	4413      	add	r3, r2
 8002066:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	0e1a      	lsrs	r2, r3, #24
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	3303      	adds	r3, #3
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	011b      	lsls	r3, r3, #4
 800207e:	4413      	add	r3, r2
 8002080:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	3304      	adds	r3, #4
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	011b      	lsls	r3, r3, #4
 8002096:	4413      	add	r3, r2
 8002098:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	0a1a      	lsrs	r2, r3, #8
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	3305      	adds	r3, #5
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	011b      	lsls	r3, r3, #4
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	0c1a      	lsrs	r2, r3, #16
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	3306      	adds	r3, #6
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	4413      	add	r3, r2
 80020cc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	0e1a      	lsrs	r2, r3, #24
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	3307      	adds	r3, #7
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d108      	bne.n	80020f4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f042 0220 	orr.w	r2, r2, #32
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	e007      	b.n	8002104 <HAL_CAN_GetRxMessage+0x206>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
<<<<<<< HEAD
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	691a      	ldr	r2, [r3, #16]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0220 	orr.w	r2, r2, #32
 8002292:	611a      	str	r2, [r3, #16]
=======
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	691a      	ldr	r2, [r3, #16]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0220 	orr.w	r2, r2, #32
 8002102:	611a      	str	r2, [r3, #16]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    }

    /* Return function status */
    return HAL_OK;
<<<<<<< HEAD
 8002294:	2300      	movs	r3, #0
 8002296:	e006      	b.n	80022a6 <HAL_CAN_GetRxMessage+0x218>
=======
 8002104:	2300      	movs	r3, #0
 8002106:	e006      	b.n	8002116 <HAL_CAN_GetRxMessage+0x218>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
<<<<<<< HEAD
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
  }
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	371c      	adds	r7, #28
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <HAL_CAN_ActivateNotification>:
=======
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
  }
}
 8002116:	4618      	mov	r0, r3
 8002118:	371c      	adds	r7, #28
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <HAL_CAN_ActivateNotification>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
<<<<<<< HEAD
 80022b2:	b480      	push	{r7}
 80022b4:	b085      	sub	sp, #20
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022c2:	73fb      	strb	r3, [r7, #15]
=======
 8002122:	b480      	push	{r7}
 8002124:	b085      	sub	sp, #20
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002132:	73fb      	strb	r3, [r7, #15]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
<<<<<<< HEAD
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d002      	beq.n	80022d0 <HAL_CAN_ActivateNotification+0x1e>
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d109      	bne.n	80022e4 <HAL_CAN_ActivateNotification+0x32>
=======
 8002134:	7bfb      	ldrb	r3, [r7, #15]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d002      	beq.n	8002140 <HAL_CAN_ActivateNotification+0x1e>
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d109      	bne.n	8002154 <HAL_CAN_ActivateNotification+0x32>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
<<<<<<< HEAD
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6959      	ldr	r1, [r3, #20]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80022e0:	2300      	movs	r3, #0
 80022e2:	e006      	b.n	80022f2 <HAL_CAN_ActivateNotification+0x40>
=======
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6959      	ldr	r1, [r3, #20]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002150:	2300      	movs	r3, #0
 8002152:	e006      	b.n	8002162 <HAL_CAN_ActivateNotification+0x40>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
<<<<<<< HEAD
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
  }
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <HAL_CAN_IRQHandler>:
=======
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
  }
}
 8002162:	4618      	mov	r0, r3
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <HAL_CAN_IRQHandler>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 80022fe:	b580      	push	{r7, lr}
 8002300:	b08a      	sub	sp, #40	; 0x28
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002306:	2300      	movs	r3, #0
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b00      	cmp	r3, #0
 8002342:	d07c      	beq.n	800243e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d023      	beq.n	8002396 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2201      	movs	r2, #1
 8002354:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_CAN_IRQHandler+0x6a>
=======
 800216e:	b580      	push	{r7, lr}
 8002170:	b08a      	sub	sp, #40	; 0x28
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002176:	2300      	movs	r3, #0
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d07c      	beq.n	80022ae <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d023      	beq.n	8002206 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2201      	movs	r2, #1
 80021c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_CAN_IRQHandler+0x6a>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
<<<<<<< HEAD
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 f983 	bl	800266c <HAL_CAN_TxMailbox0CompleteCallback>
 8002366:	e016      	b.n	8002396 <HAL_CAN_IRQHandler+0x98>
=======
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f983 	bl	80024dc <HAL_CAN_TxMailbox0CompleteCallback>
 80021d6:	e016      	b.n	8002206 <HAL_CAN_IRQHandler+0x98>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
<<<<<<< HEAD
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	2b00      	cmp	r3, #0
 8002370:	d004      	beq.n	800237c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
 800237a:	e00c      	b.n	8002396 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d004      	beq.n	8002390 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
 800238e:	e002      	b.n	8002396 <HAL_CAN_IRQHandler+0x98>
=======
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d004      	beq.n	80021ec <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ea:	e00c      	b.n	8002206 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d004      	beq.n	8002200 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
 80021fe:	e002      	b.n	8002206 <HAL_CAN_IRQHandler+0x98>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
<<<<<<< HEAD
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 f989 	bl	80026a8 <HAL_CAN_TxMailbox0AbortCallback>
=======
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 f989 	bl	8002518 <HAL_CAN_TxMailbox0AbortCallback>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
<<<<<<< HEAD
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239c:	2b00      	cmp	r3, #0
 800239e:	d024      	beq.n	80023ea <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_CAN_IRQHandler+0xbe>
=======
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220c:	2b00      	cmp	r3, #0
 800220e:	d024      	beq.n	800225a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002218:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_CAN_IRQHandler+0xbe>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
<<<<<<< HEAD
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f963 	bl	8002680 <HAL_CAN_TxMailbox1CompleteCallback>
 80023ba:	e016      	b.n	80023ea <HAL_CAN_IRQHandler+0xec>
=======
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 f963 	bl	80024f0 <HAL_CAN_TxMailbox1CompleteCallback>
 800222a:	e016      	b.n	800225a <HAL_CAN_IRQHandler+0xec>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
<<<<<<< HEAD
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d004      	beq.n	80023d0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
 80023ce:	e00c      	b.n	80023ea <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d004      	beq.n	80023e4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
 80023e2:	e002      	b.n	80023ea <HAL_CAN_IRQHandler+0xec>
=======
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002232:	2b00      	cmp	r3, #0
 8002234:	d004      	beq.n	8002240 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
 800223e:	e00c      	b.n	800225a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002246:	2b00      	cmp	r3, #0
 8002248:	d004      	beq.n	8002254 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
 8002252:	e002      	b.n	800225a <HAL_CAN_IRQHandler+0xec>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
<<<<<<< HEAD
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 f969 	bl	80026bc <HAL_CAN_TxMailbox1AbortCallback>
=======
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f969 	bl	800252c <HAL_CAN_TxMailbox1AbortCallback>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
<<<<<<< HEAD
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d024      	beq.n	800243e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <HAL_CAN_IRQHandler+0x112>
=======
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d024      	beq.n	80022ae <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800226c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_CAN_IRQHandler+0x112>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
<<<<<<< HEAD
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 f943 	bl	8002694 <HAL_CAN_TxMailbox2CompleteCallback>
 800240e:	e016      	b.n	800243e <HAL_CAN_IRQHandler+0x140>
=======
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 f943 	bl	8002504 <HAL_CAN_TxMailbox2CompleteCallback>
 800227e:	e016      	b.n	80022ae <HAL_CAN_IRQHandler+0x140>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
<<<<<<< HEAD
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d004      	beq.n	8002424 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
 8002422:	e00c      	b.n	800243e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d004      	beq.n	8002438 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
 8002436:	e002      	b.n	800243e <HAL_CAN_IRQHandler+0x140>
=======
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d004      	beq.n	8002294 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
 8002292:	e00c      	b.n	80022ae <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d004      	beq.n	80022a8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
 80022a6:	e002      	b.n	80022ae <HAL_CAN_IRQHandler+0x140>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
<<<<<<< HEAD
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f949 	bl	80026d0 <HAL_CAN_TxMailbox2AbortCallback>
=======
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f949 	bl	8002540 <HAL_CAN_TxMailbox2AbortCallback>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
<<<<<<< HEAD
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00c      	beq.n	8002462 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f003 0310 	and.w	r3, r3, #16
 800244e:	2b00      	cmp	r3, #0
 8002450:	d007      	beq.n	8002462 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002458:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2210      	movs	r2, #16
 8002460:	60da      	str	r2, [r3, #12]
=======
 80022ae:	6a3b      	ldr	r3, [r7, #32]
 80022b0:	f003 0308 	and.w	r3, r3, #8
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00c      	beq.n	80022d2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f003 0310 	and.w	r3, r3, #16
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d007      	beq.n	80022d2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2210      	movs	r2, #16
 80022d0:	60da      	str	r2, [r3, #12]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
<<<<<<< HEAD
 8002462:	6a3b      	ldr	r3, [r7, #32]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00b      	beq.n	8002484 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d006      	beq.n	8002484 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2208      	movs	r2, #8
 800247c:	60da      	str	r2, [r3, #12]
=======
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00b      	beq.n	80022f4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d006      	beq.n	80022f4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2208      	movs	r2, #8
 80022ec:	60da      	str	r2, [r3, #12]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
<<<<<<< HEAD
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f930 	bl	80026e4 <HAL_CAN_RxFifo0FullCallback>
=======
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f930 	bl	8002554 <HAL_CAN_RxFifo0FullCallback>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
<<<<<<< HEAD
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d009      	beq.n	80024a2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f003 0303 	and.w	r3, r3, #3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d002      	beq.n	80024a2 <HAL_CAN_IRQHandler+0x1a4>
=======
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d009      	beq.n	8002312 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	2b00      	cmp	r3, #0
 800230a:	d002      	beq.n	8002312 <HAL_CAN_IRQHandler+0x1a4>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
<<<<<<< HEAD
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7fe f819 	bl	80004d4 <HAL_CAN_RxFifo0MsgPendingCallback>
=======
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7fe fcf7 	bl	8000d00 <HAL_CAN_RxFifo0MsgPendingCallback>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
<<<<<<< HEAD
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00c      	beq.n	80024c6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	f003 0310 	and.w	r3, r3, #16
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d007      	beq.n	80024c6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2210      	movs	r2, #16
 80024c4:	611a      	str	r2, [r3, #16]
=======
 8002312:	6a3b      	ldr	r3, [r7, #32]
 8002314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00c      	beq.n	8002336 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	f003 0310 	and.w	r3, r3, #16
 8002322:	2b00      	cmp	r3, #0
 8002324:	d007      	beq.n	8002336 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800232c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2210      	movs	r2, #16
 8002334:	611a      	str	r2, [r3, #16]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
<<<<<<< HEAD
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	f003 0320 	and.w	r3, r3, #32
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00b      	beq.n	80024e8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d006      	beq.n	80024e8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2208      	movs	r2, #8
 80024e0:	611a      	str	r2, [r3, #16]
=======
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	f003 0320 	and.w	r3, r3, #32
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00b      	beq.n	8002358 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b00      	cmp	r3, #0
 8002348:	d006      	beq.n	8002358 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2208      	movs	r2, #8
 8002350:	611a      	str	r2, [r3, #16]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
<<<<<<< HEAD
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f912 	bl	800270c <HAL_CAN_RxFifo1FullCallback>
=======
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f912 	bl	800257c <HAL_CAN_RxFifo1FullCallback>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
<<<<<<< HEAD
 80024e8:	6a3b      	ldr	r3, [r7, #32]
 80024ea:	f003 0310 	and.w	r3, r3, #16
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d009      	beq.n	8002506 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <HAL_CAN_IRQHandler+0x208>
=======
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	f003 0310 	and.w	r3, r3, #16
 800235e:	2b00      	cmp	r3, #0
 8002360:	d009      	beq.n	8002376 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <HAL_CAN_IRQHandler+0x208>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
<<<<<<< HEAD
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f8f9 	bl	80026f8 <HAL_CAN_RxFifo1MsgPendingCallback>
=======
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f8f9 	bl	8002568 <HAL_CAN_RxFifo1MsgPendingCallback>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
<<<<<<< HEAD
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00b      	beq.n	8002528 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f003 0310 	and.w	r3, r3, #16
 8002516:	2b00      	cmp	r3, #0
 8002518:	d006      	beq.n	8002528 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2210      	movs	r2, #16
 8002520:	605a      	str	r2, [r3, #4]
=======
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00b      	beq.n	8002398 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	2b00      	cmp	r3, #0
 8002388:	d006      	beq.n	8002398 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2210      	movs	r2, #16
 8002390:	605a      	str	r2, [r3, #4]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
<<<<<<< HEAD
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f8fc 	bl	8002720 <HAL_CAN_SleepCallback>
=======
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f8fc 	bl	8002590 <HAL_CAN_SleepCallback>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
<<<<<<< HEAD
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00b      	beq.n	800254a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d006      	beq.n	800254a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2208      	movs	r2, #8
 8002542:	605a      	str	r2, [r3, #4]
=======
 8002398:	6a3b      	ldr	r3, [r7, #32]
 800239a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00b      	beq.n	80023ba <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d006      	beq.n	80023ba <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2208      	movs	r2, #8
 80023b2:	605a      	str	r2, [r3, #4]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
<<<<<<< HEAD
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f8f5 	bl	8002734 <HAL_CAN_WakeUpFromRxMsgCallback>
=======
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f8f5 	bl	80025a4 <HAL_CAN_WakeUpFromRxMsgCallback>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
<<<<<<< HEAD
 800254a:	6a3b      	ldr	r3, [r7, #32]
 800254c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d07b      	beq.n	800264c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	2b00      	cmp	r3, #0
 800255c:	d072      	beq.n	8002644 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002564:	2b00      	cmp	r3, #0
 8002566:	d008      	beq.n	800257a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
=======
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d07b      	beq.n	80024bc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d072      	beq.n	80024b4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
<<<<<<< HEAD
 800257a:	6a3b      	ldr	r3, [r7, #32]
 800257c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002580:	2b00      	cmp	r3, #0
 8002582:	d008      	beq.n	8002596 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	f043 0302 	orr.w	r3, r3, #2
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
=======
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	f043 0302 	orr.w	r3, r3, #2
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
<<<<<<< HEAD
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	f043 0304 	orr.w	r3, r3, #4
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800240c:	2b00      	cmp	r3, #0
 800240e:	d008      	beq.n	8002422 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	f043 0304 	orr.w	r3, r3, #4
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
<<<<<<< HEAD
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d043      	beq.n	8002644 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d03e      	beq.n	8002644 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025cc:	2b60      	cmp	r3, #96	; 0x60
 80025ce:	d02b      	beq.n	8002628 <HAL_CAN_IRQHandler+0x32a>
 80025d0:	2b60      	cmp	r3, #96	; 0x60
 80025d2:	d82e      	bhi.n	8002632 <HAL_CAN_IRQHandler+0x334>
 80025d4:	2b50      	cmp	r3, #80	; 0x50
 80025d6:	d022      	beq.n	800261e <HAL_CAN_IRQHandler+0x320>
 80025d8:	2b50      	cmp	r3, #80	; 0x50
 80025da:	d82a      	bhi.n	8002632 <HAL_CAN_IRQHandler+0x334>
 80025dc:	2b40      	cmp	r3, #64	; 0x40
 80025de:	d019      	beq.n	8002614 <HAL_CAN_IRQHandler+0x316>
 80025e0:	2b40      	cmp	r3, #64	; 0x40
 80025e2:	d826      	bhi.n	8002632 <HAL_CAN_IRQHandler+0x334>
 80025e4:	2b30      	cmp	r3, #48	; 0x30
 80025e6:	d010      	beq.n	800260a <HAL_CAN_IRQHandler+0x30c>
 80025e8:	2b30      	cmp	r3, #48	; 0x30
 80025ea:	d822      	bhi.n	8002632 <HAL_CAN_IRQHandler+0x334>
 80025ec:	2b10      	cmp	r3, #16
 80025ee:	d002      	beq.n	80025f6 <HAL_CAN_IRQHandler+0x2f8>
 80025f0:	2b20      	cmp	r3, #32
 80025f2:	d005      	beq.n	8002600 <HAL_CAN_IRQHandler+0x302>
=======
 8002422:	6a3b      	ldr	r3, [r7, #32]
 8002424:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002428:	2b00      	cmp	r3, #0
 800242a:	d043      	beq.n	80024b4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002432:	2b00      	cmp	r3, #0
 8002434:	d03e      	beq.n	80024b4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800243c:	2b60      	cmp	r3, #96	; 0x60
 800243e:	d02b      	beq.n	8002498 <HAL_CAN_IRQHandler+0x32a>
 8002440:	2b60      	cmp	r3, #96	; 0x60
 8002442:	d82e      	bhi.n	80024a2 <HAL_CAN_IRQHandler+0x334>
 8002444:	2b50      	cmp	r3, #80	; 0x50
 8002446:	d022      	beq.n	800248e <HAL_CAN_IRQHandler+0x320>
 8002448:	2b50      	cmp	r3, #80	; 0x50
 800244a:	d82a      	bhi.n	80024a2 <HAL_CAN_IRQHandler+0x334>
 800244c:	2b40      	cmp	r3, #64	; 0x40
 800244e:	d019      	beq.n	8002484 <HAL_CAN_IRQHandler+0x316>
 8002450:	2b40      	cmp	r3, #64	; 0x40
 8002452:	d826      	bhi.n	80024a2 <HAL_CAN_IRQHandler+0x334>
 8002454:	2b30      	cmp	r3, #48	; 0x30
 8002456:	d010      	beq.n	800247a <HAL_CAN_IRQHandler+0x30c>
 8002458:	2b30      	cmp	r3, #48	; 0x30
 800245a:	d822      	bhi.n	80024a2 <HAL_CAN_IRQHandler+0x334>
 800245c:	2b10      	cmp	r3, #16
 800245e:	d002      	beq.n	8002466 <HAL_CAN_IRQHandler+0x2f8>
 8002460:	2b20      	cmp	r3, #32
 8002462:	d005      	beq.n	8002470 <HAL_CAN_IRQHandler+0x302>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
<<<<<<< HEAD
 80025f4:	e01d      	b.n	8002632 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	f043 0308 	orr.w	r3, r3, #8
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025fe:	e019      	b.n	8002634 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	f043 0310 	orr.w	r3, r3, #16
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002608:	e014      	b.n	8002634 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	f043 0320 	orr.w	r3, r3, #32
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002612:	e00f      	b.n	8002634 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800261a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800261c:	e00a      	b.n	8002634 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002626:	e005      	b.n	8002634 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002630:	e000      	b.n	8002634 <HAL_CAN_IRQHandler+0x336>
            break;
 8002632:	bf00      	nop
=======
 8002464:	e01d      	b.n	80024a2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	f043 0308 	orr.w	r3, r3, #8
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800246e:	e019      	b.n	80024a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	f043 0310 	orr.w	r3, r3, #16
 8002476:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002478:	e014      	b.n	80024a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	f043 0320 	orr.w	r3, r3, #32
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002482:	e00f      	b.n	80024a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800248c:	e00a      	b.n	80024a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002496:	e005      	b.n	80024a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024a0:	e000      	b.n	80024a4 <HAL_CAN_IRQHandler+0x336>
            break;
 80024a2:	bf00      	nop
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
<<<<<<< HEAD
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699a      	ldr	r2, [r3, #24]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002642:	619a      	str	r2, [r3, #24]
=======
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	699a      	ldr	r2, [r3, #24]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80024b2:	619a      	str	r2, [r3, #24]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
<<<<<<< HEAD
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2204      	movs	r2, #4
 800264a:	605a      	str	r2, [r3, #4]
=======
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2204      	movs	r2, #4
 80024ba:	605a      	str	r2, [r3, #4]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
<<<<<<< HEAD
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	2b00      	cmp	r3, #0
 8002650:	d008      	beq.n	8002664 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	431a      	orrs	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	625a      	str	r2, [r3, #36]	; 0x24
=======
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d008      	beq.n	80024d4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	431a      	orrs	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	625a      	str	r2, [r3, #36]	; 0x24
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
<<<<<<< HEAD
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f872 	bl	8002748 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002664:	bf00      	nop
 8002666:	3728      	adds	r7, #40	; 0x28
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_CAN_TxMailbox0CompleteCallback>:
=======
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f872 	bl	80025b8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80024d4:	bf00      	nop
 80024d6:	3728      	adds	r7, #40	; 0x28
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_CAN_TxMailbox0CompleteCallback>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
=======
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_CAN_TxMailbox1CompleteCallback>:
=======
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_CAN_TxMailbox1CompleteCallback>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
=======
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_CAN_TxMailbox2CompleteCallback>:
=======
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_CAN_TxMailbox2CompleteCallback>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
=======
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_CAN_TxMailbox0AbortCallback>:
=======
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_CAN_TxMailbox0AbortCallback>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
=======
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_CAN_TxMailbox1AbortCallback>:
=======
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_CAN_TxMailbox1AbortCallback>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
=======
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_CAN_TxMailbox2AbortCallback>:
=======
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_CAN_TxMailbox2AbortCallback>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
=======
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_CAN_RxFifo0FullCallback>:
=======
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_CAN_RxFifo0FullCallback>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
=======
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
<<<<<<< HEAD
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_CAN_RxFifo1MsgPendingCallback>:
=======
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_CAN_RxFifo1MsgPendingCallback>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
=======
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_CAN_RxFifo1FullCallback>:
=======
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_CAN_RxFifo1FullCallback>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
=======
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
<<<<<<< HEAD
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_CAN_SleepCallback>:
=======
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_CAN_SleepCallback>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
=======
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <HAL_CAN_WakeUpFromRxMsgCallback>:
=======
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_CAN_WakeUpFromRxMsgCallback>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
=======
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <HAL_CAN_ErrorCallback>:
=======
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_CAN_ErrorCallback>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
=======
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <__NVIC_SetPriorityGrouping>:
=======
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <__NVIC_SetPriorityGrouping>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800276c:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <__NVIC_SetPriorityGrouping+0x44>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002778:	4013      	ands	r3, r2
 800277a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002784:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800278c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800278e:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	60d3      	str	r3, [r2, #12]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <__NVIC_GetPriorityGrouping>:
=======
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <__NVIC_SetPriorityGrouping+0x44>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025e8:	4013      	ands	r3, r2
 80025ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025fe:	4a04      	ldr	r2, [pc, #16]	; (8002610 <__NVIC_SetPriorityGrouping+0x44>)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	60d3      	str	r3, [r2, #12]
}
 8002604:	bf00      	nop
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <__NVIC_GetPriorityGrouping>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027a8:	4b04      	ldr	r3, [pc, #16]	; (80027bc <__NVIC_GetPriorityGrouping+0x18>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	0a1b      	lsrs	r3, r3, #8
 80027ae:	f003 0307 	and.w	r3, r3, #7
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	e000ed00 	.word	0xe000ed00

080027c0 <__NVIC_EnableIRQ>:
=======
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002618:	4b04      	ldr	r3, [pc, #16]	; (800262c <__NVIC_GetPriorityGrouping+0x18>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	0a1b      	lsrs	r3, r3, #8
 800261e:	f003 0307 	and.w	r3, r3, #7
}
 8002622:	4618      	mov	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <__NVIC_EnableIRQ>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	db0b      	blt.n	80027ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	f003 021f 	and.w	r2, r3, #31
 80027d8:	4907      	ldr	r1, [pc, #28]	; (80027f8 <__NVIC_EnableIRQ+0x38>)
 80027da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	2001      	movs	r0, #1
 80027e2:	fa00 f202 	lsl.w	r2, r0, r2
 80027e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	e000e100 	.word	0xe000e100

080027fc <__NVIC_SetPriority>:
=======
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	2b00      	cmp	r3, #0
 8002640:	db0b      	blt.n	800265a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	f003 021f 	and.w	r2, r3, #31
 8002648:	4907      	ldr	r1, [pc, #28]	; (8002668 <__NVIC_EnableIRQ+0x38>)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	2001      	movs	r0, #1
 8002652:	fa00 f202 	lsl.w	r2, r0, r2
 8002656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	e000e100 	.word	0xe000e100

0800266c <__NVIC_SetPriority>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	6039      	str	r1, [r7, #0]
 8002806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280c:	2b00      	cmp	r3, #0
 800280e:	db0a      	blt.n	8002826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	b2da      	uxtb	r2, r3
 8002814:	490c      	ldr	r1, [pc, #48]	; (8002848 <__NVIC_SetPriority+0x4c>)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	0112      	lsls	r2, r2, #4
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	440b      	add	r3, r1
 8002820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	6039      	str	r1, [r7, #0]
 8002676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267c:	2b00      	cmp	r3, #0
 800267e:	db0a      	blt.n	8002696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	b2da      	uxtb	r2, r3
 8002684:	490c      	ldr	r1, [pc, #48]	; (80026b8 <__NVIC_SetPriority+0x4c>)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	0112      	lsls	r2, r2, #4
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	440b      	add	r3, r1
 8002690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8002824:	e00a      	b.n	800283c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4908      	ldr	r1, [pc, #32]	; (800284c <__NVIC_SetPriority+0x50>)
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	3b04      	subs	r3, #4
 8002834:	0112      	lsls	r2, r2, #4
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	440b      	add	r3, r1
 800283a:	761a      	strb	r2, [r3, #24]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	e000e100 	.word	0xe000e100
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <NVIC_EncodePriority>:
=======
 8002694:	e00a      	b.n	80026ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	b2da      	uxtb	r2, r3
 800269a:	4908      	ldr	r1, [pc, #32]	; (80026bc <__NVIC_SetPriority+0x50>)
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	3b04      	subs	r3, #4
 80026a4:	0112      	lsls	r2, r2, #4
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	440b      	add	r3, r1
 80026aa:	761a      	strb	r2, [r3, #24]
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	e000e100 	.word	0xe000e100
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <NVIC_EncodePriority>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8002850:	b480      	push	{r7}
 8002852:	b089      	sub	sp, #36	; 0x24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	61fb      	str	r3, [r7, #28]
=======
 80026c0:	b480      	push	{r7}
 80026c2:	b089      	sub	sp, #36	; 0x24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	61fb      	str	r3, [r7, #28]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f1c3 0307 	rsb	r3, r3, #7
 800286a:	2b04      	cmp	r3, #4
 800286c:	bf28      	it	cs
 800286e:	2304      	movcs	r3, #4
 8002870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3304      	adds	r3, #4
 8002876:	2b06      	cmp	r3, #6
 8002878:	d902      	bls.n	8002880 <NVIC_EncodePriority+0x30>
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3b03      	subs	r3, #3
 800287e:	e000      	b.n	8002882 <NVIC_EncodePriority+0x32>
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002884:	f04f 32ff 	mov.w	r2, #4294967295
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43da      	mvns	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	401a      	ands	r2, r3
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002898:	f04f 31ff 	mov.w	r1, #4294967295
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	fa01 f303 	lsl.w	r3, r1, r3
 80028a2:	43d9      	mvns	r1, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a8:	4313      	orrs	r3, r2
         );
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3724      	adds	r7, #36	; 0x24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
	...

080028b8 <SysTick_Config>:
=======
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f1c3 0307 	rsb	r3, r3, #7
 80026da:	2b04      	cmp	r3, #4
 80026dc:	bf28      	it	cs
 80026de:	2304      	movcs	r3, #4
 80026e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3304      	adds	r3, #4
 80026e6:	2b06      	cmp	r3, #6
 80026e8:	d902      	bls.n	80026f0 <NVIC_EncodePriority+0x30>
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3b03      	subs	r3, #3
 80026ee:	e000      	b.n	80026f2 <NVIC_EncodePriority+0x32>
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f4:	f04f 32ff 	mov.w	r2, #4294967295
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43da      	mvns	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	401a      	ands	r2, r3
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002708:	f04f 31ff 	mov.w	r1, #4294967295
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	43d9      	mvns	r1, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002718:	4313      	orrs	r3, r2
         );
}
 800271a:	4618      	mov	r0, r3
 800271c:	3724      	adds	r7, #36	; 0x24
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
	...

08002728 <SysTick_Config>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028c8:	d301      	bcc.n	80028ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ca:	2301      	movs	r3, #1
 80028cc:	e00f      	b.n	80028ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ce:	4a0a      	ldr	r2, [pc, #40]	; (80028f8 <SysTick_Config+0x40>)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028d6:	210f      	movs	r1, #15
 80028d8:	f04f 30ff 	mov.w	r0, #4294967295
 80028dc:	f7ff ff8e 	bl	80027fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <SysTick_Config+0x40>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028e6:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <SysTick_Config+0x40>)
 80028e8:	2207      	movs	r2, #7
 80028ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	e000e010 	.word	0xe000e010

080028fc <HAL_NVIC_SetPriorityGrouping>:
=======
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3b01      	subs	r3, #1
 8002734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002738:	d301      	bcc.n	800273e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800273a:	2301      	movs	r3, #1
 800273c:	e00f      	b.n	800275e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800273e:	4a0a      	ldr	r2, [pc, #40]	; (8002768 <SysTick_Config+0x40>)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3b01      	subs	r3, #1
 8002744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002746:	210f      	movs	r1, #15
 8002748:	f04f 30ff 	mov.w	r0, #4294967295
 800274c:	f7ff ff8e 	bl	800266c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002750:	4b05      	ldr	r3, [pc, #20]	; (8002768 <SysTick_Config+0x40>)
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002756:	4b04      	ldr	r3, [pc, #16]	; (8002768 <SysTick_Config+0x40>)
 8002758:	2207      	movs	r2, #7
 800275a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	e000e010 	.word	0xe000e010

0800276c <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
=======
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ff29 	bl	800275c <__NVIC_SetPriorityGrouping>
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_NVIC_SetPriority>:
=======
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff ff29 	bl	80025cc <__NVIC_SetPriorityGrouping>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_NVIC_SetPriority>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 8002912:	b580      	push	{r7, lr}
 8002914:	b086      	sub	sp, #24
 8002916:	af00      	add	r7, sp, #0
 8002918:	4603      	mov	r3, r0
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	607a      	str	r2, [r7, #4]
 800291e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]
=======
 8002782:	b580      	push	{r7, lr}
 8002784:	b086      	sub	sp, #24
 8002786:	af00      	add	r7, sp, #0
 8002788:	4603      	mov	r3, r0
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
 800278e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8002924:	f7ff ff3e 	bl	80027a4 <__NVIC_GetPriorityGrouping>
 8002928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	6978      	ldr	r0, [r7, #20]
 8002930:	f7ff ff8e 	bl	8002850 <NVIC_EncodePriority>
 8002934:	4602      	mov	r2, r0
 8002936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff5d 	bl	80027fc <__NVIC_SetPriority>
}
 8002942:	bf00      	nop
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_NVIC_EnableIRQ>:
=======
 8002794:	f7ff ff3e 	bl	8002614 <__NVIC_GetPriorityGrouping>
 8002798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	68b9      	ldr	r1, [r7, #8]
 800279e:	6978      	ldr	r0, [r7, #20]
 80027a0:	f7ff ff8e 	bl	80026c0 <NVIC_EncodePriority>
 80027a4:	4602      	mov	r2, r0
 80027a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027aa:	4611      	mov	r1, r2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ff5d 	bl	800266c <__NVIC_SetPriority>
}
 80027b2:	bf00      	nop
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_NVIC_EnableIRQ>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	4603      	mov	r3, r0
 8002952:	71fb      	strb	r3, [r7, #7]
=======
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	4603      	mov	r3, r0
 80027c2:	71fb      	strb	r3, [r7, #7]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8002954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff31 	bl	80027c0 <__NVIC_EnableIRQ>
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_SYSTICK_Config>:
=======
 80027c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff ff31 	bl	8002630 <__NVIC_EnableIRQ>
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_SYSTICK_Config>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7ff ffa2 	bl	80028b8 <SysTick_Config>
 8002974:	4603      	mov	r3, r0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <HAL_GPIO_Init>:
=======
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff ffa2 	bl	8002728 <SysTick_Config>
 80027e4:	4603      	mov	r3, r0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <HAL_GPIO_Init>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8002980:	b480      	push	{r7}
 8002982:	b089      	sub	sp, #36	; 0x24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800298e:	2300      	movs	r3, #0
 8002990:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002992:	2300      	movs	r3, #0
 8002994:	61bb      	str	r3, [r7, #24]
=======
 80027f0:	b480      	push	{r7}
 80027f2:	b089      	sub	sp, #36	; 0x24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027fe:	2300      	movs	r3, #0
 8002800:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002802:	2300      	movs	r3, #0
 8002804:	61bb      	str	r3, [r7, #24]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]
 800299a:	e16b      	b.n	8002c74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800299c:	2201      	movs	r2, #1
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	4013      	ands	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	f040 815a 	bne.w	8002c6e <HAL_GPIO_Init+0x2ee>
=======
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
 800280a:	e16b      	b.n	8002ae4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800280c:	2201      	movs	r2, #1
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	4013      	ands	r3, r2
 800281e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	429a      	cmp	r2, r3
 8002826:	f040 815a 	bne.w	8002ade <HAL_GPIO_Init+0x2ee>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
<<<<<<< HEAD
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d005      	beq.n	80029d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d130      	bne.n	8002a34 <HAL_GPIO_Init+0xb4>
=======
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	2b01      	cmp	r3, #1
 8002834:	d005      	beq.n	8002842 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800283e:	2b02      	cmp	r3, #2
 8002840:	d130      	bne.n	80028a4 <HAL_GPIO_Init+0xb4>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< HEAD
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	2203      	movs	r2, #3
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4013      	ands	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a08:	2201      	movs	r2, #1
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	091b      	lsrs	r3, r3, #4
 8002a1e:	f003 0201 	and.w	r2, r3, #1
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 0303 	and.w	r3, r3, #3
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	d017      	beq.n	8002a70 <HAL_GPIO_Init+0xf0>
=======
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	2203      	movs	r2, #3
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4013      	ands	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002878:	2201      	movs	r2, #1
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	091b      	lsrs	r3, r3, #4
 800288e:	f003 0201 	and.w	r2, r3, #1
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	2b03      	cmp	r3, #3
 80028ae:	d017      	beq.n	80028e0 <HAL_GPIO_Init+0xf0>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< HEAD
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	60da      	str	r2, [r3, #12]
=======
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	2203      	movs	r2, #3
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	60da      	str	r2, [r3, #12]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 0303 	and.w	r3, r3, #3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d123      	bne.n	8002ac4 <HAL_GPIO_Init+0x144>
=======
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d123      	bne.n	8002934 <HAL_GPIO_Init+0x144>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	08da      	lsrs	r2, r3, #3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3208      	adds	r2, #8
 8002a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	220f      	movs	r2, #15
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	691a      	ldr	r2, [r3, #16]
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	08da      	lsrs	r2, r3, #3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3208      	adds	r2, #8
 8002abe:	69b9      	ldr	r1, [r7, #24]
 8002ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	08da      	lsrs	r2, r3, #3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3208      	adds	r2, #8
 80028f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	220f      	movs	r2, #15
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	08da      	lsrs	r2, r3, #3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3208      	adds	r2, #8
 800292e:	69b9      	ldr	r1, [r7, #24]
 8002930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	2203      	movs	r2, #3
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 0203 	and.w	r2, r3, #3
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	601a      	str	r2, [r3, #0]
=======
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	2203      	movs	r2, #3
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 0203 	and.w	r2, r3, #3
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	601a      	str	r2, [r3, #0]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
<<<<<<< HEAD
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 80b4 	beq.w	8002c6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	4b60      	ldr	r3, [pc, #384]	; (8002c8c <HAL_GPIO_Init+0x30c>)
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0e:	4a5f      	ldr	r2, [pc, #380]	; (8002c8c <HAL_GPIO_Init+0x30c>)
 8002b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b14:	6453      	str	r3, [r2, #68]	; 0x44
 8002b16:	4b5d      	ldr	r3, [pc, #372]	; (8002c8c <HAL_GPIO_Init+0x30c>)
 8002b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b22:	4a5b      	ldr	r2, [pc, #364]	; (8002c90 <HAL_GPIO_Init+0x310>)
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	089b      	lsrs	r3, r3, #2
 8002b28:	3302      	adds	r3, #2
 8002b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	220f      	movs	r2, #15
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4013      	ands	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a52      	ldr	r2, [pc, #328]	; (8002c94 <HAL_GPIO_Init+0x314>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d02b      	beq.n	8002ba6 <HAL_GPIO_Init+0x226>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a51      	ldr	r2, [pc, #324]	; (8002c98 <HAL_GPIO_Init+0x318>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d025      	beq.n	8002ba2 <HAL_GPIO_Init+0x222>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a50      	ldr	r2, [pc, #320]	; (8002c9c <HAL_GPIO_Init+0x31c>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d01f      	beq.n	8002b9e <HAL_GPIO_Init+0x21e>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a4f      	ldr	r2, [pc, #316]	; (8002ca0 <HAL_GPIO_Init+0x320>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d019      	beq.n	8002b9a <HAL_GPIO_Init+0x21a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a4e      	ldr	r2, [pc, #312]	; (8002ca4 <HAL_GPIO_Init+0x324>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d013      	beq.n	8002b96 <HAL_GPIO_Init+0x216>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a4d      	ldr	r2, [pc, #308]	; (8002ca8 <HAL_GPIO_Init+0x328>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d00d      	beq.n	8002b92 <HAL_GPIO_Init+0x212>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a4c      	ldr	r2, [pc, #304]	; (8002cac <HAL_GPIO_Init+0x32c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d007      	beq.n	8002b8e <HAL_GPIO_Init+0x20e>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a4b      	ldr	r2, [pc, #300]	; (8002cb0 <HAL_GPIO_Init+0x330>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d101      	bne.n	8002b8a <HAL_GPIO_Init+0x20a>
 8002b86:	2307      	movs	r3, #7
 8002b88:	e00e      	b.n	8002ba8 <HAL_GPIO_Init+0x228>
 8002b8a:	2308      	movs	r3, #8
 8002b8c:	e00c      	b.n	8002ba8 <HAL_GPIO_Init+0x228>
 8002b8e:	2306      	movs	r3, #6
 8002b90:	e00a      	b.n	8002ba8 <HAL_GPIO_Init+0x228>
 8002b92:	2305      	movs	r3, #5
 8002b94:	e008      	b.n	8002ba8 <HAL_GPIO_Init+0x228>
 8002b96:	2304      	movs	r3, #4
 8002b98:	e006      	b.n	8002ba8 <HAL_GPIO_Init+0x228>
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e004      	b.n	8002ba8 <HAL_GPIO_Init+0x228>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e002      	b.n	8002ba8 <HAL_GPIO_Init+0x228>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <HAL_GPIO_Init+0x228>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	69fa      	ldr	r2, [r7, #28]
 8002baa:	f002 0203 	and.w	r2, r2, #3
 8002bae:	0092      	lsls	r2, r2, #2
 8002bb0:	4093      	lsls	r3, r2
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bb8:	4935      	ldr	r1, [pc, #212]	; (8002c90 <HAL_GPIO_Init+0x310>)
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	089b      	lsrs	r3, r3, #2
 8002bbe:	3302      	adds	r3, #2
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bc6:	4b3b      	ldr	r3, [pc, #236]	; (8002cb4 <HAL_GPIO_Init+0x334>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bea:	4a32      	ldr	r2, [pc, #200]	; (8002cb4 <HAL_GPIO_Init+0x334>)
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bf0:	4b30      	ldr	r3, [pc, #192]	; (8002cb4 <HAL_GPIO_Init+0x334>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c14:	4a27      	ldr	r2, [pc, #156]	; (8002cb4 <HAL_GPIO_Init+0x334>)
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c1a:	4b26      	ldr	r3, [pc, #152]	; (8002cb4 <HAL_GPIO_Init+0x334>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	43db      	mvns	r3, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4013      	ands	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c3e:	4a1d      	ldr	r2, [pc, #116]	; (8002cb4 <HAL_GPIO_Init+0x334>)
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c44:	4b1b      	ldr	r3, [pc, #108]	; (8002cb4 <HAL_GPIO_Init+0x334>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4013      	ands	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c68:	4a12      	ldr	r2, [pc, #72]	; (8002cb4 <HAL_GPIO_Init+0x334>)
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	3301      	adds	r3, #1
 8002c72:	61fb      	str	r3, [r7, #28]
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	2b0f      	cmp	r3, #15
 8002c78:	f67f ae90 	bls.w	800299c <HAL_GPIO_Init+0x1c>
=======
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 80b4 	beq.w	8002ade <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	4b60      	ldr	r3, [pc, #384]	; (8002afc <HAL_GPIO_Init+0x30c>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	4a5f      	ldr	r2, [pc, #380]	; (8002afc <HAL_GPIO_Init+0x30c>)
 8002980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002984:	6453      	str	r3, [r2, #68]	; 0x44
 8002986:	4b5d      	ldr	r3, [pc, #372]	; (8002afc <HAL_GPIO_Init+0x30c>)
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002992:	4a5b      	ldr	r2, [pc, #364]	; (8002b00 <HAL_GPIO_Init+0x310>)
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	089b      	lsrs	r3, r3, #2
 8002998:	3302      	adds	r3, #2
 800299a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	220f      	movs	r2, #15
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43db      	mvns	r3, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4013      	ands	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a52      	ldr	r2, [pc, #328]	; (8002b04 <HAL_GPIO_Init+0x314>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d02b      	beq.n	8002a16 <HAL_GPIO_Init+0x226>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a51      	ldr	r2, [pc, #324]	; (8002b08 <HAL_GPIO_Init+0x318>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d025      	beq.n	8002a12 <HAL_GPIO_Init+0x222>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a50      	ldr	r2, [pc, #320]	; (8002b0c <HAL_GPIO_Init+0x31c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d01f      	beq.n	8002a0e <HAL_GPIO_Init+0x21e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a4f      	ldr	r2, [pc, #316]	; (8002b10 <HAL_GPIO_Init+0x320>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d019      	beq.n	8002a0a <HAL_GPIO_Init+0x21a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a4e      	ldr	r2, [pc, #312]	; (8002b14 <HAL_GPIO_Init+0x324>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d013      	beq.n	8002a06 <HAL_GPIO_Init+0x216>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a4d      	ldr	r2, [pc, #308]	; (8002b18 <HAL_GPIO_Init+0x328>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00d      	beq.n	8002a02 <HAL_GPIO_Init+0x212>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a4c      	ldr	r2, [pc, #304]	; (8002b1c <HAL_GPIO_Init+0x32c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d007      	beq.n	80029fe <HAL_GPIO_Init+0x20e>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a4b      	ldr	r2, [pc, #300]	; (8002b20 <HAL_GPIO_Init+0x330>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d101      	bne.n	80029fa <HAL_GPIO_Init+0x20a>
 80029f6:	2307      	movs	r3, #7
 80029f8:	e00e      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 80029fa:	2308      	movs	r3, #8
 80029fc:	e00c      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 80029fe:	2306      	movs	r3, #6
 8002a00:	e00a      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 8002a02:	2305      	movs	r3, #5
 8002a04:	e008      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 8002a06:	2304      	movs	r3, #4
 8002a08:	e006      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e004      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e002      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 8002a12:	2301      	movs	r3, #1
 8002a14:	e000      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 8002a16:	2300      	movs	r3, #0
 8002a18:	69fa      	ldr	r2, [r7, #28]
 8002a1a:	f002 0203 	and.w	r2, r2, #3
 8002a1e:	0092      	lsls	r2, r2, #2
 8002a20:	4093      	lsls	r3, r2
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a28:	4935      	ldr	r1, [pc, #212]	; (8002b00 <HAL_GPIO_Init+0x310>)
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	089b      	lsrs	r3, r3, #2
 8002a2e:	3302      	adds	r3, #2
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a36:	4b3b      	ldr	r3, [pc, #236]	; (8002b24 <HAL_GPIO_Init+0x334>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4013      	ands	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a5a:	4a32      	ldr	r2, [pc, #200]	; (8002b24 <HAL_GPIO_Init+0x334>)
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a60:	4b30      	ldr	r3, [pc, #192]	; (8002b24 <HAL_GPIO_Init+0x334>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a84:	4a27      	ldr	r2, [pc, #156]	; (8002b24 <HAL_GPIO_Init+0x334>)
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a8a:	4b26      	ldr	r3, [pc, #152]	; (8002b24 <HAL_GPIO_Init+0x334>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	43db      	mvns	r3, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4013      	ands	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aae:	4a1d      	ldr	r2, [pc, #116]	; (8002b24 <HAL_GPIO_Init+0x334>)
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ab4:	4b1b      	ldr	r3, [pc, #108]	; (8002b24 <HAL_GPIO_Init+0x334>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ad8:	4a12      	ldr	r2, [pc, #72]	; (8002b24 <HAL_GPIO_Init+0x334>)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	61fb      	str	r3, [r7, #28]
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	2b0f      	cmp	r3, #15
 8002ae8:	f67f ae90 	bls.w	800280c <HAL_GPIO_Init+0x1c>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      }
    }
  }
}
<<<<<<< HEAD
 8002c7c:	bf00      	nop
 8002c7e:	bf00      	nop
 8002c80:	3724      	adds	r7, #36	; 0x24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40013800 	.word	0x40013800
 8002c94:	40020000 	.word	0x40020000
 8002c98:	40020400 	.word	0x40020400
 8002c9c:	40020800 	.word	0x40020800
 8002ca0:	40020c00 	.word	0x40020c00
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	40021400 	.word	0x40021400
 8002cac:	40021800 	.word	0x40021800
 8002cb0:	40021c00 	.word	0x40021c00
 8002cb4:	40013c00 	.word	0x40013c00

08002cb8 <HAL_GPIO_WritePin>:
=======
 8002aec:	bf00      	nop
 8002aee:	bf00      	nop
 8002af0:	3724      	adds	r7, #36	; 0x24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40013800 	.word	0x40013800
 8002b04:	40020000 	.word	0x40020000
 8002b08:	40020400 	.word	0x40020400
 8002b0c:	40020800 	.word	0x40020800
 8002b10:	40020c00 	.word	0x40020c00
 8002b14:	40021000 	.word	0x40021000
 8002b18:	40021400 	.word	0x40021400
 8002b1c:	40021800 	.word	0x40021800
 8002b20:	40021c00 	.word	0x40021c00
 8002b24:	40013c00 	.word	0x40013c00

08002b28 <HAL_GPIO_WritePin>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	807b      	strh	r3, [r7, #2]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	707b      	strb	r3, [r7, #1]
=======
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	807b      	strh	r3, [r7, #2]
 8002b34:	4613      	mov	r3, r2
 8002b36:	707b      	strb	r3, [r7, #1]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8002cc8:	787b      	ldrb	r3, [r7, #1]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cce:	887a      	ldrh	r2, [r7, #2]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	619a      	str	r2, [r3, #24]
=======
 8002b38:	787b      	ldrb	r3, [r7, #1]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b3e:	887a      	ldrh	r2, [r7, #2]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	619a      	str	r2, [r3, #24]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< HEAD
 8002cd4:	e003      	b.n	8002cde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cd6:	887b      	ldrh	r3, [r7, #2]
 8002cd8:	041a      	lsls	r2, r3, #16
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	619a      	str	r2, [r3, #24]
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b085      	sub	sp, #20
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cfc:	887a      	ldrh	r2, [r7, #2]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	4013      	ands	r3, r2
 8002d02:	041a      	lsls	r2, r3, #16
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	43d9      	mvns	r1, r3
 8002d08:	887b      	ldrh	r3, [r7, #2]
 8002d0a:	400b      	ands	r3, r1
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	619a      	str	r2, [r3, #24]
}
 8002d12:	bf00      	nop
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
	...

08002d20 <HAL_RCC_OscConfig>:
=======
 8002b44:	e003      	b.n	8002b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b46:	887b      	ldrh	r3, [r7, #2]
 8002b48:	041a      	lsls	r2, r3, #16
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	619a      	str	r2, [r3, #24]
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <HAL_RCC_OscConfig>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
=======
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e267      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
=======
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e267      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d075      	beq.n	8002e2a <HAL_RCC_OscConfig+0x10a>
=======
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d075      	beq.n	8002c66 <HAL_RCC_OscConfig+0x10a>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
<<<<<<< HEAD
 8002d3e:	4b88      	ldr	r3, [pc, #544]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 030c 	and.w	r3, r3, #12
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d00c      	beq.n	8002d64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d4a:	4b85      	ldr	r3, [pc, #532]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d112      	bne.n	8002d7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d56:	4b82      	ldr	r3, [pc, #520]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d62:	d10b      	bne.n	8002d7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d64:	4b7e      	ldr	r3, [pc, #504]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d05b      	beq.n	8002e28 <HAL_RCC_OscConfig+0x108>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d157      	bne.n	8002e28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e242      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
=======
 8002b7a:	4b88      	ldr	r3, [pc, #544]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d00c      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b86:	4b85      	ldr	r3, [pc, #532]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	d112      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b92:	4b82      	ldr	r3, [pc, #520]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b9e:	d10b      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba0:	4b7e      	ldr	r3, [pc, #504]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d05b      	beq.n	8002c64 <HAL_RCC_OscConfig+0x108>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d157      	bne.n	8002c64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e242      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d84:	d106      	bne.n	8002d94 <HAL_RCC_OscConfig+0x74>
 8002d86:	4b76      	ldr	r3, [pc, #472]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a75      	ldr	r2, [pc, #468]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	e01d      	b.n	8002dd0 <HAL_RCC_OscConfig+0xb0>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d9c:	d10c      	bne.n	8002db8 <HAL_RCC_OscConfig+0x98>
 8002d9e:	4b70      	ldr	r3, [pc, #448]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a6f      	ldr	r2, [pc, #444]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	4b6d      	ldr	r3, [pc, #436]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a6c      	ldr	r2, [pc, #432]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	e00b      	b.n	8002dd0 <HAL_RCC_OscConfig+0xb0>
 8002db8:	4b69      	ldr	r3, [pc, #420]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a68      	ldr	r2, [pc, #416]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	4b66      	ldr	r3, [pc, #408]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a65      	ldr	r2, [pc, #404]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d013      	beq.n	8002e00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd8:	f7fe fe2e 	bl	8001a38 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de0:	f7fe fe2a 	bl	8001a38 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b64      	cmp	r3, #100	; 0x64
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e207      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df2:	4b5b      	ldr	r3, [pc, #364]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0xc0>
 8002dfe:	e014      	b.n	8002e2a <HAL_RCC_OscConfig+0x10a>
=======
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc0:	d106      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x74>
 8002bc2:	4b76      	ldr	r3, [pc, #472]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a75      	ldr	r2, [pc, #468]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	e01d      	b.n	8002c0c <HAL_RCC_OscConfig+0xb0>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x98>
 8002bda:	4b70      	ldr	r3, [pc, #448]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a6f      	ldr	r2, [pc, #444]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	4b6d      	ldr	r3, [pc, #436]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a6c      	ldr	r2, [pc, #432]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e00b      	b.n	8002c0c <HAL_RCC_OscConfig+0xb0>
 8002bf4:	4b69      	ldr	r3, [pc, #420]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a68      	ldr	r2, [pc, #416]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	4b66      	ldr	r3, [pc, #408]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a65      	ldr	r2, [pc, #404]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d013      	beq.n	8002c3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7fe fe6c 	bl	80018f0 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c1c:	f7fe fe68 	bl	80018f0 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b64      	cmp	r3, #100	; 0x64
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e207      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2e:	4b5b      	ldr	r3, [pc, #364]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0xc0>
 8002c3a:	e014      	b.n	8002c66 <HAL_RCC_OscConfig+0x10a>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8002e00:	f7fe fe1a 	bl	8001a38 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e08:	f7fe fe16 	bl	8001a38 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b64      	cmp	r3, #100	; 0x64
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e1f3      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e1a:	4b51      	ldr	r3, [pc, #324]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f0      	bne.n	8002e08 <HAL_RCC_OscConfig+0xe8>
 8002e26:	e000      	b.n	8002e2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e28:	bf00      	nop
=======
 8002c3c:	f7fe fe58 	bl	80018f0 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c44:	f7fe fe54 	bl	80018f0 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b64      	cmp	r3, #100	; 0x64
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e1f3      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c56:	4b51      	ldr	r3, [pc, #324]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0xe8>
 8002c62:	e000      	b.n	8002c66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c64:	bf00      	nop
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d063      	beq.n	8002efe <HAL_RCC_OscConfig+0x1de>
=======
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d063      	beq.n	8002d3a <HAL_RCC_OscConfig+0x1de>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
<<<<<<< HEAD
 8002e36:	4b4a      	ldr	r3, [pc, #296]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 030c 	and.w	r3, r3, #12
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00b      	beq.n	8002e5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e42:	4b47      	ldr	r3, [pc, #284]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e4a:	2b08      	cmp	r3, #8
 8002e4c:	d11c      	bne.n	8002e88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e4e:	4b44      	ldr	r3, [pc, #272]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d116      	bne.n	8002e88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e5a:	4b41      	ldr	r3, [pc, #260]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d005      	beq.n	8002e72 <HAL_RCC_OscConfig+0x152>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d001      	beq.n	8002e72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e1c7      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
=======
 8002c72:	4b4a      	ldr	r3, [pc, #296]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00b      	beq.n	8002c96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c7e:	4b47      	ldr	r3, [pc, #284]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d11c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c8a:	4b44      	ldr	r3, [pc, #272]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d116      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c96:	4b41      	ldr	r3, [pc, #260]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d005      	beq.n	8002cae <HAL_RCC_OscConfig+0x152>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d001      	beq.n	8002cae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e1c7      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8002e72:	4b3b      	ldr	r3, [pc, #236]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4937      	ldr	r1, [pc, #220]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e86:	e03a      	b.n	8002efe <HAL_RCC_OscConfig+0x1de>
=======
 8002cae:	4b3b      	ldr	r3, [pc, #236]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4937      	ldr	r1, [pc, #220]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc2:	e03a      	b.n	8002d3a <HAL_RCC_OscConfig+0x1de>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
<<<<<<< HEAD
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d020      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e90:	4b34      	ldr	r3, [pc, #208]	; (8002f64 <HAL_RCC_OscConfig+0x244>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e96:	f7fe fdcf 	bl	8001a38 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e9e:	f7fe fdcb 	bl	8001a38 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e1a8      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb0:	4b2b      	ldr	r3, [pc, #172]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCC_OscConfig+0x17e>
=======
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d020      	beq.n	8002d0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ccc:	4b34      	ldr	r3, [pc, #208]	; (8002da0 <HAL_RCC_OscConfig+0x244>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd2:	f7fe fe0d 	bl	80018f0 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cda:	f7fe fe09 	bl	80018f0 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e1a8      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cec:	4b2b      	ldr	r3, [pc, #172]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCC_OscConfig+0x17e>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8002ebc:	4b28      	ldr	r3, [pc, #160]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	4925      	ldr	r1, [pc, #148]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	600b      	str	r3, [r1, #0]
 8002ed0:	e015      	b.n	8002efe <HAL_RCC_OscConfig+0x1de>
=======
 8002cf8:	4b28      	ldr	r3, [pc, #160]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4925      	ldr	r1, [pc, #148]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	600b      	str	r3, [r1, #0]
 8002d0c:	e015      	b.n	8002d3a <HAL_RCC_OscConfig+0x1de>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8002ed2:	4b24      	ldr	r3, [pc, #144]	; (8002f64 <HAL_RCC_OscConfig+0x244>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed8:	f7fe fdae 	bl	8001a38 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ee0:	f7fe fdaa 	bl	8001a38 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e187      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef2:	4b1b      	ldr	r3, [pc, #108]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f0      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x1c0>
=======
 8002d0e:	4b24      	ldr	r3, [pc, #144]	; (8002da0 <HAL_RCC_OscConfig+0x244>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d14:	f7fe fdec 	bl	80018f0 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d1c:	f7fe fde8 	bl	80018f0 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e187      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2e:	4b1b      	ldr	r3, [pc, #108]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x1c0>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d036      	beq.n	8002f78 <HAL_RCC_OscConfig+0x258>
=======
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d036      	beq.n	8002db4 <HAL_RCC_OscConfig+0x258>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
<<<<<<< HEAD
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d016      	beq.n	8002f40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f12:	4b15      	ldr	r3, [pc, #84]	; (8002f68 <HAL_RCC_OscConfig+0x248>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f18:	f7fe fd8e 	bl	8001a38 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f20:	f7fe fd8a 	bl	8001a38 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e167      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f32:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0f0      	beq.n	8002f20 <HAL_RCC_OscConfig+0x200>
 8002f3e:	e01b      	b.n	8002f78 <HAL_RCC_OscConfig+0x258>
=======
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d016      	beq.n	8002d7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d4e:	4b15      	ldr	r3, [pc, #84]	; (8002da4 <HAL_RCC_OscConfig+0x248>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d54:	f7fe fdcc 	bl	80018f0 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d5c:	f7fe fdc8 	bl	80018f0 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e167      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6e:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0x200>
 8002d7a:	e01b      	b.n	8002db4 <HAL_RCC_OscConfig+0x258>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8002f40:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <HAL_RCC_OscConfig+0x248>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f46:	f7fe fd77 	bl	8001a38 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f4c:	e00e      	b.n	8002f6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f4e:	f7fe fd73 	bl	8001a38 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d907      	bls.n	8002f6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e150      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
 8002f60:	40023800 	.word	0x40023800
 8002f64:	42470000 	.word	0x42470000
 8002f68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f6c:	4b88      	ldr	r3, [pc, #544]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8002f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1ea      	bne.n	8002f4e <HAL_RCC_OscConfig+0x22e>
=======
 8002d7c:	4b09      	ldr	r3, [pc, #36]	; (8002da4 <HAL_RCC_OscConfig+0x248>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d82:	f7fe fdb5 	bl	80018f0 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d88:	e00e      	b.n	8002da8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d8a:	f7fe fdb1 	bl	80018f0 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d907      	bls.n	8002da8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e150      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	42470000 	.word	0x42470000
 8002da4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da8:	4b88      	ldr	r3, [pc, #544]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1ea      	bne.n	8002d8a <HAL_RCC_OscConfig+0x22e>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 8097 	beq.w	80030b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f86:	2300      	movs	r3, #0
 8002f88:	75fb      	strb	r3, [r7, #23]
=======
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 8097 	beq.w	8002ef0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	75fb      	strb	r3, [r7, #23]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 8002f8a:	4b81      	ldr	r3, [pc, #516]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10f      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	60bb      	str	r3, [r7, #8]
 8002f9a:	4b7d      	ldr	r3, [pc, #500]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	4a7c      	ldr	r2, [pc, #496]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8002fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fa6:	4b7a      	ldr	r3, [pc, #488]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fae:	60bb      	str	r3, [r7, #8]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb6:	4b77      	ldr	r3, [pc, #476]	; (8003194 <HAL_RCC_OscConfig+0x474>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d118      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fc2:	4b74      	ldr	r3, [pc, #464]	; (8003194 <HAL_RCC_OscConfig+0x474>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a73      	ldr	r2, [pc, #460]	; (8003194 <HAL_RCC_OscConfig+0x474>)
 8002fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fce:	f7fe fd33 	bl	8001a38 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd6:	f7fe fd2f 	bl	8001a38 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e10c      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe8:	4b6a      	ldr	r3, [pc, #424]	; (8003194 <HAL_RCC_OscConfig+0x474>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0f0      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x2b6>
=======
 8002dc6:	4b81      	ldr	r3, [pc, #516]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10f      	bne.n	8002df2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	4b7d      	ldr	r3, [pc, #500]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	4a7c      	ldr	r2, [pc, #496]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de0:	6413      	str	r3, [r2, #64]	; 0x40
 8002de2:	4b7a      	ldr	r3, [pc, #488]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dee:	2301      	movs	r3, #1
 8002df0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df2:	4b77      	ldr	r3, [pc, #476]	; (8002fd0 <HAL_RCC_OscConfig+0x474>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d118      	bne.n	8002e30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dfe:	4b74      	ldr	r3, [pc, #464]	; (8002fd0 <HAL_RCC_OscConfig+0x474>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a73      	ldr	r2, [pc, #460]	; (8002fd0 <HAL_RCC_OscConfig+0x474>)
 8002e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0a:	f7fe fd71 	bl	80018f0 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e12:	f7fe fd6d 	bl	80018f0 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e10c      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e24:	4b6a      	ldr	r3, [pc, #424]	; (8002fd0 <HAL_RCC_OscConfig+0x474>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_RCC_OscConfig+0x2b6>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d106      	bne.n	800300a <HAL_RCC_OscConfig+0x2ea>
 8002ffc:	4b64      	ldr	r3, [pc, #400]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8002ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003000:	4a63      	ldr	r2, [pc, #396]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8003002:	f043 0301 	orr.w	r3, r3, #1
 8003006:	6713      	str	r3, [r2, #112]	; 0x70
 8003008:	e01c      	b.n	8003044 <HAL_RCC_OscConfig+0x324>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	2b05      	cmp	r3, #5
 8003010:	d10c      	bne.n	800302c <HAL_RCC_OscConfig+0x30c>
 8003012:	4b5f      	ldr	r3, [pc, #380]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8003014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003016:	4a5e      	ldr	r2, [pc, #376]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8003018:	f043 0304 	orr.w	r3, r3, #4
 800301c:	6713      	str	r3, [r2, #112]	; 0x70
 800301e:	4b5c      	ldr	r3, [pc, #368]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003022:	4a5b      	ldr	r2, [pc, #364]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	6713      	str	r3, [r2, #112]	; 0x70
 800302a:	e00b      	b.n	8003044 <HAL_RCC_OscConfig+0x324>
 800302c:	4b58      	ldr	r3, [pc, #352]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 800302e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003030:	4a57      	ldr	r2, [pc, #348]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8003032:	f023 0301 	bic.w	r3, r3, #1
 8003036:	6713      	str	r3, [r2, #112]	; 0x70
 8003038:	4b55      	ldr	r3, [pc, #340]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 800303a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303c:	4a54      	ldr	r2, [pc, #336]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 800303e:	f023 0304 	bic.w	r3, r3, #4
 8003042:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d015      	beq.n	8003078 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304c:	f7fe fcf4 	bl	8001a38 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003052:	e00a      	b.n	800306a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003054:	f7fe fcf0 	bl	8001a38 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003062:	4293      	cmp	r3, r2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e0cb      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306a:	4b49      	ldr	r3, [pc, #292]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 800306c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0ee      	beq.n	8003054 <HAL_RCC_OscConfig+0x334>
 8003076:	e014      	b.n	80030a2 <HAL_RCC_OscConfig+0x382>
=======
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d106      	bne.n	8002e46 <HAL_RCC_OscConfig+0x2ea>
 8002e38:	4b64      	ldr	r3, [pc, #400]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3c:	4a63      	ldr	r2, [pc, #396]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	6713      	str	r3, [r2, #112]	; 0x70
 8002e44:	e01c      	b.n	8002e80 <HAL_RCC_OscConfig+0x324>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2b05      	cmp	r3, #5
 8002e4c:	d10c      	bne.n	8002e68 <HAL_RCC_OscConfig+0x30c>
 8002e4e:	4b5f      	ldr	r3, [pc, #380]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e52:	4a5e      	ldr	r2, [pc, #376]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e54:	f043 0304 	orr.w	r3, r3, #4
 8002e58:	6713      	str	r3, [r2, #112]	; 0x70
 8002e5a:	4b5c      	ldr	r3, [pc, #368]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5e:	4a5b      	ldr	r2, [pc, #364]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	6713      	str	r3, [r2, #112]	; 0x70
 8002e66:	e00b      	b.n	8002e80 <HAL_RCC_OscConfig+0x324>
 8002e68:	4b58      	ldr	r3, [pc, #352]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6c:	4a57      	ldr	r2, [pc, #348]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e6e:	f023 0301 	bic.w	r3, r3, #1
 8002e72:	6713      	str	r3, [r2, #112]	; 0x70
 8002e74:	4b55      	ldr	r3, [pc, #340]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e78:	4a54      	ldr	r2, [pc, #336]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e7a:	f023 0304 	bic.w	r3, r3, #4
 8002e7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d015      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e88:	f7fe fd32 	bl	80018f0 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e90:	f7fe fd2e 	bl	80018f0 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e0cb      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea6:	4b49      	ldr	r3, [pc, #292]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0ee      	beq.n	8002e90 <HAL_RCC_OscConfig+0x334>
 8002eb2:	e014      	b.n	8002ede <HAL_RCC_OscConfig+0x382>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8003078:	f7fe fcde 	bl	8001a38 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307e:	e00a      	b.n	8003096 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003080:	f7fe fcda 	bl	8001a38 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	f241 3288 	movw	r2, #5000	; 0x1388
 800308e:	4293      	cmp	r3, r2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e0b5      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003096:	4b3e      	ldr	r3, [pc, #248]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8003098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1ee      	bne.n	8003080 <HAL_RCC_OscConfig+0x360>
=======
 8002eb4:	f7fe fd1c 	bl	80018f0 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eba:	e00a      	b.n	8002ed2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ebc:	f7fe fd18 	bl	80018f0 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e0b5      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed2:	4b3e      	ldr	r3, [pc, #248]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1ee      	bne.n	8002ebc <HAL_RCC_OscConfig+0x360>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 80030a2:	7dfb      	ldrb	r3, [r7, #23]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d105      	bne.n	80030b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a8:	4b39      	ldr	r3, [pc, #228]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	4a38      	ldr	r2, [pc, #224]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 80030ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b2:	6413      	str	r3, [r2, #64]	; 0x40
=======
 8002ede:	7dfb      	ldrb	r3, [r7, #23]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d105      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee4:	4b39      	ldr	r3, [pc, #228]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	4a38      	ldr	r2, [pc, #224]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002eea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eee:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 80a1 	beq.w	8003200 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030be:	4b34      	ldr	r3, [pc, #208]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 030c 	and.w	r3, r3, #12
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	d05c      	beq.n	8003184 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d141      	bne.n	8003156 <HAL_RCC_OscConfig+0x436>
=======
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 80a1 	beq.w	800303c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002efa:	4b34      	ldr	r3, [pc, #208]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 030c 	and.w	r3, r3, #12
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d05c      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d141      	bne.n	8002f92 <HAL_RCC_OscConfig+0x436>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 80030d2:	4b31      	ldr	r3, [pc, #196]	; (8003198 <HAL_RCC_OscConfig+0x478>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d8:	f7fe fcae 	bl	8001a38 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e0:	f7fe fcaa 	bl	8001a38 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e087      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f2:	4b27      	ldr	r3, [pc, #156]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f0      	bne.n	80030e0 <HAL_RCC_OscConfig+0x3c0>
=======
 8002f0e:	4b31      	ldr	r3, [pc, #196]	; (8002fd4 <HAL_RCC_OscConfig+0x478>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7fe fcec 	bl	80018f0 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f1c:	f7fe fce8 	bl	80018f0 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e087      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2e:	4b27      	ldr	r3, [pc, #156]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x3c0>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< HEAD
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69da      	ldr	r2, [r3, #28]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	019b      	lsls	r3, r3, #6
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003114:	085b      	lsrs	r3, r3, #1
 8003116:	3b01      	subs	r3, #1
 8003118:	041b      	lsls	r3, r3, #16
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	061b      	lsls	r3, r3, #24
 8003122:	491b      	ldr	r1, [pc, #108]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8003124:	4313      	orrs	r3, r2
 8003126:	604b      	str	r3, [r1, #4]
=======
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69da      	ldr	r2, [r3, #28]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	019b      	lsls	r3, r3, #6
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f50:	085b      	lsrs	r3, r3, #1
 8002f52:	3b01      	subs	r3, #1
 8002f54:	041b      	lsls	r3, r3, #16
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5c:	061b      	lsls	r3, r3, #24
 8002f5e:	491b      	ldr	r1, [pc, #108]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	604b      	str	r3, [r1, #4]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 8003128:	4b1b      	ldr	r3, [pc, #108]	; (8003198 <HAL_RCC_OscConfig+0x478>)
 800312a:	2201      	movs	r2, #1
 800312c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312e:	f7fe fc83 	bl	8001a38 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003136:	f7fe fc7f 	bl	8001a38 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e05c      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003148:	4b11      	ldr	r3, [pc, #68]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f0      	beq.n	8003136 <HAL_RCC_OscConfig+0x416>
 8003154:	e054      	b.n	8003200 <HAL_RCC_OscConfig+0x4e0>
=======
 8002f64:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <HAL_RCC_OscConfig+0x478>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6a:	f7fe fcc1 	bl	80018f0 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f72:	f7fe fcbd 	bl	80018f0 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e05c      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f84:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0f0      	beq.n	8002f72 <HAL_RCC_OscConfig+0x416>
 8002f90:	e054      	b.n	800303c <HAL_RCC_OscConfig+0x4e0>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8003156:	4b10      	ldr	r3, [pc, #64]	; (8003198 <HAL_RCC_OscConfig+0x478>)
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7fe fc6c 	bl	8001a38 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003164:	f7fe fc68 	bl	8001a38 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e045      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003176:	4b06      	ldr	r3, [pc, #24]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x444>
 8003182:	e03d      	b.n	8003200 <HAL_RCC_OscConfig+0x4e0>
=======
 8002f92:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <HAL_RCC_OscConfig+0x478>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f98:	f7fe fcaa 	bl	80018f0 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa0:	f7fe fca6 	bl	80018f0 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e045      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb2:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x444>
 8002fbe:	e03d      	b.n	800303c <HAL_RCC_OscConfig+0x4e0>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d107      	bne.n	800319c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e038      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
 8003190:	40023800 	.word	0x40023800
 8003194:	40007000 	.word	0x40007000
 8003198:	42470060 	.word	0x42470060
=======
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d107      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e038      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40007000 	.word	0x40007000
 8002fd4:	42470060 	.word	0x42470060
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 800319c:	4b1b      	ldr	r3, [pc, #108]	; (800320c <HAL_RCC_OscConfig+0x4ec>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	60fb      	str	r3, [r7, #12]
=======
 8002fd8:	4b1b      	ldr	r3, [pc, #108]	; (8003048 <HAL_RCC_OscConfig+0x4ec>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	60fb      	str	r3, [r7, #12]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
<<<<<<< HEAD
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d028      	beq.n	80031fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d121      	bne.n	80031fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d11a      	bne.n	80031fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031cc:	4013      	ands	r3, r2
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d111      	bne.n	80031fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e2:	085b      	lsrs	r3, r3, #1
 80031e4:	3b01      	subs	r3, #1
 80031e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d107      	bne.n	80031fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e000      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
=======
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d028      	beq.n	8003038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d121      	bne.n	8003038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d11a      	bne.n	8003038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003008:	4013      	ands	r3, r2
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800300e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003010:	4293      	cmp	r3, r2
 8003012:	d111      	bne.n	8003038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301e:	085b      	lsrs	r3, r3, #1
 8003020:	3b01      	subs	r3, #1
 8003022:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003024:	429a      	cmp	r2, r3
 8003026:	d107      	bne.n	8003038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003032:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003034:	429a      	cmp	r2, r3
 8003036:	d001      	beq.n	800303c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e000      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40023800 	.word	0x40023800

08003210 <HAL_RCC_ClockConfig>:
=======
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40023800 	.word	0x40023800

0800304c <HAL_RCC_ClockConfig>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
=======
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e0cc      	b.n	80033be <HAL_RCC_ClockConfig+0x1ae>
=======
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e0cc      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8003224:	4b68      	ldr	r3, [pc, #416]	; (80033c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d90c      	bls.n	800324c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003232:	4b65      	ldr	r3, [pc, #404]	; (80033c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	701a      	strb	r2, [r3, #0]
=======
 8003060:	4b68      	ldr	r3, [pc, #416]	; (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d90c      	bls.n	8003088 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306e:	4b65      	ldr	r3, [pc, #404]	; (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	701a      	strb	r2, [r3, #0]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 800323a:	4b63      	ldr	r3, [pc, #396]	; (80033c8 <HAL_RCC_ClockConfig+0x1b8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e0b8      	b.n	80033be <HAL_RCC_ClockConfig+0x1ae>
=======
 8003076:	4b63      	ldr	r3, [pc, #396]	; (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0b8      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d020      	beq.n	800329a <HAL_RCC_ClockConfig+0x8a>
=======
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d020      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x8a>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	d005      	beq.n	8003270 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003264:	4b59      	ldr	r3, [pc, #356]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	4a58      	ldr	r2, [pc, #352]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800326e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0308 	and.w	r3, r3, #8
 8003278:	2b00      	cmp	r3, #0
 800327a:	d005      	beq.n	8003288 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800327c:	4b53      	ldr	r3, [pc, #332]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	4a52      	ldr	r2, [pc, #328]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 8003282:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003286:	6093      	str	r3, [r2, #8]
=======
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030a0:	4b59      	ldr	r3, [pc, #356]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	4a58      	ldr	r2, [pc, #352]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030b8:	4b53      	ldr	r3, [pc, #332]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	4a52      	ldr	r2, [pc, #328]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030c2:	6093      	str	r3, [r2, #8]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8003288:	4b50      	ldr	r3, [pc, #320]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	494d      	ldr	r1, [pc, #308]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	4313      	orrs	r3, r2
 8003298:	608b      	str	r3, [r1, #8]
=======
 80030c4:	4b50      	ldr	r3, [pc, #320]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	494d      	ldr	r1, [pc, #308]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	608b      	str	r3, [r1, #8]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d044      	beq.n	8003330 <HAL_RCC_ClockConfig+0x120>
=======
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d044      	beq.n	800316c <HAL_RCC_ClockConfig+0x120>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d107      	bne.n	80032be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ae:	4b47      	ldr	r3, [pc, #284]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d119      	bne.n	80032ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e07f      	b.n	80033be <HAL_RCC_ClockConfig+0x1ae>
=======
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d107      	bne.n	80030fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ea:	4b47      	ldr	r3, [pc, #284]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d119      	bne.n	800312a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e07f      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< HEAD
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d003      	beq.n	80032ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ca:	2b03      	cmp	r3, #3
 80032cc:	d107      	bne.n	80032de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ce:	4b3f      	ldr	r3, [pc, #252]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d109      	bne.n	80032ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e06f      	b.n	80033be <HAL_RCC_ClockConfig+0x1ae>
=======
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d003      	beq.n	800310a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003106:	2b03      	cmp	r3, #3
 8003108:	d107      	bne.n	800311a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800310a:	4b3f      	ldr	r3, [pc, #252]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d109      	bne.n	800312a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e06f      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 80032de:	4b3b      	ldr	r3, [pc, #236]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e067      	b.n	80033be <HAL_RCC_ClockConfig+0x1ae>
=======
 800311a:	4b3b      	ldr	r3, [pc, #236]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e067      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 80032ee:	4b37      	ldr	r3, [pc, #220]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f023 0203 	bic.w	r2, r3, #3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	4934      	ldr	r1, [pc, #208]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003300:	f7fe fb9a 	bl	8001a38 <HAL_GetTick>
 8003304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003306:	e00a      	b.n	800331e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003308:	f7fe fb96 	bl	8001a38 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	f241 3288 	movw	r2, #5000	; 0x1388
 8003316:	4293      	cmp	r3, r2
 8003318:	d901      	bls.n	800331e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e04f      	b.n	80033be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331e:	4b2b      	ldr	r3, [pc, #172]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 020c 	and.w	r2, r3, #12
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	429a      	cmp	r2, r3
 800332e:	d1eb      	bne.n	8003308 <HAL_RCC_ClockConfig+0xf8>
=======
 800312a:	4b37      	ldr	r3, [pc, #220]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f023 0203 	bic.w	r2, r3, #3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	4934      	ldr	r1, [pc, #208]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	4313      	orrs	r3, r2
 800313a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800313c:	f7fe fbd8 	bl	80018f0 <HAL_GetTick>
 8003140:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003142:	e00a      	b.n	800315a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003144:	f7fe fbd4 	bl	80018f0 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003152:	4293      	cmp	r3, r2
 8003154:	d901      	bls.n	800315a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e04f      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800315a:	4b2b      	ldr	r3, [pc, #172]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 020c 	and.w	r2, r3, #12
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	429a      	cmp	r2, r3
 800316a:	d1eb      	bne.n	8003144 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8003330:	4b25      	ldr	r3, [pc, #148]	; (80033c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d20c      	bcs.n	8003358 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333e:	4b22      	ldr	r3, [pc, #136]	; (80033c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	701a      	strb	r2, [r3, #0]
=======
 800316c:	4b25      	ldr	r3, [pc, #148]	; (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d20c      	bcs.n	8003194 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317a:	4b22      	ldr	r3, [pc, #136]	; (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	701a      	strb	r2, [r3, #0]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8003346:	4b20      	ldr	r3, [pc, #128]	; (80033c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d001      	beq.n	8003358 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e032      	b.n	80033be <HAL_RCC_ClockConfig+0x1ae>
=======
 8003182:	4b20      	ldr	r3, [pc, #128]	; (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e032      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b00      	cmp	r3, #0
 8003362:	d008      	beq.n	8003376 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003364:	4b19      	ldr	r3, [pc, #100]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	4916      	ldr	r1, [pc, #88]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 8003372:	4313      	orrs	r3, r2
 8003374:	608b      	str	r3, [r1, #8]
=======
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031a0:	4b19      	ldr	r3, [pc, #100]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	4916      	ldr	r1, [pc, #88]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	608b      	str	r3, [r1, #8]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b00      	cmp	r3, #0
 8003380:	d009      	beq.n	8003396 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003382:	4b12      	ldr	r3, [pc, #72]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	490e      	ldr	r1, [pc, #56]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	4313      	orrs	r3, r2
 8003394:	608b      	str	r3, [r1, #8]
=======
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d009      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031be:	4b12      	ldr	r3, [pc, #72]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	490e      	ldr	r1, [pc, #56]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	608b      	str	r3, [r1, #8]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 8003396:	f000 f821 	bl	80033dc <HAL_RCC_GetSysClockFreq>
 800339a:	4602      	mov	r2, r0
 800339c:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	091b      	lsrs	r3, r3, #4
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	490a      	ldr	r1, [pc, #40]	; (80033d0 <HAL_RCC_ClockConfig+0x1c0>)
 80033a8:	5ccb      	ldrb	r3, [r1, r3]
 80033aa:	fa22 f303 	lsr.w	r3, r2, r3
 80033ae:	4a09      	ldr	r2, [pc, #36]	; (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 80033b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033b2:	4b09      	ldr	r3, [pc, #36]	; (80033d8 <HAL_RCC_ClockConfig+0x1c8>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fe fafa 	bl	80019b0 <HAL_InitTick>

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40023c00 	.word	0x40023c00
 80033cc:	40023800 	.word	0x40023800
 80033d0:	08004450 	.word	0x08004450
 80033d4:	20000000 	.word	0x20000000
 80033d8:	20000004 	.word	0x20000004

080033dc <HAL_RCC_GetSysClockFreq>:
=======
 80031d2:	f000 f821 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 80031d6:	4602      	mov	r2, r0
 80031d8:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	091b      	lsrs	r3, r3, #4
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	490a      	ldr	r1, [pc, #40]	; (800320c <HAL_RCC_ClockConfig+0x1c0>)
 80031e4:	5ccb      	ldrb	r3, [r1, r3]
 80031e6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ea:	4a09      	ldr	r2, [pc, #36]	; (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 80031ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031ee:	4b09      	ldr	r3, [pc, #36]	; (8003214 <HAL_RCC_ClockConfig+0x1c8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fe fb38 	bl	8001868 <HAL_InitTick>

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40023c00 	.word	0x40023c00
 8003208:	40023800 	.word	0x40023800
 800320c:	08003c00 	.word	0x08003c00
 8003210:	20000000 	.word	0x20000000
 8003214:	20000004 	.word	0x20000004

08003218 <HAL_RCC_GetSysClockFreq>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 80033dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033e0:	b090      	sub	sp, #64	; 0x40
 80033e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	637b      	str	r3, [r7, #52]	; 0x34
 80033e8:	2300      	movs	r3, #0
 80033ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033ec:	2300      	movs	r3, #0
 80033ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033f4:	4b59      	ldr	r3, [pc, #356]	; (800355c <HAL_RCC_GetSysClockFreq+0x180>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 030c 	and.w	r3, r3, #12
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d00d      	beq.n	800341c <HAL_RCC_GetSysClockFreq+0x40>
 8003400:	2b08      	cmp	r3, #8
 8003402:	f200 80a1 	bhi.w	8003548 <HAL_RCC_GetSysClockFreq+0x16c>
 8003406:	2b00      	cmp	r3, #0
 8003408:	d002      	beq.n	8003410 <HAL_RCC_GetSysClockFreq+0x34>
 800340a:	2b04      	cmp	r3, #4
 800340c:	d003      	beq.n	8003416 <HAL_RCC_GetSysClockFreq+0x3a>
 800340e:	e09b      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x16c>
=======
 8003218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800321c:	b090      	sub	sp, #64	; 0x40
 800321e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	637b      	str	r3, [r7, #52]	; 0x34
 8003224:	2300      	movs	r3, #0
 8003226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003228:	2300      	movs	r3, #0
 800322a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003230:	4b59      	ldr	r3, [pc, #356]	; (8003398 <HAL_RCC_GetSysClockFreq+0x180>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 030c 	and.w	r3, r3, #12
 8003238:	2b08      	cmp	r3, #8
 800323a:	d00d      	beq.n	8003258 <HAL_RCC_GetSysClockFreq+0x40>
 800323c:	2b08      	cmp	r3, #8
 800323e:	f200 80a1 	bhi.w	8003384 <HAL_RCC_GetSysClockFreq+0x16c>
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <HAL_RCC_GetSysClockFreq+0x34>
 8003246:	2b04      	cmp	r3, #4
 8003248:	d003      	beq.n	8003252 <HAL_RCC_GetSysClockFreq+0x3a>
 800324a:	e09b      	b.n	8003384 <HAL_RCC_GetSysClockFreq+0x16c>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8003410:	4b53      	ldr	r3, [pc, #332]	; (8003560 <HAL_RCC_GetSysClockFreq+0x184>)
 8003412:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003414:	e09b      	b.n	800354e <HAL_RCC_GetSysClockFreq+0x172>
=======
 800324c:	4b53      	ldr	r3, [pc, #332]	; (800339c <HAL_RCC_GetSysClockFreq+0x184>)
 800324e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003250:	e09b      	b.n	800338a <HAL_RCC_GetSysClockFreq+0x172>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 8003416:	4b53      	ldr	r3, [pc, #332]	; (8003564 <HAL_RCC_GetSysClockFreq+0x188>)
 8003418:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800341a:	e098      	b.n	800354e <HAL_RCC_GetSysClockFreq+0x172>
=======
 8003252:	4b53      	ldr	r3, [pc, #332]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003254:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003256:	e098      	b.n	800338a <HAL_RCC_GetSysClockFreq+0x172>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
 800341c:	4b4f      	ldr	r3, [pc, #316]	; (800355c <HAL_RCC_GetSysClockFreq+0x180>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003424:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003426:	4b4d      	ldr	r3, [pc, #308]	; (800355c <HAL_RCC_GetSysClockFreq+0x180>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d028      	beq.n	8003484 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003432:	4b4a      	ldr	r3, [pc, #296]	; (800355c <HAL_RCC_GetSysClockFreq+0x180>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	099b      	lsrs	r3, r3, #6
 8003438:	2200      	movs	r2, #0
 800343a:	623b      	str	r3, [r7, #32]
 800343c:	627a      	str	r2, [r7, #36]	; 0x24
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003444:	2100      	movs	r1, #0
 8003446:	4b47      	ldr	r3, [pc, #284]	; (8003564 <HAL_RCC_GetSysClockFreq+0x188>)
 8003448:	fb03 f201 	mul.w	r2, r3, r1
 800344c:	2300      	movs	r3, #0
 800344e:	fb00 f303 	mul.w	r3, r0, r3
 8003452:	4413      	add	r3, r2
 8003454:	4a43      	ldr	r2, [pc, #268]	; (8003564 <HAL_RCC_GetSysClockFreq+0x188>)
 8003456:	fba0 1202 	umull	r1, r2, r0, r2
 800345a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800345c:	460a      	mov	r2, r1
 800345e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003462:	4413      	add	r3, r2
 8003464:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003468:	2200      	movs	r2, #0
 800346a:	61bb      	str	r3, [r7, #24]
 800346c:	61fa      	str	r2, [r7, #28]
 800346e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003472:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003476:	f7fc feaf 	bl	80001d8 <__aeabi_uldivmod>
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
 800347e:	4613      	mov	r3, r2
 8003480:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003482:	e053      	b.n	800352c <HAL_RCC_GetSysClockFreq+0x150>
=======
 8003258:	4b4f      	ldr	r3, [pc, #316]	; (8003398 <HAL_RCC_GetSysClockFreq+0x180>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003260:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003262:	4b4d      	ldr	r3, [pc, #308]	; (8003398 <HAL_RCC_GetSysClockFreq+0x180>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d028      	beq.n	80032c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800326e:	4b4a      	ldr	r3, [pc, #296]	; (8003398 <HAL_RCC_GetSysClockFreq+0x180>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	099b      	lsrs	r3, r3, #6
 8003274:	2200      	movs	r2, #0
 8003276:	623b      	str	r3, [r7, #32]
 8003278:	627a      	str	r2, [r7, #36]	; 0x24
 800327a:	6a3b      	ldr	r3, [r7, #32]
 800327c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003280:	2100      	movs	r1, #0
 8003282:	4b47      	ldr	r3, [pc, #284]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003284:	fb03 f201 	mul.w	r2, r3, r1
 8003288:	2300      	movs	r3, #0
 800328a:	fb00 f303 	mul.w	r3, r0, r3
 800328e:	4413      	add	r3, r2
 8003290:	4a43      	ldr	r2, [pc, #268]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003292:	fba0 1202 	umull	r1, r2, r0, r2
 8003296:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003298:	460a      	mov	r2, r1
 800329a:	62ba      	str	r2, [r7, #40]	; 0x28
 800329c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800329e:	4413      	add	r3, r2
 80032a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032a4:	2200      	movs	r2, #0
 80032a6:	61bb      	str	r3, [r7, #24]
 80032a8:	61fa      	str	r2, [r7, #28]
 80032aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80032b2:	f7fd fba7 	bl	8000a04 <__aeabi_uldivmod>
 80032b6:	4602      	mov	r2, r0
 80032b8:	460b      	mov	r3, r1
 80032ba:	4613      	mov	r3, r2
 80032bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032be:	e053      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x150>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 8003484:	4b35      	ldr	r3, [pc, #212]	; (800355c <HAL_RCC_GetSysClockFreq+0x180>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	099b      	lsrs	r3, r3, #6
 800348a:	2200      	movs	r2, #0
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	617a      	str	r2, [r7, #20]
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003496:	f04f 0b00 	mov.w	fp, #0
 800349a:	4652      	mov	r2, sl
 800349c:	465b      	mov	r3, fp
 800349e:	f04f 0000 	mov.w	r0, #0
 80034a2:	f04f 0100 	mov.w	r1, #0
 80034a6:	0159      	lsls	r1, r3, #5
 80034a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ac:	0150      	lsls	r0, r2, #5
 80034ae:	4602      	mov	r2, r0
 80034b0:	460b      	mov	r3, r1
 80034b2:	ebb2 080a 	subs.w	r8, r2, sl
 80034b6:	eb63 090b 	sbc.w	r9, r3, fp
 80034ba:	f04f 0200 	mov.w	r2, #0
 80034be:	f04f 0300 	mov.w	r3, #0
 80034c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80034c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80034ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80034ce:	ebb2 0408 	subs.w	r4, r2, r8
 80034d2:	eb63 0509 	sbc.w	r5, r3, r9
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	00eb      	lsls	r3, r5, #3
 80034e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034e4:	00e2      	lsls	r2, r4, #3
 80034e6:	4614      	mov	r4, r2
 80034e8:	461d      	mov	r5, r3
 80034ea:	eb14 030a 	adds.w	r3, r4, sl
 80034ee:	603b      	str	r3, [r7, #0]
 80034f0:	eb45 030b 	adc.w	r3, r5, fp
 80034f4:	607b      	str	r3, [r7, #4]
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	f04f 0300 	mov.w	r3, #0
 80034fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003502:	4629      	mov	r1, r5
 8003504:	028b      	lsls	r3, r1, #10
 8003506:	4621      	mov	r1, r4
 8003508:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800350c:	4621      	mov	r1, r4
 800350e:	028a      	lsls	r2, r1, #10
 8003510:	4610      	mov	r0, r2
 8003512:	4619      	mov	r1, r3
 8003514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003516:	2200      	movs	r2, #0
 8003518:	60bb      	str	r3, [r7, #8]
 800351a:	60fa      	str	r2, [r7, #12]
 800351c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003520:	f7fc fe5a 	bl	80001d8 <__aeabi_uldivmod>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4613      	mov	r3, r2
 800352a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800352c:	4b0b      	ldr	r3, [pc, #44]	; (800355c <HAL_RCC_GetSysClockFreq+0x180>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	0c1b      	lsrs	r3, r3, #16
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	3301      	adds	r3, #1
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800353c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800353e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003540:	fbb2 f3f3 	udiv	r3, r2, r3
 8003544:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003546:	e002      	b.n	800354e <HAL_RCC_GetSysClockFreq+0x172>
=======
 80032c0:	4b35      	ldr	r3, [pc, #212]	; (8003398 <HAL_RCC_GetSysClockFreq+0x180>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	099b      	lsrs	r3, r3, #6
 80032c6:	2200      	movs	r2, #0
 80032c8:	613b      	str	r3, [r7, #16]
 80032ca:	617a      	str	r2, [r7, #20]
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80032d2:	f04f 0b00 	mov.w	fp, #0
 80032d6:	4652      	mov	r2, sl
 80032d8:	465b      	mov	r3, fp
 80032da:	f04f 0000 	mov.w	r0, #0
 80032de:	f04f 0100 	mov.w	r1, #0
 80032e2:	0159      	lsls	r1, r3, #5
 80032e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032e8:	0150      	lsls	r0, r2, #5
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	ebb2 080a 	subs.w	r8, r2, sl
 80032f2:	eb63 090b 	sbc.w	r9, r3, fp
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	f04f 0300 	mov.w	r3, #0
 80032fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003302:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003306:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800330a:	ebb2 0408 	subs.w	r4, r2, r8
 800330e:	eb63 0509 	sbc.w	r5, r3, r9
 8003312:	f04f 0200 	mov.w	r2, #0
 8003316:	f04f 0300 	mov.w	r3, #0
 800331a:	00eb      	lsls	r3, r5, #3
 800331c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003320:	00e2      	lsls	r2, r4, #3
 8003322:	4614      	mov	r4, r2
 8003324:	461d      	mov	r5, r3
 8003326:	eb14 030a 	adds.w	r3, r4, sl
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	eb45 030b 	adc.w	r3, r5, fp
 8003330:	607b      	str	r3, [r7, #4]
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800333e:	4629      	mov	r1, r5
 8003340:	028b      	lsls	r3, r1, #10
 8003342:	4621      	mov	r1, r4
 8003344:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003348:	4621      	mov	r1, r4
 800334a:	028a      	lsls	r2, r1, #10
 800334c:	4610      	mov	r0, r2
 800334e:	4619      	mov	r1, r3
 8003350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003352:	2200      	movs	r2, #0
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	60fa      	str	r2, [r7, #12]
 8003358:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800335c:	f7fd fb52 	bl	8000a04 <__aeabi_uldivmod>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4613      	mov	r3, r2
 8003366:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003368:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <HAL_RCC_GetSysClockFreq+0x180>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	0c1b      	lsrs	r3, r3, #16
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	3301      	adds	r3, #1
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003378:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800337a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003380:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003382:	e002      	b.n	800338a <HAL_RCC_GetSysClockFreq+0x172>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <HAL_RCC_GetSysClockFreq+0x184>)
 800354a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800354c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800354e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003550:	4618      	mov	r0, r3
 8003552:	3740      	adds	r7, #64	; 0x40
 8003554:	46bd      	mov	sp, r7
 8003556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800355a:	bf00      	nop
 800355c:	40023800 	.word	0x40023800
 8003560:	00f42400 	.word	0x00f42400
 8003564:	00b71b00 	.word	0x00b71b00

08003568 <HAL_RCC_GetHCLKFreq>:
=======
 8003384:	4b05      	ldr	r3, [pc, #20]	; (800339c <HAL_RCC_GetSysClockFreq+0x184>)
 8003386:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003388:	bf00      	nop
    }
  }
  return sysclockfreq;
 800338a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800338c:	4618      	mov	r0, r3
 800338e:	3740      	adds	r7, #64	; 0x40
 8003390:	46bd      	mov	sp, r7
 8003392:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003396:	bf00      	nop
 8003398:	40023800 	.word	0x40023800
 800339c:	00f42400 	.word	0x00f42400
 80033a0:	00b71b00 	.word	0x00b71b00

080033a4 <HAL_RCC_GetHCLKFreq>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800356c:	4b03      	ldr	r3, [pc, #12]	; (800357c <HAL_RCC_GetHCLKFreq+0x14>)
 800356e:	681b      	ldr	r3, [r3, #0]
}
 8003570:	4618      	mov	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	20000000 	.word	0x20000000

08003580 <HAL_RCC_GetPCLK1Freq>:
=======
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033a8:	4b03      	ldr	r3, [pc, #12]	; (80033b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80033aa:	681b      	ldr	r3, [r3, #0]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	20000000 	.word	0x20000000

080033bc <HAL_RCC_GetPCLK1Freq>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003584:	f7ff fff0 	bl	8003568 <HAL_RCC_GetHCLKFreq>
 8003588:	4602      	mov	r2, r0
 800358a:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	0a9b      	lsrs	r3, r3, #10
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	4903      	ldr	r1, [pc, #12]	; (80035a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003596:	5ccb      	ldrb	r3, [r1, r3]
 8003598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800359c:	4618      	mov	r0, r3
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40023800 	.word	0x40023800
 80035a4:	08004460 	.word	0x08004460

080035a8 <HAL_RCC_GetPCLK2Freq>:
=======
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033c0:	f7ff fff0 	bl	80033a4 <HAL_RCC_GetHCLKFreq>
 80033c4:	4602      	mov	r2, r0
 80033c6:	4b05      	ldr	r3, [pc, #20]	; (80033dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	0a9b      	lsrs	r3, r3, #10
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	4903      	ldr	r1, [pc, #12]	; (80033e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033d2:	5ccb      	ldrb	r3, [r1, r3]
 80033d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d8:	4618      	mov	r0, r3
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40023800 	.word	0x40023800
 80033e0:	08003c10 	.word	0x08003c10

080033e4 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035ac:	f7ff ffdc 	bl	8003568 <HAL_RCC_GetHCLKFreq>
 80035b0:	4602      	mov	r2, r0
 80035b2:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	0b5b      	lsrs	r3, r3, #13
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	4903      	ldr	r1, [pc, #12]	; (80035cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80035be:	5ccb      	ldrb	r3, [r1, r3]
 80035c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40023800 	.word	0x40023800
 80035cc:	08004460 	.word	0x08004460

080035d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e07b      	b.n	80036da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d108      	bne.n	80035fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035f2:	d009      	beq.n	8003608 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	61da      	str	r2, [r3, #28]
 80035fa:	e005      	b.n	8003608 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7fe f846 	bl	80016b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800363e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003650:	431a      	orrs	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	431a      	orrs	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368c:	ea42 0103 	orr.w	r1, r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003694:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	0c1b      	lsrs	r3, r3, #16
 80036a6:	f003 0104 	and.w	r1, r3, #4
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	f003 0210 	and.w	r2, r3, #16
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	69da      	ldr	r2, [r3, #28]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b08c      	sub	sp, #48	; 0x30
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	60f8      	str	r0, [r7, #12]
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	607a      	str	r2, [r7, #4]
 80036ee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80036f0:	2301      	movs	r3, #1
 80036f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <HAL_SPI_TransmitReceive+0x26>
 8003704:	2302      	movs	r3, #2
 8003706:	e18a      	b.n	8003a1e <HAL_SPI_TransmitReceive+0x33c>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003710:	f7fe f992 	bl	8001a38 <HAL_GetTick>
 8003714:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800371c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003726:	887b      	ldrh	r3, [r7, #2]
 8003728:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800372a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800372e:	2b01      	cmp	r3, #1
 8003730:	d00f      	beq.n	8003752 <HAL_SPI_TransmitReceive+0x70>
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003738:	d107      	bne.n	800374a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d103      	bne.n	800374a <HAL_SPI_TransmitReceive+0x68>
 8003742:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003746:	2b04      	cmp	r3, #4
 8003748:	d003      	beq.n	8003752 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800374a:	2302      	movs	r3, #2
 800374c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003750:	e15b      	b.n	8003a0a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_SPI_TransmitReceive+0x82>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d002      	beq.n	8003764 <HAL_SPI_TransmitReceive+0x82>
 800375e:	887b      	ldrh	r3, [r7, #2]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d103      	bne.n	800376c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800376a:	e14e      	b.n	8003a0a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b04      	cmp	r3, #4
 8003776:	d003      	beq.n	8003780 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2205      	movs	r2, #5
 800377c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	887a      	ldrh	r2, [r7, #2]
 8003790:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	887a      	ldrh	r2, [r7, #2]
 8003796:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	887a      	ldrh	r2, [r7, #2]
 80037a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	887a      	ldrh	r2, [r7, #2]
 80037a8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c0:	2b40      	cmp	r3, #64	; 0x40
 80037c2:	d007      	beq.n	80037d4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037dc:	d178      	bne.n	80038d0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <HAL_SPI_TransmitReceive+0x10a>
 80037e6:	8b7b      	ldrh	r3, [r7, #26]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d166      	bne.n	80038ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f0:	881a      	ldrh	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fc:	1c9a      	adds	r2, r3, #2
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003806:	b29b      	uxth	r3, r3
 8003808:	3b01      	subs	r3, #1
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003810:	e053      	b.n	80038ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b02      	cmp	r3, #2
 800381e:	d11b      	bne.n	8003858 <HAL_SPI_TransmitReceive+0x176>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003824:	b29b      	uxth	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d016      	beq.n	8003858 <HAL_SPI_TransmitReceive+0x176>
 800382a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382c:	2b01      	cmp	r3, #1
 800382e:	d113      	bne.n	8003858 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003834:	881a      	ldrh	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003840:	1c9a      	adds	r2, r3, #2
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800384a:	b29b      	uxth	r3, r3
 800384c:	3b01      	subs	r3, #1
 800384e:	b29a      	uxth	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b01      	cmp	r3, #1
 8003864:	d119      	bne.n	800389a <HAL_SPI_TransmitReceive+0x1b8>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800386a:	b29b      	uxth	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	d014      	beq.n	800389a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387a:	b292      	uxth	r2, r2
 800387c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003882:	1c9a      	adds	r2, r3, #2
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800388c:	b29b      	uxth	r3, r3
 800388e:	3b01      	subs	r3, #1
 8003890:	b29a      	uxth	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003896:	2301      	movs	r3, #1
 8003898:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800389a:	f7fe f8cd 	bl	8001a38 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d807      	bhi.n	80038ba <HAL_SPI_TransmitReceive+0x1d8>
 80038aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b0:	d003      	beq.n	80038ba <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80038b8:	e0a7      	b.n	8003a0a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038be:	b29b      	uxth	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1a6      	bne.n	8003812 <HAL_SPI_TransmitReceive+0x130>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1a1      	bne.n	8003812 <HAL_SPI_TransmitReceive+0x130>
 80038ce:	e07c      	b.n	80039ca <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <HAL_SPI_TransmitReceive+0x1fc>
 80038d8:	8b7b      	ldrh	r3, [r7, #26]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d16b      	bne.n	80039b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	330c      	adds	r3, #12
 80038e8:	7812      	ldrb	r2, [r2, #0]
 80038ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f0:	1c5a      	adds	r2, r3, #1
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b29a      	uxth	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003904:	e057      	b.n	80039b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b02      	cmp	r3, #2
 8003912:	d11c      	bne.n	800394e <HAL_SPI_TransmitReceive+0x26c>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d017      	beq.n	800394e <HAL_SPI_TransmitReceive+0x26c>
 800391e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003920:	2b01      	cmp	r3, #1
 8003922:	d114      	bne.n	800394e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	330c      	adds	r3, #12
 800392e:	7812      	ldrb	r2, [r2, #0]
 8003930:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	1c5a      	adds	r2, r3, #1
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003940:	b29b      	uxth	r3, r3
 8003942:	3b01      	subs	r3, #1
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800394a:	2300      	movs	r3, #0
 800394c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b01      	cmp	r3, #1
 800395a:	d119      	bne.n	8003990 <HAL_SPI_TransmitReceive+0x2ae>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003960:	b29b      	uxth	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d014      	beq.n	8003990 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003970:	b2d2      	uxtb	r2, r2
 8003972:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003982:	b29b      	uxth	r3, r3
 8003984:	3b01      	subs	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800398c:	2301      	movs	r3, #1
 800398e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003990:	f7fe f852 	bl	8001a38 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800399c:	429a      	cmp	r2, r3
 800399e:	d803      	bhi.n	80039a8 <HAL_SPI_TransmitReceive+0x2c6>
 80039a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a6:	d102      	bne.n	80039ae <HAL_SPI_TransmitReceive+0x2cc>
 80039a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d103      	bne.n	80039b6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80039b4:	e029      	b.n	8003a0a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1a2      	bne.n	8003906 <HAL_SPI_TransmitReceive+0x224>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d19d      	bne.n	8003906 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 f8b2 	bl	8003b38 <SPI_EndRxTxTransaction>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d006      	beq.n	80039e8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2220      	movs	r2, #32
 80039e4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80039e6:	e010      	b.n	8003a0a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10b      	bne.n	8003a08 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	617b      	str	r3, [r7, #20]
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	e000      	b.n	8003a0a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003a08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3730      	adds	r7, #48	; 0x30
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
	...

08003a28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b088      	sub	sp, #32
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	603b      	str	r3, [r7, #0]
 8003a34:	4613      	mov	r3, r2
 8003a36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a38:	f7fd fffe 	bl	8001a38 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a40:	1a9b      	subs	r3, r3, r2
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	4413      	add	r3, r2
 8003a46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a48:	f7fd fff6 	bl	8001a38 <HAL_GetTick>
 8003a4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a4e:	4b39      	ldr	r3, [pc, #228]	; (8003b34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	015b      	lsls	r3, r3, #5
 8003a54:	0d1b      	lsrs	r3, r3, #20
 8003a56:	69fa      	ldr	r2, [r7, #28]
 8003a58:	fb02 f303 	mul.w	r3, r2, r3
 8003a5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a5e:	e054      	b.n	8003b0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a66:	d050      	beq.n	8003b0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a68:	f7fd ffe6 	bl	8001a38 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	69fa      	ldr	r2, [r7, #28]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d902      	bls.n	8003a7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d13d      	bne.n	8003afa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a96:	d111      	bne.n	8003abc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aa0:	d004      	beq.n	8003aac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aaa:	d107      	bne.n	8003abc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac4:	d10f      	bne.n	8003ae6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ae4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e017      	b.n	8003b2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4013      	ands	r3, r2
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	bf0c      	ite	eq
 8003b1a:	2301      	moveq	r3, #1
 8003b1c:	2300      	movne	r3, #0
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	461a      	mov	r2, r3
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d19b      	bne.n	8003a60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3720      	adds	r7, #32
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	20000000 	.word	0x20000000

08003b38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b088      	sub	sp, #32
 8003b3c:	af02      	add	r7, sp, #8
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b44:	4b1b      	ldr	r3, [pc, #108]	; (8003bb4 <SPI_EndRxTxTransaction+0x7c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a1b      	ldr	r2, [pc, #108]	; (8003bb8 <SPI_EndRxTxTransaction+0x80>)
 8003b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4e:	0d5b      	lsrs	r3, r3, #21
 8003b50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b54:	fb02 f303 	mul.w	r3, r2, r3
 8003b58:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b62:	d112      	bne.n	8003b8a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	2180      	movs	r1, #128	; 0x80
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f7ff ff5a 	bl	8003a28 <SPI_WaitFlagStateUntilTimeout>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d016      	beq.n	8003ba8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7e:	f043 0220 	orr.w	r2, r3, #32
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e00f      	b.n	8003baa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba0:	2b80      	cmp	r3, #128	; 0x80
 8003ba2:	d0f2      	beq.n	8003b8a <SPI_EndRxTxTransaction+0x52>
 8003ba4:	e000      	b.n	8003ba8 <SPI_EndRxTxTransaction+0x70>
        break;
 8003ba6:	bf00      	nop
  }

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000000 	.word	0x20000000
 8003bb8:	165e9f81 	.word	0x165e9f81

08003bbc <HAL_HalfDuplex_Init>:
=======
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033e8:	f7ff ffdc 	bl	80033a4 <HAL_RCC_GetHCLKFreq>
 80033ec:	4602      	mov	r2, r0
 80033ee:	4b05      	ldr	r3, [pc, #20]	; (8003404 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	0b5b      	lsrs	r3, r3, #13
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	4903      	ldr	r1, [pc, #12]	; (8003408 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033fa:	5ccb      	ldrb	r3, [r1, r3]
 80033fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003400:	4618      	mov	r0, r3
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40023800 	.word	0x40023800
 8003408:	08003c10 	.word	0x08003c10

0800340c <HAL_UART_Init>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e047      	b.n	8003c5e <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
=======
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e03f      	b.n	800349e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7fd fe50 	bl	8001888 <HAL_UART_MspInit>
=======
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fe f964 	bl	8001700 <HAL_UART_MspInit>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2224      	movs	r2, #36	; 0x24
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68da      	ldr	r2, [r3, #12]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 f931 	bl	8003e68 <UART_SetConfig>
=======
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2224      	movs	r2, #36	; 0x24
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800344e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f929 	bl	80036a8 <UART_SetConfig>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	691a      	ldr	r2, [r3, #16]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695a      	ldr	r2, [r3, #20]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003c24:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695a      	ldr	r2, [r3, #20]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f042 0208 	orr.w	r2, r2, #8
 8003c34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c44:	60da      	str	r2, [r3, #12]
=======
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003464:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695a      	ldr	r2, [r3, #20]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003474:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003484:	60da      	str	r2, [r3, #12]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< HEAD
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <HAL_UART_Transmit>:
=======
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_UART_Transmit>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b08a      	sub	sp, #40	; 0x28
 8003c6a:	af02      	add	r7, sp, #8
 8003c6c:	60f8      	str	r0, [r7, #12]
 8003c6e:	60b9      	str	r1, [r7, #8]
 8003c70:	603b      	str	r3, [r7, #0]
 8003c72:	4613      	mov	r3, r2
 8003c74:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b20      	cmp	r3, #32
 8003c84:	d17c      	bne.n	8003d80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d002      	beq.n	8003c92 <HAL_UART_Transmit+0x2c>
 8003c8c:	88fb      	ldrh	r3, [r7, #6]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e075      	b.n	8003d82 <HAL_UART_Transmit+0x11c>
=======
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b08a      	sub	sp, #40	; 0x28
 80034aa:	af02      	add	r7, sp, #8
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	603b      	str	r3, [r7, #0]
 80034b2:	4613      	mov	r3, r2
 80034b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b20      	cmp	r3, #32
 80034c4:	d17c      	bne.n	80035c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <HAL_UART_Transmit+0x2c>
 80034cc:	88fb      	ldrh	r3, [r7, #6]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e075      	b.n	80035c2 <HAL_UART_Transmit+0x11c>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    }

    /* Process Locked */
    __HAL_LOCK(huart);
<<<<<<< HEAD
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_UART_Transmit+0x3e>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e06e      	b.n	8003d82 <HAL_UART_Transmit+0x11c>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2221      	movs	r2, #33	; 0x21
 8003cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cba:	f7fd febd 	bl	8001a38 <HAL_GetTick>
 8003cbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	88fa      	ldrh	r2, [r7, #6]
 8003cc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	88fa      	ldrh	r2, [r7, #6]
 8003cca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd4:	d108      	bne.n	8003ce8 <HAL_UART_Transmit+0x82>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d104      	bne.n	8003ce8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	61bb      	str	r3, [r7, #24]
 8003ce6:	e003      	b.n	8003cf0 <HAL_UART_Transmit+0x8a>
=======
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d101      	bne.n	80034e4 <HAL_UART_Transmit+0x3e>
 80034e0:	2302      	movs	r3, #2
 80034e2:	e06e      	b.n	80035c2 <HAL_UART_Transmit+0x11c>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2221      	movs	r2, #33	; 0x21
 80034f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034fa:	f7fe f9f9 	bl	80018f0 <HAL_GetTick>
 80034fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	88fa      	ldrh	r2, [r7, #6]
 8003504:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	88fa      	ldrh	r2, [r7, #6]
 800350a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003514:	d108      	bne.n	8003528 <HAL_UART_Transmit+0x82>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d104      	bne.n	8003528 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	61bb      	str	r3, [r7, #24]
 8003526:	e003      	b.n	8003530 <HAL_UART_Transmit+0x8a>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    }
    else
    {
      pdata8bits  = pData;
<<<<<<< HEAD
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cec:	2300      	movs	r3, #0
 8003cee:	61bb      	str	r3, [r7, #24]
=======
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800352c:	2300      	movs	r3, #0
 800352e:	61bb      	str	r3, [r7, #24]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
<<<<<<< HEAD
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003cf8:	e02a      	b.n	8003d50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2200      	movs	r2, #0
 8003d02:	2180      	movs	r1, #128	; 0x80
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 f840 	bl	8003d8a <UART_WaitOnFlagUntilTimeout>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e036      	b.n	8003d82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10b      	bne.n	8003d32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	881b      	ldrh	r3, [r3, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	3302      	adds	r3, #2
 8003d2e:	61bb      	str	r3, [r7, #24]
 8003d30:	e007      	b.n	8003d42 <HAL_UART_Transmit+0xdc>
=======
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003538:	e02a      	b.n	8003590 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2200      	movs	r2, #0
 8003542:	2180      	movs	r1, #128	; 0x80
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 f840 	bl	80035ca <UART_WaitOnFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e036      	b.n	80035c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10b      	bne.n	8003572 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003568:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	3302      	adds	r3, #2
 800356e:	61bb      	str	r3, [r7, #24]
 8003570:	e007      	b.n	8003582 <HAL_UART_Transmit+0xdc>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
<<<<<<< HEAD
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	781a      	ldrb	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1cf      	bne.n	8003cfa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2200      	movs	r2, #0
 8003d62:	2140      	movs	r1, #64	; 0x40
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 f810 	bl	8003d8a <UART_WaitOnFlagUntilTimeout>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e006      	b.n	8003d82 <HAL_UART_Transmit+0x11c>
=======
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	781a      	ldrb	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	3301      	adds	r3, #1
 8003580:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003586:	b29b      	uxth	r3, r3
 8003588:	3b01      	subs	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1cf      	bne.n	800353a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2200      	movs	r2, #0
 80035a2:	2140      	movs	r1, #64	; 0x40
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 f810 	bl	80035ca <UART_WaitOnFlagUntilTimeout>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e006      	b.n	80035c2 <HAL_UART_Transmit+0x11c>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	e000      	b.n	8003d82 <HAL_UART_Transmit+0x11c>
=======
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035bc:	2300      	movs	r3, #0
 80035be:	e000      	b.n	80035c2 <HAL_UART_Transmit+0x11c>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8003d80:	2302      	movs	r3, #2
  }
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3720      	adds	r7, #32
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <UART_WaitOnFlagUntilTimeout>:
=======
 80035c0:	2302      	movs	r3, #2
  }
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3720      	adds	r7, #32
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <UART_WaitOnFlagUntilTimeout>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b090      	sub	sp, #64	; 0x40
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	60f8      	str	r0, [r7, #12]
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	603b      	str	r3, [r7, #0]
 8003d96:	4613      	mov	r3, r2
 8003d98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d9a:	e050      	b.n	8003e3e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da2:	d04c      	beq.n	8003e3e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d007      	beq.n	8003dba <UART_WaitOnFlagUntilTimeout+0x30>
 8003daa:	f7fd fe45 	bl	8001a38 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d241      	bcs.n	8003e3e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	330c      	adds	r3, #12
 8003dc0:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b090      	sub	sp, #64	; 0x40
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	603b      	str	r3, [r7, #0]
 80035d6:	4613      	mov	r3, r2
 80035d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035da:	e050      	b.n	800367e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e2:	d04c      	beq.n	800367e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d007      	beq.n	80035fa <UART_WaitOnFlagUntilTimeout+0x30>
 80035ea:	f7fe f981 	bl	80018f0 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d241      	bcs.n	800367e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	330c      	adds	r3, #12
 8003600:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< HEAD
 8003dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc4:	e853 3f00 	ldrex	r3, [r3]
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	330c      	adds	r3, #12
 8003dd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dda:	637a      	str	r2, [r7, #52]	; 0x34
 8003ddc:	633b      	str	r3, [r7, #48]	; 0x30
=======
 8003602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003604:	e853 3f00 	ldrex	r3, [r3]
 8003608:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003610:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	330c      	adds	r3, #12
 8003618:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800361a:	637a      	str	r2, [r7, #52]	; 0x34
 800361c:	633b      	str	r3, [r7, #48]	; 0x30
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< HEAD
 8003dde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003de0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003de2:	e841 2300 	strex	r3, r2, [r1]
 8003de6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1e5      	bne.n	8003dba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	3314      	adds	r3, #20
 8003df4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	e853 3f00 	ldrex	r3, [r3]
 8003dfc:	613b      	str	r3, [r7, #16]
   return(result);
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f023 0301 	bic.w	r3, r3, #1
 8003e04:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	3314      	adds	r3, #20
 8003e0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e0e:	623a      	str	r2, [r7, #32]
 8003e10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e12:	69f9      	ldr	r1, [r7, #28]
 8003e14:	6a3a      	ldr	r2, [r7, #32]
 8003e16:	e841 2300 	strex	r3, r2, [r1]
 8003e1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1e5      	bne.n	8003dee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2220      	movs	r2, #32
 8003e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e00f      	b.n	8003e5e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	4013      	ands	r3, r2
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	bf0c      	ite	eq
 8003e4e:	2301      	moveq	r3, #1
 8003e50:	2300      	movne	r3, #0
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	461a      	mov	r2, r3
 8003e56:	79fb      	ldrb	r3, [r7, #7]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d09f      	beq.n	8003d9c <UART_WaitOnFlagUntilTimeout+0x12>
=======
 800361e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003620:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003622:	e841 2300 	strex	r3, r2, [r1]
 8003626:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1e5      	bne.n	80035fa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	3314      	adds	r3, #20
 8003634:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	e853 3f00 	ldrex	r3, [r3]
 800363c:	613b      	str	r3, [r7, #16]
   return(result);
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f023 0301 	bic.w	r3, r3, #1
 8003644:	63bb      	str	r3, [r7, #56]	; 0x38
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	3314      	adds	r3, #20
 800364c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800364e:	623a      	str	r2, [r7, #32]
 8003650:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003652:	69f9      	ldr	r1, [r7, #28]
 8003654:	6a3a      	ldr	r2, [r7, #32]
 8003656:	e841 2300 	strex	r3, r2, [r1]
 800365a:	61bb      	str	r3, [r7, #24]
   return(result);
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1e5      	bne.n	800362e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2220      	movs	r2, #32
 8003666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2220      	movs	r2, #32
 800366e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e00f      	b.n	800369e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	4013      	ands	r3, r2
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	429a      	cmp	r2, r3
 800368c:	bf0c      	ite	eq
 800368e:	2301      	moveq	r3, #1
 8003690:	2300      	movne	r3, #0
 8003692:	b2db      	uxtb	r3, r3
 8003694:	461a      	mov	r2, r3
 8003696:	79fb      	ldrb	r3, [r7, #7]
 8003698:	429a      	cmp	r2, r3
 800369a:	d09f      	beq.n	80035dc <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3740      	adds	r7, #64	; 0x40
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <UART_SetConfig>:
=======
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3740      	adds	r7, #64	; 0x40
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <UART_SetConfig>:
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8003e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e6c:	b0c0      	sub	sp, #256	; 0x100
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
=======
 80036a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036ac:	b0c0      	sub	sp, #256	; 0x100
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 8003e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e84:	68d9      	ldr	r1, [r3, #12]
 8003e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	ea40 0301 	orr.w	r3, r0, r1
 8003e90:	6113      	str	r3, [r2, #16]
=======
 80036b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c4:	68d9      	ldr	r1, [r3, #12]
 80036c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	ea40 0301 	orr.w	r3, r0, r1
 80036d0:	6113      	str	r3, [r2, #16]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
<<<<<<< HEAD
 8003e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ec0:	f021 010c 	bic.w	r1, r1, #12
 8003ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ece:	430b      	orrs	r3, r1
 8003ed0:	60d3      	str	r3, [r2, #12]
=======
 80036d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	431a      	orrs	r2, r3
 80036e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	431a      	orrs	r2, r3
 80036e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003700:	f021 010c 	bic.w	r1, r1, #12
 8003704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800370e:	430b      	orrs	r3, r1
 8003710:	60d3      	str	r3, [r2, #12]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< HEAD
 8003ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee2:	6999      	ldr	r1, [r3, #24]
 8003ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	ea40 0301 	orr.w	r3, r0, r1
 8003eee:	6153      	str	r3, [r2, #20]
=======
 8003712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800371e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003722:	6999      	ldr	r1, [r3, #24]
 8003724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	ea40 0301 	orr.w	r3, r0, r1
 800372e:	6153      	str	r3, [r2, #20]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
<<<<<<< HEAD
 8003ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	4b8f      	ldr	r3, [pc, #572]	; (8004134 <UART_SetConfig+0x2cc>)
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d005      	beq.n	8003f08 <UART_SetConfig+0xa0>
 8003efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	4b8d      	ldr	r3, [pc, #564]	; (8004138 <UART_SetConfig+0x2d0>)
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d104      	bne.n	8003f12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f08:	f7ff fb4e 	bl	80035a8 <HAL_RCC_GetPCLK2Freq>
 8003f0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f10:	e003      	b.n	8003f1a <UART_SetConfig+0xb2>
=======
 8003730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	4b8f      	ldr	r3, [pc, #572]	; (8003974 <UART_SetConfig+0x2cc>)
 8003738:	429a      	cmp	r2, r3
 800373a:	d005      	beq.n	8003748 <UART_SetConfig+0xa0>
 800373c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	4b8d      	ldr	r3, [pc, #564]	; (8003978 <UART_SetConfig+0x2d0>)
 8003744:	429a      	cmp	r2, r3
 8003746:	d104      	bne.n	8003752 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003748:	f7ff fe4c 	bl	80033e4 <HAL_RCC_GetPCLK2Freq>
 800374c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003750:	e003      	b.n	800375a <UART_SetConfig+0xb2>
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 8003f12:	f7ff fb35 	bl	8003580 <HAL_RCC_GetPCLK1Freq>
 8003f16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f24:	f040 810c 	bne.w	8004140 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f3a:	4622      	mov	r2, r4
 8003f3c:	462b      	mov	r3, r5
 8003f3e:	1891      	adds	r1, r2, r2
 8003f40:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f42:	415b      	adcs	r3, r3
 8003f44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f4a:	4621      	mov	r1, r4
 8003f4c:	eb12 0801 	adds.w	r8, r2, r1
 8003f50:	4629      	mov	r1, r5
 8003f52:	eb43 0901 	adc.w	r9, r3, r1
 8003f56:	f04f 0200 	mov.w	r2, #0
 8003f5a:	f04f 0300 	mov.w	r3, #0
 8003f5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f6a:	4690      	mov	r8, r2
 8003f6c:	4699      	mov	r9, r3
 8003f6e:	4623      	mov	r3, r4
 8003f70:	eb18 0303 	adds.w	r3, r8, r3
 8003f74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f78:	462b      	mov	r3, r5
 8003f7a:	eb49 0303 	adc.w	r3, r9, r3
 8003f7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f96:	460b      	mov	r3, r1
 8003f98:	18db      	adds	r3, r3, r3
 8003f9a:	653b      	str	r3, [r7, #80]	; 0x50
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	eb42 0303 	adc.w	r3, r2, r3
 8003fa2:	657b      	str	r3, [r7, #84]	; 0x54
 8003fa4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003fa8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003fac:	f7fc f914 	bl	80001d8 <__aeabi_uldivmod>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4b61      	ldr	r3, [pc, #388]	; (800413c <UART_SetConfig+0x2d4>)
 8003fb6:	fba3 2302 	umull	r2, r3, r3, r2
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	011c      	lsls	r4, r3, #4
 8003fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fc8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003fcc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003fd0:	4642      	mov	r2, r8
 8003fd2:	464b      	mov	r3, r9
 8003fd4:	1891      	adds	r1, r2, r2
 8003fd6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003fd8:	415b      	adcs	r3, r3
 8003fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fdc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003fe0:	4641      	mov	r1, r8
 8003fe2:	eb12 0a01 	adds.w	sl, r2, r1
 8003fe6:	4649      	mov	r1, r9
 8003fe8:	eb43 0b01 	adc.w	fp, r3, r1
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ff8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ffc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004000:	4692      	mov	sl, r2
 8004002:	469b      	mov	fp, r3
 8004004:	4643      	mov	r3, r8
 8004006:	eb1a 0303 	adds.w	r3, sl, r3
 800400a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800400e:	464b      	mov	r3, r9
 8004010:	eb4b 0303 	adc.w	r3, fp, r3
 8004014:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004024:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004028:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800402c:	460b      	mov	r3, r1
 800402e:	18db      	adds	r3, r3, r3
 8004030:	643b      	str	r3, [r7, #64]	; 0x40
 8004032:	4613      	mov	r3, r2
 8004034:	eb42 0303 	adc.w	r3, r2, r3
 8004038:	647b      	str	r3, [r7, #68]	; 0x44
 800403a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800403e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004042:	f7fc f8c9 	bl	80001d8 <__aeabi_uldivmod>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4611      	mov	r1, r2
 800404c:	4b3b      	ldr	r3, [pc, #236]	; (800413c <UART_SetConfig+0x2d4>)
 800404e:	fba3 2301 	umull	r2, r3, r3, r1
 8004052:	095b      	lsrs	r3, r3, #5
 8004054:	2264      	movs	r2, #100	; 0x64
 8004056:	fb02 f303 	mul.w	r3, r2, r3
 800405a:	1acb      	subs	r3, r1, r3
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004062:	4b36      	ldr	r3, [pc, #216]	; (800413c <UART_SetConfig+0x2d4>)
 8004064:	fba3 2302 	umull	r2, r3, r3, r2
 8004068:	095b      	lsrs	r3, r3, #5
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004070:	441c      	add	r4, r3
 8004072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004076:	2200      	movs	r2, #0
 8004078:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800407c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004080:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004084:	4642      	mov	r2, r8
 8004086:	464b      	mov	r3, r9
 8004088:	1891      	adds	r1, r2, r2
 800408a:	63b9      	str	r1, [r7, #56]	; 0x38
 800408c:	415b      	adcs	r3, r3
 800408e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004090:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004094:	4641      	mov	r1, r8
 8004096:	1851      	adds	r1, r2, r1
 8004098:	6339      	str	r1, [r7, #48]	; 0x30
 800409a:	4649      	mov	r1, r9
 800409c:	414b      	adcs	r3, r1
 800409e:	637b      	str	r3, [r7, #52]	; 0x34
 80040a0:	f04f 0200 	mov.w	r2, #0
 80040a4:	f04f 0300 	mov.w	r3, #0
 80040a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80040ac:	4659      	mov	r1, fp
 80040ae:	00cb      	lsls	r3, r1, #3
 80040b0:	4651      	mov	r1, sl
 80040b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040b6:	4651      	mov	r1, sl
 80040b8:	00ca      	lsls	r2, r1, #3
 80040ba:	4610      	mov	r0, r2
 80040bc:	4619      	mov	r1, r3
 80040be:	4603      	mov	r3, r0
 80040c0:	4642      	mov	r2, r8
 80040c2:	189b      	adds	r3, r3, r2
 80040c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040c8:	464b      	mov	r3, r9
 80040ca:	460a      	mov	r2, r1
 80040cc:	eb42 0303 	adc.w	r3, r2, r3
 80040d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80040e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040e8:	460b      	mov	r3, r1
 80040ea:	18db      	adds	r3, r3, r3
 80040ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ee:	4613      	mov	r3, r2
 80040f0:	eb42 0303 	adc.w	r3, r2, r3
 80040f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80040fe:	f7fc f86b 	bl	80001d8 <__aeabi_uldivmod>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	4b0d      	ldr	r3, [pc, #52]	; (800413c <UART_SetConfig+0x2d4>)
 8004108:	fba3 1302 	umull	r1, r3, r3, r2
 800410c:	095b      	lsrs	r3, r3, #5
 800410e:	2164      	movs	r1, #100	; 0x64
 8004110:	fb01 f303 	mul.w	r3, r1, r3
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	3332      	adds	r3, #50	; 0x32
 800411a:	4a08      	ldr	r2, [pc, #32]	; (800413c <UART_SetConfig+0x2d4>)
 800411c:	fba2 2303 	umull	r2, r3, r2, r3
 8004120:	095b      	lsrs	r3, r3, #5
 8004122:	f003 0207 	and.w	r2, r3, #7
 8004126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4422      	add	r2, r4
 800412e:	609a      	str	r2, [r3, #8]
=======
 8003752:	f7ff fe33 	bl	80033bc <HAL_RCC_GetPCLK1Freq>
 8003756:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800375a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800375e:	69db      	ldr	r3, [r3, #28]
 8003760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003764:	f040 810c 	bne.w	8003980 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003768:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800376c:	2200      	movs	r2, #0
 800376e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003772:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003776:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800377a:	4622      	mov	r2, r4
 800377c:	462b      	mov	r3, r5
 800377e:	1891      	adds	r1, r2, r2
 8003780:	65b9      	str	r1, [r7, #88]	; 0x58
 8003782:	415b      	adcs	r3, r3
 8003784:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003786:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800378a:	4621      	mov	r1, r4
 800378c:	eb12 0801 	adds.w	r8, r2, r1
 8003790:	4629      	mov	r1, r5
 8003792:	eb43 0901 	adc.w	r9, r3, r1
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037aa:	4690      	mov	r8, r2
 80037ac:	4699      	mov	r9, r3
 80037ae:	4623      	mov	r3, r4
 80037b0:	eb18 0303 	adds.w	r3, r8, r3
 80037b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80037b8:	462b      	mov	r3, r5
 80037ba:	eb49 0303 	adc.w	r3, r9, r3
 80037be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80037c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80037ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80037d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80037d6:	460b      	mov	r3, r1
 80037d8:	18db      	adds	r3, r3, r3
 80037da:	653b      	str	r3, [r7, #80]	; 0x50
 80037dc:	4613      	mov	r3, r2
 80037de:	eb42 0303 	adc.w	r3, r2, r3
 80037e2:	657b      	str	r3, [r7, #84]	; 0x54
 80037e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80037ec:	f7fd f90a 	bl	8000a04 <__aeabi_uldivmod>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4b61      	ldr	r3, [pc, #388]	; (800397c <UART_SetConfig+0x2d4>)
 80037f6:	fba3 2302 	umull	r2, r3, r3, r2
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	011c      	lsls	r4, r3, #4
 80037fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003802:	2200      	movs	r2, #0
 8003804:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003808:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800380c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003810:	4642      	mov	r2, r8
 8003812:	464b      	mov	r3, r9
 8003814:	1891      	adds	r1, r2, r2
 8003816:	64b9      	str	r1, [r7, #72]	; 0x48
 8003818:	415b      	adcs	r3, r3
 800381a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800381c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003820:	4641      	mov	r1, r8
 8003822:	eb12 0a01 	adds.w	sl, r2, r1
 8003826:	4649      	mov	r1, r9
 8003828:	eb43 0b01 	adc.w	fp, r3, r1
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	f04f 0300 	mov.w	r3, #0
 8003834:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003838:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800383c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003840:	4692      	mov	sl, r2
 8003842:	469b      	mov	fp, r3
 8003844:	4643      	mov	r3, r8
 8003846:	eb1a 0303 	adds.w	r3, sl, r3
 800384a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800384e:	464b      	mov	r3, r9
 8003850:	eb4b 0303 	adc.w	r3, fp, r3
 8003854:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003864:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003868:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800386c:	460b      	mov	r3, r1
 800386e:	18db      	adds	r3, r3, r3
 8003870:	643b      	str	r3, [r7, #64]	; 0x40
 8003872:	4613      	mov	r3, r2
 8003874:	eb42 0303 	adc.w	r3, r2, r3
 8003878:	647b      	str	r3, [r7, #68]	; 0x44
 800387a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800387e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003882:	f7fd f8bf 	bl	8000a04 <__aeabi_uldivmod>
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	4611      	mov	r1, r2
 800388c:	4b3b      	ldr	r3, [pc, #236]	; (800397c <UART_SetConfig+0x2d4>)
 800388e:	fba3 2301 	umull	r2, r3, r3, r1
 8003892:	095b      	lsrs	r3, r3, #5
 8003894:	2264      	movs	r2, #100	; 0x64
 8003896:	fb02 f303 	mul.w	r3, r2, r3
 800389a:	1acb      	subs	r3, r1, r3
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80038a2:	4b36      	ldr	r3, [pc, #216]	; (800397c <UART_SetConfig+0x2d4>)
 80038a4:	fba3 2302 	umull	r2, r3, r3, r2
 80038a8:	095b      	lsrs	r3, r3, #5
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038b0:	441c      	add	r4, r3
 80038b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038b6:	2200      	movs	r2, #0
 80038b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80038c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80038c4:	4642      	mov	r2, r8
 80038c6:	464b      	mov	r3, r9
 80038c8:	1891      	adds	r1, r2, r2
 80038ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80038cc:	415b      	adcs	r3, r3
 80038ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038d4:	4641      	mov	r1, r8
 80038d6:	1851      	adds	r1, r2, r1
 80038d8:	6339      	str	r1, [r7, #48]	; 0x30
 80038da:	4649      	mov	r1, r9
 80038dc:	414b      	adcs	r3, r1
 80038de:	637b      	str	r3, [r7, #52]	; 0x34
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	f04f 0300 	mov.w	r3, #0
 80038e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80038ec:	4659      	mov	r1, fp
 80038ee:	00cb      	lsls	r3, r1, #3
 80038f0:	4651      	mov	r1, sl
 80038f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038f6:	4651      	mov	r1, sl
 80038f8:	00ca      	lsls	r2, r1, #3
 80038fa:	4610      	mov	r0, r2
 80038fc:	4619      	mov	r1, r3
 80038fe:	4603      	mov	r3, r0
 8003900:	4642      	mov	r2, r8
 8003902:	189b      	adds	r3, r3, r2
 8003904:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003908:	464b      	mov	r3, r9
 800390a:	460a      	mov	r2, r1
 800390c:	eb42 0303 	adc.w	r3, r2, r3
 8003910:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003920:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003924:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003928:	460b      	mov	r3, r1
 800392a:	18db      	adds	r3, r3, r3
 800392c:	62bb      	str	r3, [r7, #40]	; 0x28
 800392e:	4613      	mov	r3, r2
 8003930:	eb42 0303 	adc.w	r3, r2, r3
 8003934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003936:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800393a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800393e:	f7fd f861 	bl	8000a04 <__aeabi_uldivmod>
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	4b0d      	ldr	r3, [pc, #52]	; (800397c <UART_SetConfig+0x2d4>)
 8003948:	fba3 1302 	umull	r1, r3, r3, r2
 800394c:	095b      	lsrs	r3, r3, #5
 800394e:	2164      	movs	r1, #100	; 0x64
 8003950:	fb01 f303 	mul.w	r3, r1, r3
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	3332      	adds	r3, #50	; 0x32
 800395a:	4a08      	ldr	r2, [pc, #32]	; (800397c <UART_SetConfig+0x2d4>)
 800395c:	fba2 2303 	umull	r2, r3, r2, r3
 8003960:	095b      	lsrs	r3, r3, #5
 8003962:	f003 0207 	and.w	r2, r3, #7
 8003966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4422      	add	r2, r4
 800396e:	609a      	str	r2, [r3, #8]
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
<<<<<<< HEAD
 8004130:	e106      	b.n	8004340 <UART_SetConfig+0x4d8>
 8004132:	bf00      	nop
 8004134:	40011000 	.word	0x40011000
 8004138:	40011400 	.word	0x40011400
 800413c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004140:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004144:	2200      	movs	r2, #0
 8004146:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800414a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800414e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004152:	4642      	mov	r2, r8
 8004154:	464b      	mov	r3, r9
 8004156:	1891      	adds	r1, r2, r2
 8004158:	6239      	str	r1, [r7, #32]
 800415a:	415b      	adcs	r3, r3
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
 800415e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004162:	4641      	mov	r1, r8
 8004164:	1854      	adds	r4, r2, r1
 8004166:	4649      	mov	r1, r9
 8004168:	eb43 0501 	adc.w	r5, r3, r1
 800416c:	f04f 0200 	mov.w	r2, #0
 8004170:	f04f 0300 	mov.w	r3, #0
 8004174:	00eb      	lsls	r3, r5, #3
 8004176:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800417a:	00e2      	lsls	r2, r4, #3
 800417c:	4614      	mov	r4, r2
 800417e:	461d      	mov	r5, r3
 8004180:	4643      	mov	r3, r8
 8004182:	18e3      	adds	r3, r4, r3
 8004184:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004188:	464b      	mov	r3, r9
 800418a:	eb45 0303 	adc.w	r3, r5, r3
 800418e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800419e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041a2:	f04f 0200 	mov.w	r2, #0
 80041a6:	f04f 0300 	mov.w	r3, #0
 80041aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80041ae:	4629      	mov	r1, r5
 80041b0:	008b      	lsls	r3, r1, #2
 80041b2:	4621      	mov	r1, r4
 80041b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041b8:	4621      	mov	r1, r4
 80041ba:	008a      	lsls	r2, r1, #2
 80041bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80041c0:	f7fc f80a 	bl	80001d8 <__aeabi_uldivmod>
 80041c4:	4602      	mov	r2, r0
 80041c6:	460b      	mov	r3, r1
 80041c8:	4b60      	ldr	r3, [pc, #384]	; (800434c <UART_SetConfig+0x4e4>)
 80041ca:	fba3 2302 	umull	r2, r3, r3, r2
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	011c      	lsls	r4, r3, #4
 80041d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041d6:	2200      	movs	r2, #0
 80041d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80041e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80041e4:	4642      	mov	r2, r8
 80041e6:	464b      	mov	r3, r9
 80041e8:	1891      	adds	r1, r2, r2
 80041ea:	61b9      	str	r1, [r7, #24]
 80041ec:	415b      	adcs	r3, r3
 80041ee:	61fb      	str	r3, [r7, #28]
 80041f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041f4:	4641      	mov	r1, r8
 80041f6:	1851      	adds	r1, r2, r1
 80041f8:	6139      	str	r1, [r7, #16]
 80041fa:	4649      	mov	r1, r9
 80041fc:	414b      	adcs	r3, r1
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	f04f 0200 	mov.w	r2, #0
 8004204:	f04f 0300 	mov.w	r3, #0
 8004208:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800420c:	4659      	mov	r1, fp
 800420e:	00cb      	lsls	r3, r1, #3
 8004210:	4651      	mov	r1, sl
 8004212:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004216:	4651      	mov	r1, sl
 8004218:	00ca      	lsls	r2, r1, #3
 800421a:	4610      	mov	r0, r2
 800421c:	4619      	mov	r1, r3
 800421e:	4603      	mov	r3, r0
 8004220:	4642      	mov	r2, r8
 8004222:	189b      	adds	r3, r3, r2
 8004224:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004228:	464b      	mov	r3, r9
 800422a:	460a      	mov	r2, r1
 800422c:	eb42 0303 	adc.w	r3, r2, r3
 8004230:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	67bb      	str	r3, [r7, #120]	; 0x78
 800423e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004240:	f04f 0200 	mov.w	r2, #0
 8004244:	f04f 0300 	mov.w	r3, #0
 8004248:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800424c:	4649      	mov	r1, r9
 800424e:	008b      	lsls	r3, r1, #2
 8004250:	4641      	mov	r1, r8
 8004252:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004256:	4641      	mov	r1, r8
 8004258:	008a      	lsls	r2, r1, #2
 800425a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800425e:	f7fb ffbb 	bl	80001d8 <__aeabi_uldivmod>
 8004262:	4602      	mov	r2, r0
 8004264:	460b      	mov	r3, r1
 8004266:	4611      	mov	r1, r2
 8004268:	4b38      	ldr	r3, [pc, #224]	; (800434c <UART_SetConfig+0x4e4>)
 800426a:	fba3 2301 	umull	r2, r3, r3, r1
 800426e:	095b      	lsrs	r3, r3, #5
 8004270:	2264      	movs	r2, #100	; 0x64
 8004272:	fb02 f303 	mul.w	r3, r2, r3
 8004276:	1acb      	subs	r3, r1, r3
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	3332      	adds	r3, #50	; 0x32
 800427c:	4a33      	ldr	r2, [pc, #204]	; (800434c <UART_SetConfig+0x4e4>)
 800427e:	fba2 2303 	umull	r2, r3, r2, r3
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004288:	441c      	add	r4, r3
 800428a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800428e:	2200      	movs	r2, #0
 8004290:	673b      	str	r3, [r7, #112]	; 0x70
 8004292:	677a      	str	r2, [r7, #116]	; 0x74
 8004294:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004298:	4642      	mov	r2, r8
 800429a:	464b      	mov	r3, r9
 800429c:	1891      	adds	r1, r2, r2
 800429e:	60b9      	str	r1, [r7, #8]
 80042a0:	415b      	adcs	r3, r3
 80042a2:	60fb      	str	r3, [r7, #12]
 80042a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042a8:	4641      	mov	r1, r8
 80042aa:	1851      	adds	r1, r2, r1
 80042ac:	6039      	str	r1, [r7, #0]
 80042ae:	4649      	mov	r1, r9
 80042b0:	414b      	adcs	r3, r1
 80042b2:	607b      	str	r3, [r7, #4]
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	f04f 0300 	mov.w	r3, #0
 80042bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042c0:	4659      	mov	r1, fp
 80042c2:	00cb      	lsls	r3, r1, #3
 80042c4:	4651      	mov	r1, sl
 80042c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042ca:	4651      	mov	r1, sl
 80042cc:	00ca      	lsls	r2, r1, #3
 80042ce:	4610      	mov	r0, r2
 80042d0:	4619      	mov	r1, r3
 80042d2:	4603      	mov	r3, r0
 80042d4:	4642      	mov	r2, r8
 80042d6:	189b      	adds	r3, r3, r2
 80042d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80042da:	464b      	mov	r3, r9
 80042dc:	460a      	mov	r2, r1
 80042de:	eb42 0303 	adc.w	r3, r2, r3
 80042e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	663b      	str	r3, [r7, #96]	; 0x60
 80042ee:	667a      	str	r2, [r7, #100]	; 0x64
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80042fc:	4649      	mov	r1, r9
 80042fe:	008b      	lsls	r3, r1, #2
 8004300:	4641      	mov	r1, r8
 8004302:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004306:	4641      	mov	r1, r8
 8004308:	008a      	lsls	r2, r1, #2
 800430a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800430e:	f7fb ff63 	bl	80001d8 <__aeabi_uldivmod>
 8004312:	4602      	mov	r2, r0
 8004314:	460b      	mov	r3, r1
 8004316:	4b0d      	ldr	r3, [pc, #52]	; (800434c <UART_SetConfig+0x4e4>)
 8004318:	fba3 1302 	umull	r1, r3, r3, r2
 800431c:	095b      	lsrs	r3, r3, #5
 800431e:	2164      	movs	r1, #100	; 0x64
 8004320:	fb01 f303 	mul.w	r3, r1, r3
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	3332      	adds	r3, #50	; 0x32
 800432a:	4a08      	ldr	r2, [pc, #32]	; (800434c <UART_SetConfig+0x4e4>)
 800432c:	fba2 2303 	umull	r2, r3, r2, r3
 8004330:	095b      	lsrs	r3, r3, #5
 8004332:	f003 020f 	and.w	r2, r3, #15
 8004336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4422      	add	r2, r4
 800433e:	609a      	str	r2, [r3, #8]
}
 8004340:	bf00      	nop
 8004342:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004346:	46bd      	mov	sp, r7
 8004348:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800434c:	51eb851f 	.word	0x51eb851f

08004350 <memset>:
 8004350:	4402      	add	r2, r0
 8004352:	4603      	mov	r3, r0
 8004354:	4293      	cmp	r3, r2
 8004356:	d100      	bne.n	800435a <memset+0xa>
 8004358:	4770      	bx	lr
 800435a:	f803 1b01 	strb.w	r1, [r3], #1
 800435e:	e7f9      	b.n	8004354 <memset+0x4>

08004360 <__libc_init_array>:
 8004360:	b570      	push	{r4, r5, r6, lr}
 8004362:	4d0d      	ldr	r5, [pc, #52]	; (8004398 <__libc_init_array+0x38>)
 8004364:	4c0d      	ldr	r4, [pc, #52]	; (800439c <__libc_init_array+0x3c>)
 8004366:	1b64      	subs	r4, r4, r5
 8004368:	10a4      	asrs	r4, r4, #2
 800436a:	2600      	movs	r6, #0
 800436c:	42a6      	cmp	r6, r4
 800436e:	d109      	bne.n	8004384 <__libc_init_array+0x24>
 8004370:	4d0b      	ldr	r5, [pc, #44]	; (80043a0 <__libc_init_array+0x40>)
 8004372:	4c0c      	ldr	r4, [pc, #48]	; (80043a4 <__libc_init_array+0x44>)
 8004374:	f000 f818 	bl	80043a8 <_init>
 8004378:	1b64      	subs	r4, r4, r5
 800437a:	10a4      	asrs	r4, r4, #2
 800437c:	2600      	movs	r6, #0
 800437e:	42a6      	cmp	r6, r4
 8004380:	d105      	bne.n	800438e <__libc_init_array+0x2e>
 8004382:	bd70      	pop	{r4, r5, r6, pc}
 8004384:	f855 3b04 	ldr.w	r3, [r5], #4
 8004388:	4798      	blx	r3
 800438a:	3601      	adds	r6, #1
 800438c:	e7ee      	b.n	800436c <__libc_init_array+0xc>
 800438e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004392:	4798      	blx	r3
 8004394:	3601      	adds	r6, #1
 8004396:	e7f2      	b.n	800437e <__libc_init_array+0x1e>
 8004398:	08004470 	.word	0x08004470
 800439c:	08004470 	.word	0x08004470
 80043a0:	08004470 	.word	0x08004470
 80043a4:	08004474 	.word	0x08004474

080043a8 <_init>:
 80043a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043aa:	bf00      	nop
 80043ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ae:	bc08      	pop	{r3}
 80043b0:	469e      	mov	lr, r3
 80043b2:	4770      	bx	lr

080043b4 <_fini>:
 80043b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b6:	bf00      	nop
 80043b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ba:	bc08      	pop	{r3}
 80043bc:	469e      	mov	lr, r3
 80043be:	4770      	bx	lr
=======
 8003970:	e106      	b.n	8003b80 <UART_SetConfig+0x4d8>
 8003972:	bf00      	nop
 8003974:	40011000 	.word	0x40011000
 8003978:	40011400 	.word	0x40011400
 800397c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003980:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003984:	2200      	movs	r2, #0
 8003986:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800398a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800398e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003992:	4642      	mov	r2, r8
 8003994:	464b      	mov	r3, r9
 8003996:	1891      	adds	r1, r2, r2
 8003998:	6239      	str	r1, [r7, #32]
 800399a:	415b      	adcs	r3, r3
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
 800399e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039a2:	4641      	mov	r1, r8
 80039a4:	1854      	adds	r4, r2, r1
 80039a6:	4649      	mov	r1, r9
 80039a8:	eb43 0501 	adc.w	r5, r3, r1
 80039ac:	f04f 0200 	mov.w	r2, #0
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	00eb      	lsls	r3, r5, #3
 80039b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039ba:	00e2      	lsls	r2, r4, #3
 80039bc:	4614      	mov	r4, r2
 80039be:	461d      	mov	r5, r3
 80039c0:	4643      	mov	r3, r8
 80039c2:	18e3      	adds	r3, r4, r3
 80039c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039c8:	464b      	mov	r3, r9
 80039ca:	eb45 0303 	adc.w	r3, r5, r3
 80039ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	f04f 0300 	mov.w	r3, #0
 80039ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039ee:	4629      	mov	r1, r5
 80039f0:	008b      	lsls	r3, r1, #2
 80039f2:	4621      	mov	r1, r4
 80039f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039f8:	4621      	mov	r1, r4
 80039fa:	008a      	lsls	r2, r1, #2
 80039fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a00:	f7fd f800 	bl	8000a04 <__aeabi_uldivmod>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4b60      	ldr	r3, [pc, #384]	; (8003b8c <UART_SetConfig+0x4e4>)
 8003a0a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a0e:	095b      	lsrs	r3, r3, #5
 8003a10:	011c      	lsls	r4, r3, #4
 8003a12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a16:	2200      	movs	r2, #0
 8003a18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a24:	4642      	mov	r2, r8
 8003a26:	464b      	mov	r3, r9
 8003a28:	1891      	adds	r1, r2, r2
 8003a2a:	61b9      	str	r1, [r7, #24]
 8003a2c:	415b      	adcs	r3, r3
 8003a2e:	61fb      	str	r3, [r7, #28]
 8003a30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a34:	4641      	mov	r1, r8
 8003a36:	1851      	adds	r1, r2, r1
 8003a38:	6139      	str	r1, [r7, #16]
 8003a3a:	4649      	mov	r1, r9
 8003a3c:	414b      	adcs	r3, r1
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a4c:	4659      	mov	r1, fp
 8003a4e:	00cb      	lsls	r3, r1, #3
 8003a50:	4651      	mov	r1, sl
 8003a52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a56:	4651      	mov	r1, sl
 8003a58:	00ca      	lsls	r2, r1, #3
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	4603      	mov	r3, r0
 8003a60:	4642      	mov	r2, r8
 8003a62:	189b      	adds	r3, r3, r2
 8003a64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a68:	464b      	mov	r3, r9
 8003a6a:	460a      	mov	r2, r1
 8003a6c:	eb42 0303 	adc.w	r3, r2, r3
 8003a70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a7e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a8c:	4649      	mov	r1, r9
 8003a8e:	008b      	lsls	r3, r1, #2
 8003a90:	4641      	mov	r1, r8
 8003a92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a96:	4641      	mov	r1, r8
 8003a98:	008a      	lsls	r2, r1, #2
 8003a9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a9e:	f7fc ffb1 	bl	8000a04 <__aeabi_uldivmod>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	4b38      	ldr	r3, [pc, #224]	; (8003b8c <UART_SetConfig+0x4e4>)
 8003aaa:	fba3 2301 	umull	r2, r3, r3, r1
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	2264      	movs	r2, #100	; 0x64
 8003ab2:	fb02 f303 	mul.w	r3, r2, r3
 8003ab6:	1acb      	subs	r3, r1, r3
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	3332      	adds	r3, #50	; 0x32
 8003abc:	4a33      	ldr	r2, [pc, #204]	; (8003b8c <UART_SetConfig+0x4e4>)
 8003abe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ac8:	441c      	add	r4, r3
 8003aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ace:	2200      	movs	r2, #0
 8003ad0:	673b      	str	r3, [r7, #112]	; 0x70
 8003ad2:	677a      	str	r2, [r7, #116]	; 0x74
 8003ad4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ad8:	4642      	mov	r2, r8
 8003ada:	464b      	mov	r3, r9
 8003adc:	1891      	adds	r1, r2, r2
 8003ade:	60b9      	str	r1, [r7, #8]
 8003ae0:	415b      	adcs	r3, r3
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ae8:	4641      	mov	r1, r8
 8003aea:	1851      	adds	r1, r2, r1
 8003aec:	6039      	str	r1, [r7, #0]
 8003aee:	4649      	mov	r1, r9
 8003af0:	414b      	adcs	r3, r1
 8003af2:	607b      	str	r3, [r7, #4]
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	f04f 0300 	mov.w	r3, #0
 8003afc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b00:	4659      	mov	r1, fp
 8003b02:	00cb      	lsls	r3, r1, #3
 8003b04:	4651      	mov	r1, sl
 8003b06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b0a:	4651      	mov	r1, sl
 8003b0c:	00ca      	lsls	r2, r1, #3
 8003b0e:	4610      	mov	r0, r2
 8003b10:	4619      	mov	r1, r3
 8003b12:	4603      	mov	r3, r0
 8003b14:	4642      	mov	r2, r8
 8003b16:	189b      	adds	r3, r3, r2
 8003b18:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b1a:	464b      	mov	r3, r9
 8003b1c:	460a      	mov	r2, r1
 8003b1e:	eb42 0303 	adc.w	r3, r2, r3
 8003b22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	663b      	str	r3, [r7, #96]	; 0x60
 8003b2e:	667a      	str	r2, [r7, #100]	; 0x64
 8003b30:	f04f 0200 	mov.w	r2, #0
 8003b34:	f04f 0300 	mov.w	r3, #0
 8003b38:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b3c:	4649      	mov	r1, r9
 8003b3e:	008b      	lsls	r3, r1, #2
 8003b40:	4641      	mov	r1, r8
 8003b42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b46:	4641      	mov	r1, r8
 8003b48:	008a      	lsls	r2, r1, #2
 8003b4a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b4e:	f7fc ff59 	bl	8000a04 <__aeabi_uldivmod>
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	4b0d      	ldr	r3, [pc, #52]	; (8003b8c <UART_SetConfig+0x4e4>)
 8003b58:	fba3 1302 	umull	r1, r3, r3, r2
 8003b5c:	095b      	lsrs	r3, r3, #5
 8003b5e:	2164      	movs	r1, #100	; 0x64
 8003b60:	fb01 f303 	mul.w	r3, r1, r3
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	3332      	adds	r3, #50	; 0x32
 8003b6a:	4a08      	ldr	r2, [pc, #32]	; (8003b8c <UART_SetConfig+0x4e4>)
 8003b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b70:	095b      	lsrs	r3, r3, #5
 8003b72:	f003 020f 	and.w	r2, r3, #15
 8003b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4422      	add	r2, r4
 8003b7e:	609a      	str	r2, [r3, #8]
}
 8003b80:	bf00      	nop
 8003b82:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b86:	46bd      	mov	sp, r7
 8003b88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b8c:	51eb851f 	.word	0x51eb851f

08003b90 <memset>:
 8003b90:	4402      	add	r2, r0
 8003b92:	4603      	mov	r3, r0
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d100      	bne.n	8003b9a <memset+0xa>
 8003b98:	4770      	bx	lr
 8003b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b9e:	e7f9      	b.n	8003b94 <memset+0x4>

08003ba0 <__libc_init_array>:
 8003ba0:	b570      	push	{r4, r5, r6, lr}
 8003ba2:	4d0d      	ldr	r5, [pc, #52]	; (8003bd8 <__libc_init_array+0x38>)
 8003ba4:	4c0d      	ldr	r4, [pc, #52]	; (8003bdc <__libc_init_array+0x3c>)
 8003ba6:	1b64      	subs	r4, r4, r5
 8003ba8:	10a4      	asrs	r4, r4, #2
 8003baa:	2600      	movs	r6, #0
 8003bac:	42a6      	cmp	r6, r4
 8003bae:	d109      	bne.n	8003bc4 <__libc_init_array+0x24>
 8003bb0:	4d0b      	ldr	r5, [pc, #44]	; (8003be0 <__libc_init_array+0x40>)
 8003bb2:	4c0c      	ldr	r4, [pc, #48]	; (8003be4 <__libc_init_array+0x44>)
 8003bb4:	f000 f818 	bl	8003be8 <_init>
 8003bb8:	1b64      	subs	r4, r4, r5
 8003bba:	10a4      	asrs	r4, r4, #2
 8003bbc:	2600      	movs	r6, #0
 8003bbe:	42a6      	cmp	r6, r4
 8003bc0:	d105      	bne.n	8003bce <__libc_init_array+0x2e>
 8003bc2:	bd70      	pop	{r4, r5, r6, pc}
 8003bc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bc8:	4798      	blx	r3
 8003bca:	3601      	adds	r6, #1
 8003bcc:	e7ee      	b.n	8003bac <__libc_init_array+0xc>
 8003bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bd2:	4798      	blx	r3
 8003bd4:	3601      	adds	r6, #1
 8003bd6:	e7f2      	b.n	8003bbe <__libc_init_array+0x1e>
 8003bd8:	08003c20 	.word	0x08003c20
 8003bdc:	08003c20 	.word	0x08003c20
 8003be0:	08003c20 	.word	0x08003c20
 8003be4:	08003c24 	.word	0x08003c24

08003be8 <_init>:
 8003be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bea:	bf00      	nop
 8003bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bee:	bc08      	pop	{r3}
 8003bf0:	469e      	mov	lr, r3
 8003bf2:	4770      	bx	lr

08003bf4 <_fini>:
 8003bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf6:	bf00      	nop
 8003bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bfa:	bc08      	pop	{r3}
 8003bfc:	469e      	mov	lr, r3
 8003bfe:	4770      	bx	lr
>>>>>>> 45cf2f7d4bfe21523bfbb9a720fa39350fe69a2f
