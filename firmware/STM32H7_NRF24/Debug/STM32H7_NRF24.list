
STM32H7_NRF24.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fa8  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08007274  08007274  00017274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007344  08007344  00017344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800734c  0800734c  0001734c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007350  08007350  00017350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08007354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08007364  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  080073c4  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  240000d0  08007424  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000320  08007424  00020320  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016d85  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000283f  00000000  00000000  00036ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa0  00000000  00000000  00039708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c07  00000000  00000000  0003a6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003349a  00000000  00000000  0003b2af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013b64  00000000  00000000  0006e749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0014a037  00000000  00000000  000822ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004158  00000000  00000000  001cc2e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001d043c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000d0 	.word	0x240000d0
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800725c 	.word	0x0800725c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000d4 	.word	0x240000d4
 8000308:	0800725c 	.word	0x0800725c

0800030c <strlen>:
 800030c:	4603      	mov	r3, r0
 800030e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000312:	2a00      	cmp	r2, #0
 8000314:	d1fb      	bne.n	800030e <strlen+0x2>
 8000316:	1a18      	subs	r0, r3, r0
 8000318:	3801      	subs	r0, #1
 800031a:	4770      	bx	lr

0800031c <__aeabi_uldivmod>:
 800031c:	b953      	cbnz	r3, 8000334 <__aeabi_uldivmod+0x18>
 800031e:	b94a      	cbnz	r2, 8000334 <__aeabi_uldivmod+0x18>
 8000320:	2900      	cmp	r1, #0
 8000322:	bf08      	it	eq
 8000324:	2800      	cmpeq	r0, #0
 8000326:	bf1c      	itt	ne
 8000328:	f04f 31ff 	movne.w	r1, #4294967295
 800032c:	f04f 30ff 	movne.w	r0, #4294967295
 8000330:	f000 b970 	b.w	8000614 <__aeabi_idiv0>
 8000334:	f1ad 0c08 	sub.w	ip, sp, #8
 8000338:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033c:	f000 f806 	bl	800034c <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4770      	bx	lr

0800034c <__udivmoddi4>:
 800034c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000350:	9e08      	ldr	r6, [sp, #32]
 8000352:	460d      	mov	r5, r1
 8000354:	4604      	mov	r4, r0
 8000356:	460f      	mov	r7, r1
 8000358:	2b00      	cmp	r3, #0
 800035a:	d14a      	bne.n	80003f2 <__udivmoddi4+0xa6>
 800035c:	428a      	cmp	r2, r1
 800035e:	4694      	mov	ip, r2
 8000360:	d965      	bls.n	800042e <__udivmoddi4+0xe2>
 8000362:	fab2 f382 	clz	r3, r2
 8000366:	b143      	cbz	r3, 800037a <__udivmoddi4+0x2e>
 8000368:	fa02 fc03 	lsl.w	ip, r2, r3
 800036c:	f1c3 0220 	rsb	r2, r3, #32
 8000370:	409f      	lsls	r7, r3
 8000372:	fa20 f202 	lsr.w	r2, r0, r2
 8000376:	4317      	orrs	r7, r2
 8000378:	409c      	lsls	r4, r3
 800037a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800037e:	fa1f f58c 	uxth.w	r5, ip
 8000382:	fbb7 f1fe 	udiv	r1, r7, lr
 8000386:	0c22      	lsrs	r2, r4, #16
 8000388:	fb0e 7711 	mls	r7, lr, r1, r7
 800038c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000390:	fb01 f005 	mul.w	r0, r1, r5
 8000394:	4290      	cmp	r0, r2
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x62>
 8000398:	eb1c 0202 	adds.w	r2, ip, r2
 800039c:	f101 37ff 	add.w	r7, r1, #4294967295
 80003a0:	f080 811c 	bcs.w	80005dc <__udivmoddi4+0x290>
 80003a4:	4290      	cmp	r0, r2
 80003a6:	f240 8119 	bls.w	80005dc <__udivmoddi4+0x290>
 80003aa:	3902      	subs	r1, #2
 80003ac:	4462      	add	r2, ip
 80003ae:	1a12      	subs	r2, r2, r0
 80003b0:	b2a4      	uxth	r4, r4
 80003b2:	fbb2 f0fe 	udiv	r0, r2, lr
 80003b6:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003be:	fb00 f505 	mul.w	r5, r0, r5
 80003c2:	42a5      	cmp	r5, r4
 80003c4:	d90a      	bls.n	80003dc <__udivmoddi4+0x90>
 80003c6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ca:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ce:	f080 8107 	bcs.w	80005e0 <__udivmoddi4+0x294>
 80003d2:	42a5      	cmp	r5, r4
 80003d4:	f240 8104 	bls.w	80005e0 <__udivmoddi4+0x294>
 80003d8:	4464      	add	r4, ip
 80003da:	3802      	subs	r0, #2
 80003dc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003e0:	1b64      	subs	r4, r4, r5
 80003e2:	2100      	movs	r1, #0
 80003e4:	b11e      	cbz	r6, 80003ee <__udivmoddi4+0xa2>
 80003e6:	40dc      	lsrs	r4, r3
 80003e8:	2300      	movs	r3, #0
 80003ea:	e9c6 4300 	strd	r4, r3, [r6]
 80003ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f2:	428b      	cmp	r3, r1
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0xbc>
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f000 80ed 	beq.w	80005d6 <__udivmoddi4+0x28a>
 80003fc:	2100      	movs	r1, #0
 80003fe:	e9c6 0500 	strd	r0, r5, [r6]
 8000402:	4608      	mov	r0, r1
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	fab3 f183 	clz	r1, r3
 800040c:	2900      	cmp	r1, #0
 800040e:	d149      	bne.n	80004a4 <__udivmoddi4+0x158>
 8000410:	42ab      	cmp	r3, r5
 8000412:	d302      	bcc.n	800041a <__udivmoddi4+0xce>
 8000414:	4282      	cmp	r2, r0
 8000416:	f200 80f8 	bhi.w	800060a <__udivmoddi4+0x2be>
 800041a:	1a84      	subs	r4, r0, r2
 800041c:	eb65 0203 	sbc.w	r2, r5, r3
 8000420:	2001      	movs	r0, #1
 8000422:	4617      	mov	r7, r2
 8000424:	2e00      	cmp	r6, #0
 8000426:	d0e2      	beq.n	80003ee <__udivmoddi4+0xa2>
 8000428:	e9c6 4700 	strd	r4, r7, [r6]
 800042c:	e7df      	b.n	80003ee <__udivmoddi4+0xa2>
 800042e:	b902      	cbnz	r2, 8000432 <__udivmoddi4+0xe6>
 8000430:	deff      	udf	#255	; 0xff
 8000432:	fab2 f382 	clz	r3, r2
 8000436:	2b00      	cmp	r3, #0
 8000438:	f040 8090 	bne.w	800055c <__udivmoddi4+0x210>
 800043c:	1a8a      	subs	r2, r1, r2
 800043e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000442:	fa1f fe8c 	uxth.w	lr, ip
 8000446:	2101      	movs	r1, #1
 8000448:	fbb2 f5f7 	udiv	r5, r2, r7
 800044c:	fb07 2015 	mls	r0, r7, r5, r2
 8000450:	0c22      	lsrs	r2, r4, #16
 8000452:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000456:	fb0e f005 	mul.w	r0, lr, r5
 800045a:	4290      	cmp	r0, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x124>
 800045e:	eb1c 0202 	adds.w	r2, ip, r2
 8000462:	f105 38ff 	add.w	r8, r5, #4294967295
 8000466:	d202      	bcs.n	800046e <__udivmoddi4+0x122>
 8000468:	4290      	cmp	r0, r2
 800046a:	f200 80cb 	bhi.w	8000604 <__udivmoddi4+0x2b8>
 800046e:	4645      	mov	r5, r8
 8000470:	1a12      	subs	r2, r2, r0
 8000472:	b2a4      	uxth	r4, r4
 8000474:	fbb2 f0f7 	udiv	r0, r2, r7
 8000478:	fb07 2210 	mls	r2, r7, r0, r2
 800047c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000480:	fb0e fe00 	mul.w	lr, lr, r0
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x14e>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000490:	d202      	bcs.n	8000498 <__udivmoddi4+0x14c>
 8000492:	45a6      	cmp	lr, r4
 8000494:	f200 80bb 	bhi.w	800060e <__udivmoddi4+0x2c2>
 8000498:	4610      	mov	r0, r2
 800049a:	eba4 040e 	sub.w	r4, r4, lr
 800049e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004a2:	e79f      	b.n	80003e4 <__udivmoddi4+0x98>
 80004a4:	f1c1 0720 	rsb	r7, r1, #32
 80004a8:	408b      	lsls	r3, r1
 80004aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80004b2:	fa05 f401 	lsl.w	r4, r5, r1
 80004b6:	fa20 f307 	lsr.w	r3, r0, r7
 80004ba:	40fd      	lsrs	r5, r7
 80004bc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004c0:	4323      	orrs	r3, r4
 80004c2:	fbb5 f8f9 	udiv	r8, r5, r9
 80004c6:	fa1f fe8c 	uxth.w	lr, ip
 80004ca:	fb09 5518 	mls	r5, r9, r8, r5
 80004ce:	0c1c      	lsrs	r4, r3, #16
 80004d0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004d4:	fb08 f50e 	mul.w	r5, r8, lr
 80004d8:	42a5      	cmp	r5, r4
 80004da:	fa02 f201 	lsl.w	r2, r2, r1
 80004de:	fa00 f001 	lsl.w	r0, r0, r1
 80004e2:	d90b      	bls.n	80004fc <__udivmoddi4+0x1b0>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004ec:	f080 8088 	bcs.w	8000600 <__udivmoddi4+0x2b4>
 80004f0:	42a5      	cmp	r5, r4
 80004f2:	f240 8085 	bls.w	8000600 <__udivmoddi4+0x2b4>
 80004f6:	f1a8 0802 	sub.w	r8, r8, #2
 80004fa:	4464      	add	r4, ip
 80004fc:	1b64      	subs	r4, r4, r5
 80004fe:	b29d      	uxth	r5, r3
 8000500:	fbb4 f3f9 	udiv	r3, r4, r9
 8000504:	fb09 4413 	mls	r4, r9, r3, r4
 8000508:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800050c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x1da>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f103 35ff 	add.w	r5, r3, #4294967295
 800051c:	d26c      	bcs.n	80005f8 <__udivmoddi4+0x2ac>
 800051e:	45a6      	cmp	lr, r4
 8000520:	d96a      	bls.n	80005f8 <__udivmoddi4+0x2ac>
 8000522:	3b02      	subs	r3, #2
 8000524:	4464      	add	r4, ip
 8000526:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800052a:	fba3 9502 	umull	r9, r5, r3, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	42ac      	cmp	r4, r5
 8000534:	46c8      	mov	r8, r9
 8000536:	46ae      	mov	lr, r5
 8000538:	d356      	bcc.n	80005e8 <__udivmoddi4+0x29c>
 800053a:	d053      	beq.n	80005e4 <__udivmoddi4+0x298>
 800053c:	b156      	cbz	r6, 8000554 <__udivmoddi4+0x208>
 800053e:	ebb0 0208 	subs.w	r2, r0, r8
 8000542:	eb64 040e 	sbc.w	r4, r4, lr
 8000546:	fa04 f707 	lsl.w	r7, r4, r7
 800054a:	40ca      	lsrs	r2, r1
 800054c:	40cc      	lsrs	r4, r1
 800054e:	4317      	orrs	r7, r2
 8000550:	e9c6 7400 	strd	r7, r4, [r6]
 8000554:	4618      	mov	r0, r3
 8000556:	2100      	movs	r1, #0
 8000558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055c:	f1c3 0120 	rsb	r1, r3, #32
 8000560:	fa02 fc03 	lsl.w	ip, r2, r3
 8000564:	fa20 f201 	lsr.w	r2, r0, r1
 8000568:	fa25 f101 	lsr.w	r1, r5, r1
 800056c:	409d      	lsls	r5, r3
 800056e:	432a      	orrs	r2, r5
 8000570:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000574:	fa1f fe8c 	uxth.w	lr, ip
 8000578:	fbb1 f0f7 	udiv	r0, r1, r7
 800057c:	fb07 1510 	mls	r5, r7, r0, r1
 8000580:	0c11      	lsrs	r1, r2, #16
 8000582:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000586:	fb00 f50e 	mul.w	r5, r0, lr
 800058a:	428d      	cmp	r5, r1
 800058c:	fa04 f403 	lsl.w	r4, r4, r3
 8000590:	d908      	bls.n	80005a4 <__udivmoddi4+0x258>
 8000592:	eb1c 0101 	adds.w	r1, ip, r1
 8000596:	f100 38ff 	add.w	r8, r0, #4294967295
 800059a:	d22f      	bcs.n	80005fc <__udivmoddi4+0x2b0>
 800059c:	428d      	cmp	r5, r1
 800059e:	d92d      	bls.n	80005fc <__udivmoddi4+0x2b0>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	1b49      	subs	r1, r1, r5
 80005a6:	b292      	uxth	r2, r2
 80005a8:	fbb1 f5f7 	udiv	r5, r1, r7
 80005ac:	fb07 1115 	mls	r1, r7, r5, r1
 80005b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005b4:	fb05 f10e 	mul.w	r1, r5, lr
 80005b8:	4291      	cmp	r1, r2
 80005ba:	d908      	bls.n	80005ce <__udivmoddi4+0x282>
 80005bc:	eb1c 0202 	adds.w	r2, ip, r2
 80005c0:	f105 38ff 	add.w	r8, r5, #4294967295
 80005c4:	d216      	bcs.n	80005f4 <__udivmoddi4+0x2a8>
 80005c6:	4291      	cmp	r1, r2
 80005c8:	d914      	bls.n	80005f4 <__udivmoddi4+0x2a8>
 80005ca:	3d02      	subs	r5, #2
 80005cc:	4462      	add	r2, ip
 80005ce:	1a52      	subs	r2, r2, r1
 80005d0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005d4:	e738      	b.n	8000448 <__udivmoddi4+0xfc>
 80005d6:	4631      	mov	r1, r6
 80005d8:	4630      	mov	r0, r6
 80005da:	e708      	b.n	80003ee <__udivmoddi4+0xa2>
 80005dc:	4639      	mov	r1, r7
 80005de:	e6e6      	b.n	80003ae <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e6fb      	b.n	80003dc <__udivmoddi4+0x90>
 80005e4:	4548      	cmp	r0, r9
 80005e6:	d2a9      	bcs.n	800053c <__udivmoddi4+0x1f0>
 80005e8:	ebb9 0802 	subs.w	r8, r9, r2
 80005ec:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005f0:	3b01      	subs	r3, #1
 80005f2:	e7a3      	b.n	800053c <__udivmoddi4+0x1f0>
 80005f4:	4645      	mov	r5, r8
 80005f6:	e7ea      	b.n	80005ce <__udivmoddi4+0x282>
 80005f8:	462b      	mov	r3, r5
 80005fa:	e794      	b.n	8000526 <__udivmoddi4+0x1da>
 80005fc:	4640      	mov	r0, r8
 80005fe:	e7d1      	b.n	80005a4 <__udivmoddi4+0x258>
 8000600:	46d0      	mov	r8, sl
 8000602:	e77b      	b.n	80004fc <__udivmoddi4+0x1b0>
 8000604:	3d02      	subs	r5, #2
 8000606:	4462      	add	r2, ip
 8000608:	e732      	b.n	8000470 <__udivmoddi4+0x124>
 800060a:	4608      	mov	r0, r1
 800060c:	e70a      	b.n	8000424 <__udivmoddi4+0xd8>
 800060e:	4464      	add	r4, ip
 8000610:	3802      	subs	r0, #2
 8000612:	e742      	b.n	800049a <__udivmoddi4+0x14e>

08000614 <__aeabi_idiv0>:
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061c:	f001 fa50 	bl	8001ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000620:	f000 f80e 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000624:	f000 f972 	bl	800090c <MX_GPIO_Init>
  MX_ETH_Init();
 8000628:	f000 f87a 	bl	8000720 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800062c:	f000 f91a 	bl	8000864 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000630:	f000 f964 	bl	80008fc <MX_USB_OTG_HS_USB_Init>
  MX_SPI1_Init();
 8000634:	f000 f8c0 	bl	80007b8 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  runRadio();
 8000638:	f000 ff06 	bl	8001448 <runRadio>
  while (1)
 800063c:	e7fe      	b.n	800063c <main+0x24>
	...

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b09c      	sub	sp, #112	; 0x70
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800064a:	224c      	movs	r2, #76	; 0x4c
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f006 fdd8 	bl	8007204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2220      	movs	r2, #32
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f006 fdd2 	bl	8007204 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000660:	2002      	movs	r0, #2
 8000662:	f002 f9db 	bl	8002a1c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000666:	2300      	movs	r3, #0
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	4b2c      	ldr	r3, [pc, #176]	; (800071c <SystemClock_Config+0xdc>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	4a2b      	ldr	r2, [pc, #172]	; (800071c <SystemClock_Config+0xdc>)
 8000670:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000674:	6193      	str	r3, [r2, #24]
 8000676:	4b29      	ldr	r3, [pc, #164]	; (800071c <SystemClock_Config+0xdc>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000682:	bf00      	nop
 8000684:	4b25      	ldr	r3, [pc, #148]	; (800071c <SystemClock_Config+0xdc>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800068c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000690:	d1f8      	bne.n	8000684 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000692:	2321      	movs	r3, #33	; 0x21
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000696:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800069a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a4:	2302      	movs	r3, #2
 80006a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a8:	2304      	movs	r3, #4
 80006aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80006ac:	f240 1313 	movw	r3, #275	; 0x113
 80006b0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b6:	2304      	movs	r3, #4
 80006b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80006be:	2304      	movs	r3, #4
 80006c0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006c2:	2300      	movs	r3, #0
 80006c4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 f9de 	bl	8002a90 <HAL_RCC_OscConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006da:	f000 fa3f 	bl	8000b5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006de:	233f      	movs	r3, #63	; 0x3f
 80006e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e2:	2303      	movs	r3, #3
 80006e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006ea:	2308      	movs	r3, #8
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006ee:	2340      	movs	r3, #64	; 0x40
 80006f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006f2:	2340      	movs	r3, #64	; 0x40
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006fa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006fc:	2340      	movs	r3, #64	; 0x40
 80006fe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2103      	movs	r1, #3
 8000704:	4618      	mov	r0, r3
 8000706:	f002 fd9d 	bl	8003244 <HAL_RCC_ClockConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000710:	f000 fa24 	bl	8000b5c <Error_Handler>
  }
}
 8000714:	bf00      	nop
 8000716:	3770      	adds	r7, #112	; 0x70
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	58024800 	.word	0x58024800

08000720 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000724:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <MX_ETH_Init+0x80>)
 8000726:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <MX_ETH_Init+0x84>)
 8000728:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800072a:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <MX_ETH_Init+0x88>)
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000730:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <MX_ETH_Init+0x88>)
 8000732:	2280      	movs	r2, #128	; 0x80
 8000734:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000736:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <MX_ETH_Init+0x88>)
 8000738:	22e1      	movs	r2, #225	; 0xe1
 800073a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800073c:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <MX_ETH_Init+0x88>)
 800073e:	2200      	movs	r2, #0
 8000740:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <MX_ETH_Init+0x88>)
 8000744:	2200      	movs	r2, #0
 8000746:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_ETH_Init+0x88>)
 800074a:	2200      	movs	r2, #0
 800074c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_ETH_Init+0x80>)
 8000750:	4a15      	ldr	r2, [pc, #84]	; (80007a8 <MX_ETH_Init+0x88>)
 8000752:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MX_ETH_Init+0x80>)
 8000756:	2201      	movs	r2, #1
 8000758:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_ETH_Init+0x80>)
 800075c:	4a13      	ldr	r2, [pc, #76]	; (80007ac <MX_ETH_Init+0x8c>)
 800075e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_ETH_Init+0x80>)
 8000762:	4a13      	ldr	r2, [pc, #76]	; (80007b0 <MX_ETH_Init+0x90>)
 8000764:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_ETH_Init+0x80>)
 8000768:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800076c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800076e:	480c      	ldr	r0, [pc, #48]	; (80007a0 <MX_ETH_Init+0x80>)
 8000770:	f001 fb54 	bl	8001e1c <HAL_ETH_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800077a:	f000 f9ef 	bl	8000b5c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800077e:	2238      	movs	r2, #56	; 0x38
 8000780:	2100      	movs	r1, #0
 8000782:	480c      	ldr	r0, [pc, #48]	; (80007b4 <MX_ETH_Init+0x94>)
 8000784:	f006 fd3e 	bl	8007204 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000788:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <MX_ETH_Init+0x94>)
 800078a:	2221      	movs	r2, #33	; 0x21
 800078c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_ETH_Init+0x94>)
 8000790:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000794:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000796:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <MX_ETH_Init+0x94>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	24000124 	.word	0x24000124
 80007a4:	40028000 	.word	0x40028000
 80007a8:	240002f0 	.word	0x240002f0
 80007ac:	24000070 	.word	0x24000070
 80007b0:	24000010 	.word	0x24000010
 80007b4:	240000ec 	.word	0x240000ec

080007b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007bc:	4b27      	ldr	r3, [pc, #156]	; (800085c <MX_SPI1_Init+0xa4>)
 80007be:	4a28      	ldr	r2, [pc, #160]	; (8000860 <MX_SPI1_Init+0xa8>)
 80007c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007c2:	4b26      	ldr	r3, [pc, #152]	; (800085c <MX_SPI1_Init+0xa4>)
 80007c4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80007c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ca:	4b24      	ldr	r3, [pc, #144]	; (800085c <MX_SPI1_Init+0xa4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d0:	4b22      	ldr	r3, [pc, #136]	; (800085c <MX_SPI1_Init+0xa4>)
 80007d2:	2207      	movs	r2, #7
 80007d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d6:	4b21      	ldr	r3, [pc, #132]	; (800085c <MX_SPI1_Init+0xa4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <MX_SPI1_Init+0xa4>)
 80007de:	2200      	movs	r2, #0
 80007e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007e2:	4b1e      	ldr	r3, [pc, #120]	; (800085c <MX_SPI1_Init+0xa4>)
 80007e4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80007e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80007ea:	4b1c      	ldr	r3, [pc, #112]	; (800085c <MX_SPI1_Init+0xa4>)
 80007ec:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80007f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <MX_SPI1_Init+0xa4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <MX_SPI1_Init+0xa4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_SPI1_Init+0xa4>)
 8000800:	2200      	movs	r2, #0
 8000802:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_SPI1_Init+0xa4>)
 8000806:	2200      	movs	r2, #0
 8000808:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_SPI1_Init+0xa4>)
 800080c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000810:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000812:	4b12      	ldr	r3, [pc, #72]	; (800085c <MX_SPI1_Init+0xa4>)
 8000814:	2200      	movs	r2, #0
 8000816:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000818:	4b10      	ldr	r3, [pc, #64]	; (800085c <MX_SPI1_Init+0xa4>)
 800081a:	2200      	movs	r2, #0
 800081c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_SPI1_Init+0xa4>)
 8000820:	2200      	movs	r2, #0
 8000822:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000824:	4b0d      	ldr	r3, [pc, #52]	; (800085c <MX_SPI1_Init+0xa4>)
 8000826:	2200      	movs	r2, #0
 8000828:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_SPI1_Init+0xa4>)
 800082c:	2200      	movs	r2, #0
 800082e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <MX_SPI1_Init+0xa4>)
 8000832:	2200      	movs	r2, #0
 8000834:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_SPI1_Init+0xa4>)
 8000838:	2200      	movs	r2, #0
 800083a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <MX_SPI1_Init+0xa4>)
 800083e:	2200      	movs	r2, #0
 8000840:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_SPI1_Init+0xa4>)
 8000844:	2200      	movs	r2, #0
 8000846:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000848:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_SPI1_Init+0xa4>)
 800084a:	f004 fe49 	bl	80054e0 <HAL_SPI_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000854:	f000 f982 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	240001d4 	.word	0x240001d4
 8000860:	40013000 	.word	0x40013000

08000864 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000868:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <MX_USART3_UART_Init+0x90>)
 800086a:	4a23      	ldr	r2, [pc, #140]	; (80008f8 <MX_USART3_UART_Init+0x94>)
 800086c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800086e:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <MX_USART3_UART_Init+0x90>)
 8000870:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000874:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <MX_USART3_UART_Init+0x90>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <MX_USART3_UART_Init+0x90>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000882:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <MX_USART3_UART_Init+0x90>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <MX_USART3_UART_Init+0x90>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <MX_USART3_UART_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <MX_USART3_UART_Init+0x90>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089a:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <MX_USART3_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_USART3_UART_Init+0x90>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <MX_USART3_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ac:	4811      	ldr	r0, [pc, #68]	; (80008f4 <MX_USART3_UART_Init+0x90>)
 80008ae:	f005 fa40 	bl	8005d32 <HAL_UART_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008b8:	f000 f950 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008bc:	2100      	movs	r1, #0
 80008be:	480d      	ldr	r0, [pc, #52]	; (80008f4 <MX_USART3_UART_Init+0x90>)
 80008c0:	f006 fbd5 	bl	800706e <HAL_UARTEx_SetTxFifoThreshold>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008ca:	f000 f947 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ce:	2100      	movs	r1, #0
 80008d0:	4808      	ldr	r0, [pc, #32]	; (80008f4 <MX_USART3_UART_Init+0x90>)
 80008d2:	f006 fc0a 	bl	80070ea <HAL_UARTEx_SetRxFifoThreshold>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008dc:	f000 f93e 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <MX_USART3_UART_Init+0x90>)
 80008e2:	f006 fb8b 	bl	8006ffc <HAL_UARTEx_DisableFifoMode>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008ec:	f000 f936 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2400025c 	.word	0x2400025c
 80008f8:	40004800 	.word	0x40004800

080008fc <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
	...

0800090c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08e      	sub	sp, #56	; 0x38
 8000910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	4b86      	ldr	r3, [pc, #536]	; (8000b3c <MX_GPIO_Init+0x230>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000928:	4a84      	ldr	r2, [pc, #528]	; (8000b3c <MX_GPIO_Init+0x230>)
 800092a:	f043 0304 	orr.w	r3, r3, #4
 800092e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000932:	4b82      	ldr	r3, [pc, #520]	; (8000b3c <MX_GPIO_Init+0x230>)
 8000934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000938:	f003 0304 	and.w	r3, r3, #4
 800093c:	623b      	str	r3, [r7, #32]
 800093e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000940:	4b7e      	ldr	r3, [pc, #504]	; (8000b3c <MX_GPIO_Init+0x230>)
 8000942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000946:	4a7d      	ldr	r2, [pc, #500]	; (8000b3c <MX_GPIO_Init+0x230>)
 8000948:	f043 0320 	orr.w	r3, r3, #32
 800094c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000950:	4b7a      	ldr	r3, [pc, #488]	; (8000b3c <MX_GPIO_Init+0x230>)
 8000952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000956:	f003 0320 	and.w	r3, r3, #32
 800095a:	61fb      	str	r3, [r7, #28]
 800095c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095e:	4b77      	ldr	r3, [pc, #476]	; (8000b3c <MX_GPIO_Init+0x230>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000964:	4a75      	ldr	r2, [pc, #468]	; (8000b3c <MX_GPIO_Init+0x230>)
 8000966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800096a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800096e:	4b73      	ldr	r3, [pc, #460]	; (8000b3c <MX_GPIO_Init+0x230>)
 8000970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000978:	61bb      	str	r3, [r7, #24]
 800097a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097c:	4b6f      	ldr	r3, [pc, #444]	; (8000b3c <MX_GPIO_Init+0x230>)
 800097e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000982:	4a6e      	ldr	r2, [pc, #440]	; (8000b3c <MX_GPIO_Init+0x230>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800098c:	4b6b      	ldr	r3, [pc, #428]	; (8000b3c <MX_GPIO_Init+0x230>)
 800098e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	4b68      	ldr	r3, [pc, #416]	; (8000b3c <MX_GPIO_Init+0x230>)
 800099c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a0:	4a66      	ldr	r2, [pc, #408]	; (8000b3c <MX_GPIO_Init+0x230>)
 80009a2:	f043 0302 	orr.w	r3, r3, #2
 80009a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009aa:	4b64      	ldr	r3, [pc, #400]	; (8000b3c <MX_GPIO_Init+0x230>)
 80009ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b0:	f003 0302 	and.w	r3, r3, #2
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b8:	4b60      	ldr	r3, [pc, #384]	; (8000b3c <MX_GPIO_Init+0x230>)
 80009ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009be:	4a5f      	ldr	r2, [pc, #380]	; (8000b3c <MX_GPIO_Init+0x230>)
 80009c0:	f043 0308 	orr.w	r3, r3, #8
 80009c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c8:	4b5c      	ldr	r3, [pc, #368]	; (8000b3c <MX_GPIO_Init+0x230>)
 80009ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ce:	f003 0308 	and.w	r3, r3, #8
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009d6:	4b59      	ldr	r3, [pc, #356]	; (8000b3c <MX_GPIO_Init+0x230>)
 80009d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009dc:	4a57      	ldr	r2, [pc, #348]	; (8000b3c <MX_GPIO_Init+0x230>)
 80009de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e6:	4b55      	ldr	r3, [pc, #340]	; (8000b3c <MX_GPIO_Init+0x230>)
 80009e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009f4:	4b51      	ldr	r3, [pc, #324]	; (8000b3c <MX_GPIO_Init+0x230>)
 80009f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fa:	4a50      	ldr	r2, [pc, #320]	; (8000b3c <MX_GPIO_Init+0x230>)
 80009fc:	f043 0310 	orr.w	r3, r3, #16
 8000a00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a04:	4b4d      	ldr	r3, [pc, #308]	; (8000b3c <MX_GPIO_Init+0x230>)
 8000a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0a:	f003 0310 	and.w	r3, r3, #16
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a18:	4849      	ldr	r0, [pc, #292]	; (8000b40 <MX_GPIO_Init+0x234>)
 8000a1a:	f001 ffcb 	bl	80029b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|NRF_CSN_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8000a24:	4847      	ldr	r0, [pc, #284]	; (8000b44 <MX_GPIO_Init+0x238>)
 8000a26:	f001 ffc5 	bl	80029b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	4846      	ldr	r0, [pc, #280]	; (8000b48 <MX_GPIO_Init+0x23c>)
 8000a30:	f001 ffc0 	bl	80029b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a46:	4619      	mov	r1, r3
 8000a48:	4840      	ldr	r0, [pc, #256]	; (8000b4c <MX_GPIO_Init+0x240>)
 8000a4a:	f001 fe0b 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8000a4e:	2308      	movs	r3, #8
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a52:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a60:	4619      	mov	r1, r3
 8000a62:	483b      	ldr	r0, [pc, #236]	; (8000b50 <MX_GPIO_Init+0x244>)
 8000a64:	f001 fdfe 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED_RED_Pin;
 8000a68:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7e:	4619      	mov	r1, r3
 8000a80:	482f      	ldr	r0, [pc, #188]	; (8000b40 <MX_GPIO_Init+0x234>)
 8000a82:	f001 fdef 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4829      	ldr	r0, [pc, #164]	; (8000b44 <MX_GPIO_Init+0x238>)
 8000aa0:	f001 fde0 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CSN_Pin NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin|NRF_CE_Pin;
 8000aa4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aba:	4619      	mov	r1, r3
 8000abc:	4821      	ldr	r0, [pc, #132]	; (8000b44 <MX_GPIO_Init+0x238>)
 8000abe:	f001 fdd1 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000ac2:	2380      	movs	r3, #128	; 0x80
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	481f      	ldr	r0, [pc, #124]	; (8000b54 <MX_GPIO_Init+0x248>)
 8000ad8:	f001 fdc4 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000adc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aee:	4619      	mov	r1, r3
 8000af0:	4819      	ldr	r0, [pc, #100]	; (8000b58 <MX_GPIO_Init+0x24c>)
 8000af2:	f001 fdb7 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000af6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000b08:	230a      	movs	r3, #10
 8000b0a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b10:	4619      	mov	r1, r3
 8000b12:	4811      	ldr	r0, [pc, #68]	; (8000b58 <MX_GPIO_Init+0x24c>)
 8000b14:	f001 fda6 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4806      	ldr	r0, [pc, #24]	; (8000b48 <MX_GPIO_Init+0x23c>)
 8000b30:	f001 fd98 	bl	8002664 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b34:	bf00      	nop
 8000b36:	3738      	adds	r7, #56	; 0x38
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	58024400 	.word	0x58024400
 8000b40:	58020400 	.word	0x58020400
 8000b44:	58020c00 	.word	0x58020c00
 8000b48:	58021000 	.word	0x58021000
 8000b4c:	58020800 	.word	0x58020800
 8000b50:	58021400 	.word	0x58021400
 8000b54:	58021800 	.word	0x58021800
 8000b58:	58020000 	.word	0x58020000

08000b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b60:	b672      	cpsid	i
}
 8000b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <Error_Handler+0x8>
	...

08000b68 <nRF24_CSN_L>:

static inline void nRF24_CE_H() {
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
}

static inline void nRF24_CSN_L() {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b72:	4802      	ldr	r0, [pc, #8]	; (8000b7c <nRF24_CSN_L+0x14>)
 8000b74:	f001 ff1e 	bl	80029b4 <HAL_GPIO_WritePin>
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	58020c00 	.word	0x58020c00

08000b80 <nRF24_CSN_H>:

static inline void nRF24_CSN_H() {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8000b84:	2201      	movs	r2, #1
 8000b86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b8a:	4802      	ldr	r0, [pc, #8]	; (8000b94 <nRF24_CSN_H+0x14>)
 8000b8c:	f001 ff12 	bl	80029b4 <HAL_GPIO_WritePin>
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	58020c00 	.word	0x58020c00

08000b98 <nRF24_LL_RW>:


static inline uint8_t nRF24_LL_RW(uint8_t data) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af02      	add	r7, sp, #8
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
    // Wait until TX buffer is empty
    uint8_t result;
    if(HAL_SPI_TransmitReceive(&hspi1,&data,&result,1,2000)!=HAL_OK) {
 8000ba2:	f107 020f 	add.w	r2, r7, #15
 8000ba6:	1df9      	adds	r1, r7, #7
 8000ba8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	2301      	movs	r3, #1
 8000bb0:	4806      	ldr	r0, [pc, #24]	; (8000bcc <nRF24_LL_RW+0x34>)
 8000bb2:	f004 fdb9 	bl	8005728 <HAL_SPI_TransmitReceive>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <nRF24_LL_RW+0x28>
        Error_Handler();
 8000bbc:	f7ff ffce 	bl	8000b5c <Error_Handler>
    };
    return result;
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	240001d4 	.word	0x240001d4

08000bd0 <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8000bda:	f7ff ffc5 	bl	8000b68 <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	f003 031f 	and.w	r3, r3, #31
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff ffd6 	bl	8000b98 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8000bec:	20ff      	movs	r0, #255	; 0xff
 8000bee:	f7ff ffd3 	bl	8000b98 <nRF24_LL_RW>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8000bf6:	f7ff ffc3 	bl	8000b80 <nRF24_CSN_H>

	return value;
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	460a      	mov	r2, r1
 8000c0e:	71fb      	strb	r3, [r7, #7]
 8000c10:	4613      	mov	r3, r2
 8000c12:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000c14:	f7ff ffa8 	bl	8000b68 <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER) {
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	2b1f      	cmp	r3, #31
 8000c1c:	d810      	bhi.n	8000c40 <nRF24_WriteReg+0x3c>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	f003 031f 	and.w	r3, r3, #31
 8000c26:	b25b      	sxtb	r3, r3
 8000c28:	f043 0320 	orr.w	r3, r3, #32
 8000c2c:	b25b      	sxtb	r3, r3
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ffb1 	bl	8000b98 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8000c36:	79bb      	ldrb	r3, [r7, #6]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff ffad 	bl	8000b98 <nRF24_LL_RW>
 8000c3e:	e013      	b.n	8000c68 <nRF24_WriteReg+0x64>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff ffa8 	bl	8000b98 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	2be1      	cmp	r3, #225	; 0xe1
 8000c4c:	d00c      	beq.n	8000c68 <nRF24_WriteReg+0x64>
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2be2      	cmp	r3, #226	; 0xe2
 8000c52:	d009      	beq.n	8000c68 <nRF24_WriteReg+0x64>
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	2be3      	cmp	r3, #227	; 0xe3
 8000c58:	d006      	beq.n	8000c68 <nRF24_WriteReg+0x64>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	2bff      	cmp	r3, #255	; 0xff
 8000c5e:	d003      	beq.n	8000c68 <nRF24_WriteReg+0x64>
			// Send register value
			nRF24_LL_RW(value);
 8000c60:	79bb      	ldrb	r3, [r7, #6]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ff98 	bl	8000b98 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8000c68:	f7ff ff8a 	bl	8000b80 <nRF24_CSN_H>
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	6039      	str	r1, [r7, #0]
 8000c7e:	71fb      	strb	r3, [r7, #7]
 8000c80:	4613      	mov	r3, r2
 8000c82:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000c84:	f7ff ff70 	bl	8000b68 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ff84 	bl	8000b98 <nRF24_LL_RW>
	while (count--) {
 8000c90:	e007      	b.n	8000ca2 <nRF24_ReadMBReg+0x2e>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8000c92:	683c      	ldr	r4, [r7, #0]
 8000c94:	1c63      	adds	r3, r4, #1
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	20ff      	movs	r0, #255	; 0xff
 8000c9a:	f7ff ff7d 	bl	8000b98 <nRF24_LL_RW>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	7023      	strb	r3, [r4, #0]
	while (count--) {
 8000ca2:	79bb      	ldrb	r3, [r7, #6]
 8000ca4:	1e5a      	subs	r2, r3, #1
 8000ca6:	71ba      	strb	r2, [r7, #6]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d1f2      	bne.n	8000c92 <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 8000cac:	f7ff ff68 	bl	8000b80 <nRF24_CSN_H>
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd90      	pop	{r4, r7, pc}

08000cb8 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	71fb      	strb	r3, [r7, #7]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000cc8:	f7ff ff4e 	bl	8000b68 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff ff62 	bl	8000b98 <nRF24_LL_RW>
	while (count--) {
 8000cd4:	e006      	b.n	8000ce4 <nRF24_WriteMBReg+0x2c>
		nRF24_LL_RW(*pBuf++);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	1c5a      	adds	r2, r3, #1
 8000cda:	603a      	str	r2, [r7, #0]
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff ff5a 	bl	8000b98 <nRF24_LL_RW>
	while (count--) {
 8000ce4:	79bb      	ldrb	r3, [r7, #6]
 8000ce6:	1e5a      	subs	r2, r3, #1
 8000ce8:	71ba      	strb	r2, [r7, #6]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1f3      	bne.n	8000cd6 <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 8000cee:	f7ff ff47 	bl	8000b80 <nRF24_CSN_H>
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 8000cfe:	2108      	movs	r1, #8
 8000d00:	2000      	movs	r0, #0
 8000d02:	f7ff ff7f 	bl	8000c04 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 8000d06:	213f      	movs	r1, #63	; 0x3f
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f7ff ff7b 	bl	8000c04 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 8000d0e:	2103      	movs	r1, #3
 8000d10:	2002      	movs	r0, #2
 8000d12:	f7ff ff77 	bl	8000c04 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 8000d16:	2103      	movs	r1, #3
 8000d18:	2003      	movs	r0, #3
 8000d1a:	f7ff ff73 	bl	8000c04 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 8000d1e:	2103      	movs	r1, #3
 8000d20:	2004      	movs	r0, #4
 8000d22:	f7ff ff6f 	bl	8000c04 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 8000d26:	2102      	movs	r1, #2
 8000d28:	2005      	movs	r0, #5
 8000d2a:	f7ff ff6b 	bl	8000c04 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 8000d2e:	210e      	movs	r1, #14
 8000d30:	2006      	movs	r0, #6
 8000d32:	f7ff ff67 	bl	8000c04 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 8000d36:	2100      	movs	r1, #0
 8000d38:	2007      	movs	r0, #7
 8000d3a:	f7ff ff63 	bl	8000c04 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2011      	movs	r0, #17
 8000d42:	f7ff ff5f 	bl	8000c04 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 8000d46:	2100      	movs	r1, #0
 8000d48:	2012      	movs	r0, #18
 8000d4a:	f7ff ff5b 	bl	8000c04 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8000d4e:	2100      	movs	r1, #0
 8000d50:	2013      	movs	r0, #19
 8000d52:	f7ff ff57 	bl	8000c04 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 8000d56:	2100      	movs	r1, #0
 8000d58:	2014      	movs	r0, #20
 8000d5a:	f7ff ff53 	bl	8000c04 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8000d5e:	2100      	movs	r1, #0
 8000d60:	2015      	movs	r0, #21
 8000d62:	f7ff ff4f 	bl	8000c04 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8000d66:	2100      	movs	r1, #0
 8000d68:	2016      	movs	r0, #22
 8000d6a:	f7ff ff4b 	bl	8000c04 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 8000d6e:	2100      	movs	r1, #0
 8000d70:	201c      	movs	r0, #28
 8000d72:	f7ff ff47 	bl	8000c04 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 8000d76:	2100      	movs	r1, #0
 8000d78:	201d      	movs	r0, #29
 8000d7a:	f7ff ff43 	bl	8000c04 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 8000d7e:	f000 f9ea 	bl	8001156 <nRF24_FlushRX>
	nRF24_FlushTX();
 8000d82:	f000 f9e0 	bl	8001146 <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 8000d86:	f000 f9ee 	bl	8001166 <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 8000d8a:	f7ff fef9 	bl	8000b80 <nRF24_CSN_H>
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
	...

08000d94 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 8000d9a:	4b14      	ldr	r3, [pc, #80]	; (8000dec <nRF24_Check+0x58>)
 8000d9c:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8000d9e:	2205      	movs	r2, #5
 8000da0:	68b9      	ldr	r1, [r7, #8]
 8000da2:	2030      	movs	r0, #48	; 0x30
 8000da4:	f7ff ff88 	bl	8000cb8 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8000da8:	463b      	mov	r3, r7
 8000daa:	2205      	movs	r2, #5
 8000dac:	4619      	mov	r1, r3
 8000dae:	2010      	movs	r0, #16
 8000db0:	f7ff ff60 	bl	8000c74 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 8000db4:	2300      	movs	r3, #0
 8000db6:	73fb      	strb	r3, [r7, #15]
 8000db8:	e00f      	b.n	8000dda <nRF24_Check+0x46>
		if (rxbuf[i] != *ptr++) return 0;
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	3310      	adds	r3, #16
 8000dbe:	443b      	add	r3, r7
 8000dc0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	1c59      	adds	r1, r3, #1
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d001      	beq.n	8000dd4 <nRF24_Check+0x40>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e006      	b.n	8000de2 <nRF24_Check+0x4e>
	for (i = 0; i < 5; i++) {
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	73fb      	strb	r3, [r7, #15]
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	2b04      	cmp	r3, #4
 8000dde:	d9ec      	bls.n	8000dba <nRF24_Check+0x26>
	}

	return 1;
 8000de0:	2301      	movs	r3, #1
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	08007274 	.word	0x08007274

08000df0 <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f7ff fee8 	bl	8000bd0 <nRF24_ReadReg>
 8000e00:	4603      	mov	r3, r0
 8000e02:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d104      	bne.n	8000e14 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	73fb      	strb	r3, [r7, #15]
 8000e12:	e003      	b.n	8000e1c <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	f023 0302 	bic.w	r3, r3, #2
 8000e1a:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	4619      	mov	r1, r3
 8000e20:	2000      	movs	r0, #0
 8000e22:	f7ff feef 	bl	8000c04 <nRF24_WriteReg>
}
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b084      	sub	sp, #16
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	4603      	mov	r3, r0
 8000e36:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f7ff fec9 	bl	8000bd0 <nRF24_ReadReg>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	f023 0301 	bic.w	r3, r3, #1
 8000e48:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	b25a      	sxtb	r2, r3
 8000e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	b25b      	sxtb	r3, r3
 8000e5c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	4619      	mov	r1, r3
 8000e62:	2000      	movs	r0, #0
 8000e64:	f7ff fece 	bl	8000c04 <nRF24_WriteReg>
}
 8000e68:	bf00      	nop
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <nRF24_SetDynamicPayloadLength>:

// Set transceiver DynamicPayloadLength feature for all the pipes
// input:
//   mode - status, one of nRF24_DPL_xx values
void nRF24_SetDynamicPayloadLength(uint8_t mode) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg  = nRF24_ReadReg(nRF24_REG_FEATURE);
 8000e7a:	201d      	movs	r0, #29
 8000e7c:	f7ff fea8 	bl	8000bd0 <nRF24_ReadReg>
 8000e80:	4603      	mov	r3, r0
 8000e82:	73fb      	strb	r3, [r7, #15]
	if(mode) {
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d00c      	beq.n	8000ea4 <nRF24_SetDynamicPayloadLength+0x34>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg | nRF24_FEATURE_EN_DPL);
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	f043 0304 	orr.w	r3, r3, #4
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	4619      	mov	r1, r3
 8000e94:	201d      	movs	r0, #29
 8000e96:	f7ff feb5 	bl	8000c04 <nRF24_WriteReg>
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x1F);
 8000e9a:	211f      	movs	r1, #31
 8000e9c:	201c      	movs	r0, #28
 8000e9e:	f7ff feb1 	bl	8000c04 <nRF24_WriteReg>
	} else {
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_DPL);
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x0);
	}
}
 8000ea2:	e00b      	b.n	8000ebc <nRF24_SetDynamicPayloadLength+0x4c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_DPL);
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	f023 0304 	bic.w	r3, r3, #4
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	4619      	mov	r1, r3
 8000eae:	201d      	movs	r0, #29
 8000eb0:	f7ff fea8 	bl	8000c04 <nRF24_WriteReg>
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x0);
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	201c      	movs	r0, #28
 8000eb8:	f7ff fea4 	bl	8000c04 <nRF24_WriteReg>
}
 8000ebc:	bf00      	nop
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <nRF24_SetPayloadWithAck>:

// Enables Payload With Ack. NB Refer to the datasheet for proper retransmit timing.
// input:
//   mode - status, 1 or 0
void nRF24_SetPayloadWithAck(uint8_t mode) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg  = nRF24_ReadReg(nRF24_REG_FEATURE);
 8000ece:	201d      	movs	r0, #29
 8000ed0:	f7ff fe7e 	bl	8000bd0 <nRF24_ReadReg>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	73fb      	strb	r3, [r7, #15]
	if(mode) {
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d008      	beq.n	8000ef0 <nRF24_SetPayloadWithAck+0x2c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg | nRF24_FEATURE_EN_ACK_PAY);
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	f043 0302 	orr.w	r3, r3, #2
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	201d      	movs	r0, #29
 8000eea:	f7ff fe8b 	bl	8000c04 <nRF24_WriteReg>
	} else {
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_ACK_PAY);
	}
}
 8000eee:	e007      	b.n	8000f00 <nRF24_SetPayloadWithAck+0x3c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_ACK_PAY);
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	f023 0302 	bic.w	r3, r3, #2
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	4619      	mov	r1, r3
 8000efa:	201d      	movs	r0, #29
 8000efc:	f7ff fe82 	bl	8000c04 <nRF24_WriteReg>
}
 8000f00:	bf00      	nop
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8000f12:	2000      	movs	r0, #0
 8000f14:	f7ff fe5c 	bl	8000bd0 <nRF24_ReadReg>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	f023 030c 	bic.w	r3, r3, #12
 8000f22:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8000f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f28:	f003 030c 	and.w	r3, r3, #12
 8000f2c:	b25a      	sxtb	r2, r3
 8000f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	b25b      	sxtb	r3, r3
 8000f36:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f7ff fe61 	bl	8000c04 <nRF24_WriteReg>
}
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4603      	mov	r3, r0
 8000f52:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	4619      	mov	r1, r3
 8000f58:	2005      	movs	r0, #5
 8000f5a:	f7ff fe53 	bl	8000c04 <nRF24_WriteReg>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	3b02      	subs	r3, #2
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	4619      	mov	r1, r3
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f7ff fe43 	bl	8000c04 <nRF24_WriteReg>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	2b06      	cmp	r3, #6
 8000f98:	d00a      	beq.n	8000fb0 <nRF24_SetAddr+0x28>
 8000f9a:	2b06      	cmp	r3, #6
 8000f9c:	dc36      	bgt.n	800100c <nRF24_SetAddr+0x84>
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	dc02      	bgt.n	8000fa8 <nRF24_SetAddr+0x20>
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	da04      	bge.n	8000fb0 <nRF24_SetAddr+0x28>
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
			break;
		default:
			// Incorrect pipe number -> do nothing
			break;
 8000fa6:	e031      	b.n	800100c <nRF24_SetAddr+0x84>
 8000fa8:	3b02      	subs	r3, #2
	switch (pipe) {
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	d82e      	bhi.n	800100c <nRF24_SetAddr+0x84>
 8000fae:	e023      	b.n	8000ff8 <nRF24_SetAddr+0x70>
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f7ff fe0d 	bl	8000bd0 <nRF24_ReadReg>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	3301      	adds	r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
			addr += addr_width;
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	683a      	ldr	r2, [r7, #0]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 8000fc4:	f7ff fdd0 	bl	8000b68 <nRF24_CSN_L>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	4a13      	ldr	r2, [pc, #76]	; (8001018 <nRF24_SetAddr+0x90>)
 8000fcc:	5cd3      	ldrb	r3, [r2, r3]
 8000fce:	f043 0320 	orr.w	r3, r3, #32
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fddf 	bl	8000b98 <nRF24_LL_RW>
				nRF24_LL_RW(*addr--);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	1e5a      	subs	r2, r3, #1
 8000fde:	603a      	str	r2, [r7, #0]
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fdd8 	bl	8000b98 <nRF24_LL_RW>
			} while (addr_width--);
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	1e5a      	subs	r2, r3, #1
 8000fec:	73fa      	strb	r2, [r7, #15]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1f3      	bne.n	8000fda <nRF24_SetAddr+0x52>
			nRF24_CSN_H();
 8000ff2:	f7ff fdc5 	bl	8000b80 <nRF24_CSN_H>
			break;
 8000ff6:	e00a      	b.n	800100e <nRF24_SetAddr+0x86>
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	4a07      	ldr	r2, [pc, #28]	; (8001018 <nRF24_SetAddr+0x90>)
 8000ffc:	5cd2      	ldrb	r2, [r2, r3]
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	4619      	mov	r1, r3
 8001004:	4610      	mov	r0, r2
 8001006:	f7ff fdfd 	bl	8000c04 <nRF24_WriteReg>
			break;
 800100a:	e000      	b.n	800100e <nRF24_SetAddr+0x86>
			break;
 800100c:	bf00      	nop
	}
}
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	08007300 	.word	0x08007300

0800101c <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8001026:	2006      	movs	r0, #6
 8001028:	f7ff fdd2 	bl	8000bd0 <nRF24_ReadReg>
 800102c:	4603      	mov	r3, r0
 800102e:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	f023 0306 	bic.w	r3, r3, #6
 8001036:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8001038:	7bfa      	ldrb	r2, [r7, #15]
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	4313      	orrs	r3, r2
 800103e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	4619      	mov	r1, r3
 8001044:	2006      	movs	r0, #6
 8001046:	f7ff fddd 	bl	8000c04 <nRF24_WriteReg>
}
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 800105c:	2006      	movs	r0, #6
 800105e:	f7ff fdb7 	bl	8000bd0 <nRF24_ReadReg>
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800106c:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 800106e:	7bfa      	ldrb	r2, [r7, #15]
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	4313      	orrs	r3, r2
 8001074:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	4619      	mov	r1, r3
 800107a:	2006      	movs	r0, #6
 800107c:	f7ff fdc2 	bl	8000c04 <nRF24_WriteReg>
}
 8001080:	bf00      	nop
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
 8001092:	460b      	mov	r3, r1
 8001094:	71bb      	strb	r3, [r7, #6]
 8001096:	4613      	mov	r3, r2
 8001098:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 800109a:	2002      	movs	r0, #2
 800109c:	f7ff fd98 	bl	8000bd0 <nRF24_ReadReg>
 80010a0:	4603      	mov	r3, r0
 80010a2:	b25a      	sxtb	r2, r3
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	2101      	movs	r1, #1
 80010a8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ac:	b25b      	sxtb	r3, r3
 80010ae:	4313      	orrs	r3, r2
 80010b0:	b25b      	sxtb	r3, r3
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010b8:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	4619      	mov	r1, r3
 80010be:	2002      	movs	r0, #2
 80010c0:	f7ff fda0 	bl	8000c04 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	4a19      	ldr	r2, [pc, #100]	; (800112c <nRF24_SetRXPipe+0xa4>)
 80010c8:	5cd2      	ldrb	r2, [r2, r3]
 80010ca:	797b      	ldrb	r3, [r7, #5]
 80010cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	4619      	mov	r1, r3
 80010d4:	4610      	mov	r0, r2
 80010d6:	f7ff fd95 	bl	8000c04 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 80010da:	2001      	movs	r0, #1
 80010dc:	f7ff fd78 	bl	8000bd0 <nRF24_ReadReg>
 80010e0:	4603      	mov	r3, r0
 80010e2:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 80010e4:	79bb      	ldrb	r3, [r7, #6]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d10a      	bne.n	8001100 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	2201      	movs	r2, #1
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	b25a      	sxtb	r2, r3
 80010f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b25b      	sxtb	r3, r3
 80010fc:	73fb      	strb	r3, [r7, #15]
 80010fe:	e00b      	b.n	8001118 <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	2201      	movs	r2, #1
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	b25b      	sxtb	r3, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	b25a      	sxtb	r2, r3
 800110e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001112:	4013      	ands	r3, r2
 8001114:	b25b      	sxtb	r3, r3
 8001116:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	4619      	mov	r1, r3
 800111c:	2001      	movs	r0, #1
 800111e:	f7ff fd71 	bl	8000c04 <nRF24_WriteReg>
}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	080072f8 	.word	0x080072f8

08001130 <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 8001134:	2017      	movs	r0, #23
 8001136:	f7ff fd4b 	bl	8000bd0 <nRF24_ReadReg>
 800113a:	4603      	mov	r3, r0
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	b2db      	uxtb	r3, r3
}
 8001142:	4618      	mov	r0, r3
 8001144:	bd80      	pop	{r7, pc}

08001146 <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 8001146:	b580      	push	{r7, lr}
 8001148:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 800114a:	21ff      	movs	r1, #255	; 0xff
 800114c:	20e1      	movs	r0, #225	; 0xe1
 800114e:	f7ff fd59 	bl	8000c04 <nRF24_WriteReg>
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}

08001156 <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 8001156:	b580      	push	{r7, lr}
 8001158:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 800115a:	21ff      	movs	r1, #255	; 0xff
 800115c:	20e2      	movs	r0, #226	; 0xe2
 800115e:	f7ff fd51 	bl	8000c04 <nRF24_WriteReg>
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}

08001166 <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 800116c:	2007      	movs	r0, #7
 800116e:	f7ff fd2f 	bl	8000bd0 <nRF24_ReadReg>
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800117c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	4619      	mov	r1, r3
 8001182:	2007      	movs	r0, #7
 8001184:	f7ff fd3e 	bl	8000c04 <nRF24_WriteReg>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <nRF24_GetRxDplPayloadWidth>:
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
}

static uint8_t nRF24_GetRxDplPayloadWidth() {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
	uint8_t value;

	nRF24_CSN_L();
 8001196:	f7ff fce7 	bl	8000b68 <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 800119a:	2060      	movs	r0, #96	; 0x60
 800119c:	f7ff fcfc 	bl	8000b98 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 80011a0:	20ff      	movs	r0, #255	; 0xff
 80011a2:	f7ff fcf9 	bl	8000b98 <nRF24_LL_RW>
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
	nRF24_CSN_H();
 80011aa:	f7ff fce9 	bl	8000b80 <nRF24_CSN_H>

	return value;
 80011ae:	79fb      	ldrb	r3, [r7, #7]

}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <nRF24_ReadPayloadGeneric>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	4613      	mov	r3, r2
 80011c4:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 80011c6:	2007      	movs	r0, #7
 80011c8:	f7ff fd02 	bl	8000bd0 <nRF24_ReadReg>
 80011cc:	4603      	mov	r3, r0
 80011ce:	105b      	asrs	r3, r3, #1
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6) {
 80011d8:	7dfb      	ldrb	r3, [r7, #23]
 80011da:	2b05      	cmp	r3, #5
 80011dc:	d829      	bhi.n	8001232 <nRF24_ReadPayloadGeneric+0x7a>
		// Get payload length
		if(dpl) {
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d00f      	beq.n	8001204 <nRF24_ReadPayloadGeneric+0x4c>
			*length = nRF24_GetRxDplPayloadWidth();
 80011e4:	f7ff ffd4 	bl	8001190 <nRF24_GetRxDplPayloadWidth>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	701a      	strb	r2, [r3, #0]
			if(*length>32) { //broken packet
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b20      	cmp	r3, #32
 80011f6:	d90f      	bls.n	8001218 <nRF24_ReadPayloadGeneric+0x60>
				*length = 0;
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
				nRF24_FlushRX();
 80011fe:	f7ff ffaa 	bl	8001156 <nRF24_FlushRX>
 8001202:	e009      	b.n	8001218 <nRF24_ReadPayloadGeneric+0x60>
			}
		} else {
			*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 8001204:	7dfb      	ldrb	r3, [r7, #23]
 8001206:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <nRF24_ReadPayloadGeneric+0x8c>)
 8001208:	5cd3      	ldrb	r3, [r2, r3]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fce0 	bl	8000bd0 <nRF24_ReadReg>
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	701a      	strb	r2, [r3, #0]
		}

		// Read a payload from the RX FIFO
		if (*length) {
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d006      	beq.n	800122e <nRF24_ReadPayloadGeneric+0x76>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	68f9      	ldr	r1, [r7, #12]
 8001228:	2061      	movs	r0, #97	; 0x61
 800122a:	f7ff fd23 	bl	8000c74 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 800122e:	7dfb      	ldrb	r3, [r7, #23]
 8001230:	e003      	b.n	800123a <nRF24_ReadPayloadGeneric+0x82>
	}

	// The RX FIFO is empty
	*length = 0;
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 8001238:	23ff      	movs	r3, #255	; 0xff
}
 800123a:	4618      	mov	r0, r3
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	080072f8 	.word	0x080072f8

08001248 <nRF24_ReadPayloadDpl>:
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
	return nRF24_ReadPayloadGeneric(pBuf, length,0);
}

nRF24_RXResult nRF24_ReadPayloadDpl(uint8_t *pBuf, uint8_t *length) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
	return nRF24_ReadPayloadGeneric(pBuf, length,1);
 8001252:	2201      	movs	r2, #1
 8001254:	6839      	ldr	r1, [r7, #0]
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ffae 	bl	80011b8 <nRF24_ReadPayloadGeneric>
 800125c:	4603      	mov	r3, r0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <nRF24_WriteAckPayload>:
    nRF24_CSN_L();
    nRF24_LL_RW(nRF24_CMD_ACTIVATE);
    nRF24_LL_RW(0x73);
    nRF24_CSN_H();
}
void nRF24_WriteAckPayload(nRF24_RXResult pipe, char *payload, uint8_t length) {
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	4603      	mov	r3, r0
 800126e:	6039      	str	r1, [r7, #0]
 8001270:	71fb      	strb	r3, [r7, #7]
 8001272:	4613      	mov	r3, r2
 8001274:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8001276:	f7ff fc77 	bl	8000b68 <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_W_ACK_PAYLOAD | pipe);
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	f063 0357 	orn	r3, r3, #87	; 0x57
 8001280:	b2db      	uxtb	r3, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fc88 	bl	8000b98 <nRF24_LL_RW>
	while (length--) {
 8001288:	e006      	b.n	8001298 <nRF24_WriteAckPayload+0x32>
		nRF24_LL_RW((uint8_t) *payload++);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	1c5a      	adds	r2, r3, #1
 800128e:	603a      	str	r2, [r7, #0]
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fc80 	bl	8000b98 <nRF24_LL_RW>
	while (length--) {
 8001298:	79bb      	ldrb	r3, [r7, #6]
 800129a:	1e5a      	subs	r2, r3, #1
 800129c:	71ba      	strb	r2, [r7, #6]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f3      	bne.n	800128a <nRF24_WriteAckPayload+0x24>
	}
	nRF24_CSN_H();
 80012a2:	f7ff fc6d 	bl	8000b80 <nRF24_CSN_H>

}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <nRF24_CE_L>:
static inline void nRF24_CE_L() {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012ba:	4802      	ldr	r0, [pc, #8]	; (80012c4 <nRF24_CE_L+0x14>)
 80012bc:	f001 fb7a 	bl	80029b4 <HAL_GPIO_WritePin>
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	58020c00 	.word	0x58020c00

080012c8 <nRF24_CE_H>:
static inline void nRF24_CE_H() {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 80012cc:	2201      	movs	r2, #1
 80012ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012d2:	4802      	ldr	r0, [pc, #8]	; (80012dc <nRF24_CE_H+0x14>)
 80012d4:	f001 fb6e 	bl	80029b4 <HAL_GPIO_WritePin>
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	58020c00 	.word	0x58020c00

080012e0 <Delay_ms>:


static inline void Delay_ms(uint32_t ms) { HAL_Delay(ms); }
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f000 fc7b 	bl	8001be4 <HAL_Delay>
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <UART_SendChar>:

#ifdef USE_HAL_DRIVER

extern UART_HandleTypeDef huart3;

void UART_SendChar(char b) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart3, (uint8_t *) &b, 1, 200);
 8001302:	1df9      	adds	r1, r7, #7
 8001304:	23c8      	movs	r3, #200	; 0xc8
 8001306:	2201      	movs	r2, #1
 8001308:	4803      	ldr	r0, [pc, #12]	; (8001318 <UART_SendChar+0x20>)
 800130a:	f004 fd62 	bl	8005dd2 <HAL_UART_Transmit>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	2400025c 	.word	0x2400025c

0800131c <UART_SendStr>:

void UART_SendStr(char *string) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *) string, (uint16_t) strlen(string), 200);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7fe fff1 	bl	800030c <strlen>
 800132a:	4603      	mov	r3, r0
 800132c:	b29a      	uxth	r2, r3
 800132e:	23c8      	movs	r3, #200	; 0xc8
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	4803      	ldr	r0, [pc, #12]	; (8001340 <UART_SendStr+0x24>)
 8001334:	f004 fd4d 	bl	8005dd2 <HAL_UART_Transmit>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2400025c 	.word	0x2400025c

08001344 <Toggle_LED>:

void Toggle_LED() {
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8001348:	2101      	movs	r1, #1
 800134a:	4802      	ldr	r0, [pc, #8]	; (8001354 <Toggle_LED+0x10>)
 800134c:	f001 fb4b 	bl	80029e6 <HAL_GPIO_TogglePin>
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	58020400 	.word	0x58020400

08001358 <UART_SendBufHex>:
    LL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
}

#endif

void UART_SendBufHex(char *buf, uint16_t bufsize) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	807b      	strh	r3, [r7, #2]
    uint16_t i;
    char ch;
    for (i = 0; i < bufsize; i++) {
 8001364:	2300      	movs	r3, #0
 8001366:	81fb      	strh	r3, [r7, #14]
 8001368:	e018      	b.n	800139c <UART_SendBufHex+0x44>
        ch = *buf++;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	1c5a      	adds	r2, r3, #1
 800136e:	607a      	str	r2, [r7, #4]
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	737b      	strb	r3, [r7, #13]
        UART_SendChar(HEX_CHARS[(ch >> 4) % 0x10]);
 8001374:	7b7b      	ldrb	r3, [r7, #13]
 8001376:	091b      	lsrs	r3, r3, #4
 8001378:	b2db      	uxtb	r3, r3
 800137a:	461a      	mov	r2, r3
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <UART_SendBufHex+0x58>)
 800137e:	5c9b      	ldrb	r3, [r3, r2]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ffb9 	bl	80012f8 <UART_SendChar>
        UART_SendChar(HEX_CHARS[(ch & 0x0f) % 0x10]);
 8001386:	7b7b      	ldrb	r3, [r7, #13]
 8001388:	f003 030f 	and.w	r3, r3, #15
 800138c:	4a08      	ldr	r2, [pc, #32]	; (80013b0 <UART_SendBufHex+0x58>)
 800138e:	5cd3      	ldrb	r3, [r2, r3]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ffb1 	bl	80012f8 <UART_SendChar>
    for (i = 0; i < bufsize; i++) {
 8001396:	89fb      	ldrh	r3, [r7, #14]
 8001398:	3301      	adds	r3, #1
 800139a:	81fb      	strh	r3, [r7, #14]
 800139c:	89fa      	ldrh	r2, [r7, #14]
 800139e:	887b      	ldrh	r3, [r7, #2]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d3e2      	bcc.n	800136a <UART_SendBufHex+0x12>
    }
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	0800727c 	.word	0x0800727c

080013b4 <UART_SendInt>:
void UART_SendHex8(uint16_t num) {
    UART_SendChar(HEX_CHARS[(num >> 4) % 0x10]);
    UART_SendChar(HEX_CHARS[(num & 0x0f) % 0x10]);
}

void UART_SendInt(int32_t num) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
    char str[10]; // 10 chars max for INT32_MAX
    int i = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
    if (num < 0) {
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	da05      	bge.n	80013d2 <UART_SendInt+0x1e>
        UART_SendChar('-');
 80013c6:	202d      	movs	r0, #45	; 0x2d
 80013c8:	f7ff ff96 	bl	80012f8 <UART_SendChar>
        num *= -1;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	425b      	negs	r3, r3
 80013d0:	607b      	str	r3, [r7, #4]
    }
    do str[i++] = (char) (num % 10 + '0'); while ((num /= 10) > 0);
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <UART_SendInt+0x90>)
 80013d6:	fb83 1302 	smull	r1, r3, r3, r2
 80013da:	1099      	asrs	r1, r3, #2
 80013dc:	17d3      	asrs	r3, r2, #31
 80013de:	1ac9      	subs	r1, r1, r3
 80013e0:	460b      	mov	r3, r1
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	1ad1      	subs	r1, r2, r3
 80013ea:	b2ca      	uxtb	r2, r1
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	1c59      	adds	r1, r3, #1
 80013f0:	6179      	str	r1, [r7, #20]
 80013f2:	3230      	adds	r2, #48	; 0x30
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	3318      	adds	r3, #24
 80013f8:	443b      	add	r3, r7
 80013fa:	f803 2c10 	strb.w	r2, [r3, #-16]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a10      	ldr	r2, [pc, #64]	; (8001444 <UART_SendInt+0x90>)
 8001402:	fb82 1203 	smull	r1, r2, r2, r3
 8001406:	1092      	asrs	r2, r2, #2
 8001408:	17db      	asrs	r3, r3, #31
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	dcde      	bgt.n	80013d2 <UART_SendInt+0x1e>
    for (i--; i >= 0; i--) UART_SendChar(str[i]);
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	3b01      	subs	r3, #1
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	e00a      	b.n	8001432 <UART_SendInt+0x7e>
 800141c:	f107 0208 	add.w	r2, r7, #8
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	4413      	add	r3, r2
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ff66 	bl	80012f8 <UART_SendChar>
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	3b01      	subs	r3, #1
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	2b00      	cmp	r3, #0
 8001436:	daf1      	bge.n	800141c <UART_SendInt+0x68>
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	66666667 	.word	0x66666667

08001448 <runRadio>:
}

#endif // DEMO_TX_


int runRadio(void) {
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
    UART_SendStr("\r\nSTM32F303RE is online.\r\n");
 800144c:	483a      	ldr	r0, [pc, #232]	; (8001538 <runRadio+0xf0>)
 800144e:	f7ff ff65 	bl	800131c <UART_SendStr>

    // RX/TX disabled
    nRF24_CE_L();
 8001452:	f7ff ff2d 	bl	80012b0 <nRF24_CE_L>

    // Configure the nRF24L01+
    UART_SendStr("nRF24L01+ check: ");
 8001456:	4839      	ldr	r0, [pc, #228]	; (800153c <runRadio+0xf4>)
 8001458:	f7ff ff60 	bl	800131c <UART_SendStr>
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wmissing-noreturn"
    if (!nRF24_Check()) {
 800145c:	f7ff fc9a 	bl	8000d94 <nRF24_Check>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d108      	bne.n	8001478 <runRadio+0x30>
        UART_SendStr("FAIL\r\n");
 8001466:	4836      	ldr	r0, [pc, #216]	; (8001540 <runRadio+0xf8>)
 8001468:	f7ff ff58 	bl	800131c <UART_SendStr>
        while (1) {
            Toggle_LED();
 800146c:	f7ff ff6a 	bl	8001344 <Toggle_LED>
            Delay_ms(50);
 8001470:	2032      	movs	r0, #50	; 0x32
 8001472:	f7ff ff35 	bl	80012e0 <Delay_ms>
            Toggle_LED();
 8001476:	e7f9      	b.n	800146c <runRadio+0x24>
        }
    }
#pragma clang diagnostic pop
    UART_SendStr("OK\r\n");
 8001478:	4832      	ldr	r0, [pc, #200]	; (8001544 <runRadio+0xfc>)
 800147a:	f7ff ff4f 	bl	800131c <UART_SendStr>

    // Initialize the nRF24L01 to its default state
    nRF24_Init();
 800147e:	f7ff fc3c 	bl	8000cfa <nRF24_Init>
    //   - CRC scheme: 2 byte

    // The transmitter sends a 10-byte packets to the address 'ESB' with Auto-ACK (ShockBurst enabled)

    // Set RF channel
    nRF24_SetRFChannel(40);
 8001482:	2028      	movs	r0, #40	; 0x28
 8001484:	f7ff fd61 	bl	8000f4a <nRF24_SetRFChannel>

    // Set data rate
    nRF24_SetDataRate(nRF24_DR_2Mbps);
 8001488:	2008      	movs	r0, #8
 800148a:	f7ff fde2 	bl	8001052 <nRF24_SetDataRate>

    // Set CRC scheme
    nRF24_SetCRCScheme(nRF24_CRC_2byte);
 800148e:	200c      	movs	r0, #12
 8001490:	f7ff fd3a 	bl	8000f08 <nRF24_SetCRCScheme>

    // Set address width, its common for all pipes (RX and TX)
    nRF24_SetAddrWidth(3);
 8001494:	2003      	movs	r0, #3
 8001496:	f7ff fd66 	bl	8000f66 <nRF24_SetAddrWidth>

    // Configure RX PIPE
    static const uint8_t nRF24_ADDR[] = {'E', 'S', 'B'};
    nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR); // program address for pipe
 800149a:	492b      	ldr	r1, [pc, #172]	; (8001548 <runRadio+0x100>)
 800149c:	2001      	movs	r0, #1
 800149e:	f7ff fd73 	bl	8000f88 <nRF24_SetAddr>
    nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_ON, 10); // Auto-ACK: enabled, payload length: 10 bytes
 80014a2:	220a      	movs	r2, #10
 80014a4:	2101      	movs	r1, #1
 80014a6:	2001      	movs	r0, #1
 80014a8:	f7ff fdee 	bl	8001088 <nRF24_SetRXPipe>

    // Set TX power for Auto-ACK (maximum, to ensure that transmitter will hear ACK reply)
    nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 80014ac:	2006      	movs	r0, #6
 80014ae:	f7ff fdb5 	bl	800101c <nRF24_SetTXPower>

    // Set operational mode (PRX == receiver)
    nRF24_SetOperationalMode(nRF24_MODE_RX);
 80014b2:	2001      	movs	r0, #1
 80014b4:	f7ff fcbb 	bl	8000e2e <nRF24_SetOperationalMode>

    // Clear any pending IRQ flags
    nRF24_ClearIRQFlags();
 80014b8:	f7ff fe55 	bl	8001166 <nRF24_ClearIRQFlags>

    // Wake the transceiver
    nRF24_SetPowerMode(nRF24_PWR_UP);
 80014bc:	2002      	movs	r0, #2
 80014be:	f7ff fc97 	bl	8000df0 <nRF24_SetPowerMode>

    // Enable DPL
    nRF24_SetDynamicPayloadLength(nRF24_DPL_ON);
 80014c2:	2001      	movs	r0, #1
 80014c4:	f7ff fcd4 	bl	8000e70 <nRF24_SetDynamicPayloadLength>

    nRF24_SetPayloadWithAck(1);
 80014c8:	2001      	movs	r0, #1
 80014ca:	f7ff fcfb 	bl	8000ec4 <nRF24_SetPayloadWithAck>


        // Put the transceiver to the RX mode
    nRF24_CE_H();
 80014ce:	f7ff fefb 	bl	80012c8 <nRF24_CE_H>
        // Constantly poll the status of the RX FIFO and get a payload if FIFO is not empty
        //
        // This is far from best solution, but it's ok for testing purposes
        // More smart way is to use the IRQ pin :)
        //
        if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) {
 80014d2:	f7ff fe2d 	bl	8001130 <nRF24_GetStatus_RXFIFO>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d0fa      	beq.n	80014d2 <runRadio+0x8a>
            // Get a payload from the transceiver
            pipe = nRF24_ReadPayloadDpl(nRF24_payload, &payload_length);
 80014dc:	491b      	ldr	r1, [pc, #108]	; (800154c <runRadio+0x104>)
 80014de:	481c      	ldr	r0, [pc, #112]	; (8001550 <runRadio+0x108>)
 80014e0:	f7ff feb2 	bl	8001248 <nRF24_ReadPayloadDpl>
 80014e4:	4603      	mov	r3, r0
 80014e6:	461a      	mov	r2, r3
 80014e8:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <runRadio+0x10c>)
 80014ea:	701a      	strb	r2, [r3, #0]
            if(payload_length > 0) {
 80014ec:	4b17      	ldr	r3, [pc, #92]	; (800154c <runRadio+0x104>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d006      	beq.n	8001502 <runRadio+0xba>
                nRF24_WriteAckPayload(pipe, "aCk PaYlOaD",11);
 80014f4:	4b17      	ldr	r3, [pc, #92]	; (8001554 <runRadio+0x10c>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	220b      	movs	r2, #11
 80014fa:	4917      	ldr	r1, [pc, #92]	; (8001558 <runRadio+0x110>)
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff feb2 	bl	8001266 <nRF24_WriteAckPayload>
            }

            // Clear all pending IRQ flags
            nRF24_ClearIRQFlags();
 8001502:	f7ff fe30 	bl	8001166 <nRF24_ClearIRQFlags>

            // Print a payload contents to UART
            UART_SendStr("RCV PIPE#");
 8001506:	4815      	ldr	r0, [pc, #84]	; (800155c <runRadio+0x114>)
 8001508:	f7ff ff08 	bl	800131c <UART_SendStr>
            UART_SendInt(pipe);
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <runRadio+0x10c>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff4f 	bl	80013b4 <UART_SendInt>
            UART_SendStr(" PAYLOAD:>");
 8001516:	4812      	ldr	r0, [pc, #72]	; (8001560 <runRadio+0x118>)
 8001518:	f7ff ff00 	bl	800131c <UART_SendStr>
            Toggle_LED();
 800151c:	f7ff ff12 	bl	8001344 <Toggle_LED>
            UART_SendBufHex((char *) nRF24_payload, payload_length);
 8001520:	4b0a      	ldr	r3, [pc, #40]	; (800154c <runRadio+0x104>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	b29b      	uxth	r3, r3
 8001526:	4619      	mov	r1, r3
 8001528:	4809      	ldr	r0, [pc, #36]	; (8001550 <runRadio+0x108>)
 800152a:	f7ff ff15 	bl	8001358 <UART_SendBufHex>
            UART_SendStr("<\r\n");
 800152e:	480d      	ldr	r0, [pc, #52]	; (8001564 <runRadio+0x11c>)
 8001530:	f7ff fef4 	bl	800131c <UART_SendStr>
        if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) {
 8001534:	e7cd      	b.n	80014d2 <runRadio+0x8a>
 8001536:	bf00      	nop
 8001538:	08007290 	.word	0x08007290
 800153c:	080072ac 	.word	0x080072ac
 8001540:	080072c0 	.word	0x080072c0
 8001544:	080072c8 	.word	0x080072c8
 8001548:	08007308 	.word	0x08007308
 800154c:	24000319 	.word	0x24000319
 8001550:	240002f8 	.word	0x240002f8
 8001554:	24000318 	.word	0x24000318
 8001558:	080072d0 	.word	0x080072d0
 800155c:	080072dc 	.word	0x080072dc
 8001560:	080072e8 	.word	0x080072e8
 8001564:	080072f4 	.word	0x080072f4

08001568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <HAL_MspInit+0x30>)
 8001570:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001574:	4a08      	ldr	r2, [pc, #32]	; (8001598 <HAL_MspInit+0x30>)
 8001576:	f043 0302 	orr.w	r3, r3, #2
 800157a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_MspInit+0x30>)
 8001580:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	58024400 	.word	0x58024400

0800159c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08e      	sub	sp, #56	; 0x38
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a59      	ldr	r2, [pc, #356]	; (8001720 <HAL_ETH_MspInit+0x184>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	f040 80ab 	bne.w	8001716 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80015c0:	4b58      	ldr	r3, [pc, #352]	; (8001724 <HAL_ETH_MspInit+0x188>)
 80015c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015c6:	4a57      	ldr	r2, [pc, #348]	; (8001724 <HAL_ETH_MspInit+0x188>)
 80015c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015cc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015d0:	4b54      	ldr	r3, [pc, #336]	; (8001724 <HAL_ETH_MspInit+0x188>)
 80015d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015da:	623b      	str	r3, [r7, #32]
 80015dc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80015de:	4b51      	ldr	r3, [pc, #324]	; (8001724 <HAL_ETH_MspInit+0x188>)
 80015e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015e4:	4a4f      	ldr	r2, [pc, #316]	; (8001724 <HAL_ETH_MspInit+0x188>)
 80015e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015ee:	4b4d      	ldr	r3, [pc, #308]	; (8001724 <HAL_ETH_MspInit+0x188>)
 80015f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f8:	61fb      	str	r3, [r7, #28]
 80015fa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80015fc:	4b49      	ldr	r3, [pc, #292]	; (8001724 <HAL_ETH_MspInit+0x188>)
 80015fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001602:	4a48      	ldr	r2, [pc, #288]	; (8001724 <HAL_ETH_MspInit+0x188>)
 8001604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001608:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800160c:	4b45      	ldr	r3, [pc, #276]	; (8001724 <HAL_ETH_MspInit+0x188>)
 800160e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	61bb      	str	r3, [r7, #24]
 8001618:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800161a:	4b42      	ldr	r3, [pc, #264]	; (8001724 <HAL_ETH_MspInit+0x188>)
 800161c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001620:	4a40      	ldr	r2, [pc, #256]	; (8001724 <HAL_ETH_MspInit+0x188>)
 8001622:	f043 0304 	orr.w	r3, r3, #4
 8001626:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800162a:	4b3e      	ldr	r3, [pc, #248]	; (8001724 <HAL_ETH_MspInit+0x188>)
 800162c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001638:	4b3a      	ldr	r3, [pc, #232]	; (8001724 <HAL_ETH_MspInit+0x188>)
 800163a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163e:	4a39      	ldr	r2, [pc, #228]	; (8001724 <HAL_ETH_MspInit+0x188>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001648:	4b36      	ldr	r3, [pc, #216]	; (8001724 <HAL_ETH_MspInit+0x188>)
 800164a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	4b33      	ldr	r3, [pc, #204]	; (8001724 <HAL_ETH_MspInit+0x188>)
 8001658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165c:	4a31      	ldr	r2, [pc, #196]	; (8001724 <HAL_ETH_MspInit+0x188>)
 800165e:	f043 0302 	orr.w	r3, r3, #2
 8001662:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001666:	4b2f      	ldr	r3, [pc, #188]	; (8001724 <HAL_ETH_MspInit+0x188>)
 8001668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001674:	4b2b      	ldr	r3, [pc, #172]	; (8001724 <HAL_ETH_MspInit+0x188>)
 8001676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800167a:	4a2a      	ldr	r2, [pc, #168]	; (8001724 <HAL_ETH_MspInit+0x188>)
 800167c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001680:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001684:	4b27      	ldr	r3, [pc, #156]	; (8001724 <HAL_ETH_MspInit+0x188>)
 8001686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800168a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001692:	2332      	movs	r3, #50	; 0x32
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016a2:	230b      	movs	r3, #11
 80016a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016aa:	4619      	mov	r1, r3
 80016ac:	481e      	ldr	r0, [pc, #120]	; (8001728 <HAL_ETH_MspInit+0x18c>)
 80016ae:	f000 ffd9 	bl	8002664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80016b2:	2386      	movs	r3, #134	; 0x86
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016c2:	230b      	movs	r3, #11
 80016c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ca:	4619      	mov	r1, r3
 80016cc:	4817      	ldr	r0, [pc, #92]	; (800172c <HAL_ETH_MspInit+0x190>)
 80016ce:	f000 ffc9 	bl	8002664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80016d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016e4:	230b      	movs	r3, #11
 80016e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80016e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ec:	4619      	mov	r1, r3
 80016ee:	4810      	ldr	r0, [pc, #64]	; (8001730 <HAL_ETH_MspInit+0x194>)
 80016f0:	f000 ffb8 	bl	8002664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80016f4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001706:	230b      	movs	r3, #11
 8001708:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800170a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170e:	4619      	mov	r1, r3
 8001710:	4808      	ldr	r0, [pc, #32]	; (8001734 <HAL_ETH_MspInit+0x198>)
 8001712:	f000 ffa7 	bl	8002664 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001716:	bf00      	nop
 8001718:	3738      	adds	r7, #56	; 0x38
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40028000 	.word	0x40028000
 8001724:	58024400 	.word	0x58024400
 8001728:	58020800 	.word	0x58020800
 800172c:	58020000 	.word	0x58020000
 8001730:	58020400 	.word	0x58020400
 8001734:	58021800 	.word	0x58021800

08001738 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b0ba      	sub	sp, #232	; 0xe8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001750:	f107 0318 	add.w	r3, r7, #24
 8001754:	22b8      	movs	r2, #184	; 0xb8
 8001756:	2100      	movs	r1, #0
 8001758:	4618      	mov	r0, r3
 800175a:	f005 fd53 	bl	8007204 <memset>
  if(hspi->Instance==SPI1)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a38      	ldr	r2, [pc, #224]	; (8001844 <HAL_SPI_MspInit+0x10c>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d168      	bne.n	800183a <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001768:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001774:	2300      	movs	r3, #0
 8001776:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001778:	f107 0318 	add.w	r3, r7, #24
 800177c:	4618      	mov	r0, r3
 800177e:	f002 f8ed 	bl	800395c <HAL_RCCEx_PeriphCLKConfig>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001788:	f7ff f9e8 	bl	8000b5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800178c:	4b2e      	ldr	r3, [pc, #184]	; (8001848 <HAL_SPI_MspInit+0x110>)
 800178e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001792:	4a2d      	ldr	r2, [pc, #180]	; (8001848 <HAL_SPI_MspInit+0x110>)
 8001794:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001798:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800179c:	4b2a      	ldr	r3, [pc, #168]	; (8001848 <HAL_SPI_MspInit+0x110>)
 800179e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	4b27      	ldr	r3, [pc, #156]	; (8001848 <HAL_SPI_MspInit+0x110>)
 80017ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b0:	4a25      	ldr	r2, [pc, #148]	; (8001848 <HAL_SPI_MspInit+0x110>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ba:	4b23      	ldr	r3, [pc, #140]	; (8001848 <HAL_SPI_MspInit+0x110>)
 80017bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c8:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <HAL_SPI_MspInit+0x110>)
 80017ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ce:	4a1e      	ldr	r2, [pc, #120]	; (8001848 <HAL_SPI_MspInit+0x110>)
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017d8:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <HAL_SPI_MspInit+0x110>)
 80017da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80017e6:	2360      	movs	r3, #96	; 0x60
 80017e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017fe:	2305      	movs	r3, #5
 8001800:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001808:	4619      	mov	r1, r3
 800180a:	4810      	ldr	r0, [pc, #64]	; (800184c <HAL_SPI_MspInit+0x114>)
 800180c:	f000 ff2a 	bl	8002664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001810:	2320      	movs	r3, #32
 8001812:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2300      	movs	r3, #0
 8001824:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001828:	2305      	movs	r3, #5
 800182a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001832:	4619      	mov	r1, r3
 8001834:	4806      	ldr	r0, [pc, #24]	; (8001850 <HAL_SPI_MspInit+0x118>)
 8001836:	f000 ff15 	bl	8002664 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800183a:	bf00      	nop
 800183c:	37e8      	adds	r7, #232	; 0xe8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40013000 	.word	0x40013000
 8001848:	58024400 	.word	0x58024400
 800184c:	58020000 	.word	0x58020000
 8001850:	58020400 	.word	0x58020400

08001854 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b0b8      	sub	sp, #224	; 0xe0
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800186c:	f107 0310 	add.w	r3, r7, #16
 8001870:	22b8      	movs	r2, #184	; 0xb8
 8001872:	2100      	movs	r1, #0
 8001874:	4618      	mov	r0, r3
 8001876:	f005 fcc5 	bl	8007204 <memset>
  if(huart->Instance==USART3)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a27      	ldr	r2, [pc, #156]	; (800191c <HAL_UART_MspInit+0xc8>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d146      	bne.n	8001912 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001884:	f04f 0202 	mov.w	r2, #2
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001890:	2300      	movs	r3, #0
 8001892:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001896:	f107 0310 	add.w	r3, r7, #16
 800189a:	4618      	mov	r0, r3
 800189c:	f002 f85e 	bl	800395c <HAL_RCCEx_PeriphCLKConfig>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80018a6:	f7ff f959 	bl	8000b5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018aa:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <HAL_UART_MspInit+0xcc>)
 80018ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018b0:	4a1b      	ldr	r2, [pc, #108]	; (8001920 <HAL_UART_MspInit+0xcc>)
 80018b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018ba:	4b19      	ldr	r3, [pc, #100]	; (8001920 <HAL_UART_MspInit+0xcc>)
 80018bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018c8:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_UART_MspInit+0xcc>)
 80018ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ce:	4a14      	ldr	r2, [pc, #80]	; (8001920 <HAL_UART_MspInit+0xcc>)
 80018d0:	f043 0308 	orr.w	r3, r3, #8
 80018d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <HAL_UART_MspInit+0xcc>)
 80018da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80018e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fa:	2300      	movs	r3, #0
 80018fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001900:	2307      	movs	r3, #7
 8001902:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001906:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800190a:	4619      	mov	r1, r3
 800190c:	4805      	ldr	r0, [pc, #20]	; (8001924 <HAL_UART_MspInit+0xd0>)
 800190e:	f000 fea9 	bl	8002664 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001912:	bf00      	nop
 8001914:	37e0      	adds	r7, #224	; 0xe0
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40004800 	.word	0x40004800
 8001920:	58024400 	.word	0x58024400
 8001924:	58020c00 	.word	0x58020c00

08001928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800192c:	e7fe      	b.n	800192c <NMI_Handler+0x4>

0800192e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001932:	e7fe      	b.n	8001932 <HardFault_Handler+0x4>

08001934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <MemManage_Handler+0x4>

0800193a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800193e:	e7fe      	b.n	800193e <BusFault_Handler+0x4>

08001940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <UsageFault_Handler+0x4>

08001946 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001974:	f000 f916 	bl	8001ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}

0800197c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001980:	4b32      	ldr	r3, [pc, #200]	; (8001a4c <SystemInit+0xd0>)
 8001982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001986:	4a31      	ldr	r2, [pc, #196]	; (8001a4c <SystemInit+0xd0>)
 8001988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800198c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001990:	4b2f      	ldr	r3, [pc, #188]	; (8001a50 <SystemInit+0xd4>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 030f 	and.w	r3, r3, #15
 8001998:	2b06      	cmp	r3, #6
 800199a:	d807      	bhi.n	80019ac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800199c:	4b2c      	ldr	r3, [pc, #176]	; (8001a50 <SystemInit+0xd4>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f023 030f 	bic.w	r3, r3, #15
 80019a4:	4a2a      	ldr	r2, [pc, #168]	; (8001a50 <SystemInit+0xd4>)
 80019a6:	f043 0307 	orr.w	r3, r3, #7
 80019aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80019ac:	4b29      	ldr	r3, [pc, #164]	; (8001a54 <SystemInit+0xd8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a28      	ldr	r2, [pc, #160]	; (8001a54 <SystemInit+0xd8>)
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019b8:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <SystemInit+0xd8>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80019be:	4b25      	ldr	r3, [pc, #148]	; (8001a54 <SystemInit+0xd8>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	4924      	ldr	r1, [pc, #144]	; (8001a54 <SystemInit+0xd8>)
 80019c4:	4b24      	ldr	r3, [pc, #144]	; (8001a58 <SystemInit+0xdc>)
 80019c6:	4013      	ands	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019ca:	4b21      	ldr	r3, [pc, #132]	; (8001a50 <SystemInit+0xd4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d007      	beq.n	80019e6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019d6:	4b1e      	ldr	r3, [pc, #120]	; (8001a50 <SystemInit+0xd4>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f023 030f 	bic.w	r3, r3, #15
 80019de:	4a1c      	ldr	r2, [pc, #112]	; (8001a50 <SystemInit+0xd4>)
 80019e0:	f043 0307 	orr.w	r3, r3, #7
 80019e4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80019e6:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <SystemInit+0xd8>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80019ec:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <SystemInit+0xd8>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <SystemInit+0xd8>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80019f8:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <SystemInit+0xd8>)
 80019fa:	4a18      	ldr	r2, [pc, #96]	; (8001a5c <SystemInit+0xe0>)
 80019fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <SystemInit+0xd8>)
 8001a00:	4a17      	ldr	r2, [pc, #92]	; (8001a60 <SystemInit+0xe4>)
 8001a02:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a04:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <SystemInit+0xd8>)
 8001a06:	4a17      	ldr	r2, [pc, #92]	; (8001a64 <SystemInit+0xe8>)
 8001a08:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a0a:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <SystemInit+0xd8>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a10:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <SystemInit+0xd8>)
 8001a12:	4a14      	ldr	r2, [pc, #80]	; (8001a64 <SystemInit+0xe8>)
 8001a14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a16:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <SystemInit+0xd8>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a1c:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <SystemInit+0xd8>)
 8001a1e:	4a11      	ldr	r2, [pc, #68]	; (8001a64 <SystemInit+0xe8>)
 8001a20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a22:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <SystemInit+0xd8>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a28:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <SystemInit+0xd8>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a09      	ldr	r2, [pc, #36]	; (8001a54 <SystemInit+0xd8>)
 8001a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <SystemInit+0xd8>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <SystemInit+0xec>)
 8001a3c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001a40:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000ed00 	.word	0xe000ed00
 8001a50:	52002000 	.word	0x52002000
 8001a54:	58024400 	.word	0x58024400
 8001a58:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a5c:	02020200 	.word	0x02020200
 8001a60:	01ff0000 	.word	0x01ff0000
 8001a64:	01010280 	.word	0x01010280
 8001a68:	52004000 	.word	0x52004000

08001a6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aa4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a70:	f7ff ff84 	bl	800197c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a74:	480c      	ldr	r0, [pc, #48]	; (8001aa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a76:	490d      	ldr	r1, [pc, #52]	; (8001aac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a78:	4a0d      	ldr	r2, [pc, #52]	; (8001ab0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a7c:	e002      	b.n	8001a84 <LoopCopyDataInit>

08001a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a82:	3304      	adds	r3, #4

08001a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a88:	d3f9      	bcc.n	8001a7e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a8c:	4c0a      	ldr	r4, [pc, #40]	; (8001ab8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a90:	e001      	b.n	8001a96 <LoopFillZerobss>

08001a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a94:	3204      	adds	r2, #4

08001a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a98:	d3fb      	bcc.n	8001a92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a9a:	f005 fbbb 	bl	8007214 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a9e:	f7fe fdbb 	bl	8000618 <main>
  bx  lr
 8001aa2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001aa4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001aa8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001aac:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001ab0:	08007354 	.word	0x08007354
  ldr r2, =_sbss
 8001ab4:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001ab8:	24000320 	.word	0x24000320

08001abc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001abc:	e7fe      	b.n	8001abc <ADC3_IRQHandler>
	...

08001ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac6:	2003      	movs	r0, #3
 8001ac8:	f000 f976 	bl	8001db8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001acc:	f001 fd70 	bl	80035b0 <HAL_RCC_GetSysClockFreq>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <HAL_Init+0x68>)
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	0a1b      	lsrs	r3, r3, #8
 8001ad8:	f003 030f 	and.w	r3, r3, #15
 8001adc:	4913      	ldr	r1, [pc, #76]	; (8001b2c <HAL_Init+0x6c>)
 8001ade:	5ccb      	ldrb	r3, [r1, r3]
 8001ae0:	f003 031f 	and.w	r3, r3, #31
 8001ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001aea:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <HAL_Init+0x68>)
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	4a0e      	ldr	r2, [pc, #56]	; (8001b2c <HAL_Init+0x6c>)
 8001af4:	5cd3      	ldrb	r3, [r2, r3]
 8001af6:	f003 031f 	and.w	r3, r3, #31
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	fa22 f303 	lsr.w	r3, r2, r3
 8001b00:	4a0b      	ldr	r2, [pc, #44]	; (8001b30 <HAL_Init+0x70>)
 8001b02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b04:	4a0b      	ldr	r2, [pc, #44]	; (8001b34 <HAL_Init+0x74>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	f000 f814 	bl	8001b38 <HAL_InitTick>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e002      	b.n	8001b20 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b1a:	f7ff fd25 	bl	8001568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	58024400 	.word	0x58024400
 8001b2c:	0800730c 	.word	0x0800730c
 8001b30:	24000004 	.word	0x24000004
 8001b34:	24000000 	.word	0x24000000

08001b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b40:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <HAL_InitTick+0x60>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e021      	b.n	8001b90 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b4c:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <HAL_InitTick+0x64>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <HAL_InitTick+0x60>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	4619      	mov	r1, r3
 8001b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 f94d 	bl	8001e02 <HAL_SYSTICK_Config>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e00e      	b.n	8001b90 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b0f      	cmp	r3, #15
 8001b76:	d80a      	bhi.n	8001b8e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b80:	f000 f925 	bl	8001dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b84:	4a06      	ldr	r2, [pc, #24]	; (8001ba0 <HAL_InitTick+0x68>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e000      	b.n	8001b90 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	2400000c 	.word	0x2400000c
 8001b9c:	24000000 	.word	0x24000000
 8001ba0:	24000008 	.word	0x24000008

08001ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_IncTick+0x20>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_IncTick+0x24>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	4a04      	ldr	r2, [pc, #16]	; (8001bc8 <HAL_IncTick+0x24>)
 8001bb6:	6013      	str	r3, [r2, #0]
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	2400000c 	.word	0x2400000c
 8001bc8:	2400031c 	.word	0x2400031c

08001bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd0:	4b03      	ldr	r3, [pc, #12]	; (8001be0 <HAL_GetTick+0x14>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	2400031c 	.word	0x2400031c

08001be4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bec:	f7ff ffee 	bl	8001bcc <HAL_GetTick>
 8001bf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfc:	d005      	beq.n	8001c0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <HAL_Delay+0x44>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	461a      	mov	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4413      	add	r3, r2
 8001c08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c0a:	bf00      	nop
 8001c0c:	f7ff ffde 	bl	8001bcc <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d8f7      	bhi.n	8001c0c <HAL_Delay+0x28>
  {
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	bf00      	nop
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	2400000c 	.word	0x2400000c

08001c2c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001c3c:	4904      	ldr	r1, [pc, #16]	; (8001c50 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	58000400 	.word	0x58000400

08001c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <__NVIC_SetPriorityGrouping+0x40>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c70:	4013      	ands	r3, r2
 8001c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <__NVIC_SetPriorityGrouping+0x44>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c82:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <__NVIC_SetPriorityGrouping+0x40>)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	60d3      	str	r3, [r2, #12]
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00
 8001c98:	05fa0000 	.word	0x05fa0000

08001c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca0:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	0a1b      	lsrs	r3, r3, #8
 8001ca6:	f003 0307 	and.w	r3, r3, #7
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	6039      	str	r1, [r7, #0]
 8001cc2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	db0a      	blt.n	8001ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	490c      	ldr	r1, [pc, #48]	; (8001d04 <__NVIC_SetPriority+0x4c>)
 8001cd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cd6:	0112      	lsls	r2, r2, #4
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	440b      	add	r3, r1
 8001cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce0:	e00a      	b.n	8001cf8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	4908      	ldr	r1, [pc, #32]	; (8001d08 <__NVIC_SetPriority+0x50>)
 8001ce8:	88fb      	ldrh	r3, [r7, #6]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	3b04      	subs	r3, #4
 8001cf0:	0112      	lsls	r2, r2, #4
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	761a      	strb	r2, [r3, #24]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000e100 	.word	0xe000e100
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b089      	sub	sp, #36	; 0x24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f1c3 0307 	rsb	r3, r3, #7
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	bf28      	it	cs
 8001d2a:	2304      	movcs	r3, #4
 8001d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3304      	adds	r3, #4
 8001d32:	2b06      	cmp	r3, #6
 8001d34:	d902      	bls.n	8001d3c <NVIC_EncodePriority+0x30>
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3b03      	subs	r3, #3
 8001d3a:	e000      	b.n	8001d3e <NVIC_EncodePriority+0x32>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d40:	f04f 32ff 	mov.w	r2, #4294967295
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	401a      	ands	r2, r3
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d54:	f04f 31ff 	mov.w	r1, #4294967295
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5e:	43d9      	mvns	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	4313      	orrs	r3, r2
         );
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3724      	adds	r7, #36	; 0x24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d84:	d301      	bcc.n	8001d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d86:	2301      	movs	r3, #1
 8001d88:	e00f      	b.n	8001daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	; (8001db4 <SysTick_Config+0x40>)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d92:	210f      	movs	r1, #15
 8001d94:	f04f 30ff 	mov.w	r0, #4294967295
 8001d98:	f7ff ff8e 	bl	8001cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <SysTick_Config+0x40>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001da2:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <SysTick_Config+0x40>)
 8001da4:	2207      	movs	r2, #7
 8001da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	e000e010 	.word	0xe000e010

08001db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff ff47 	bl	8001c54 <__NVIC_SetPriorityGrouping>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b086      	sub	sp, #24
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
 8001dda:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ddc:	f7ff ff5e 	bl	8001c9c <__NVIC_GetPriorityGrouping>
 8001de0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68b9      	ldr	r1, [r7, #8]
 8001de6:	6978      	ldr	r0, [r7, #20]
 8001de8:	f7ff ff90 	bl	8001d0c <NVIC_EncodePriority>
 8001dec:	4602      	mov	r2, r0
 8001dee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff5f 	bl	8001cb8 <__NVIC_SetPriority>
}
 8001dfa:	bf00      	nop
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ffb2 	bl	8001d74 <SysTick_Config>
 8001e10:	4603      	mov	r3, r0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e0cf      	b.n	8001fce <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d106      	bne.n	8001e46 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2223      	movs	r2, #35	; 0x23
 8001e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff fbab 	bl	800159c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e46:	4b64      	ldr	r3, [pc, #400]	; (8001fd8 <HAL_ETH_Init+0x1bc>)
 8001e48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e4c:	4a62      	ldr	r2, [pc, #392]	; (8001fd8 <HAL_ETH_Init+0x1bc>)
 8001e4e:	f043 0302 	orr.w	r3, r3, #2
 8001e52:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e56:	4b60      	ldr	r3, [pc, #384]	; (8001fd8 <HAL_ETH_Init+0x1bc>)
 8001e58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	7a1b      	ldrb	r3, [r3, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d103      	bne.n	8001e74 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f7ff fedd 	bl	8001c2c <HAL_SYSCFG_ETHInterfaceSelect>
 8001e72:	e003      	b.n	8001e7c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001e74:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001e78:	f7ff fed8 	bl	8001c2c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001e7c:	4b57      	ldr	r3, [pc, #348]	; (8001fdc <HAL_ETH_Init+0x1c0>)
 8001e7e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6812      	ldr	r2, [r2, #0]
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e96:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e98:	f7ff fe98 	bl	8001bcc <HAL_GetTick>
 8001e9c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001e9e:	e011      	b.n	8001ec4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001ea0:	f7ff fe94 	bl	8001bcc <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001eae:	d909      	bls.n	8001ec4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2204      	movs	r2, #4
 8001eb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	22e0      	movs	r2, #224	; 0xe0
 8001ebc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e084      	b.n	8001fce <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1e4      	bne.n	8001ea0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f886 	bl	8001fe8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001edc:	f001 fce2 	bl	80038a4 <HAL_RCC_GetHCLKFreq>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	4a3f      	ldr	r2, [pc, #252]	; (8001fe0 <HAL_ETH_Init+0x1c4>)
 8001ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee8:	0c9a      	lsrs	r2, r3, #18
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	3a01      	subs	r2, #1
 8001ef0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 fa71 	bl	80023dc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f02:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001f06:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6812      	ldr	r2, [r2, #0]
 8001f0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f16:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d009      	beq.n	8001f3a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	22e0      	movs	r2, #224	; 0xe0
 8001f32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e049      	b.n	8001fce <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f42:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001f46:	4b27      	ldr	r3, [pc, #156]	; (8001fe4 <HAL_ETH_Init+0x1c8>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6952      	ldr	r2, [r2, #20]
 8001f4e:	0051      	lsls	r1, r2, #1
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	430b      	orrs	r3, r1
 8001f56:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f5a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 fad9 	bl	8002516 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 fb1f 	bl	80025a8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	3305      	adds	r3, #5
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	021a      	lsls	r2, r3, #8
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	3303      	adds	r3, #3
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	061a      	lsls	r2, r3, #24
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	3302      	adds	r3, #2
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	041b      	lsls	r3, r3, #16
 8001f9c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001fa8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001fb6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001fb8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2210      	movs	r2, #16
 8001fc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	58024400 	.word	0x58024400
 8001fdc:	58000400 	.word	0x58000400
 8001fe0:	431bde83 	.word	0x431bde83
 8001fe4:	ffff8001 	.word	0xffff8001

08001fe8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ff8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002000:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002002:	f001 fc4f 	bl	80038a4 <HAL_RCC_GetHCLKFreq>
 8002006:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	4a1e      	ldr	r2, [pc, #120]	; (8002084 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d908      	bls.n	8002022 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	4a1d      	ldr	r2, [pc, #116]	; (8002088 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d804      	bhi.n	8002022 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	e027      	b.n	8002072 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	4a18      	ldr	r2, [pc, #96]	; (8002088 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d908      	bls.n	800203c <HAL_ETH_SetMDIOClockRange+0x54>
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	4a17      	ldr	r2, [pc, #92]	; (800208c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d204      	bcs.n	800203c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	e01a      	b.n	8002072 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	4a13      	ldr	r2, [pc, #76]	; (800208c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d303      	bcc.n	800204c <HAL_ETH_SetMDIOClockRange+0x64>
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	4a12      	ldr	r2, [pc, #72]	; (8002090 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d911      	bls.n	8002070 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	4a10      	ldr	r2, [pc, #64]	; (8002090 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d908      	bls.n	8002066 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	4a0f      	ldr	r2, [pc, #60]	; (8002094 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d804      	bhi.n	8002066 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	e005      	b.n	8002072 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	e000      	b.n	8002072 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002070:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800207c:	bf00      	nop
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	01312cff 	.word	0x01312cff
 8002088:	02160ebf 	.word	0x02160ebf
 800208c:	03938700 	.word	0x03938700
 8002090:	05f5e0ff 	.word	0x05f5e0ff
 8002094:	08f0d17f 	.word	0x08f0d17f

08002098 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80020aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	791b      	ldrb	r3, [r3, #4]
 80020b0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80020b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	7b1b      	ldrb	r3, [r3, #12]
 80020b8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80020ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	7b5b      	ldrb	r3, [r3, #13]
 80020c0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80020c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	7b9b      	ldrb	r3, [r3, #14]
 80020c8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80020ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	7bdb      	ldrb	r3, [r3, #15]
 80020d0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80020d2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	7c12      	ldrb	r2, [r2, #16]
 80020d8:	2a00      	cmp	r2, #0
 80020da:	d102      	bne.n	80020e2 <ETH_SetMACConfig+0x4a>
 80020dc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80020e0:	e000      	b.n	80020e4 <ETH_SetMACConfig+0x4c>
 80020e2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80020e4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	7c52      	ldrb	r2, [r2, #17]
 80020ea:	2a00      	cmp	r2, #0
 80020ec:	d102      	bne.n	80020f4 <ETH_SetMACConfig+0x5c>
 80020ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020f2:	e000      	b.n	80020f6 <ETH_SetMACConfig+0x5e>
 80020f4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80020f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	7c9b      	ldrb	r3, [r3, #18]
 80020fc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80020fe:	431a      	orrs	r2, r3
               macconf->Speed |
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002104:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800210a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	7f1b      	ldrb	r3, [r3, #28]
 8002110:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002112:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	7f5b      	ldrb	r3, [r3, #29]
 8002118:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800211a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	7f92      	ldrb	r2, [r2, #30]
 8002120:	2a00      	cmp	r2, #0
 8002122:	d102      	bne.n	800212a <ETH_SetMACConfig+0x92>
 8002124:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002128:	e000      	b.n	800212c <ETH_SetMACConfig+0x94>
 800212a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800212c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	7fdb      	ldrb	r3, [r3, #31]
 8002132:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002134:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	f892 2020 	ldrb.w	r2, [r2, #32]
 800213c:	2a00      	cmp	r2, #0
 800213e:	d102      	bne.n	8002146 <ETH_SetMACConfig+0xae>
 8002140:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002144:	e000      	b.n	8002148 <ETH_SetMACConfig+0xb0>
 8002146:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002148:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800214e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002156:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002158:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800215e:	4313      	orrs	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b56      	ldr	r3, [pc, #344]	; (80022c4 <ETH_SetMACConfig+0x22c>)
 800216a:	4013      	ands	r3, r2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6812      	ldr	r2, [r2, #0]
 8002170:	68f9      	ldr	r1, [r7, #12]
 8002172:	430b      	orrs	r3, r1
 8002174:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002182:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002184:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800218c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800218e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002196:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002198:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	d102      	bne.n	80021aa <ETH_SetMACConfig+0x112>
 80021a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021a8:	e000      	b.n	80021ac <ETH_SetMACConfig+0x114>
 80021aa:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80021ac:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80021b2:	4313      	orrs	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	4b42      	ldr	r3, [pc, #264]	; (80022c8 <ETH_SetMACConfig+0x230>)
 80021be:	4013      	ands	r3, r2
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	68f9      	ldr	r1, [r7, #12]
 80021c6:	430b      	orrs	r3, r1
 80021c8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021d0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80021d6:	4313      	orrs	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	4b3a      	ldr	r3, [pc, #232]	; (80022cc <ETH_SetMACConfig+0x234>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	68f9      	ldr	r1, [r7, #12]
 80021ea:	430b      	orrs	r3, r1
 80021ec:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80021f4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80021fa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002202:	2a00      	cmp	r2, #0
 8002204:	d101      	bne.n	800220a <ETH_SetMACConfig+0x172>
 8002206:	2280      	movs	r2, #128	; 0x80
 8002208:	e000      	b.n	800220c <ETH_SetMACConfig+0x174>
 800220a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800220c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002212:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002214:	4313      	orrs	r3, r2
 8002216:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800221e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002222:	4013      	ands	r3, r2
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	68f9      	ldr	r1, [r7, #12]
 800222a:	430b      	orrs	r3, r1
 800222c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002234:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800223c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800223e:	4313      	orrs	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224a:	f023 0103 	bic.w	r1, r3, #3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	430a      	orrs	r2, r1
 8002256:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002262:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800227e:	2a00      	cmp	r2, #0
 8002280:	d101      	bne.n	8002286 <ETH_SetMACConfig+0x1ee>
 8002282:	2240      	movs	r2, #64	; 0x40
 8002284:	e000      	b.n	8002288 <ETH_SetMACConfig+0x1f0>
 8002286:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002288:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002290:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002292:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800229a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800229c:	4313      	orrs	r3, r2
 800229e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80022a8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	00048083 	.word	0x00048083
 80022c8:	c0f88000 	.word	0xc0f88000
 80022cc:	fffffef0 	.word	0xfffffef0

080022d0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4b38      	ldr	r3, [pc, #224]	; (80023c8 <ETH_SetDMAConfig+0xf8>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	6811      	ldr	r1, [r2, #0]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6812      	ldr	r2, [r2, #0]
 80022f0:	430b      	orrs	r3, r1
 80022f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022f6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	791b      	ldrb	r3, [r3, #4]
 80022fc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002302:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	7b1b      	ldrb	r3, [r3, #12]
 8002308:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800230a:	4313      	orrs	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	4b2c      	ldr	r3, [pc, #176]	; (80023cc <ETH_SetDMAConfig+0xfc>)
 800231a:	4013      	ands	r3, r2
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	68f9      	ldr	r1, [r7, #12]
 8002322:	430b      	orrs	r3, r1
 8002324:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002328:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	7b5b      	ldrb	r3, [r3, #13]
 800232e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002334:	4313      	orrs	r3, r2
 8002336:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002340:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002344:	4b22      	ldr	r3, [pc, #136]	; (80023d0 <ETH_SetDMAConfig+0x100>)
 8002346:	4013      	ands	r3, r2
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6812      	ldr	r2, [r2, #0]
 800234c:	68f9      	ldr	r1, [r7, #12]
 800234e:	430b      	orrs	r3, r1
 8002350:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002354:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	7d1b      	ldrb	r3, [r3, #20]
 8002360:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002362:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	7f5b      	ldrb	r3, [r3, #29]
 8002368:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800236a:	4313      	orrs	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002376:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800237a:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <ETH_SetDMAConfig+0x104>)
 800237c:	4013      	ands	r3, r2
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	68f9      	ldr	r1, [r7, #12]
 8002384:	430b      	orrs	r3, r1
 8002386:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800238a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	7f1b      	ldrb	r3, [r3, #28]
 8002392:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002398:	4313      	orrs	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <ETH_SetDMAConfig+0x108>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	68f9      	ldr	r1, [r7, #12]
 80023b2:	430b      	orrs	r3, r1
 80023b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023b8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	ffff87fd 	.word	0xffff87fd
 80023cc:	ffff2ffe 	.word	0xffff2ffe
 80023d0:	fffec000 	.word	0xfffec000
 80023d4:	ffc0efef 	.word	0xffc0efef
 80023d8:	7fc0ffff 	.word	0x7fc0ffff

080023dc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b0a4      	sub	sp, #144	; 0x90
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80023e4:	2301      	movs	r3, #1
 80023e6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80023ea:	2300      	movs	r3, #0
 80023ec:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80023fa:	2301      	movs	r3, #1
 80023fc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002400:	2301      	movs	r3, #1
 8002402:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002406:	2301      	movs	r3, #1
 8002408:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800240c:	2300      	movs	r3, #0
 800240e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002412:	2301      	movs	r3, #1
 8002414:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002418:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800241c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800241e:	2300      	movs	r3, #0
 8002420:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002424:	2300      	movs	r3, #0
 8002426:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002428:	2300      	movs	r3, #0
 800242a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800242e:	2300      	movs	r3, #0
 8002430:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002434:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002438:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800243a:	2300      	movs	r3, #0
 800243c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002440:	2300      	movs	r3, #0
 8002442:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002444:	2301      	movs	r3, #1
 8002446:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800244a:	2300      	movs	r3, #0
 800244c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002450:	2300      	movs	r3, #0
 8002452:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002456:	2300      	movs	r3, #0
 8002458:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800245a:	2300      	movs	r3, #0
 800245c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800245e:	2300      	movs	r3, #0
 8002460:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002462:	2300      	movs	r3, #0
 8002464:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002468:	2300      	movs	r3, #0
 800246a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800246e:	2301      	movs	r3, #1
 8002470:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002474:	2320      	movs	r3, #32
 8002476:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800247a:	2301      	movs	r3, #1
 800247c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002480:	2300      	movs	r3, #0
 8002482:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002486:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800248a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800248c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002490:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002492:	2300      	movs	r3, #0
 8002494:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002498:	2302      	movs	r3, #2
 800249a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800249e:	2300      	movs	r3, #0
 80024a0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80024a4:	2300      	movs	r3, #0
 80024a6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80024aa:	2300      	movs	r3, #0
 80024ac:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80024b0:	2301      	movs	r3, #1
 80024b2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80024b6:	2300      	movs	r3, #0
 80024b8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80024ba:	2301      	movs	r3, #1
 80024bc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80024c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024c4:	4619      	mov	r1, r3
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7ff fde6 	bl	8002098 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80024cc:	2301      	movs	r3, #1
 80024ce:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80024d0:	2301      	movs	r3, #1
 80024d2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80024d4:	2300      	movs	r3, #0
 80024d6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80024d8:	2300      	movs	r3, #0
 80024da:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80024de:	2300      	movs	r3, #0
 80024e0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80024e2:	2300      	movs	r3, #0
 80024e4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80024e6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80024ea:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80024ec:	2300      	movs	r3, #0
 80024ee:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80024f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80024f4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80024fc:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002500:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002502:	f107 0308 	add.w	r3, r7, #8
 8002506:	4619      	mov	r1, r3
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7ff fee1 	bl	80022d0 <ETH_SetDMAConfig>
}
 800250e:	bf00      	nop
 8002510:	3790      	adds	r7, #144	; 0x90
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002516:	b480      	push	{r7}
 8002518:	b085      	sub	sp, #20
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	e01d      	b.n	8002560 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68d9      	ldr	r1, [r3, #12]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	4613      	mov	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	4413      	add	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	440b      	add	r3, r1
 8002534:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2200      	movs	r2, #0
 8002540:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2200      	movs	r2, #0
 8002546:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2200      	movs	r2, #0
 800254c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800254e:	68b9      	ldr	r1, [r7, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	3206      	adds	r2, #6
 8002556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	3301      	adds	r3, #1
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2b03      	cmp	r3, #3
 8002564:	d9de      	bls.n	8002524 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002574:	461a      	mov	r2, r3
 8002576:	2303      	movs	r3, #3
 8002578:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002588:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002598:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80025b0:	2300      	movs	r3, #0
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	e023      	b.n	80025fe <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6919      	ldr	r1, [r3, #16]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	4613      	mov	r3, r2
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	4413      	add	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	440b      	add	r3, r1
 80025c6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2200      	movs	r2, #0
 80025d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2200      	movs	r2, #0
 80025de:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2200      	movs	r2, #0
 80025e4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	2200      	movs	r2, #0
 80025ea:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80025ec:	68b9      	ldr	r1, [r7, #8]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	3212      	adds	r2, #18
 80025f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	3301      	adds	r3, #1
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2b03      	cmp	r3, #3
 8002602:	d9d8      	bls.n	80025b6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800262a:	461a      	mov	r2, r3
 800262c:	2303      	movs	r3, #3
 800262e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691a      	ldr	r2, [r3, #16]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800263e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002652:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002656:	bf00      	nop
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002664:	b480      	push	{r7}
 8002666:	b089      	sub	sp, #36	; 0x24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800266e:	2300      	movs	r3, #0
 8002670:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002672:	4b86      	ldr	r3, [pc, #536]	; (800288c <HAL_GPIO_Init+0x228>)
 8002674:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002676:	e18c      	b.n	8002992 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	2101      	movs	r1, #1
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	fa01 f303 	lsl.w	r3, r1, r3
 8002684:	4013      	ands	r3, r2
 8002686:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 817e 	beq.w	800298c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 0303 	and.w	r3, r3, #3
 8002698:	2b01      	cmp	r3, #1
 800269a:	d005      	beq.n	80026a8 <HAL_GPIO_Init+0x44>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d130      	bne.n	800270a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	2203      	movs	r2, #3
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	68da      	ldr	r2, [r3, #12]
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026de:	2201      	movs	r2, #1
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	091b      	lsrs	r3, r3, #4
 80026f4:	f003 0201 	and.w	r2, r3, #1
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	2b03      	cmp	r3, #3
 8002714:	d017      	beq.n	8002746 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	2203      	movs	r2, #3
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43db      	mvns	r3, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4013      	ands	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4313      	orrs	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d123      	bne.n	800279a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	08da      	lsrs	r2, r3, #3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3208      	adds	r2, #8
 800275a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800275e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	220f      	movs	r2, #15
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	691a      	ldr	r2, [r3, #16]
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	08da      	lsrs	r2, r3, #3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3208      	adds	r2, #8
 8002794:	69b9      	ldr	r1, [r7, #24]
 8002796:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	2203      	movs	r2, #3
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43db      	mvns	r3, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4013      	ands	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 0203 	and.w	r2, r3, #3
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 80d8 	beq.w	800298c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027dc:	4b2c      	ldr	r3, [pc, #176]	; (8002890 <HAL_GPIO_Init+0x22c>)
 80027de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80027e2:	4a2b      	ldr	r2, [pc, #172]	; (8002890 <HAL_GPIO_Init+0x22c>)
 80027e4:	f043 0302 	orr.w	r3, r3, #2
 80027e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80027ec:	4b28      	ldr	r3, [pc, #160]	; (8002890 <HAL_GPIO_Init+0x22c>)
 80027ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027fa:	4a26      	ldr	r2, [pc, #152]	; (8002894 <HAL_GPIO_Init+0x230>)
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	089b      	lsrs	r3, r3, #2
 8002800:	3302      	adds	r3, #2
 8002802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002806:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	220f      	movs	r2, #15
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43db      	mvns	r3, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4013      	ands	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a1d      	ldr	r2, [pc, #116]	; (8002898 <HAL_GPIO_Init+0x234>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d04a      	beq.n	80028bc <HAL_GPIO_Init+0x258>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a1c      	ldr	r2, [pc, #112]	; (800289c <HAL_GPIO_Init+0x238>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d02b      	beq.n	8002886 <HAL_GPIO_Init+0x222>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a1b      	ldr	r2, [pc, #108]	; (80028a0 <HAL_GPIO_Init+0x23c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d025      	beq.n	8002882 <HAL_GPIO_Init+0x21e>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a1a      	ldr	r2, [pc, #104]	; (80028a4 <HAL_GPIO_Init+0x240>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d01f      	beq.n	800287e <HAL_GPIO_Init+0x21a>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a19      	ldr	r2, [pc, #100]	; (80028a8 <HAL_GPIO_Init+0x244>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d019      	beq.n	800287a <HAL_GPIO_Init+0x216>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a18      	ldr	r2, [pc, #96]	; (80028ac <HAL_GPIO_Init+0x248>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d013      	beq.n	8002876 <HAL_GPIO_Init+0x212>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a17      	ldr	r2, [pc, #92]	; (80028b0 <HAL_GPIO_Init+0x24c>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d00d      	beq.n	8002872 <HAL_GPIO_Init+0x20e>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a16      	ldr	r2, [pc, #88]	; (80028b4 <HAL_GPIO_Init+0x250>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d007      	beq.n	800286e <HAL_GPIO_Init+0x20a>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a15      	ldr	r2, [pc, #84]	; (80028b8 <HAL_GPIO_Init+0x254>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d101      	bne.n	800286a <HAL_GPIO_Init+0x206>
 8002866:	2309      	movs	r3, #9
 8002868:	e029      	b.n	80028be <HAL_GPIO_Init+0x25a>
 800286a:	230a      	movs	r3, #10
 800286c:	e027      	b.n	80028be <HAL_GPIO_Init+0x25a>
 800286e:	2307      	movs	r3, #7
 8002870:	e025      	b.n	80028be <HAL_GPIO_Init+0x25a>
 8002872:	2306      	movs	r3, #6
 8002874:	e023      	b.n	80028be <HAL_GPIO_Init+0x25a>
 8002876:	2305      	movs	r3, #5
 8002878:	e021      	b.n	80028be <HAL_GPIO_Init+0x25a>
 800287a:	2304      	movs	r3, #4
 800287c:	e01f      	b.n	80028be <HAL_GPIO_Init+0x25a>
 800287e:	2303      	movs	r3, #3
 8002880:	e01d      	b.n	80028be <HAL_GPIO_Init+0x25a>
 8002882:	2302      	movs	r3, #2
 8002884:	e01b      	b.n	80028be <HAL_GPIO_Init+0x25a>
 8002886:	2301      	movs	r3, #1
 8002888:	e019      	b.n	80028be <HAL_GPIO_Init+0x25a>
 800288a:	bf00      	nop
 800288c:	58000080 	.word	0x58000080
 8002890:	58024400 	.word	0x58024400
 8002894:	58000400 	.word	0x58000400
 8002898:	58020000 	.word	0x58020000
 800289c:	58020400 	.word	0x58020400
 80028a0:	58020800 	.word	0x58020800
 80028a4:	58020c00 	.word	0x58020c00
 80028a8:	58021000 	.word	0x58021000
 80028ac:	58021400 	.word	0x58021400
 80028b0:	58021800 	.word	0x58021800
 80028b4:	58021c00 	.word	0x58021c00
 80028b8:	58022400 	.word	0x58022400
 80028bc:	2300      	movs	r3, #0
 80028be:	69fa      	ldr	r2, [r7, #28]
 80028c0:	f002 0203 	and.w	r2, r2, #3
 80028c4:	0092      	lsls	r2, r2, #2
 80028c6:	4093      	lsls	r3, r2
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028ce:	4938      	ldr	r1, [pc, #224]	; (80029b0 <HAL_GPIO_Init+0x34c>)
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	089b      	lsrs	r3, r3, #2
 80028d4:	3302      	adds	r3, #2
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002902:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800290a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002930:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	3301      	adds	r3, #1
 8002990:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	fa22 f303 	lsr.w	r3, r2, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	f47f ae6b 	bne.w	8002678 <HAL_GPIO_Init+0x14>
  }
}
 80029a2:	bf00      	nop
 80029a4:	bf00      	nop
 80029a6:	3724      	adds	r7, #36	; 0x24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	58000400 	.word	0x58000400

080029b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	807b      	strh	r3, [r7, #2]
 80029c0:	4613      	mov	r3, r2
 80029c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029c4:	787b      	ldrb	r3, [r7, #1]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ca:	887a      	ldrh	r2, [r7, #2]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80029d0:	e003      	b.n	80029da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80029d2:	887b      	ldrh	r3, [r7, #2]
 80029d4:	041a      	lsls	r2, r3, #16
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	619a      	str	r2, [r3, #24]
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b085      	sub	sp, #20
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	460b      	mov	r3, r1
 80029f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029f8:	887a      	ldrh	r2, [r7, #2]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4013      	ands	r3, r2
 80029fe:	041a      	lsls	r2, r3, #16
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	43d9      	mvns	r1, r3
 8002a04:	887b      	ldrh	r3, [r7, #2]
 8002a06:	400b      	ands	r3, r1
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	619a      	str	r2, [r3, #24]
}
 8002a0e:	bf00      	nop
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
	...

08002a1c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002a24:	4b19      	ldr	r3, [pc, #100]	; (8002a8c <HAL_PWREx_ConfigSupply+0x70>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d00a      	beq.n	8002a46 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002a30:	4b16      	ldr	r3, [pc, #88]	; (8002a8c <HAL_PWREx_ConfigSupply+0x70>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d001      	beq.n	8002a42 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e01f      	b.n	8002a82 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	e01d      	b.n	8002a82 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002a46:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <HAL_PWREx_ConfigSupply+0x70>)
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f023 0207 	bic.w	r2, r3, #7
 8002a4e:	490f      	ldr	r1, [pc, #60]	; (8002a8c <HAL_PWREx_ConfigSupply+0x70>)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002a56:	f7ff f8b9 	bl	8001bcc <HAL_GetTick>
 8002a5a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a5c:	e009      	b.n	8002a72 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002a5e:	f7ff f8b5 	bl	8001bcc <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a6c:	d901      	bls.n	8002a72 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e007      	b.n	8002a82 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_PWREx_ConfigSupply+0x70>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a7e:	d1ee      	bne.n	8002a5e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	58024800 	.word	0x58024800

08002a90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08c      	sub	sp, #48	; 0x30
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e3c8      	b.n	8003234 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 8087 	beq.w	8002bbe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ab0:	4b88      	ldr	r3, [pc, #544]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002aba:	4b86      	ldr	r3, [pc, #536]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abe:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac2:	2b10      	cmp	r3, #16
 8002ac4:	d007      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x46>
 8002ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac8:	2b18      	cmp	r3, #24
 8002aca:	d110      	bne.n	8002aee <HAL_RCC_OscConfig+0x5e>
 8002acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d10b      	bne.n	8002aee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad6:	4b7f      	ldr	r3, [pc, #508]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d06c      	beq.n	8002bbc <HAL_RCC_OscConfig+0x12c>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d168      	bne.n	8002bbc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e3a2      	b.n	8003234 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af6:	d106      	bne.n	8002b06 <HAL_RCC_OscConfig+0x76>
 8002af8:	4b76      	ldr	r3, [pc, #472]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a75      	ldr	r2, [pc, #468]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b02:	6013      	str	r3, [r2, #0]
 8002b04:	e02e      	b.n	8002b64 <HAL_RCC_OscConfig+0xd4>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10c      	bne.n	8002b28 <HAL_RCC_OscConfig+0x98>
 8002b0e:	4b71      	ldr	r3, [pc, #452]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a70      	ldr	r2, [pc, #448]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	4b6e      	ldr	r3, [pc, #440]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a6d      	ldr	r2, [pc, #436]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002b20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	e01d      	b.n	8002b64 <HAL_RCC_OscConfig+0xd4>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b30:	d10c      	bne.n	8002b4c <HAL_RCC_OscConfig+0xbc>
 8002b32:	4b68      	ldr	r3, [pc, #416]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a67      	ldr	r2, [pc, #412]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002b38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	4b65      	ldr	r3, [pc, #404]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a64      	ldr	r2, [pc, #400]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	e00b      	b.n	8002b64 <HAL_RCC_OscConfig+0xd4>
 8002b4c:	4b61      	ldr	r3, [pc, #388]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a60      	ldr	r2, [pc, #384]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b56:	6013      	str	r3, [r2, #0]
 8002b58:	4b5e      	ldr	r3, [pc, #376]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a5d      	ldr	r2, [pc, #372]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d013      	beq.n	8002b94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6c:	f7ff f82e 	bl	8001bcc <HAL_GetTick>
 8002b70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b74:	f7ff f82a 	bl	8001bcc <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b64      	cmp	r3, #100	; 0x64
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e356      	b.n	8003234 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b86:	4b53      	ldr	r3, [pc, #332]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0xe4>
 8002b92:	e014      	b.n	8002bbe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b94:	f7ff f81a 	bl	8001bcc <HAL_GetTick>
 8002b98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b9c:	f7ff f816 	bl	8001bcc <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b64      	cmp	r3, #100	; 0x64
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e342      	b.n	8003234 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bae:	4b49      	ldr	r3, [pc, #292]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f0      	bne.n	8002b9c <HAL_RCC_OscConfig+0x10c>
 8002bba:	e000      	b.n	8002bbe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 808c 	beq.w	8002ce4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bcc:	4b41      	ldr	r3, [pc, #260]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bd4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bd6:	4b3f      	ldr	r3, [pc, #252]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bda:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d007      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x162>
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	2b18      	cmp	r3, #24
 8002be6:	d137      	bne.n	8002c58 <HAL_RCC_OscConfig+0x1c8>
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d132      	bne.n	8002c58 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bf2:	4b38      	ldr	r3, [pc, #224]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d005      	beq.n	8002c0a <HAL_RCC_OscConfig+0x17a>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e314      	b.n	8003234 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c0a:	4b32      	ldr	r3, [pc, #200]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f023 0219 	bic.w	r2, r3, #25
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	492f      	ldr	r1, [pc, #188]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1c:	f7fe ffd6 	bl	8001bcc <HAL_GetTick>
 8002c20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c24:	f7fe ffd2 	bl	8001bcc <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e2fe      	b.n	8003234 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c36:	4b27      	ldr	r3, [pc, #156]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0304 	and.w	r3, r3, #4
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c42:	4b24      	ldr	r3, [pc, #144]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	061b      	lsls	r3, r3, #24
 8002c50:	4920      	ldr	r1, [pc, #128]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c56:	e045      	b.n	8002ce4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d026      	beq.n	8002cae <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c60:	4b1c      	ldr	r3, [pc, #112]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f023 0219 	bic.w	r2, r3, #25
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	4919      	ldr	r1, [pc, #100]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c72:	f7fe ffab 	bl	8001bcc <HAL_GetTick>
 8002c76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c78:	e008      	b.n	8002c8c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c7a:	f7fe ffa7 	bl	8001bcc <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e2d3      	b.n	8003234 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c8c:	4b11      	ldr	r3, [pc, #68]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0f0      	beq.n	8002c7a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c98:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	061b      	lsls	r3, r3, #24
 8002ca6:	490b      	ldr	r1, [pc, #44]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	604b      	str	r3, [r1, #4]
 8002cac:	e01a      	b.n	8002ce4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cae:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a08      	ldr	r2, [pc, #32]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002cb4:	f023 0301 	bic.w	r3, r3, #1
 8002cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cba:	f7fe ff87 	bl	8001bcc <HAL_GetTick>
 8002cbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cc0:	e00a      	b.n	8002cd8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cc2:	f7fe ff83 	bl	8001bcc <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d903      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e2af      	b.n	8003234 <HAL_RCC_OscConfig+0x7a4>
 8002cd4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cd8:	4b96      	ldr	r3, [pc, #600]	; (8002f34 <HAL_RCC_OscConfig+0x4a4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1ee      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d06a      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cf0:	4b90      	ldr	r3, [pc, #576]	; (8002f34 <HAL_RCC_OscConfig+0x4a4>)
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cf8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002cfa:	4b8e      	ldr	r3, [pc, #568]	; (8002f34 <HAL_RCC_OscConfig+0x4a4>)
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfe:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d007      	beq.n	8002d16 <HAL_RCC_OscConfig+0x286>
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	2b18      	cmp	r3, #24
 8002d0a:	d11b      	bne.n	8002d44 <HAL_RCC_OscConfig+0x2b4>
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d116      	bne.n	8002d44 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d16:	4b87      	ldr	r3, [pc, #540]	; (8002f34 <HAL_RCC_OscConfig+0x4a4>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d005      	beq.n	8002d2e <HAL_RCC_OscConfig+0x29e>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	2b80      	cmp	r3, #128	; 0x80
 8002d28:	d001      	beq.n	8002d2e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e282      	b.n	8003234 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d2e:	4b81      	ldr	r3, [pc, #516]	; (8002f34 <HAL_RCC_OscConfig+0x4a4>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	061b      	lsls	r3, r3, #24
 8002d3c:	497d      	ldr	r1, [pc, #500]	; (8002f34 <HAL_RCC_OscConfig+0x4a4>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d42:	e040      	b.n	8002dc6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d023      	beq.n	8002d94 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002d4c:	4b79      	ldr	r3, [pc, #484]	; (8002f34 <HAL_RCC_OscConfig+0x4a4>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a78      	ldr	r2, [pc, #480]	; (8002f34 <HAL_RCC_OscConfig+0x4a4>)
 8002d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d58:	f7fe ff38 	bl	8001bcc <HAL_GetTick>
 8002d5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002d60:	f7fe ff34 	bl	8001bcc <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e260      	b.n	8003234 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d72:	4b70      	ldr	r3, [pc, #448]	; (8002f34 <HAL_RCC_OscConfig+0x4a4>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d7e:	4b6d      	ldr	r3, [pc, #436]	; (8002f34 <HAL_RCC_OscConfig+0x4a4>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	061b      	lsls	r3, r3, #24
 8002d8c:	4969      	ldr	r1, [pc, #420]	; (8002f34 <HAL_RCC_OscConfig+0x4a4>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60cb      	str	r3, [r1, #12]
 8002d92:	e018      	b.n	8002dc6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002d94:	4b67      	ldr	r3, [pc, #412]	; (8002f34 <HAL_RCC_OscConfig+0x4a4>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a66      	ldr	r2, [pc, #408]	; (8002f34 <HAL_RCC_OscConfig+0x4a4>)
 8002d9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da0:	f7fe ff14 	bl	8001bcc <HAL_GetTick>
 8002da4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002da8:	f7fe ff10 	bl	8001bcc <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e23c      	b.n	8003234 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002dba:	4b5e      	ldr	r3, [pc, #376]	; (8002f34 <HAL_RCC_OscConfig+0x4a4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f0      	bne.n	8002da8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d036      	beq.n	8002e40 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d019      	beq.n	8002e0e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dda:	4b56      	ldr	r3, [pc, #344]	; (8002f34 <HAL_RCC_OscConfig+0x4a4>)
 8002ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dde:	4a55      	ldr	r2, [pc, #340]	; (8002f34 <HAL_RCC_OscConfig+0x4a4>)
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de6:	f7fe fef1 	bl	8001bcc <HAL_GetTick>
 8002dea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dee:	f7fe feed 	bl	8001bcc <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e219      	b.n	8003234 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e00:	4b4c      	ldr	r3, [pc, #304]	; (8002f34 <HAL_RCC_OscConfig+0x4a4>)
 8002e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0f0      	beq.n	8002dee <HAL_RCC_OscConfig+0x35e>
 8002e0c:	e018      	b.n	8002e40 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e0e:	4b49      	ldr	r3, [pc, #292]	; (8002f34 <HAL_RCC_OscConfig+0x4a4>)
 8002e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e12:	4a48      	ldr	r2, [pc, #288]	; (8002f34 <HAL_RCC_OscConfig+0x4a4>)
 8002e14:	f023 0301 	bic.w	r3, r3, #1
 8002e18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1a:	f7fe fed7 	bl	8001bcc <HAL_GetTick>
 8002e1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e22:	f7fe fed3 	bl	8001bcc <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e1ff      	b.n	8003234 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e34:	4b3f      	ldr	r3, [pc, #252]	; (8002f34 <HAL_RCC_OscConfig+0x4a4>)
 8002e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1f0      	bne.n	8002e22 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0320 	and.w	r3, r3, #32
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d036      	beq.n	8002eba <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d019      	beq.n	8002e88 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e54:	4b37      	ldr	r3, [pc, #220]	; (8002f34 <HAL_RCC_OscConfig+0x4a4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a36      	ldr	r2, [pc, #216]	; (8002f34 <HAL_RCC_OscConfig+0x4a4>)
 8002e5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e5e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e60:	f7fe feb4 	bl	8001bcc <HAL_GetTick>
 8002e64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e68:	f7fe feb0 	bl	8001bcc <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e1dc      	b.n	8003234 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e7a:	4b2e      	ldr	r3, [pc, #184]	; (8002f34 <HAL_RCC_OscConfig+0x4a4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0f0      	beq.n	8002e68 <HAL_RCC_OscConfig+0x3d8>
 8002e86:	e018      	b.n	8002eba <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e88:	4b2a      	ldr	r3, [pc, #168]	; (8002f34 <HAL_RCC_OscConfig+0x4a4>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a29      	ldr	r2, [pc, #164]	; (8002f34 <HAL_RCC_OscConfig+0x4a4>)
 8002e8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e92:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e94:	f7fe fe9a 	bl	8001bcc <HAL_GetTick>
 8002e98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e9c:	f7fe fe96 	bl	8001bcc <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e1c2      	b.n	8003234 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002eae:	4b21      	ldr	r3, [pc, #132]	; (8002f34 <HAL_RCC_OscConfig+0x4a4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f0      	bne.n	8002e9c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0304 	and.w	r3, r3, #4
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 8086 	beq.w	8002fd4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ec8:	4b1b      	ldr	r3, [pc, #108]	; (8002f38 <HAL_RCC_OscConfig+0x4a8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a1a      	ldr	r2, [pc, #104]	; (8002f38 <HAL_RCC_OscConfig+0x4a8>)
 8002ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ed4:	f7fe fe7a 	bl	8001bcc <HAL_GetTick>
 8002ed8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002edc:	f7fe fe76 	bl	8001bcc <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	; 0x64
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e1a2      	b.n	8003234 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002eee:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <HAL_RCC_OscConfig+0x4a8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d106      	bne.n	8002f10 <HAL_RCC_OscConfig+0x480>
 8002f02:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <HAL_RCC_OscConfig+0x4a4>)
 8002f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f06:	4a0b      	ldr	r2, [pc, #44]	; (8002f34 <HAL_RCC_OscConfig+0x4a4>)
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f0e:	e032      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e6>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d111      	bne.n	8002f3c <HAL_RCC_OscConfig+0x4ac>
 8002f18:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <HAL_RCC_OscConfig+0x4a4>)
 8002f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1c:	4a05      	ldr	r2, [pc, #20]	; (8002f34 <HAL_RCC_OscConfig+0x4a4>)
 8002f1e:	f023 0301 	bic.w	r3, r3, #1
 8002f22:	6713      	str	r3, [r2, #112]	; 0x70
 8002f24:	4b03      	ldr	r3, [pc, #12]	; (8002f34 <HAL_RCC_OscConfig+0x4a4>)
 8002f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f28:	4a02      	ldr	r2, [pc, #8]	; (8002f34 <HAL_RCC_OscConfig+0x4a4>)
 8002f2a:	f023 0304 	bic.w	r3, r3, #4
 8002f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f30:	e021      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e6>
 8002f32:	bf00      	nop
 8002f34:	58024400 	.word	0x58024400
 8002f38:	58024800 	.word	0x58024800
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2b05      	cmp	r3, #5
 8002f42:	d10c      	bne.n	8002f5e <HAL_RCC_OscConfig+0x4ce>
 8002f44:	4b83      	ldr	r3, [pc, #524]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 8002f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f48:	4a82      	ldr	r2, [pc, #520]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 8002f4a:	f043 0304 	orr.w	r3, r3, #4
 8002f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f50:	4b80      	ldr	r3, [pc, #512]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 8002f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f54:	4a7f      	ldr	r2, [pc, #508]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 8002f56:	f043 0301 	orr.w	r3, r3, #1
 8002f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5c:	e00b      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e6>
 8002f5e:	4b7d      	ldr	r3, [pc, #500]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 8002f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f62:	4a7c      	ldr	r2, [pc, #496]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 8002f64:	f023 0301 	bic.w	r3, r3, #1
 8002f68:	6713      	str	r3, [r2, #112]	; 0x70
 8002f6a:	4b7a      	ldr	r3, [pc, #488]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 8002f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6e:	4a79      	ldr	r2, [pc, #484]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 8002f70:	f023 0304 	bic.w	r3, r3, #4
 8002f74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d015      	beq.n	8002faa <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7e:	f7fe fe25 	bl	8001bcc <HAL_GetTick>
 8002f82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f84:	e00a      	b.n	8002f9c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f86:	f7fe fe21 	bl	8001bcc <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e14b      	b.n	8003234 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f9c:	4b6d      	ldr	r3, [pc, #436]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0ee      	beq.n	8002f86 <HAL_RCC_OscConfig+0x4f6>
 8002fa8:	e014      	b.n	8002fd4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002faa:	f7fe fe0f 	bl	8001bcc <HAL_GetTick>
 8002fae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fb0:	e00a      	b.n	8002fc8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb2:	f7fe fe0b 	bl	8001bcc <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e135      	b.n	8003234 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fc8:	4b62      	ldr	r3, [pc, #392]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1ee      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 812a 	beq.w	8003232 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002fde:	4b5d      	ldr	r3, [pc, #372]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fe6:	2b18      	cmp	r3, #24
 8002fe8:	f000 80ba 	beq.w	8003160 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	f040 8095 	bne.w	8003120 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff6:	4b57      	ldr	r3, [pc, #348]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a56      	ldr	r2, [pc, #344]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 8002ffc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003000:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003002:	f7fe fde3 	bl	8001bcc <HAL_GetTick>
 8003006:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800300a:	f7fe fddf 	bl	8001bcc <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e10b      	b.n	8003234 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800301c:	4b4d      	ldr	r3, [pc, #308]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1f0      	bne.n	800300a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003028:	4b4a      	ldr	r3, [pc, #296]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 800302a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800302c:	4b4a      	ldr	r3, [pc, #296]	; (8003158 <HAL_RCC_OscConfig+0x6c8>)
 800302e:	4013      	ands	r3, r2
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003038:	0112      	lsls	r2, r2, #4
 800303a:	430a      	orrs	r2, r1
 800303c:	4945      	ldr	r1, [pc, #276]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 800303e:	4313      	orrs	r3, r2
 8003040:	628b      	str	r3, [r1, #40]	; 0x28
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	3b01      	subs	r3, #1
 8003048:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003050:	3b01      	subs	r3, #1
 8003052:	025b      	lsls	r3, r3, #9
 8003054:	b29b      	uxth	r3, r3
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305c:	3b01      	subs	r3, #1
 800305e:	041b      	lsls	r3, r3, #16
 8003060:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003064:	431a      	orrs	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306a:	3b01      	subs	r3, #1
 800306c:	061b      	lsls	r3, r3, #24
 800306e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003072:	4938      	ldr	r1, [pc, #224]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 8003074:	4313      	orrs	r3, r2
 8003076:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003078:	4b36      	ldr	r3, [pc, #216]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 800307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307c:	4a35      	ldr	r2, [pc, #212]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 800307e:	f023 0301 	bic.w	r3, r3, #1
 8003082:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003084:	4b33      	ldr	r3, [pc, #204]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 8003086:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003088:	4b34      	ldr	r3, [pc, #208]	; (800315c <HAL_RCC_OscConfig+0x6cc>)
 800308a:	4013      	ands	r3, r2
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003090:	00d2      	lsls	r2, r2, #3
 8003092:	4930      	ldr	r1, [pc, #192]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 8003094:	4313      	orrs	r3, r2
 8003096:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003098:	4b2e      	ldr	r3, [pc, #184]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	f023 020c 	bic.w	r2, r3, #12
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	492b      	ldr	r1, [pc, #172]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80030aa:	4b2a      	ldr	r3, [pc, #168]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 80030ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ae:	f023 0202 	bic.w	r2, r3, #2
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b6:	4927      	ldr	r1, [pc, #156]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80030bc:	4b25      	ldr	r3, [pc, #148]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 80030be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c0:	4a24      	ldr	r2, [pc, #144]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 80030c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030c8:	4b22      	ldr	r3, [pc, #136]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030cc:	4a21      	ldr	r2, [pc, #132]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 80030ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80030d4:	4b1f      	ldr	r3, [pc, #124]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	4a1e      	ldr	r2, [pc, #120]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 80030da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80030e0:	4b1c      	ldr	r3, [pc, #112]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 80030e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e4:	4a1b      	ldr	r2, [pc, #108]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 80030e6:	f043 0301 	orr.w	r3, r3, #1
 80030ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030ec:	4b19      	ldr	r3, [pc, #100]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a18      	ldr	r2, [pc, #96]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 80030f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f8:	f7fe fd68 	bl	8001bcc <HAL_GetTick>
 80030fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003100:	f7fe fd64 	bl	8001bcc <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e090      	b.n	8003234 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003112:	4b10      	ldr	r3, [pc, #64]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f0      	beq.n	8003100 <HAL_RCC_OscConfig+0x670>
 800311e:	e088      	b.n	8003232 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003120:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a0b      	ldr	r2, [pc, #44]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 8003126:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800312a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312c:	f7fe fd4e 	bl	8001bcc <HAL_GetTick>
 8003130:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003134:	f7fe fd4a 	bl	8001bcc <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e076      	b.n	8003234 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003146:	4b03      	ldr	r3, [pc, #12]	; (8003154 <HAL_RCC_OscConfig+0x6c4>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f0      	bne.n	8003134 <HAL_RCC_OscConfig+0x6a4>
 8003152:	e06e      	b.n	8003232 <HAL_RCC_OscConfig+0x7a2>
 8003154:	58024400 	.word	0x58024400
 8003158:	fffffc0c 	.word	0xfffffc0c
 800315c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003160:	4b36      	ldr	r3, [pc, #216]	; (800323c <HAL_RCC_OscConfig+0x7ac>)
 8003162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003164:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003166:	4b35      	ldr	r3, [pc, #212]	; (800323c <HAL_RCC_OscConfig+0x7ac>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	2b01      	cmp	r3, #1
 8003172:	d031      	beq.n	80031d8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	f003 0203 	and.w	r2, r3, #3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800317e:	429a      	cmp	r2, r3
 8003180:	d12a      	bne.n	80031d8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	091b      	lsrs	r3, r3, #4
 8003186:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318e:	429a      	cmp	r2, r3
 8003190:	d122      	bne.n	80031d8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800319e:	429a      	cmp	r2, r3
 80031a0:	d11a      	bne.n	80031d8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	0a5b      	lsrs	r3, r3, #9
 80031a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d111      	bne.n	80031d8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	0c1b      	lsrs	r3, r3, #16
 80031b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d108      	bne.n	80031d8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	0e1b      	lsrs	r3, r3, #24
 80031ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e02b      	b.n	8003234 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80031dc:	4b17      	ldr	r3, [pc, #92]	; (800323c <HAL_RCC_OscConfig+0x7ac>)
 80031de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e0:	08db      	lsrs	r3, r3, #3
 80031e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031e6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d01f      	beq.n	8003232 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80031f2:	4b12      	ldr	r3, [pc, #72]	; (800323c <HAL_RCC_OscConfig+0x7ac>)
 80031f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f6:	4a11      	ldr	r2, [pc, #68]	; (800323c <HAL_RCC_OscConfig+0x7ac>)
 80031f8:	f023 0301 	bic.w	r3, r3, #1
 80031fc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031fe:	f7fe fce5 	bl	8001bcc <HAL_GetTick>
 8003202:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003204:	bf00      	nop
 8003206:	f7fe fce1 	bl	8001bcc <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	4293      	cmp	r3, r2
 8003210:	d0f9      	beq.n	8003206 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003212:	4b0a      	ldr	r3, [pc, #40]	; (800323c <HAL_RCC_OscConfig+0x7ac>)
 8003214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003216:	4b0a      	ldr	r3, [pc, #40]	; (8003240 <HAL_RCC_OscConfig+0x7b0>)
 8003218:	4013      	ands	r3, r2
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800321e:	00d2      	lsls	r2, r2, #3
 8003220:	4906      	ldr	r1, [pc, #24]	; (800323c <HAL_RCC_OscConfig+0x7ac>)
 8003222:	4313      	orrs	r3, r2
 8003224:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003226:	4b05      	ldr	r3, [pc, #20]	; (800323c <HAL_RCC_OscConfig+0x7ac>)
 8003228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322a:	4a04      	ldr	r2, [pc, #16]	; (800323c <HAL_RCC_OscConfig+0x7ac>)
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3730      	adds	r7, #48	; 0x30
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	58024400 	.word	0x58024400
 8003240:	ffff0007 	.word	0xffff0007

08003244 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e19c      	b.n	8003592 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003258:	4b8a      	ldr	r3, [pc, #552]	; (8003484 <HAL_RCC_ClockConfig+0x240>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 030f 	and.w	r3, r3, #15
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d910      	bls.n	8003288 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003266:	4b87      	ldr	r3, [pc, #540]	; (8003484 <HAL_RCC_ClockConfig+0x240>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f023 020f 	bic.w	r2, r3, #15
 800326e:	4985      	ldr	r1, [pc, #532]	; (8003484 <HAL_RCC_ClockConfig+0x240>)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	4313      	orrs	r3, r2
 8003274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003276:	4b83      	ldr	r3, [pc, #524]	; (8003484 <HAL_RCC_ClockConfig+0x240>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d001      	beq.n	8003288 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e184      	b.n	8003592 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b00      	cmp	r3, #0
 8003292:	d010      	beq.n	80032b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691a      	ldr	r2, [r3, #16]
 8003298:	4b7b      	ldr	r3, [pc, #492]	; (8003488 <HAL_RCC_ClockConfig+0x244>)
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d908      	bls.n	80032b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80032a4:	4b78      	ldr	r3, [pc, #480]	; (8003488 <HAL_RCC_ClockConfig+0x244>)
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	4975      	ldr	r1, [pc, #468]	; (8003488 <HAL_RCC_ClockConfig+0x244>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d010      	beq.n	80032e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695a      	ldr	r2, [r3, #20]
 80032c6:	4b70      	ldr	r3, [pc, #448]	; (8003488 <HAL_RCC_ClockConfig+0x244>)
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d908      	bls.n	80032e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80032d2:	4b6d      	ldr	r3, [pc, #436]	; (8003488 <HAL_RCC_ClockConfig+0x244>)
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	496a      	ldr	r1, [pc, #424]	; (8003488 <HAL_RCC_ClockConfig+0x244>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0310 	and.w	r3, r3, #16
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d010      	beq.n	8003312 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	699a      	ldr	r2, [r3, #24]
 80032f4:	4b64      	ldr	r3, [pc, #400]	; (8003488 <HAL_RCC_ClockConfig+0x244>)
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d908      	bls.n	8003312 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003300:	4b61      	ldr	r3, [pc, #388]	; (8003488 <HAL_RCC_ClockConfig+0x244>)
 8003302:	69db      	ldr	r3, [r3, #28]
 8003304:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	495e      	ldr	r1, [pc, #376]	; (8003488 <HAL_RCC_ClockConfig+0x244>)
 800330e:	4313      	orrs	r3, r2
 8003310:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0320 	and.w	r3, r3, #32
 800331a:	2b00      	cmp	r3, #0
 800331c:	d010      	beq.n	8003340 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69da      	ldr	r2, [r3, #28]
 8003322:	4b59      	ldr	r3, [pc, #356]	; (8003488 <HAL_RCC_ClockConfig+0x244>)
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800332a:	429a      	cmp	r2, r3
 800332c:	d908      	bls.n	8003340 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800332e:	4b56      	ldr	r3, [pc, #344]	; (8003488 <HAL_RCC_ClockConfig+0x244>)
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	4953      	ldr	r1, [pc, #332]	; (8003488 <HAL_RCC_ClockConfig+0x244>)
 800333c:	4313      	orrs	r3, r2
 800333e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d010      	beq.n	800336e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	4b4d      	ldr	r3, [pc, #308]	; (8003488 <HAL_RCC_ClockConfig+0x244>)
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	429a      	cmp	r2, r3
 800335a:	d908      	bls.n	800336e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800335c:	4b4a      	ldr	r3, [pc, #296]	; (8003488 <HAL_RCC_ClockConfig+0x244>)
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	f023 020f 	bic.w	r2, r3, #15
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	4947      	ldr	r1, [pc, #284]	; (8003488 <HAL_RCC_ClockConfig+0x244>)
 800336a:	4313      	orrs	r3, r2
 800336c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d055      	beq.n	8003426 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800337a:	4b43      	ldr	r3, [pc, #268]	; (8003488 <HAL_RCC_ClockConfig+0x244>)
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	4940      	ldr	r1, [pc, #256]	; (8003488 <HAL_RCC_ClockConfig+0x244>)
 8003388:	4313      	orrs	r3, r2
 800338a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b02      	cmp	r3, #2
 8003392:	d107      	bne.n	80033a4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003394:	4b3c      	ldr	r3, [pc, #240]	; (8003488 <HAL_RCC_ClockConfig+0x244>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d121      	bne.n	80033e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0f6      	b.n	8003592 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b03      	cmp	r3, #3
 80033aa:	d107      	bne.n	80033bc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033ac:	4b36      	ldr	r3, [pc, #216]	; (8003488 <HAL_RCC_ClockConfig+0x244>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d115      	bne.n	80033e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e0ea      	b.n	8003592 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d107      	bne.n	80033d4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033c4:	4b30      	ldr	r3, [pc, #192]	; (8003488 <HAL_RCC_ClockConfig+0x244>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d109      	bne.n	80033e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0de      	b.n	8003592 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033d4:	4b2c      	ldr	r3, [pc, #176]	; (8003488 <HAL_RCC_ClockConfig+0x244>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e0d6      	b.n	8003592 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033e4:	4b28      	ldr	r3, [pc, #160]	; (8003488 <HAL_RCC_ClockConfig+0x244>)
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	f023 0207 	bic.w	r2, r3, #7
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	4925      	ldr	r1, [pc, #148]	; (8003488 <HAL_RCC_ClockConfig+0x244>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033f6:	f7fe fbe9 	bl	8001bcc <HAL_GetTick>
 80033fa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fc:	e00a      	b.n	8003414 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033fe:	f7fe fbe5 	bl	8001bcc <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	f241 3288 	movw	r2, #5000	; 0x1388
 800340c:	4293      	cmp	r3, r2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e0be      	b.n	8003592 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003414:	4b1c      	ldr	r3, [pc, #112]	; (8003488 <HAL_RCC_ClockConfig+0x244>)
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	429a      	cmp	r2, r3
 8003424:	d1eb      	bne.n	80033fe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d010      	beq.n	8003454 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	4b14      	ldr	r3, [pc, #80]	; (8003488 <HAL_RCC_ClockConfig+0x244>)
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	429a      	cmp	r2, r3
 8003440:	d208      	bcs.n	8003454 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003442:	4b11      	ldr	r3, [pc, #68]	; (8003488 <HAL_RCC_ClockConfig+0x244>)
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	f023 020f 	bic.w	r2, r3, #15
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	490e      	ldr	r1, [pc, #56]	; (8003488 <HAL_RCC_ClockConfig+0x244>)
 8003450:	4313      	orrs	r3, r2
 8003452:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003454:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <HAL_RCC_ClockConfig+0x240>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 030f 	and.w	r3, r3, #15
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d214      	bcs.n	800348c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003462:	4b08      	ldr	r3, [pc, #32]	; (8003484 <HAL_RCC_ClockConfig+0x240>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f023 020f 	bic.w	r2, r3, #15
 800346a:	4906      	ldr	r1, [pc, #24]	; (8003484 <HAL_RCC_ClockConfig+0x240>)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	4313      	orrs	r3, r2
 8003470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003472:	4b04      	ldr	r3, [pc, #16]	; (8003484 <HAL_RCC_ClockConfig+0x240>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	429a      	cmp	r2, r3
 800347e:	d005      	beq.n	800348c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e086      	b.n	8003592 <HAL_RCC_ClockConfig+0x34e>
 8003484:	52002000 	.word	0x52002000
 8003488:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	d010      	beq.n	80034ba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691a      	ldr	r2, [r3, #16]
 800349c:	4b3f      	ldr	r3, [pc, #252]	; (800359c <HAL_RCC_ClockConfig+0x358>)
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d208      	bcs.n	80034ba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80034a8:	4b3c      	ldr	r3, [pc, #240]	; (800359c <HAL_RCC_ClockConfig+0x358>)
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	4939      	ldr	r1, [pc, #228]	; (800359c <HAL_RCC_ClockConfig+0x358>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0308 	and.w	r3, r3, #8
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d010      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695a      	ldr	r2, [r3, #20]
 80034ca:	4b34      	ldr	r3, [pc, #208]	; (800359c <HAL_RCC_ClockConfig+0x358>)
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d208      	bcs.n	80034e8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80034d6:	4b31      	ldr	r3, [pc, #196]	; (800359c <HAL_RCC_ClockConfig+0x358>)
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	492e      	ldr	r1, [pc, #184]	; (800359c <HAL_RCC_ClockConfig+0x358>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0310 	and.w	r3, r3, #16
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d010      	beq.n	8003516 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	699a      	ldr	r2, [r3, #24]
 80034f8:	4b28      	ldr	r3, [pc, #160]	; (800359c <HAL_RCC_ClockConfig+0x358>)
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003500:	429a      	cmp	r2, r3
 8003502:	d208      	bcs.n	8003516 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003504:	4b25      	ldr	r3, [pc, #148]	; (800359c <HAL_RCC_ClockConfig+0x358>)
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	4922      	ldr	r1, [pc, #136]	; (800359c <HAL_RCC_ClockConfig+0x358>)
 8003512:	4313      	orrs	r3, r2
 8003514:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0320 	and.w	r3, r3, #32
 800351e:	2b00      	cmp	r3, #0
 8003520:	d010      	beq.n	8003544 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69da      	ldr	r2, [r3, #28]
 8003526:	4b1d      	ldr	r3, [pc, #116]	; (800359c <HAL_RCC_ClockConfig+0x358>)
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800352e:	429a      	cmp	r2, r3
 8003530:	d208      	bcs.n	8003544 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003532:	4b1a      	ldr	r3, [pc, #104]	; (800359c <HAL_RCC_ClockConfig+0x358>)
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	4917      	ldr	r1, [pc, #92]	; (800359c <HAL_RCC_ClockConfig+0x358>)
 8003540:	4313      	orrs	r3, r2
 8003542:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003544:	f000 f834 	bl	80035b0 <HAL_RCC_GetSysClockFreq>
 8003548:	4602      	mov	r2, r0
 800354a:	4b14      	ldr	r3, [pc, #80]	; (800359c <HAL_RCC_ClockConfig+0x358>)
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	0a1b      	lsrs	r3, r3, #8
 8003550:	f003 030f 	and.w	r3, r3, #15
 8003554:	4912      	ldr	r1, [pc, #72]	; (80035a0 <HAL_RCC_ClockConfig+0x35c>)
 8003556:	5ccb      	ldrb	r3, [r1, r3]
 8003558:	f003 031f 	and.w	r3, r3, #31
 800355c:	fa22 f303 	lsr.w	r3, r2, r3
 8003560:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003562:	4b0e      	ldr	r3, [pc, #56]	; (800359c <HAL_RCC_ClockConfig+0x358>)
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	4a0d      	ldr	r2, [pc, #52]	; (80035a0 <HAL_RCC_ClockConfig+0x35c>)
 800356c:	5cd3      	ldrb	r3, [r2, r3]
 800356e:	f003 031f 	and.w	r3, r3, #31
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	fa22 f303 	lsr.w	r3, r2, r3
 8003578:	4a0a      	ldr	r2, [pc, #40]	; (80035a4 <HAL_RCC_ClockConfig+0x360>)
 800357a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800357c:	4a0a      	ldr	r2, [pc, #40]	; (80035a8 <HAL_RCC_ClockConfig+0x364>)
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003582:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <HAL_RCC_ClockConfig+0x368>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f7fe fad6 	bl	8001b38 <HAL_InitTick>
 800358c:	4603      	mov	r3, r0
 800358e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003590:	7bfb      	ldrb	r3, [r7, #15]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	58024400 	.word	0x58024400
 80035a0:	0800730c 	.word	0x0800730c
 80035a4:	24000004 	.word	0x24000004
 80035a8:	24000000 	.word	0x24000000
 80035ac:	24000008 	.word	0x24000008

080035b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b089      	sub	sp, #36	; 0x24
 80035b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035b6:	4bb3      	ldr	r3, [pc, #716]	; (8003884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035be:	2b18      	cmp	r3, #24
 80035c0:	f200 8155 	bhi.w	800386e <HAL_RCC_GetSysClockFreq+0x2be>
 80035c4:	a201      	add	r2, pc, #4	; (adr r2, 80035cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80035c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ca:	bf00      	nop
 80035cc:	08003631 	.word	0x08003631
 80035d0:	0800386f 	.word	0x0800386f
 80035d4:	0800386f 	.word	0x0800386f
 80035d8:	0800386f 	.word	0x0800386f
 80035dc:	0800386f 	.word	0x0800386f
 80035e0:	0800386f 	.word	0x0800386f
 80035e4:	0800386f 	.word	0x0800386f
 80035e8:	0800386f 	.word	0x0800386f
 80035ec:	08003657 	.word	0x08003657
 80035f0:	0800386f 	.word	0x0800386f
 80035f4:	0800386f 	.word	0x0800386f
 80035f8:	0800386f 	.word	0x0800386f
 80035fc:	0800386f 	.word	0x0800386f
 8003600:	0800386f 	.word	0x0800386f
 8003604:	0800386f 	.word	0x0800386f
 8003608:	0800386f 	.word	0x0800386f
 800360c:	0800365d 	.word	0x0800365d
 8003610:	0800386f 	.word	0x0800386f
 8003614:	0800386f 	.word	0x0800386f
 8003618:	0800386f 	.word	0x0800386f
 800361c:	0800386f 	.word	0x0800386f
 8003620:	0800386f 	.word	0x0800386f
 8003624:	0800386f 	.word	0x0800386f
 8003628:	0800386f 	.word	0x0800386f
 800362c:	08003663 	.word	0x08003663
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003630:	4b94      	ldr	r3, [pc, #592]	; (8003884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b00      	cmp	r3, #0
 800363a:	d009      	beq.n	8003650 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800363c:	4b91      	ldr	r3, [pc, #580]	; (8003884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	08db      	lsrs	r3, r3, #3
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	4a90      	ldr	r2, [pc, #576]	; (8003888 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003648:	fa22 f303 	lsr.w	r3, r2, r3
 800364c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800364e:	e111      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003650:	4b8d      	ldr	r3, [pc, #564]	; (8003888 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003652:	61bb      	str	r3, [r7, #24]
      break;
 8003654:	e10e      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003656:	4b8d      	ldr	r3, [pc, #564]	; (800388c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003658:	61bb      	str	r3, [r7, #24]
      break;
 800365a:	e10b      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800365c:	4b8c      	ldr	r3, [pc, #560]	; (8003890 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800365e:	61bb      	str	r3, [r7, #24]
      break;
 8003660:	e108      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003662:	4b88      	ldr	r3, [pc, #544]	; (8003884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800366c:	4b85      	ldr	r3, [pc, #532]	; (8003884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800366e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003670:	091b      	lsrs	r3, r3, #4
 8003672:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003676:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003678:	4b82      	ldr	r3, [pc, #520]	; (8003884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003682:	4b80      	ldr	r3, [pc, #512]	; (8003884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003686:	08db      	lsrs	r3, r3, #3
 8003688:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	fb02 f303 	mul.w	r3, r2, r3
 8003692:	ee07 3a90 	vmov	s15, r3
 8003696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800369a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 80e1 	beq.w	8003868 <HAL_RCC_GetSysClockFreq+0x2b8>
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	f000 8083 	beq.w	80037b4 <HAL_RCC_GetSysClockFreq+0x204>
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	f200 80a1 	bhi.w	80037f8 <HAL_RCC_GetSysClockFreq+0x248>
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <HAL_RCC_GetSysClockFreq+0x114>
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d056      	beq.n	8003770 <HAL_RCC_GetSysClockFreq+0x1c0>
 80036c2:	e099      	b.n	80037f8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036c4:	4b6f      	ldr	r3, [pc, #444]	; (8003884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0320 	and.w	r3, r3, #32
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d02d      	beq.n	800372c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80036d0:	4b6c      	ldr	r3, [pc, #432]	; (8003884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	08db      	lsrs	r3, r3, #3
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	4a6b      	ldr	r2, [pc, #428]	; (8003888 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036dc:	fa22 f303 	lsr.w	r3, r2, r3
 80036e0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	ee07 3a90 	vmov	s15, r3
 80036e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	ee07 3a90 	vmov	s15, r3
 80036f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036fa:	4b62      	ldr	r3, [pc, #392]	; (8003884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003702:	ee07 3a90 	vmov	s15, r3
 8003706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800370a:	ed97 6a02 	vldr	s12, [r7, #8]
 800370e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003894 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800371a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800371e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003726:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800372a:	e087      	b.n	800383c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	ee07 3a90 	vmov	s15, r3
 8003732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003736:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003898 <HAL_RCC_GetSysClockFreq+0x2e8>
 800373a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800373e:	4b51      	ldr	r3, [pc, #324]	; (8003884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003746:	ee07 3a90 	vmov	s15, r3
 800374a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800374e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003752:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003894 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800375a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800375e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800376a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800376e:	e065      	b.n	800383c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	ee07 3a90 	vmov	s15, r3
 8003776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800377a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800389c <HAL_RCC_GetSysClockFreq+0x2ec>
 800377e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003782:	4b40      	ldr	r3, [pc, #256]	; (8003884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800378a:	ee07 3a90 	vmov	s15, r3
 800378e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003792:	ed97 6a02 	vldr	s12, [r7, #8]
 8003796:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003894 <HAL_RCC_GetSysClockFreq+0x2e4>
 800379a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800379e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037b2:	e043      	b.n	800383c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	ee07 3a90 	vmov	s15, r3
 80037ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037be:	eddf 6a38 	vldr	s13, [pc, #224]	; 80038a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80037c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037c6:	4b2f      	ldr	r3, [pc, #188]	; (8003884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ce:	ee07 3a90 	vmov	s15, r3
 80037d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80037da:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003894 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037f6:	e021      	b.n	800383c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	ee07 3a90 	vmov	s15, r3
 80037fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003802:	eddf 6a26 	vldr	s13, [pc, #152]	; 800389c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800380a:	4b1e      	ldr	r3, [pc, #120]	; (8003884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003812:	ee07 3a90 	vmov	s15, r3
 8003816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800381a:	ed97 6a02 	vldr	s12, [r7, #8]
 800381e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003894 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800382a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800382e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003836:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800383a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800383c:	4b11      	ldr	r3, [pc, #68]	; (8003884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800383e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003840:	0a5b      	lsrs	r3, r3, #9
 8003842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003846:	3301      	adds	r3, #1
 8003848:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	ee07 3a90 	vmov	s15, r3
 8003850:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003854:	edd7 6a07 	vldr	s13, [r7, #28]
 8003858:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800385c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003860:	ee17 3a90 	vmov	r3, s15
 8003864:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003866:	e005      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003868:	2300      	movs	r3, #0
 800386a:	61bb      	str	r3, [r7, #24]
      break;
 800386c:	e002      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800386e:	4b07      	ldr	r3, [pc, #28]	; (800388c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003870:	61bb      	str	r3, [r7, #24]
      break;
 8003872:	bf00      	nop
  }

  return sysclockfreq;
 8003874:	69bb      	ldr	r3, [r7, #24]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3724      	adds	r7, #36	; 0x24
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	58024400 	.word	0x58024400
 8003888:	03d09000 	.word	0x03d09000
 800388c:	003d0900 	.word	0x003d0900
 8003890:	007a1200 	.word	0x007a1200
 8003894:	46000000 	.word	0x46000000
 8003898:	4c742400 	.word	0x4c742400
 800389c:	4a742400 	.word	0x4a742400
 80038a0:	4af42400 	.word	0x4af42400

080038a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80038aa:	f7ff fe81 	bl	80035b0 <HAL_RCC_GetSysClockFreq>
 80038ae:	4602      	mov	r2, r0
 80038b0:	4b10      	ldr	r3, [pc, #64]	; (80038f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	0a1b      	lsrs	r3, r3, #8
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	490f      	ldr	r1, [pc, #60]	; (80038f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80038bc:	5ccb      	ldrb	r3, [r1, r3]
 80038be:	f003 031f 	and.w	r3, r3, #31
 80038c2:	fa22 f303 	lsr.w	r3, r2, r3
 80038c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038c8:	4b0a      	ldr	r3, [pc, #40]	; (80038f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	f003 030f 	and.w	r3, r3, #15
 80038d0:	4a09      	ldr	r2, [pc, #36]	; (80038f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80038d2:	5cd3      	ldrb	r3, [r2, r3]
 80038d4:	f003 031f 	and.w	r3, r3, #31
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	fa22 f303 	lsr.w	r3, r2, r3
 80038de:	4a07      	ldr	r2, [pc, #28]	; (80038fc <HAL_RCC_GetHCLKFreq+0x58>)
 80038e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038e2:	4a07      	ldr	r2, [pc, #28]	; (8003900 <HAL_RCC_GetHCLKFreq+0x5c>)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80038e8:	4b04      	ldr	r3, [pc, #16]	; (80038fc <HAL_RCC_GetHCLKFreq+0x58>)
 80038ea:	681b      	ldr	r3, [r3, #0]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	58024400 	.word	0x58024400
 80038f8:	0800730c 	.word	0x0800730c
 80038fc:	24000004 	.word	0x24000004
 8003900:	24000000 	.word	0x24000000

08003904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003908:	f7ff ffcc 	bl	80038a4 <HAL_RCC_GetHCLKFreq>
 800390c:	4602      	mov	r2, r0
 800390e:	4b06      	ldr	r3, [pc, #24]	; (8003928 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	091b      	lsrs	r3, r3, #4
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	4904      	ldr	r1, [pc, #16]	; (800392c <HAL_RCC_GetPCLK1Freq+0x28>)
 800391a:	5ccb      	ldrb	r3, [r1, r3]
 800391c:	f003 031f 	and.w	r3, r3, #31
 8003920:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003924:	4618      	mov	r0, r3
 8003926:	bd80      	pop	{r7, pc}
 8003928:	58024400 	.word	0x58024400
 800392c:	0800730c 	.word	0x0800730c

08003930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003934:	f7ff ffb6 	bl	80038a4 <HAL_RCC_GetHCLKFreq>
 8003938:	4602      	mov	r2, r0
 800393a:	4b06      	ldr	r3, [pc, #24]	; (8003954 <HAL_RCC_GetPCLK2Freq+0x24>)
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	0a1b      	lsrs	r3, r3, #8
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	4904      	ldr	r1, [pc, #16]	; (8003958 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003946:	5ccb      	ldrb	r3, [r1, r3]
 8003948:	f003 031f 	and.w	r3, r3, #31
 800394c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003950:	4618      	mov	r0, r3
 8003952:	bd80      	pop	{r7, pc}
 8003954:	58024400 	.word	0x58024400
 8003958:	0800730c 	.word	0x0800730c

0800395c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800395c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003960:	b0c6      	sub	sp, #280	; 0x118
 8003962:	af00      	add	r7, sp, #0
 8003964:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003968:	2300      	movs	r3, #0
 800396a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800396e:	2300      	movs	r3, #0
 8003970:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003980:	2500      	movs	r5, #0
 8003982:	ea54 0305 	orrs.w	r3, r4, r5
 8003986:	d049      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800398c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800398e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003992:	d02f      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003994:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003998:	d828      	bhi.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 800399a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800399e:	d01a      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80039a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039a4:	d822      	bhi.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80039aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039ae:	d007      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039b0:	e01c      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039b2:	4bab      	ldr	r3, [pc, #684]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80039b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b6:	4aaa      	ldr	r2, [pc, #680]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80039b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039be:	e01a      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039c4:	3308      	adds	r3, #8
 80039c6:	2102      	movs	r1, #2
 80039c8:	4618      	mov	r0, r3
 80039ca:	f001 fc25 	bl	8005218 <RCCEx_PLL2_Config>
 80039ce:	4603      	mov	r3, r0
 80039d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039d4:	e00f      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039da:	3328      	adds	r3, #40	; 0x28
 80039dc:	2102      	movs	r1, #2
 80039de:	4618      	mov	r0, r3
 80039e0:	f001 fccc 	bl	800537c <RCCEx_PLL3_Config>
 80039e4:	4603      	mov	r3, r0
 80039e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039ea:	e004      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80039f2:	e000      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80039f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10a      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80039fe:	4b98      	ldr	r3, [pc, #608]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a02:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a0c:	4a94      	ldr	r2, [pc, #592]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003a0e:	430b      	orrs	r3, r1
 8003a10:	6513      	str	r3, [r2, #80]	; 0x50
 8003a12:	e003      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a18:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a24:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003a28:	f04f 0900 	mov.w	r9, #0
 8003a2c:	ea58 0309 	orrs.w	r3, r8, r9
 8003a30:	d047      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d82a      	bhi.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003a3c:	a201      	add	r2, pc, #4	; (adr r2, 8003a44 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a42:	bf00      	nop
 8003a44:	08003a59 	.word	0x08003a59
 8003a48:	08003a67 	.word	0x08003a67
 8003a4c:	08003a7d 	.word	0x08003a7d
 8003a50:	08003a9b 	.word	0x08003a9b
 8003a54:	08003a9b 	.word	0x08003a9b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a58:	4b81      	ldr	r3, [pc, #516]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	4a80      	ldr	r2, [pc, #512]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a64:	e01a      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a6a:	3308      	adds	r3, #8
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f001 fbd2 	bl	8005218 <RCCEx_PLL2_Config>
 8003a74:	4603      	mov	r3, r0
 8003a76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a7a:	e00f      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a80:	3328      	adds	r3, #40	; 0x28
 8003a82:	2100      	movs	r1, #0
 8003a84:	4618      	mov	r0, r3
 8003a86:	f001 fc79 	bl	800537c <RCCEx_PLL3_Config>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a90:	e004      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003a98:	e000      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003a9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10a      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003aa4:	4b6e      	ldr	r3, [pc, #440]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa8:	f023 0107 	bic.w	r1, r3, #7
 8003aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab2:	4a6b      	ldr	r2, [pc, #428]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	6513      	str	r3, [r2, #80]	; 0x50
 8003ab8:	e003      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003abe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aca:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8003ace:	f04f 0b00 	mov.w	fp, #0
 8003ad2:	ea5a 030b 	orrs.w	r3, sl, fp
 8003ad6:	d05b      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003adc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ae0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003ae4:	d03b      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003ae6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003aea:	d834      	bhi.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003aec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003af0:	d037      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003af2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003af6:	d82e      	bhi.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003af8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003afc:	d033      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003afe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003b02:	d828      	bhi.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003b04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b08:	d01a      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003b0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b0e:	d822      	bhi.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003b14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b18:	d007      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003b1a:	e01c      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b1c:	4b50      	ldr	r3, [pc, #320]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b20:	4a4f      	ldr	r2, [pc, #316]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b28:	e01e      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b2e:	3308      	adds	r3, #8
 8003b30:	2100      	movs	r1, #0
 8003b32:	4618      	mov	r0, r3
 8003b34:	f001 fb70 	bl	8005218 <RCCEx_PLL2_Config>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003b3e:	e013      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b44:	3328      	adds	r3, #40	; 0x28
 8003b46:	2100      	movs	r1, #0
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f001 fc17 	bl	800537c <RCCEx_PLL3_Config>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b54:	e008      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003b5c:	e004      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003b5e:	bf00      	nop
 8003b60:	e002      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003b62:	bf00      	nop
 8003b64:	e000      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003b66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10b      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003b70:	4b3b      	ldr	r3, [pc, #236]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b74:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b80:	4a37      	ldr	r2, [pc, #220]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003b82:	430b      	orrs	r3, r1
 8003b84:	6593      	str	r3, [r2, #88]	; 0x58
 8003b86:	e003      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b8c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b98:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003b9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003ba6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003baa:	460b      	mov	r3, r1
 8003bac:	4313      	orrs	r3, r2
 8003bae:	d05d      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003bb8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003bbc:	d03b      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003bbe:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003bc2:	d834      	bhi.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003bc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bc8:	d037      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003bca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bce:	d82e      	bhi.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003bd0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bd4:	d033      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003bd6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bda:	d828      	bhi.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003bdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003be0:	d01a      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003be2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003be6:	d822      	bhi.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bf0:	d007      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003bf2:	e01c      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bf4:	4b1a      	ldr	r3, [pc, #104]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf8:	4a19      	ldr	r2, [pc, #100]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c00:	e01e      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c06:	3308      	adds	r3, #8
 8003c08:	2100      	movs	r1, #0
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f001 fb04 	bl	8005218 <RCCEx_PLL2_Config>
 8003c10:	4603      	mov	r3, r0
 8003c12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003c16:	e013      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c1c:	3328      	adds	r3, #40	; 0x28
 8003c1e:	2100      	movs	r1, #0
 8003c20:	4618      	mov	r0, r3
 8003c22:	f001 fbab 	bl	800537c <RCCEx_PLL3_Config>
 8003c26:	4603      	mov	r3, r0
 8003c28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c2c:	e008      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003c34:	e004      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003c36:	bf00      	nop
 8003c38:	e002      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003c3a:	bf00      	nop
 8003c3c:	e000      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003c3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10d      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003c48:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c58:	4a01      	ldr	r2, [pc, #4]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c5a:	430b      	orrs	r3, r1
 8003c5c:	6593      	str	r3, [r2, #88]	; 0x58
 8003c5e:	e005      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003c60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c68:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c74:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003c78:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003c82:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003c86:	460b      	mov	r3, r1
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	d03a      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c92:	2b30      	cmp	r3, #48	; 0x30
 8003c94:	d01f      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003c96:	2b30      	cmp	r3, #48	; 0x30
 8003c98:	d819      	bhi.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003c9a:	2b20      	cmp	r3, #32
 8003c9c:	d00c      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003c9e:	2b20      	cmp	r3, #32
 8003ca0:	d815      	bhi.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d019      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003ca6:	2b10      	cmp	r3, #16
 8003ca8:	d111      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003caa:	4baa      	ldr	r3, [pc, #680]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cae:	4aa9      	ldr	r2, [pc, #676]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003cb6:	e011      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cbc:	3308      	adds	r3, #8
 8003cbe:	2102      	movs	r1, #2
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f001 faa9 	bl	8005218 <RCCEx_PLL2_Config>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003ccc:	e006      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003cd4:	e002      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003cd6:	bf00      	nop
 8003cd8:	e000      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003cda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cdc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10a      	bne.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003ce4:	4b9b      	ldr	r3, [pc, #620]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf2:	4a98      	ldr	r2, [pc, #608]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003cf4:	430b      	orrs	r3, r1
 8003cf6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cf8:	e003      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cfa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003cfe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003d0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d12:	2300      	movs	r3, #0
 8003d14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003d18:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	d051      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d2c:	d035      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003d2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d32:	d82e      	bhi.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003d34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d38:	d031      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003d3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d3e:	d828      	bhi.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d44:	d01a      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d4a:	d822      	bhi.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d003      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d54:	d007      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003d56:	e01c      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d58:	4b7e      	ldr	r3, [pc, #504]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	4a7d      	ldr	r2, [pc, #500]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003d64:	e01c      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d6a:	3308      	adds	r3, #8
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f001 fa52 	bl	8005218 <RCCEx_PLL2_Config>
 8003d74:	4603      	mov	r3, r0
 8003d76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003d7a:	e011      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d80:	3328      	adds	r3, #40	; 0x28
 8003d82:	2100      	movs	r1, #0
 8003d84:	4618      	mov	r0, r3
 8003d86:	f001 faf9 	bl	800537c <RCCEx_PLL3_Config>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003d90:	e006      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003d98:	e002      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003d9a:	bf00      	nop
 8003d9c:	e000      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003d9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003da0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10a      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003da8:	4b6a      	ldr	r3, [pc, #424]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dac:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db6:	4a67      	ldr	r2, [pc, #412]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003db8:	430b      	orrs	r3, r1
 8003dba:	6513      	str	r3, [r2, #80]	; 0x50
 8003dbc:	e003      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dbe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003dc2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dce:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003dd2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ddc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4313      	orrs	r3, r2
 8003de4:	d053      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003df0:	d033      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003df2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003df6:	d82c      	bhi.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003df8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dfc:	d02f      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003dfe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e02:	d826      	bhi.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003e04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e08:	d02b      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003e0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e0e:	d820      	bhi.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003e10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e14:	d012      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003e16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e1a:	d81a      	bhi.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d022      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e24:	d115      	bne.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e2a:	3308      	adds	r3, #8
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f001 f9f2 	bl	8005218 <RCCEx_PLL2_Config>
 8003e34:	4603      	mov	r3, r0
 8003e36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003e3a:	e015      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e40:	3328      	adds	r3, #40	; 0x28
 8003e42:	2101      	movs	r1, #1
 8003e44:	4618      	mov	r0, r3
 8003e46:	f001 fa99 	bl	800537c <RCCEx_PLL3_Config>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003e50:	e00a      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003e58:	e006      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003e5a:	bf00      	nop
 8003e5c:	e004      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003e5e:	bf00      	nop
 8003e60:	e002      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003e62:	bf00      	nop
 8003e64:	e000      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003e66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10a      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003e70:	4b38      	ldr	r3, [pc, #224]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e74:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e7e:	4a35      	ldr	r2, [pc, #212]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e80:	430b      	orrs	r3, r1
 8003e82:	6513      	str	r3, [r2, #80]	; 0x50
 8003e84:	e003      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e86:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e8a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e96:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003e9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003ea4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	d058      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003eb2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003eb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eba:	d033      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003ebc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ec0:	d82c      	bhi.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec6:	d02f      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ecc:	d826      	bhi.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003ece:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ed2:	d02b      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003ed4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ed8:	d820      	bhi.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003eda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ede:	d012      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ee4:	d81a      	bhi.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d022      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003eea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eee:	d115      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ef4:	3308      	adds	r3, #8
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f001 f98d 	bl	8005218 <RCCEx_PLL2_Config>
 8003efe:	4603      	mov	r3, r0
 8003f00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f04:	e015      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f0a:	3328      	adds	r3, #40	; 0x28
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f001 fa34 	bl	800537c <RCCEx_PLL3_Config>
 8003f14:	4603      	mov	r3, r0
 8003f16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f1a:	e00a      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003f22:	e006      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003f24:	bf00      	nop
 8003f26:	e004      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003f28:	bf00      	nop
 8003f2a:	e002      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003f2c:	bf00      	nop
 8003f2e:	e000      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003f30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f32:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10e      	bne.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003f3a:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f4a:	4a02      	ldr	r2, [pc, #8]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f4c:	430b      	orrs	r3, r1
 8003f4e:	6593      	str	r3, [r2, #88]	; 0x58
 8003f50:	e006      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003f52:	bf00      	nop
 8003f54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f68:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003f6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f70:	2300      	movs	r3, #0
 8003f72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003f76:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	d037      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f8a:	d00e      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003f8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f90:	d816      	bhi.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d018      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003f96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f9a:	d111      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f9c:	4bc4      	ldr	r3, [pc, #784]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa0:	4ac3      	ldr	r2, [pc, #780]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fa6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003fa8:	e00f      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fae:	3308      	adds	r3, #8
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f001 f930 	bl	8005218 <RCCEx_PLL2_Config>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003fbe:	e004      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003fc6:	e000      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003fc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10a      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003fd2:	4bb7      	ldr	r3, [pc, #732]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fe0:	4ab3      	ldr	r2, [pc, #716]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fe2:	430b      	orrs	r3, r1
 8003fe4:	6513      	str	r3, [r2, #80]	; 0x50
 8003fe6:	e003      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003fec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003ffc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004000:	2300      	movs	r3, #0
 8004002:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004006:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800400a:	460b      	mov	r3, r1
 800400c:	4313      	orrs	r3, r2
 800400e:	d039      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004010:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004016:	2b03      	cmp	r3, #3
 8004018:	d81c      	bhi.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800401a:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800401c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004020:	0800405d 	.word	0x0800405d
 8004024:	08004031 	.word	0x08004031
 8004028:	0800403f 	.word	0x0800403f
 800402c:	0800405d 	.word	0x0800405d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004030:	4b9f      	ldr	r3, [pc, #636]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004034:	4a9e      	ldr	r2, [pc, #632]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800403a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800403c:	e00f      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800403e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004042:	3308      	adds	r3, #8
 8004044:	2102      	movs	r1, #2
 8004046:	4618      	mov	r0, r3
 8004048:	f001 f8e6 	bl	8005218 <RCCEx_PLL2_Config>
 800404c:	4603      	mov	r3, r0
 800404e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004052:	e004      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800405a:	e000      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800405c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800405e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10a      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004066:	4b92      	ldr	r3, [pc, #584]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800406a:	f023 0103 	bic.w	r1, r3, #3
 800406e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004074:	4a8e      	ldr	r2, [pc, #568]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004076:	430b      	orrs	r3, r1
 8004078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800407a:	e003      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800407c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004080:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004090:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004094:	2300      	movs	r3, #0
 8004096:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800409a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800409e:	460b      	mov	r3, r1
 80040a0:	4313      	orrs	r3, r2
 80040a2:	f000 8099 	beq.w	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040a6:	4b83      	ldr	r3, [pc, #524]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a82      	ldr	r2, [pc, #520]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80040ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040b2:	f7fd fd8b 	bl	8001bcc <HAL_GetTick>
 80040b6:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040ba:	e00b      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040bc:	f7fd fd86 	bl	8001bcc <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b64      	cmp	r3, #100	; 0x64
 80040ca:	d903      	bls.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80040d2:	e005      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040d4:	4b77      	ldr	r3, [pc, #476]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d0ed      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80040e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d173      	bne.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80040e8:	4b71      	ldr	r3, [pc, #452]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80040f4:	4053      	eors	r3, r2
 80040f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d015      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040fe:	4b6c      	ldr	r3, [pc, #432]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004106:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800410a:	4b69      	ldr	r3, [pc, #420]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800410c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410e:	4a68      	ldr	r2, [pc, #416]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004114:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004116:	4b66      	ldr	r3, [pc, #408]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411a:	4a65      	ldr	r2, [pc, #404]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800411c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004120:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004122:	4a63      	ldr	r2, [pc, #396]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004124:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004128:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800412a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800412e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004136:	d118      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004138:	f7fd fd48 	bl	8001bcc <HAL_GetTick>
 800413c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004140:	e00d      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004142:	f7fd fd43 	bl	8001bcc <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800414c:	1ad2      	subs	r2, r2, r3
 800414e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004152:	429a      	cmp	r2, r3
 8004154:	d903      	bls.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800415c:	e005      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800415e:	4b54      	ldr	r3, [pc, #336]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0eb      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800416a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800416e:	2b00      	cmp	r3, #0
 8004170:	d129      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004172:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004176:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800417a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800417e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004182:	d10e      	bne.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004184:	4b4a      	ldr	r3, [pc, #296]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800418c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004190:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004194:	091a      	lsrs	r2, r3, #4
 8004196:	4b48      	ldr	r3, [pc, #288]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004198:	4013      	ands	r3, r2
 800419a:	4a45      	ldr	r2, [pc, #276]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800419c:	430b      	orrs	r3, r1
 800419e:	6113      	str	r3, [r2, #16]
 80041a0:	e005      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x852>
 80041a2:	4b43      	ldr	r3, [pc, #268]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	4a42      	ldr	r2, [pc, #264]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80041ac:	6113      	str	r3, [r2, #16]
 80041ae:	4b40      	ldr	r3, [pc, #256]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80041b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041be:	4a3c      	ldr	r2, [pc, #240]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041c0:	430b      	orrs	r3, r1
 80041c2:	6713      	str	r3, [r2, #112]	; 0x70
 80041c4:	e008      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80041ca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80041ce:	e003      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80041d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80041d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e0:	f002 0301 	and.w	r3, r2, #1
 80041e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041e8:	2300      	movs	r3, #0
 80041ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80041ee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80041f2:	460b      	mov	r3, r1
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f000 808f 	beq.w	8004318 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80041fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004200:	2b28      	cmp	r3, #40	; 0x28
 8004202:	d871      	bhi.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004204:	a201      	add	r2, pc, #4	; (adr r2, 800420c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420a:	bf00      	nop
 800420c:	080042f1 	.word	0x080042f1
 8004210:	080042e9 	.word	0x080042e9
 8004214:	080042e9 	.word	0x080042e9
 8004218:	080042e9 	.word	0x080042e9
 800421c:	080042e9 	.word	0x080042e9
 8004220:	080042e9 	.word	0x080042e9
 8004224:	080042e9 	.word	0x080042e9
 8004228:	080042e9 	.word	0x080042e9
 800422c:	080042bd 	.word	0x080042bd
 8004230:	080042e9 	.word	0x080042e9
 8004234:	080042e9 	.word	0x080042e9
 8004238:	080042e9 	.word	0x080042e9
 800423c:	080042e9 	.word	0x080042e9
 8004240:	080042e9 	.word	0x080042e9
 8004244:	080042e9 	.word	0x080042e9
 8004248:	080042e9 	.word	0x080042e9
 800424c:	080042d3 	.word	0x080042d3
 8004250:	080042e9 	.word	0x080042e9
 8004254:	080042e9 	.word	0x080042e9
 8004258:	080042e9 	.word	0x080042e9
 800425c:	080042e9 	.word	0x080042e9
 8004260:	080042e9 	.word	0x080042e9
 8004264:	080042e9 	.word	0x080042e9
 8004268:	080042e9 	.word	0x080042e9
 800426c:	080042f1 	.word	0x080042f1
 8004270:	080042e9 	.word	0x080042e9
 8004274:	080042e9 	.word	0x080042e9
 8004278:	080042e9 	.word	0x080042e9
 800427c:	080042e9 	.word	0x080042e9
 8004280:	080042e9 	.word	0x080042e9
 8004284:	080042e9 	.word	0x080042e9
 8004288:	080042e9 	.word	0x080042e9
 800428c:	080042f1 	.word	0x080042f1
 8004290:	080042e9 	.word	0x080042e9
 8004294:	080042e9 	.word	0x080042e9
 8004298:	080042e9 	.word	0x080042e9
 800429c:	080042e9 	.word	0x080042e9
 80042a0:	080042e9 	.word	0x080042e9
 80042a4:	080042e9 	.word	0x080042e9
 80042a8:	080042e9 	.word	0x080042e9
 80042ac:	080042f1 	.word	0x080042f1
 80042b0:	58024400 	.word	0x58024400
 80042b4:	58024800 	.word	0x58024800
 80042b8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042c0:	3308      	adds	r3, #8
 80042c2:	2101      	movs	r1, #1
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 ffa7 	bl	8005218 <RCCEx_PLL2_Config>
 80042ca:	4603      	mov	r3, r0
 80042cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80042d0:	e00f      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042d6:	3328      	adds	r3, #40	; 0x28
 80042d8:	2101      	movs	r1, #1
 80042da:	4618      	mov	r0, r3
 80042dc:	f001 f84e 	bl	800537c <RCCEx_PLL3_Config>
 80042e0:	4603      	mov	r3, r0
 80042e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80042e6:	e004      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80042ee:	e000      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80042f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10a      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80042fa:	4bbf      	ldr	r3, [pc, #764]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80042fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fe:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004302:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004306:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004308:	4abb      	ldr	r2, [pc, #748]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800430a:	430b      	orrs	r3, r1
 800430c:	6553      	str	r3, [r2, #84]	; 0x54
 800430e:	e003      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004310:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004314:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800431c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004320:	f002 0302 	and.w	r3, r2, #2
 8004324:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004328:	2300      	movs	r3, #0
 800432a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800432e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004332:	460b      	mov	r3, r1
 8004334:	4313      	orrs	r3, r2
 8004336:	d041      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800433c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800433e:	2b05      	cmp	r3, #5
 8004340:	d824      	bhi.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004342:	a201      	add	r2, pc, #4	; (adr r2, 8004348 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004348:	08004395 	.word	0x08004395
 800434c:	08004361 	.word	0x08004361
 8004350:	08004377 	.word	0x08004377
 8004354:	08004395 	.word	0x08004395
 8004358:	08004395 	.word	0x08004395
 800435c:	08004395 	.word	0x08004395
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004364:	3308      	adds	r3, #8
 8004366:	2101      	movs	r1, #1
 8004368:	4618      	mov	r0, r3
 800436a:	f000 ff55 	bl	8005218 <RCCEx_PLL2_Config>
 800436e:	4603      	mov	r3, r0
 8004370:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004374:	e00f      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004376:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800437a:	3328      	adds	r3, #40	; 0x28
 800437c:	2101      	movs	r1, #1
 800437e:	4618      	mov	r0, r3
 8004380:	f000 fffc 	bl	800537c <RCCEx_PLL3_Config>
 8004384:	4603      	mov	r3, r0
 8004386:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800438a:	e004      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004392:	e000      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004394:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004396:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10a      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800439e:	4b96      	ldr	r3, [pc, #600]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80043a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a2:	f023 0107 	bic.w	r1, r3, #7
 80043a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ac:	4a92      	ldr	r2, [pc, #584]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80043ae:	430b      	orrs	r3, r1
 80043b0:	6553      	str	r3, [r2, #84]	; 0x54
 80043b2:	e003      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80043b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c4:	f002 0304 	and.w	r3, r2, #4
 80043c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043cc:	2300      	movs	r3, #0
 80043ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043d2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80043d6:	460b      	mov	r3, r1
 80043d8:	4313      	orrs	r3, r2
 80043da:	d044      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80043dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e4:	2b05      	cmp	r3, #5
 80043e6:	d825      	bhi.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80043e8:	a201      	add	r2, pc, #4	; (adr r2, 80043f0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80043ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ee:	bf00      	nop
 80043f0:	0800443d 	.word	0x0800443d
 80043f4:	08004409 	.word	0x08004409
 80043f8:	0800441f 	.word	0x0800441f
 80043fc:	0800443d 	.word	0x0800443d
 8004400:	0800443d 	.word	0x0800443d
 8004404:	0800443d 	.word	0x0800443d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800440c:	3308      	adds	r3, #8
 800440e:	2101      	movs	r1, #1
 8004410:	4618      	mov	r0, r3
 8004412:	f000 ff01 	bl	8005218 <RCCEx_PLL2_Config>
 8004416:	4603      	mov	r3, r0
 8004418:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800441c:	e00f      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800441e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004422:	3328      	adds	r3, #40	; 0x28
 8004424:	2101      	movs	r1, #1
 8004426:	4618      	mov	r0, r3
 8004428:	f000 ffa8 	bl	800537c <RCCEx_PLL3_Config>
 800442c:	4603      	mov	r3, r0
 800442e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004432:	e004      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800443a:	e000      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800443c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800443e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10b      	bne.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004446:	4b6c      	ldr	r3, [pc, #432]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444a:	f023 0107 	bic.w	r1, r3, #7
 800444e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004456:	4a68      	ldr	r2, [pc, #416]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004458:	430b      	orrs	r3, r1
 800445a:	6593      	str	r3, [r2, #88]	; 0x58
 800445c:	e003      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800445e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004462:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800446a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446e:	f002 0320 	and.w	r3, r2, #32
 8004472:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004476:	2300      	movs	r3, #0
 8004478:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800447c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004480:	460b      	mov	r3, r1
 8004482:	4313      	orrs	r3, r2
 8004484:	d055      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800448a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800448e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004492:	d033      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004494:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004498:	d82c      	bhi.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800449a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800449e:	d02f      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80044a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a4:	d826      	bhi.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80044a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044aa:	d02b      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80044ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044b0:	d820      	bhi.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80044b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044b6:	d012      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80044b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044bc:	d81a      	bhi.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d022      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80044c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044c6:	d115      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044cc:	3308      	adds	r3, #8
 80044ce:	2100      	movs	r1, #0
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 fea1 	bl	8005218 <RCCEx_PLL2_Config>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80044dc:	e015      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044e2:	3328      	adds	r3, #40	; 0x28
 80044e4:	2102      	movs	r1, #2
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 ff48 	bl	800537c <RCCEx_PLL3_Config>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80044f2:	e00a      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80044fa:	e006      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80044fc:	bf00      	nop
 80044fe:	e004      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004500:	bf00      	nop
 8004502:	e002      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004504:	bf00      	nop
 8004506:	e000      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800450a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10b      	bne.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004512:	4b39      	ldr	r3, [pc, #228]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004516:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800451a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800451e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004522:	4a35      	ldr	r2, [pc, #212]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004524:	430b      	orrs	r3, r1
 8004526:	6553      	str	r3, [r2, #84]	; 0x54
 8004528:	e003      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800452a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800452e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800453e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004542:	2300      	movs	r3, #0
 8004544:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004548:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800454c:	460b      	mov	r3, r1
 800454e:	4313      	orrs	r3, r2
 8004550:	d058      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004552:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004556:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800455a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800455e:	d033      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004560:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004564:	d82c      	bhi.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800456a:	d02f      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800456c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004570:	d826      	bhi.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004572:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004576:	d02b      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004578:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800457c:	d820      	bhi.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800457e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004582:	d012      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004584:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004588:	d81a      	bhi.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800458a:	2b00      	cmp	r3, #0
 800458c:	d022      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800458e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004592:	d115      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004598:	3308      	adds	r3, #8
 800459a:	2100      	movs	r1, #0
 800459c:	4618      	mov	r0, r3
 800459e:	f000 fe3b 	bl	8005218 <RCCEx_PLL2_Config>
 80045a2:	4603      	mov	r3, r0
 80045a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80045a8:	e015      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045ae:	3328      	adds	r3, #40	; 0x28
 80045b0:	2102      	movs	r1, #2
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 fee2 	bl	800537c <RCCEx_PLL3_Config>
 80045b8:	4603      	mov	r3, r0
 80045ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80045be:	e00a      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80045c6:	e006      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80045c8:	bf00      	nop
 80045ca:	e004      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80045cc:	bf00      	nop
 80045ce:	e002      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80045d0:	bf00      	nop
 80045d2:	e000      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80045d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10e      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045de:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80045e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80045e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045ee:	4a02      	ldr	r2, [pc, #8]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80045f0:	430b      	orrs	r3, r1
 80045f2:	6593      	str	r3, [r2, #88]	; 0x58
 80045f4:	e006      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80045f6:	bf00      	nop
 80045f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004600:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004610:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004614:	2300      	movs	r3, #0
 8004616:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800461a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800461e:	460b      	mov	r3, r1
 8004620:	4313      	orrs	r3, r2
 8004622:	d055      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004628:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800462c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004630:	d033      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8004632:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004636:	d82c      	bhi.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800463c:	d02f      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800463e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004642:	d826      	bhi.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004644:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004648:	d02b      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800464a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800464e:	d820      	bhi.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004650:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004654:	d012      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004656:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800465a:	d81a      	bhi.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800465c:	2b00      	cmp	r3, #0
 800465e:	d022      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004664:	d115      	bne.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800466a:	3308      	adds	r3, #8
 800466c:	2100      	movs	r1, #0
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fdd2 	bl	8005218 <RCCEx_PLL2_Config>
 8004674:	4603      	mov	r3, r0
 8004676:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800467a:	e015      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800467c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004680:	3328      	adds	r3, #40	; 0x28
 8004682:	2102      	movs	r1, #2
 8004684:	4618      	mov	r0, r3
 8004686:	f000 fe79 	bl	800537c <RCCEx_PLL3_Config>
 800468a:	4603      	mov	r3, r0
 800468c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004690:	e00a      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004698:	e006      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800469a:	bf00      	nop
 800469c:	e004      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800469e:	bf00      	nop
 80046a0:	e002      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80046a2:	bf00      	nop
 80046a4:	e000      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80046a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10b      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80046b0:	4ba0      	ldr	r3, [pc, #640]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80046b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80046b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046c0:	4a9c      	ldr	r2, [pc, #624]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80046c2:	430b      	orrs	r3, r1
 80046c4:	6593      	str	r3, [r2, #88]	; 0x58
 80046c6:	e003      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80046cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80046d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d8:	f002 0308 	and.w	r3, r2, #8
 80046dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80046e0:	2300      	movs	r3, #0
 80046e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80046e6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80046ea:	460b      	mov	r3, r1
 80046ec:	4313      	orrs	r3, r2
 80046ee:	d01e      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80046f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046fc:	d10c      	bne.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80046fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004702:	3328      	adds	r3, #40	; 0x28
 8004704:	2102      	movs	r1, #2
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fe38 	bl	800537c <RCCEx_PLL3_Config>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d002      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004718:	4b86      	ldr	r3, [pc, #536]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800471a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004724:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004728:	4a82      	ldr	r2, [pc, #520]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800472a:	430b      	orrs	r3, r1
 800472c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800472e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004736:	f002 0310 	and.w	r3, r2, #16
 800473a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800473e:	2300      	movs	r3, #0
 8004740:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004744:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004748:	460b      	mov	r3, r1
 800474a:	4313      	orrs	r3, r2
 800474c:	d01e      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800474e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800475a:	d10c      	bne.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800475c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004760:	3328      	adds	r3, #40	; 0x28
 8004762:	2102      	movs	r1, #2
 8004764:	4618      	mov	r0, r3
 8004766:	f000 fe09 	bl	800537c <RCCEx_PLL3_Config>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d002      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004776:	4b6f      	ldr	r3, [pc, #444]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800477e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004786:	4a6b      	ldr	r2, [pc, #428]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004788:	430b      	orrs	r3, r1
 800478a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800478c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004794:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004798:	67bb      	str	r3, [r7, #120]	; 0x78
 800479a:	2300      	movs	r3, #0
 800479c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800479e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80047a2:	460b      	mov	r3, r1
 80047a4:	4313      	orrs	r3, r2
 80047a6:	d03e      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80047a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80047b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047b4:	d022      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80047b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047ba:	d81b      	bhi.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80047c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c4:	d00b      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80047c6:	e015      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047cc:	3308      	adds	r3, #8
 80047ce:	2100      	movs	r1, #0
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 fd21 	bl	8005218 <RCCEx_PLL2_Config>
 80047d6:	4603      	mov	r3, r0
 80047d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80047dc:	e00f      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047e2:	3328      	adds	r3, #40	; 0x28
 80047e4:	2102      	movs	r1, #2
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fdc8 	bl	800537c <RCCEx_PLL3_Config>
 80047ec:	4603      	mov	r3, r0
 80047ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80047f2:	e004      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80047fa:	e000      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80047fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10b      	bne.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004806:	4b4b      	ldr	r3, [pc, #300]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800480e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004812:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004816:	4a47      	ldr	r2, [pc, #284]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004818:	430b      	orrs	r3, r1
 800481a:	6593      	str	r3, [r2, #88]	; 0x58
 800481c:	e003      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800481e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004822:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004826:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800482a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004832:	673b      	str	r3, [r7, #112]	; 0x70
 8004834:	2300      	movs	r3, #0
 8004836:	677b      	str	r3, [r7, #116]	; 0x74
 8004838:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800483c:	460b      	mov	r3, r1
 800483e:	4313      	orrs	r3, r2
 8004840:	d03b      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800484a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800484e:	d01f      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004850:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004854:	d818      	bhi.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004856:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800485a:	d003      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800485c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004860:	d007      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004862:	e011      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004864:	4b33      	ldr	r3, [pc, #204]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004868:	4a32      	ldr	r2, [pc, #200]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800486a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800486e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004870:	e00f      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004876:	3328      	adds	r3, #40	; 0x28
 8004878:	2101      	movs	r1, #1
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fd7e 	bl	800537c <RCCEx_PLL3_Config>
 8004880:	4603      	mov	r3, r0
 8004882:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004886:	e004      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800488e:	e000      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004890:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004892:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10b      	bne.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800489a:	4b26      	ldr	r3, [pc, #152]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800489c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80048a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048aa:	4a22      	ldr	r2, [pc, #136]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80048ac:	430b      	orrs	r3, r1
 80048ae:	6553      	str	r3, [r2, #84]	; 0x54
 80048b0:	e003      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80048b6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80048ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80048c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80048c8:	2300      	movs	r3, #0
 80048ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048cc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80048d0:	460b      	mov	r3, r1
 80048d2:	4313      	orrs	r3, r2
 80048d4:	d034      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80048d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80048e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e4:	d007      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80048e6:	e011      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048e8:	4b12      	ldr	r3, [pc, #72]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ec:	4a11      	ldr	r2, [pc, #68]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80048ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80048f4:	e00e      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048fa:	3308      	adds	r3, #8
 80048fc:	2102      	movs	r1, #2
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 fc8a 	bl	8005218 <RCCEx_PLL2_Config>
 8004904:	4603      	mov	r3, r0
 8004906:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800490a:	e003      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004912:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004914:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10d      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800491c:	4b05      	ldr	r3, [pc, #20]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800491e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004920:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800492a:	4a02      	ldr	r2, [pc, #8]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800492c:	430b      	orrs	r3, r1
 800492e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004930:	e006      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004932:	bf00      	nop
 8004934:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004938:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800493c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004948:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800494c:	663b      	str	r3, [r7, #96]	; 0x60
 800494e:	2300      	movs	r3, #0
 8004950:	667b      	str	r3, [r7, #100]	; 0x64
 8004952:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004956:	460b      	mov	r3, r1
 8004958:	4313      	orrs	r3, r2
 800495a:	d00c      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800495c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004960:	3328      	adds	r3, #40	; 0x28
 8004962:	2102      	movs	r1, #2
 8004964:	4618      	mov	r0, r3
 8004966:	f000 fd09 	bl	800537c <RCCEx_PLL3_Config>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d002      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800497a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004982:	65bb      	str	r3, [r7, #88]	; 0x58
 8004984:	2300      	movs	r3, #0
 8004986:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004988:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800498c:	460b      	mov	r3, r1
 800498e:	4313      	orrs	r3, r2
 8004990:	d036      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004996:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004998:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800499c:	d018      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800499e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049a2:	d811      	bhi.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80049a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049a8:	d014      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80049aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049ae:	d80b      	bhi.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d011      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80049b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049b8:	d106      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ba:	4bb7      	ldr	r3, [pc, #732]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80049bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049be:	4ab6      	ldr	r2, [pc, #728]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80049c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80049c6:	e008      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80049ce:	e004      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80049d0:	bf00      	nop
 80049d2:	e002      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80049d4:	bf00      	nop
 80049d6:	e000      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80049d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10a      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049e2:	4bad      	ldr	r3, [pc, #692]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80049e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80049ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049f0:	4aa9      	ldr	r2, [pc, #676]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80049f2:	430b      	orrs	r3, r1
 80049f4:	6553      	str	r3, [r2, #84]	; 0x54
 80049f6:	e003      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80049fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a08:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004a0c:	653b      	str	r3, [r7, #80]	; 0x50
 8004a0e:	2300      	movs	r3, #0
 8004a10:	657b      	str	r3, [r7, #84]	; 0x54
 8004a12:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004a16:	460b      	mov	r3, r1
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	d009      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a1c:	4b9e      	ldr	r3, [pc, #632]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2a:	4a9b      	ldr	r2, [pc, #620]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004a2c:	430b      	orrs	r3, r1
 8004a2e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a38:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004a3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a3e:	2300      	movs	r3, #0
 8004a40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a42:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004a46:	460b      	mov	r3, r1
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	d009      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a4c:	4b92      	ldr	r3, [pc, #584]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a50:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a5a:	4a8f      	ldr	r2, [pc, #572]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004a5c:	430b      	orrs	r3, r1
 8004a5e:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a68:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004a6c:	643b      	str	r3, [r7, #64]	; 0x40
 8004a6e:	2300      	movs	r3, #0
 8004a70:	647b      	str	r3, [r7, #68]	; 0x44
 8004a72:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004a76:	460b      	mov	r3, r1
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	d00e      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a7c:	4b86      	ldr	r3, [pc, #536]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	4a85      	ldr	r2, [pc, #532]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004a82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a86:	6113      	str	r3, [r2, #16]
 8004a88:	4b83      	ldr	r3, [pc, #524]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004a8a:	6919      	ldr	r1, [r3, #16]
 8004a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a94:	4a80      	ldr	r2, [pc, #512]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004a96:	430b      	orrs	r3, r1
 8004a98:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004aa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aac:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	d009      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004ab6:	4b78      	ldr	r3, [pc, #480]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aba:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac4:	4a74      	ldr	r2, [pc, #464]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004ac6:	430b      	orrs	r3, r1
 8004ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004ad6:	633b      	str	r3, [r7, #48]	; 0x30
 8004ad8:	2300      	movs	r3, #0
 8004ada:	637b      	str	r3, [r7, #52]	; 0x34
 8004adc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	d00a      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ae6:	4b6c      	ldr	r3, [pc, #432]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aea:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af6:	4a68      	ldr	r2, [pc, #416]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004af8:	430b      	orrs	r3, r1
 8004afa:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b04:	2100      	movs	r1, #0
 8004b06:	62b9      	str	r1, [r7, #40]	; 0x28
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b0e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004b12:	460b      	mov	r3, r1
 8004b14:	4313      	orrs	r3, r2
 8004b16:	d011      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b1c:	3308      	adds	r3, #8
 8004b1e:	2100      	movs	r1, #0
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 fb79 	bl	8005218 <RCCEx_PLL2_Config>
 8004b26:	4603      	mov	r3, r0
 8004b28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004b2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d003      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b38:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b44:	2100      	movs	r1, #0
 8004b46:	6239      	str	r1, [r7, #32]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b4e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004b52:	460b      	mov	r3, r1
 8004b54:	4313      	orrs	r3, r2
 8004b56:	d011      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b5c:	3308      	adds	r3, #8
 8004b5e:	2101      	movs	r1, #1
 8004b60:	4618      	mov	r0, r3
 8004b62:	f000 fb59 	bl	8005218 <RCCEx_PLL2_Config>
 8004b66:	4603      	mov	r3, r0
 8004b68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004b6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b78:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b84:	2100      	movs	r1, #0
 8004b86:	61b9      	str	r1, [r7, #24]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	61fb      	str	r3, [r7, #28]
 8004b8e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004b92:	460b      	mov	r3, r1
 8004b94:	4313      	orrs	r3, r2
 8004b96:	d011      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b9c:	3308      	adds	r3, #8
 8004b9e:	2102      	movs	r1, #2
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 fb39 	bl	8005218 <RCCEx_PLL2_Config>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004bac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d003      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004bb8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	6139      	str	r1, [r7, #16]
 8004bc8:	f003 0308 	and.w	r3, r3, #8
 8004bcc:	617b      	str	r3, [r7, #20]
 8004bce:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	d011      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bdc:	3328      	adds	r3, #40	; 0x28
 8004bde:	2100      	movs	r1, #0
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 fbcb 	bl	800537c <RCCEx_PLL3_Config>
 8004be6:	4603      	mov	r3, r0
 8004be8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8004bec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004bf8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c04:	2100      	movs	r1, #0
 8004c06:	60b9      	str	r1, [r7, #8]
 8004c08:	f003 0310 	and.w	r3, r3, #16
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004c12:	460b      	mov	r3, r1
 8004c14:	4313      	orrs	r3, r2
 8004c16:	d011      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c1c:	3328      	adds	r3, #40	; 0x28
 8004c1e:	2101      	movs	r1, #1
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 fbab 	bl	800537c <RCCEx_PLL3_Config>
 8004c26:	4603      	mov	r3, r0
 8004c28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004c2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d003      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c38:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c44:	2100      	movs	r1, #0
 8004c46:	6039      	str	r1, [r7, #0]
 8004c48:	f003 0320 	and.w	r3, r3, #32
 8004c4c:	607b      	str	r3, [r7, #4]
 8004c4e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004c52:	460b      	mov	r3, r1
 8004c54:	4313      	orrs	r3, r2
 8004c56:	d011      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c5c:	3328      	adds	r3, #40	; 0x28
 8004c5e:	2102      	movs	r1, #2
 8004c60:	4618      	mov	r0, r3
 8004c62:	f000 fb8b 	bl	800537c <RCCEx_PLL3_Config>
 8004c66:	4603      	mov	r3, r0
 8004c68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004c6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c78:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8004c7c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004c84:	2300      	movs	r3, #0
 8004c86:	e000      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8004c90:	46bd      	mov	sp, r7
 8004c92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c96:	bf00      	nop
 8004c98:	58024400 	.word	0x58024400

08004c9c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004ca0:	f7fe fe00 	bl	80038a4 <HAL_RCC_GetHCLKFreq>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	4b06      	ldr	r3, [pc, #24]	; (8004cc0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	091b      	lsrs	r3, r3, #4
 8004cac:	f003 0307 	and.w	r3, r3, #7
 8004cb0:	4904      	ldr	r1, [pc, #16]	; (8004cc4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004cb2:	5ccb      	ldrb	r3, [r1, r3]
 8004cb4:	f003 031f 	and.w	r3, r3, #31
 8004cb8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	58024400 	.word	0x58024400
 8004cc4:	0800730c 	.word	0x0800730c

08004cc8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b089      	sub	sp, #36	; 0x24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cd0:	4ba1      	ldr	r3, [pc, #644]	; (8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd4:	f003 0303 	and.w	r3, r3, #3
 8004cd8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004cda:	4b9f      	ldr	r3, [pc, #636]	; (8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cde:	0b1b      	lsrs	r3, r3, #12
 8004ce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ce4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004ce6:	4b9c      	ldr	r3, [pc, #624]	; (8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cea:	091b      	lsrs	r3, r3, #4
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004cf2:	4b99      	ldr	r3, [pc, #612]	; (8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf6:	08db      	lsrs	r3, r3, #3
 8004cf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	fb02 f303 	mul.w	r3, r2, r3
 8004d02:	ee07 3a90 	vmov	s15, r3
 8004d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8111 	beq.w	8004f38 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	f000 8083 	beq.w	8004e24 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	f200 80a1 	bhi.w	8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d056      	beq.n	8004de0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004d32:	e099      	b.n	8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d34:	4b88      	ldr	r3, [pc, #544]	; (8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0320 	and.w	r3, r3, #32
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d02d      	beq.n	8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d40:	4b85      	ldr	r3, [pc, #532]	; (8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	08db      	lsrs	r3, r3, #3
 8004d46:	f003 0303 	and.w	r3, r3, #3
 8004d4a:	4a84      	ldr	r2, [pc, #528]	; (8004f5c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d50:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	ee07 3a90 	vmov	s15, r3
 8004d58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	ee07 3a90 	vmov	s15, r3
 8004d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d6a:	4b7b      	ldr	r3, [pc, #492]	; (8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d72:	ee07 3a90 	vmov	s15, r3
 8004d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d7e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004f60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004d9a:	e087      	b.n	8004eac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	ee07 3a90 	vmov	s15, r3
 8004da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004da6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004f64 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dae:	4b6a      	ldr	r3, [pc, #424]	; (8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004db6:	ee07 3a90 	vmov	s15, r3
 8004dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dc2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004f60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dde:	e065      	b.n	8004eac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	ee07 3a90 	vmov	s15, r3
 8004de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004df2:	4b59      	ldr	r3, [pc, #356]	; (8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dfa:	ee07 3a90 	vmov	s15, r3
 8004dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e02:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e06:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004f60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e22:	e043      	b.n	8004eac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	ee07 3a90 	vmov	s15, r3
 8004e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e2e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e36:	4b48      	ldr	r3, [pc, #288]	; (8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e3e:	ee07 3a90 	vmov	s15, r3
 8004e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e46:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e4a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004f60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e66:	e021      	b.n	8004eac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	ee07 3a90 	vmov	s15, r3
 8004e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e7a:	4b37      	ldr	r3, [pc, #220]	; (8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e82:	ee07 3a90 	vmov	s15, r3
 8004e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e8e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004f60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ea6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eaa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004eac:	4b2a      	ldr	r3, [pc, #168]	; (8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb0:	0a5b      	lsrs	r3, r3, #9
 8004eb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eb6:	ee07 3a90 	vmov	s15, r3
 8004eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ebe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ec2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ec6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004eca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ece:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ed2:	ee17 2a90 	vmov	r2, s15
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004eda:	4b1f      	ldr	r3, [pc, #124]	; (8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ede:	0c1b      	lsrs	r3, r3, #16
 8004ee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ee4:	ee07 3a90 	vmov	s15, r3
 8004ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ef0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ef4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ef8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004efc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f00:	ee17 2a90 	vmov	r2, s15
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004f08:	4b13      	ldr	r3, [pc, #76]	; (8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0c:	0e1b      	lsrs	r3, r3, #24
 8004f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f12:	ee07 3a90 	vmov	s15, r3
 8004f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f22:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f2e:	ee17 2a90 	vmov	r2, s15
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004f36:	e008      	b.n	8004f4a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	609a      	str	r2, [r3, #8]
}
 8004f4a:	bf00      	nop
 8004f4c:	3724      	adds	r7, #36	; 0x24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	58024400 	.word	0x58024400
 8004f5c:	03d09000 	.word	0x03d09000
 8004f60:	46000000 	.word	0x46000000
 8004f64:	4c742400 	.word	0x4c742400
 8004f68:	4a742400 	.word	0x4a742400
 8004f6c:	4af42400 	.word	0x4af42400

08004f70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b089      	sub	sp, #36	; 0x24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f78:	4ba1      	ldr	r3, [pc, #644]	; (8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7c:	f003 0303 	and.w	r3, r3, #3
 8004f80:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004f82:	4b9f      	ldr	r3, [pc, #636]	; (8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f86:	0d1b      	lsrs	r3, r3, #20
 8004f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f8c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004f8e:	4b9c      	ldr	r3, [pc, #624]	; (8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f92:	0a1b      	lsrs	r3, r3, #8
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004f9a:	4b99      	ldr	r3, [pc, #612]	; (8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9e:	08db      	lsrs	r3, r3, #3
 8004fa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	fb02 f303 	mul.w	r3, r2, r3
 8004faa:	ee07 3a90 	vmov	s15, r3
 8004fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fb2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 8111 	beq.w	80051e0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	f000 8083 	beq.w	80050cc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	f200 80a1 	bhi.w	8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d056      	beq.n	8005088 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004fda:	e099      	b.n	8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fdc:	4b88      	ldr	r3, [pc, #544]	; (8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0320 	and.w	r3, r3, #32
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d02d      	beq.n	8005044 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fe8:	4b85      	ldr	r3, [pc, #532]	; (8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	08db      	lsrs	r3, r3, #3
 8004fee:	f003 0303 	and.w	r3, r3, #3
 8004ff2:	4a84      	ldr	r2, [pc, #528]	; (8005204 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	ee07 3a90 	vmov	s15, r3
 8005000:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	ee07 3a90 	vmov	s15, r3
 800500a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005012:	4b7b      	ldr	r3, [pc, #492]	; (8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800501a:	ee07 3a90 	vmov	s15, r3
 800501e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005022:	ed97 6a03 	vldr	s12, [r7, #12]
 8005026:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005208 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800502a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800502e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800503a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800503e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005042:	e087      	b.n	8005154 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	ee07 3a90 	vmov	s15, r3
 800504a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800520c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005056:	4b6a      	ldr	r3, [pc, #424]	; (8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800505e:	ee07 3a90 	vmov	s15, r3
 8005062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005066:	ed97 6a03 	vldr	s12, [r7, #12]
 800506a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005208 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800506e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800507a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800507e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005082:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005086:	e065      	b.n	8005154 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	ee07 3a90 	vmov	s15, r3
 800508e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005092:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005210 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800509a:	4b59      	ldr	r3, [pc, #356]	; (8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a2:	ee07 3a90 	vmov	s15, r3
 80050a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005208 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050ca:	e043      	b.n	8005154 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	ee07 3a90 	vmov	s15, r3
 80050d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005214 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80050da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050de:	4b48      	ldr	r3, [pc, #288]	; (8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80050f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005208 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800510a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800510e:	e021      	b.n	8005154 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800511a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005210 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800511e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005122:	4b37      	ldr	r3, [pc, #220]	; (8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800512a:	ee07 3a90 	vmov	s15, r3
 800512e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005132:	ed97 6a03 	vldr	s12, [r7, #12]
 8005136:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005208 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800513a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800513e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800514a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800514e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005152:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005154:	4b2a      	ldr	r3, [pc, #168]	; (8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005158:	0a5b      	lsrs	r3, r3, #9
 800515a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800515e:	ee07 3a90 	vmov	s15, r3
 8005162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005166:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800516a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800516e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005172:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800517a:	ee17 2a90 	vmov	r2, s15
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005182:	4b1f      	ldr	r3, [pc, #124]	; (8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	0c1b      	lsrs	r3, r3, #16
 8005188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800518c:	ee07 3a90 	vmov	s15, r3
 8005190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005194:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005198:	ee37 7a87 	vadd.f32	s14, s15, s14
 800519c:	edd7 6a07 	vldr	s13, [r7, #28]
 80051a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051a8:	ee17 2a90 	vmov	r2, s15
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80051b0:	4b13      	ldr	r3, [pc, #76]	; (8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b4:	0e1b      	lsrs	r3, r3, #24
 80051b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ba:	ee07 3a90 	vmov	s15, r3
 80051be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80051ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051d6:	ee17 2a90 	vmov	r2, s15
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80051de:	e008      	b.n	80051f2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	609a      	str	r2, [r3, #8]
}
 80051f2:	bf00      	nop
 80051f4:	3724      	adds	r7, #36	; 0x24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	58024400 	.word	0x58024400
 8005204:	03d09000 	.word	0x03d09000
 8005208:	46000000 	.word	0x46000000
 800520c:	4c742400 	.word	0x4c742400
 8005210:	4a742400 	.word	0x4a742400
 8005214:	4af42400 	.word	0x4af42400

08005218 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005222:	2300      	movs	r3, #0
 8005224:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005226:	4b53      	ldr	r3, [pc, #332]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 8005228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	2b03      	cmp	r3, #3
 8005230:	d101      	bne.n	8005236 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e099      	b.n	800536a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005236:	4b4f      	ldr	r3, [pc, #316]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a4e      	ldr	r2, [pc, #312]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 800523c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005240:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005242:	f7fc fcc3 	bl	8001bcc <HAL_GetTick>
 8005246:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005248:	e008      	b.n	800525c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800524a:	f7fc fcbf 	bl	8001bcc <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d901      	bls.n	800525c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e086      	b.n	800536a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800525c:	4b45      	ldr	r3, [pc, #276]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1f0      	bne.n	800524a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005268:	4b42      	ldr	r3, [pc, #264]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 800526a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	031b      	lsls	r3, r3, #12
 8005276:	493f      	ldr	r1, [pc, #252]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 8005278:	4313      	orrs	r3, r2
 800527a:	628b      	str	r3, [r1, #40]	; 0x28
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	3b01      	subs	r3, #1
 8005282:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	3b01      	subs	r3, #1
 800528c:	025b      	lsls	r3, r3, #9
 800528e:	b29b      	uxth	r3, r3
 8005290:	431a      	orrs	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	3b01      	subs	r3, #1
 8005298:	041b      	lsls	r3, r3, #16
 800529a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	3b01      	subs	r3, #1
 80052a6:	061b      	lsls	r3, r3, #24
 80052a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80052ac:	4931      	ldr	r1, [pc, #196]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80052b2:	4b30      	ldr	r3, [pc, #192]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 80052b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	492d      	ldr	r1, [pc, #180]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80052c4:	4b2b      	ldr	r3, [pc, #172]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 80052c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c8:	f023 0220 	bic.w	r2, r3, #32
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	4928      	ldr	r1, [pc, #160]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80052d6:	4b27      	ldr	r3, [pc, #156]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 80052d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052da:	4a26      	ldr	r2, [pc, #152]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 80052dc:	f023 0310 	bic.w	r3, r3, #16
 80052e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80052e2:	4b24      	ldr	r3, [pc, #144]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 80052e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052e6:	4b24      	ldr	r3, [pc, #144]	; (8005378 <RCCEx_PLL2_Config+0x160>)
 80052e8:	4013      	ands	r3, r2
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	69d2      	ldr	r2, [r2, #28]
 80052ee:	00d2      	lsls	r2, r2, #3
 80052f0:	4920      	ldr	r1, [pc, #128]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80052f6:	4b1f      	ldr	r3, [pc, #124]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 80052f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fa:	4a1e      	ldr	r2, [pc, #120]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 80052fc:	f043 0310 	orr.w	r3, r3, #16
 8005300:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d106      	bne.n	8005316 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005308:	4b1a      	ldr	r3, [pc, #104]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 800530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530c:	4a19      	ldr	r2, [pc, #100]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 800530e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005312:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005314:	e00f      	b.n	8005336 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d106      	bne.n	800532a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800531c:	4b15      	ldr	r3, [pc, #84]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 800531e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005320:	4a14      	ldr	r2, [pc, #80]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 8005322:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005326:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005328:	e005      	b.n	8005336 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800532a:	4b12      	ldr	r3, [pc, #72]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 800532c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532e:	4a11      	ldr	r2, [pc, #68]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 8005330:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005334:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005336:	4b0f      	ldr	r3, [pc, #60]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a0e      	ldr	r2, [pc, #56]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 800533c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005340:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005342:	f7fc fc43 	bl	8001bcc <HAL_GetTick>
 8005346:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005348:	e008      	b.n	800535c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800534a:	f7fc fc3f 	bl	8001bcc <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d901      	bls.n	800535c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e006      	b.n	800536a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800535c:	4b05      	ldr	r3, [pc, #20]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0f0      	beq.n	800534a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005368:	7bfb      	ldrb	r3, [r7, #15]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	58024400 	.word	0x58024400
 8005378:	ffff0007 	.word	0xffff0007

0800537c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800538a:	4b53      	ldr	r3, [pc, #332]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 800538c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538e:	f003 0303 	and.w	r3, r3, #3
 8005392:	2b03      	cmp	r3, #3
 8005394:	d101      	bne.n	800539a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e099      	b.n	80054ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800539a:	4b4f      	ldr	r3, [pc, #316]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a4e      	ldr	r2, [pc, #312]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 80053a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053a6:	f7fc fc11 	bl	8001bcc <HAL_GetTick>
 80053aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80053ac:	e008      	b.n	80053c0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80053ae:	f7fc fc0d 	bl	8001bcc <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d901      	bls.n	80053c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e086      	b.n	80054ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80053c0:	4b45      	ldr	r3, [pc, #276]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1f0      	bne.n	80053ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80053cc:	4b42      	ldr	r3, [pc, #264]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 80053ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	051b      	lsls	r3, r3, #20
 80053da:	493f      	ldr	r1, [pc, #252]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	628b      	str	r3, [r1, #40]	; 0x28
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	3b01      	subs	r3, #1
 80053e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	3b01      	subs	r3, #1
 80053f0:	025b      	lsls	r3, r3, #9
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	431a      	orrs	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	3b01      	subs	r3, #1
 80053fc:	041b      	lsls	r3, r3, #16
 80053fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	3b01      	subs	r3, #1
 800540a:	061b      	lsls	r3, r3, #24
 800540c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005410:	4931      	ldr	r1, [pc, #196]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 8005412:	4313      	orrs	r3, r2
 8005414:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005416:	4b30      	ldr	r3, [pc, #192]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 8005418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	492d      	ldr	r1, [pc, #180]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 8005424:	4313      	orrs	r3, r2
 8005426:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005428:	4b2b      	ldr	r3, [pc, #172]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 800542a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	4928      	ldr	r1, [pc, #160]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 8005436:	4313      	orrs	r3, r2
 8005438:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800543a:	4b27      	ldr	r3, [pc, #156]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 800543c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543e:	4a26      	ldr	r2, [pc, #152]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 8005440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005444:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005446:	4b24      	ldr	r3, [pc, #144]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 8005448:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800544a:	4b24      	ldr	r3, [pc, #144]	; (80054dc <RCCEx_PLL3_Config+0x160>)
 800544c:	4013      	ands	r3, r2
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	69d2      	ldr	r2, [r2, #28]
 8005452:	00d2      	lsls	r2, r2, #3
 8005454:	4920      	ldr	r1, [pc, #128]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 8005456:	4313      	orrs	r3, r2
 8005458:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800545a:	4b1f      	ldr	r3, [pc, #124]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 800545c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545e:	4a1e      	ldr	r2, [pc, #120]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 8005460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005464:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d106      	bne.n	800547a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800546c:	4b1a      	ldr	r3, [pc, #104]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 800546e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005470:	4a19      	ldr	r2, [pc, #100]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 8005472:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005476:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005478:	e00f      	b.n	800549a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d106      	bne.n	800548e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005480:	4b15      	ldr	r3, [pc, #84]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 8005482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005484:	4a14      	ldr	r2, [pc, #80]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 8005486:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800548a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800548c:	e005      	b.n	800549a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800548e:	4b12      	ldr	r3, [pc, #72]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 8005490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005492:	4a11      	ldr	r2, [pc, #68]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 8005494:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005498:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800549a:	4b0f      	ldr	r3, [pc, #60]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a0e      	ldr	r2, [pc, #56]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 80054a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054a6:	f7fc fb91 	bl	8001bcc <HAL_GetTick>
 80054aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80054ac:	e008      	b.n	80054c0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80054ae:	f7fc fb8d 	bl	8001bcc <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d901      	bls.n	80054c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e006      	b.n	80054ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80054c0:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d0f0      	beq.n	80054ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	58024400 	.word	0x58024400
 80054dc:	ffff0007 	.word	0xffff0007

080054e0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e10f      	b.n	8005712 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a87      	ldr	r2, [pc, #540]	; (800571c <HAL_SPI_Init+0x23c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00f      	beq.n	8005522 <HAL_SPI_Init+0x42>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a86      	ldr	r2, [pc, #536]	; (8005720 <HAL_SPI_Init+0x240>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d00a      	beq.n	8005522 <HAL_SPI_Init+0x42>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a84      	ldr	r2, [pc, #528]	; (8005724 <HAL_SPI_Init+0x244>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d005      	beq.n	8005522 <HAL_SPI_Init+0x42>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	2b0f      	cmp	r3, #15
 800551c:	d901      	bls.n	8005522 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e0f7      	b.n	8005712 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 fbea 	bl	8005cfc <SPI_GetPacketSize>
 8005528:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a7b      	ldr	r2, [pc, #492]	; (800571c <HAL_SPI_Init+0x23c>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d00c      	beq.n	800554e <HAL_SPI_Init+0x6e>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a79      	ldr	r2, [pc, #484]	; (8005720 <HAL_SPI_Init+0x240>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d007      	beq.n	800554e <HAL_SPI_Init+0x6e>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a78      	ldr	r2, [pc, #480]	; (8005724 <HAL_SPI_Init+0x244>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d002      	beq.n	800554e <HAL_SPI_Init+0x6e>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2b08      	cmp	r3, #8
 800554c:	d811      	bhi.n	8005572 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005552:	4a72      	ldr	r2, [pc, #456]	; (800571c <HAL_SPI_Init+0x23c>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d009      	beq.n	800556c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a70      	ldr	r2, [pc, #448]	; (8005720 <HAL_SPI_Init+0x240>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d004      	beq.n	800556c <HAL_SPI_Init+0x8c>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a6f      	ldr	r2, [pc, #444]	; (8005724 <HAL_SPI_Init+0x244>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d104      	bne.n	8005576 <HAL_SPI_Init+0x96>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2b10      	cmp	r3, #16
 8005570:	d901      	bls.n	8005576 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e0cd      	b.n	8005712 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d106      	bne.n	8005590 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7fc f8d4 	bl	8001738 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0201 	bic.w	r2, r2, #1
 80055a6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80055b2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055bc:	d119      	bne.n	80055f2 <HAL_SPI_Init+0x112>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055c6:	d103      	bne.n	80055d0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d008      	beq.n	80055e2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10c      	bne.n	80055f2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80055dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055e0:	d107      	bne.n	80055f2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055f0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00f      	beq.n	800561e <HAL_SPI_Init+0x13e>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	2b06      	cmp	r3, #6
 8005604:	d90b      	bls.n	800561e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	e007      	b.n	800562e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800562c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	69da      	ldr	r2, [r3, #28]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005636:	431a      	orrs	r2, r3
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	431a      	orrs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005640:	ea42 0103 	orr.w	r1, r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68da      	ldr	r2, [r3, #12]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	430a      	orrs	r2, r1
 800564e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	431a      	orrs	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565e:	431a      	orrs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	431a      	orrs	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	431a      	orrs	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	431a      	orrs	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005682:	431a      	orrs	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	431a      	orrs	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800568e:	ea42 0103 	orr.w	r1, r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	430a      	orrs	r2, r1
 800569c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d113      	bne.n	80056ce <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056b8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056cc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f022 0201 	bic.w	r2, r2, #1
 80056dc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00a      	beq.n	8005700 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	40013000 	.word	0x40013000
 8005720:	40003800 	.word	0x40003800
 8005724:	40003c00 	.word	0x40003c00

08005728 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08c      	sub	sp, #48	; 0x30
 800572c:	af02      	add	r7, sp, #8
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
 8005734:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005736:	2300      	movs	r3, #0
 8005738:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	3320      	adds	r3, #32
 8005742:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	3330      	adds	r3, #48	; 0x30
 800574a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005752:	2b01      	cmp	r3, #1
 8005754:	d101      	bne.n	800575a <HAL_SPI_TransmitReceive+0x32>
 8005756:	2302      	movs	r3, #2
 8005758:	e1fd      	b.n	8005b56 <HAL_SPI_TransmitReceive+0x42e>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005762:	f7fc fa33 	bl	8001bcc <HAL_GetTick>
 8005766:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 8005768:	887b      	ldrh	r3, [r7, #2]
 800576a:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 800576c:	887b      	ldrh	r3, [r7, #2]
 800576e:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b01      	cmp	r3, #1
 800577a:	d009      	beq.n	8005790 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 800577c:	2302      	movs	r3, #2
 800577e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800578a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800578e:	e1e2      	b.n	8005b56 <HAL_SPI_TransmitReceive+0x42e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d005      	beq.n	80057a2 <HAL_SPI_TransmitReceive+0x7a>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d002      	beq.n	80057a2 <HAL_SPI_TransmitReceive+0x7a>
 800579c:	887b      	ldrh	r3, [r7, #2]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d109      	bne.n	80057b6 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80057b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057b4:	e1cf      	b.n	8005b56 <HAL_SPI_TransmitReceive+0x42e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2205      	movs	r2, #5
 80057ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	887a      	ldrh	r2, [r7, #2]
 80057d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	887a      	ldrh	r2, [r7, #2]
 80057d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	887a      	ldrh	r2, [r7, #2]
 80057e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	887a      	ldrh	r2, [r7, #2]
 80057ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68da      	ldr	r2, [r3, #12]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 800580c:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	4b82      	ldr	r3, [pc, #520]	; (8005a20 <HAL_SPI_TransmitReceive+0x2f8>)
 8005816:	4013      	ands	r3, r2
 8005818:	8879      	ldrh	r1, [r7, #2]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	6812      	ldr	r2, [r2, #0]
 800581e:	430b      	orrs	r3, r1
 8005820:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f042 0201 	orr.w	r2, r2, #1
 8005830:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800583a:	d107      	bne.n	800584c <HAL_SPI_TransmitReceive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800584a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	2b0f      	cmp	r3, #15
 8005852:	d970      	bls.n	8005936 <HAL_SPI_TransmitReceive+0x20e>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005854:	e068      	b.n	8005928 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b02      	cmp	r3, #2
 8005862:	d11a      	bne.n	800589a <HAL_SPI_TransmitReceive+0x172>
 8005864:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005866:	2b00      	cmp	r3, #0
 8005868:	d017      	beq.n	800589a <HAL_SPI_TransmitReceive+0x172>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	6812      	ldr	r2, [r2, #0]
 8005874:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800587a:	1d1a      	adds	r2, r3, #4
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005886:	b29b      	uxth	r3, r3
 8005888:	3b01      	subs	r3, #1
 800588a:	b29a      	uxth	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005898:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	695a      	ldr	r2, [r3, #20]
 80058a0:	f248 0308 	movw	r3, #32776	; 0x8008
 80058a4:	4013      	ands	r3, r2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d01a      	beq.n	80058e0 <HAL_SPI_TransmitReceive+0x1b8>
 80058aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d017      	beq.n	80058e0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80058ba:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058c0:	1d1a      	adds	r2, r3, #4
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	3b01      	subs	r3, #1
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80058de:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058e0:	f7fc f974 	bl	8001bcc <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d803      	bhi.n	80058f8 <HAL_SPI_TransmitReceive+0x1d0>
 80058f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f6:	d102      	bne.n	80058fe <HAL_SPI_TransmitReceive+0x1d6>
 80058f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d114      	bne.n	8005928 <HAL_SPI_TransmitReceive+0x200>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 f92e 	bl	8005b60 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005912:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e116      	b.n	8005b56 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005928:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800592a:	2b00      	cmp	r3, #0
 800592c:	d193      	bne.n	8005856 <HAL_SPI_TransmitReceive+0x12e>
 800592e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005930:	2b00      	cmp	r3, #0
 8005932:	d190      	bne.n	8005856 <HAL_SPI_TransmitReceive+0x12e>
 8005934:	e0e8      	b.n	8005b08 <HAL_SPI_TransmitReceive+0x3e0>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	2b07      	cmp	r3, #7
 800593c:	f240 80de 	bls.w	8005afc <HAL_SPI_TransmitReceive+0x3d4>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005940:	e066      	b.n	8005a10 <HAL_SPI_TransmitReceive+0x2e8>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	f003 0302 	and.w	r3, r3, #2
 800594c:	2b02      	cmp	r3, #2
 800594e:	d119      	bne.n	8005984 <HAL_SPI_TransmitReceive+0x25c>
 8005950:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005952:	2b00      	cmp	r3, #0
 8005954:	d016      	beq.n	8005984 <HAL_SPI_TransmitReceive+0x25c>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800595a:	881a      	ldrh	r2, [r3, #0]
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005964:	1c9a      	adds	r2, r3, #2
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005970:	b29b      	uxth	r3, r3
 8005972:	3b01      	subs	r3, #1
 8005974:	b29a      	uxth	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005982:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	2b01      	cmp	r3, #1
 8005990:	d11a      	bne.n	80059c8 <HAL_SPI_TransmitReceive+0x2a0>
 8005992:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005994:	2b00      	cmp	r3, #0
 8005996:	d017      	beq.n	80059c8 <HAL_SPI_TransmitReceive+0x2a0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	8812      	ldrh	r2, [r2, #0]
 80059a0:	b292      	uxth	r2, r2
 80059a2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059a8:	1c9a      	adds	r2, r3, #2
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	3b01      	subs	r3, #1
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80059c6:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059c8:	f7fc f900 	bl	8001bcc <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d803      	bhi.n	80059e0 <HAL_SPI_TransmitReceive+0x2b8>
 80059d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059de:	d102      	bne.n	80059e6 <HAL_SPI_TransmitReceive+0x2be>
 80059e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d114      	bne.n	8005a10 <HAL_SPI_TransmitReceive+0x2e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f000 f8ba 	bl	8005b60 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e0a2      	b.n	8005b56 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005a10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d195      	bne.n	8005942 <HAL_SPI_TransmitReceive+0x21a>
 8005a16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d192      	bne.n	8005942 <HAL_SPI_TransmitReceive+0x21a>
 8005a1c:	e074      	b.n	8005b08 <HAL_SPI_TransmitReceive+0x3e0>
 8005a1e:	bf00      	nop
 8005a20:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d11b      	bne.n	8005a6a <HAL_SPI_TransmitReceive+0x342>
 8005a32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d018      	beq.n	8005a6a <HAL_SPI_TransmitReceive+0x342>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3320      	adds	r3, #32
 8005a42:	7812      	ldrb	r2, [r2, #0]
 8005a44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a4a:	1c5a      	adds	r2, r3, #1
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005a68:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d11d      	bne.n	8005ab4 <HAL_SPI_TransmitReceive+0x38c>
 8005a78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d01a      	beq.n	8005ab4 <HAL_SPI_TransmitReceive+0x38c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a8a:	7812      	ldrb	r2, [r2, #0]
 8005a8c:	b2d2      	uxtb	r2, r2
 8005a8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a94:	1c5a      	adds	r2, r3, #1
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005ab2:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ab4:	f7fc f88a 	bl	8001bcc <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d803      	bhi.n	8005acc <HAL_SPI_TransmitReceive+0x3a4>
 8005ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aca:	d102      	bne.n	8005ad2 <HAL_SPI_TransmitReceive+0x3aa>
 8005acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d114      	bne.n	8005afc <HAL_SPI_TransmitReceive+0x3d4>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f000 f844 	bl	8005b60 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ae6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e02c      	b.n	8005b56 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005afc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d190      	bne.n	8005a24 <HAL_SPI_TransmitReceive+0x2fc>
 8005b02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d18d      	bne.n	8005a24 <HAL_SPI_TransmitReceive+0x2fc>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	9300      	str	r3, [sp, #0]
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0e:	2200      	movs	r2, #0
 8005b10:	2108      	movs	r1, #8
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f000 f8c4 	bl	8005ca0 <SPI_WaitOnFlagUntilTimeout>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d007      	beq.n	8005b2e <HAL_SPI_TransmitReceive+0x406>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b24:	f043 0220 	orr.w	r2, r3, #32
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f000 f816 	bl	8005b60 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <HAL_SPI_TransmitReceive+0x42a>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e001      	b.n	8005b56 <HAL_SPI_TransmitReceive+0x42e>
  }
  return errorcode;
 8005b52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3728      	adds	r7, #40	; 0x28
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop

08005b60 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	699a      	ldr	r2, [r3, #24]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f042 0208 	orr.w	r2, r2, #8
 8005b7e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	699a      	ldr	r2, [r3, #24]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f042 0210 	orr.w	r2, r2, #16
 8005b8e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0201 	bic.w	r2, r2, #1
 8005b9e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6919      	ldr	r1, [r3, #16]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	4b3c      	ldr	r3, [pc, #240]	; (8005c9c <SPI_CloseTransfer+0x13c>)
 8005bac:	400b      	ands	r3, r1
 8005bae:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689a      	ldr	r2, [r3, #8]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005bbe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b04      	cmp	r3, #4
 8005bca:	d014      	beq.n	8005bf6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f003 0320 	and.w	r3, r3, #32
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00f      	beq.n	8005bf6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bdc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	699a      	ldr	r2, [r3, #24]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f042 0220 	orr.w	r2, r2, #32
 8005bf4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b03      	cmp	r3, #3
 8005c00:	d014      	beq.n	8005c2c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00f      	beq.n	8005c2c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c12:	f043 0204 	orr.w	r2, r3, #4
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	699a      	ldr	r2, [r3, #24]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c2a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00f      	beq.n	8005c56 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c3c:	f043 0201 	orr.w	r2, r3, #1
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	699a      	ldr	r2, [r3, #24]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c54:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00f      	beq.n	8005c80 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c66:	f043 0208 	orr.w	r2, r3, #8
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	699a      	ldr	r2, [r3, #24]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c7e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8005c90:	bf00      	nop
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	fffffc90 	.word	0xfffffc90

08005ca0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	603b      	str	r3, [r7, #0]
 8005cac:	4613      	mov	r3, r2
 8005cae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005cb0:	e010      	b.n	8005cd4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cb2:	f7fb ff8b 	bl	8001bcc <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d803      	bhi.n	8005cca <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc8:	d102      	bne.n	8005cd0 <SPI_WaitOnFlagUntilTimeout+0x30>
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e00f      	b.n	8005cf4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	695a      	ldr	r2, [r3, #20]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	4013      	ands	r3, r2
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	bf0c      	ite	eq
 8005ce4:	2301      	moveq	r3, #1
 8005ce6:	2300      	movne	r3, #0
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	461a      	mov	r2, r3
 8005cec:	79fb      	ldrb	r3, [r7, #7]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d0df      	beq.n	8005cb2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d08:	095b      	lsrs	r3, r3, #5
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	3301      	adds	r3, #1
 8005d14:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	3307      	adds	r3, #7
 8005d1a:	08db      	lsrs	r3, r3, #3
 8005d1c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	fb02 f303 	mul.w	r3, r2, r3
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b082      	sub	sp, #8
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e042      	b.n	8005dca <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d106      	bne.n	8005d5c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7fb fd7c 	bl	8001854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2224      	movs	r2, #36	; 0x24
 8005d60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f022 0201 	bic.w	r2, r2, #1
 8005d72:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f8bb 	bl	8005ef0 <UART_SetConfig>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d101      	bne.n	8005d84 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e022      	b.n	8005dca <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d002      	beq.n	8005d92 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 ff1b 	bl	8006bc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005da0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689a      	ldr	r2, [r3, #8]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005db0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f042 0201 	orr.w	r2, r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 ffa2 	bl	8006d0c <UART_CheckIdleState>
 8005dc8:	4603      	mov	r3, r0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3708      	adds	r7, #8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b08a      	sub	sp, #40	; 0x28
 8005dd6:	af02      	add	r7, sp, #8
 8005dd8:	60f8      	str	r0, [r7, #12]
 8005dda:	60b9      	str	r1, [r7, #8]
 8005ddc:	603b      	str	r3, [r7, #0]
 8005dde:	4613      	mov	r3, r2
 8005de0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de8:	2b20      	cmp	r3, #32
 8005dea:	d17b      	bne.n	8005ee4 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <HAL_UART_Transmit+0x26>
 8005df2:	88fb      	ldrh	r3, [r7, #6]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e074      	b.n	8005ee6 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2221      	movs	r2, #33	; 0x21
 8005e08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e0c:	f7fb fede 	bl	8001bcc <HAL_GetTick>
 8005e10:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	88fa      	ldrh	r2, [r7, #6]
 8005e16:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	88fa      	ldrh	r2, [r7, #6]
 8005e1e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e2a:	d108      	bne.n	8005e3e <HAL_UART_Transmit+0x6c>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d104      	bne.n	8005e3e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005e34:	2300      	movs	r3, #0
 8005e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	61bb      	str	r3, [r7, #24]
 8005e3c:	e003      	b.n	8005e46 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e42:	2300      	movs	r3, #0
 8005e44:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e46:	e030      	b.n	8005eaa <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	2180      	movs	r1, #128	; 0x80
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f001 f804 	bl	8006e60 <UART_WaitOnFlagUntilTimeout>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d005      	beq.n	8005e6a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e03d      	b.n	8005ee6 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10b      	bne.n	8005e88 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	461a      	mov	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e7e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	3302      	adds	r3, #2
 8005e84:	61bb      	str	r3, [r7, #24]
 8005e86:	e007      	b.n	8005e98 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	781a      	ldrb	r2, [r3, #0]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	3301      	adds	r3, #1
 8005e96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1c8      	bne.n	8005e48 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	9300      	str	r3, [sp, #0]
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	2140      	movs	r1, #64	; 0x40
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 ffcd 	bl	8006e60 <UART_WaitOnFlagUntilTimeout>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d005      	beq.n	8005ed8 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e006      	b.n	8005ee6 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	e000      	b.n	8005ee6 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005ee4:	2302      	movs	r3, #2
  }
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3720      	adds	r7, #32
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
	...

08005ef0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ef4:	b092      	sub	sp, #72	; 0x48
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005efa:	2300      	movs	r3, #0
 8005efc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	431a      	orrs	r2, r3
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	431a      	orrs	r2, r3
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	69db      	ldr	r3, [r3, #28]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	4bbe      	ldr	r3, [pc, #760]	; (8006218 <UART_SetConfig+0x328>)
 8005f20:	4013      	ands	r3, r2
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	6812      	ldr	r2, [r2, #0]
 8005f26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f28:	430b      	orrs	r3, r1
 8005f2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	68da      	ldr	r2, [r3, #12]
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4ab3      	ldr	r2, [pc, #716]	; (800621c <UART_SetConfig+0x32c>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d004      	beq.n	8005f5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689a      	ldr	r2, [r3, #8]
 8005f62:	4baf      	ldr	r3, [pc, #700]	; (8006220 <UART_SetConfig+0x330>)
 8005f64:	4013      	ands	r3, r2
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	6812      	ldr	r2, [r2, #0]
 8005f6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f6c:	430b      	orrs	r3, r1
 8005f6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f76:	f023 010f 	bic.w	r1, r3, #15
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4aa6      	ldr	r2, [pc, #664]	; (8006224 <UART_SetConfig+0x334>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d177      	bne.n	8006080 <UART_SetConfig+0x190>
 8005f90:	4ba5      	ldr	r3, [pc, #660]	; (8006228 <UART_SetConfig+0x338>)
 8005f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f98:	2b28      	cmp	r3, #40	; 0x28
 8005f9a:	d86d      	bhi.n	8006078 <UART_SetConfig+0x188>
 8005f9c:	a201      	add	r2, pc, #4	; (adr r2, 8005fa4 <UART_SetConfig+0xb4>)
 8005f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa2:	bf00      	nop
 8005fa4:	08006049 	.word	0x08006049
 8005fa8:	08006079 	.word	0x08006079
 8005fac:	08006079 	.word	0x08006079
 8005fb0:	08006079 	.word	0x08006079
 8005fb4:	08006079 	.word	0x08006079
 8005fb8:	08006079 	.word	0x08006079
 8005fbc:	08006079 	.word	0x08006079
 8005fc0:	08006079 	.word	0x08006079
 8005fc4:	08006051 	.word	0x08006051
 8005fc8:	08006079 	.word	0x08006079
 8005fcc:	08006079 	.word	0x08006079
 8005fd0:	08006079 	.word	0x08006079
 8005fd4:	08006079 	.word	0x08006079
 8005fd8:	08006079 	.word	0x08006079
 8005fdc:	08006079 	.word	0x08006079
 8005fe0:	08006079 	.word	0x08006079
 8005fe4:	08006059 	.word	0x08006059
 8005fe8:	08006079 	.word	0x08006079
 8005fec:	08006079 	.word	0x08006079
 8005ff0:	08006079 	.word	0x08006079
 8005ff4:	08006079 	.word	0x08006079
 8005ff8:	08006079 	.word	0x08006079
 8005ffc:	08006079 	.word	0x08006079
 8006000:	08006079 	.word	0x08006079
 8006004:	08006061 	.word	0x08006061
 8006008:	08006079 	.word	0x08006079
 800600c:	08006079 	.word	0x08006079
 8006010:	08006079 	.word	0x08006079
 8006014:	08006079 	.word	0x08006079
 8006018:	08006079 	.word	0x08006079
 800601c:	08006079 	.word	0x08006079
 8006020:	08006079 	.word	0x08006079
 8006024:	08006069 	.word	0x08006069
 8006028:	08006079 	.word	0x08006079
 800602c:	08006079 	.word	0x08006079
 8006030:	08006079 	.word	0x08006079
 8006034:	08006079 	.word	0x08006079
 8006038:	08006079 	.word	0x08006079
 800603c:	08006079 	.word	0x08006079
 8006040:	08006079 	.word	0x08006079
 8006044:	08006071 	.word	0x08006071
 8006048:	2301      	movs	r3, #1
 800604a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800604e:	e326      	b.n	800669e <UART_SetConfig+0x7ae>
 8006050:	2304      	movs	r3, #4
 8006052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006056:	e322      	b.n	800669e <UART_SetConfig+0x7ae>
 8006058:	2308      	movs	r3, #8
 800605a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800605e:	e31e      	b.n	800669e <UART_SetConfig+0x7ae>
 8006060:	2310      	movs	r3, #16
 8006062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006066:	e31a      	b.n	800669e <UART_SetConfig+0x7ae>
 8006068:	2320      	movs	r3, #32
 800606a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800606e:	e316      	b.n	800669e <UART_SetConfig+0x7ae>
 8006070:	2340      	movs	r3, #64	; 0x40
 8006072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006076:	e312      	b.n	800669e <UART_SetConfig+0x7ae>
 8006078:	2380      	movs	r3, #128	; 0x80
 800607a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800607e:	e30e      	b.n	800669e <UART_SetConfig+0x7ae>
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a69      	ldr	r2, [pc, #420]	; (800622c <UART_SetConfig+0x33c>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d130      	bne.n	80060ec <UART_SetConfig+0x1fc>
 800608a:	4b67      	ldr	r3, [pc, #412]	; (8006228 <UART_SetConfig+0x338>)
 800608c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800608e:	f003 0307 	and.w	r3, r3, #7
 8006092:	2b05      	cmp	r3, #5
 8006094:	d826      	bhi.n	80060e4 <UART_SetConfig+0x1f4>
 8006096:	a201      	add	r2, pc, #4	; (adr r2, 800609c <UART_SetConfig+0x1ac>)
 8006098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609c:	080060b5 	.word	0x080060b5
 80060a0:	080060bd 	.word	0x080060bd
 80060a4:	080060c5 	.word	0x080060c5
 80060a8:	080060cd 	.word	0x080060cd
 80060ac:	080060d5 	.word	0x080060d5
 80060b0:	080060dd 	.word	0x080060dd
 80060b4:	2300      	movs	r3, #0
 80060b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ba:	e2f0      	b.n	800669e <UART_SetConfig+0x7ae>
 80060bc:	2304      	movs	r3, #4
 80060be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060c2:	e2ec      	b.n	800669e <UART_SetConfig+0x7ae>
 80060c4:	2308      	movs	r3, #8
 80060c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ca:	e2e8      	b.n	800669e <UART_SetConfig+0x7ae>
 80060cc:	2310      	movs	r3, #16
 80060ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060d2:	e2e4      	b.n	800669e <UART_SetConfig+0x7ae>
 80060d4:	2320      	movs	r3, #32
 80060d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060da:	e2e0      	b.n	800669e <UART_SetConfig+0x7ae>
 80060dc:	2340      	movs	r3, #64	; 0x40
 80060de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060e2:	e2dc      	b.n	800669e <UART_SetConfig+0x7ae>
 80060e4:	2380      	movs	r3, #128	; 0x80
 80060e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ea:	e2d8      	b.n	800669e <UART_SetConfig+0x7ae>
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a4f      	ldr	r2, [pc, #316]	; (8006230 <UART_SetConfig+0x340>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d130      	bne.n	8006158 <UART_SetConfig+0x268>
 80060f6:	4b4c      	ldr	r3, [pc, #304]	; (8006228 <UART_SetConfig+0x338>)
 80060f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060fa:	f003 0307 	and.w	r3, r3, #7
 80060fe:	2b05      	cmp	r3, #5
 8006100:	d826      	bhi.n	8006150 <UART_SetConfig+0x260>
 8006102:	a201      	add	r2, pc, #4	; (adr r2, 8006108 <UART_SetConfig+0x218>)
 8006104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006108:	08006121 	.word	0x08006121
 800610c:	08006129 	.word	0x08006129
 8006110:	08006131 	.word	0x08006131
 8006114:	08006139 	.word	0x08006139
 8006118:	08006141 	.word	0x08006141
 800611c:	08006149 	.word	0x08006149
 8006120:	2300      	movs	r3, #0
 8006122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006126:	e2ba      	b.n	800669e <UART_SetConfig+0x7ae>
 8006128:	2304      	movs	r3, #4
 800612a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800612e:	e2b6      	b.n	800669e <UART_SetConfig+0x7ae>
 8006130:	2308      	movs	r3, #8
 8006132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006136:	e2b2      	b.n	800669e <UART_SetConfig+0x7ae>
 8006138:	2310      	movs	r3, #16
 800613a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800613e:	e2ae      	b.n	800669e <UART_SetConfig+0x7ae>
 8006140:	2320      	movs	r3, #32
 8006142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006146:	e2aa      	b.n	800669e <UART_SetConfig+0x7ae>
 8006148:	2340      	movs	r3, #64	; 0x40
 800614a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800614e:	e2a6      	b.n	800669e <UART_SetConfig+0x7ae>
 8006150:	2380      	movs	r3, #128	; 0x80
 8006152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006156:	e2a2      	b.n	800669e <UART_SetConfig+0x7ae>
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a35      	ldr	r2, [pc, #212]	; (8006234 <UART_SetConfig+0x344>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d130      	bne.n	80061c4 <UART_SetConfig+0x2d4>
 8006162:	4b31      	ldr	r3, [pc, #196]	; (8006228 <UART_SetConfig+0x338>)
 8006164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006166:	f003 0307 	and.w	r3, r3, #7
 800616a:	2b05      	cmp	r3, #5
 800616c:	d826      	bhi.n	80061bc <UART_SetConfig+0x2cc>
 800616e:	a201      	add	r2, pc, #4	; (adr r2, 8006174 <UART_SetConfig+0x284>)
 8006170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006174:	0800618d 	.word	0x0800618d
 8006178:	08006195 	.word	0x08006195
 800617c:	0800619d 	.word	0x0800619d
 8006180:	080061a5 	.word	0x080061a5
 8006184:	080061ad 	.word	0x080061ad
 8006188:	080061b5 	.word	0x080061b5
 800618c:	2300      	movs	r3, #0
 800618e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006192:	e284      	b.n	800669e <UART_SetConfig+0x7ae>
 8006194:	2304      	movs	r3, #4
 8006196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800619a:	e280      	b.n	800669e <UART_SetConfig+0x7ae>
 800619c:	2308      	movs	r3, #8
 800619e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061a2:	e27c      	b.n	800669e <UART_SetConfig+0x7ae>
 80061a4:	2310      	movs	r3, #16
 80061a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061aa:	e278      	b.n	800669e <UART_SetConfig+0x7ae>
 80061ac:	2320      	movs	r3, #32
 80061ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061b2:	e274      	b.n	800669e <UART_SetConfig+0x7ae>
 80061b4:	2340      	movs	r3, #64	; 0x40
 80061b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ba:	e270      	b.n	800669e <UART_SetConfig+0x7ae>
 80061bc:	2380      	movs	r3, #128	; 0x80
 80061be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061c2:	e26c      	b.n	800669e <UART_SetConfig+0x7ae>
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a1b      	ldr	r2, [pc, #108]	; (8006238 <UART_SetConfig+0x348>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d142      	bne.n	8006254 <UART_SetConfig+0x364>
 80061ce:	4b16      	ldr	r3, [pc, #88]	; (8006228 <UART_SetConfig+0x338>)
 80061d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d2:	f003 0307 	and.w	r3, r3, #7
 80061d6:	2b05      	cmp	r3, #5
 80061d8:	d838      	bhi.n	800624c <UART_SetConfig+0x35c>
 80061da:	a201      	add	r2, pc, #4	; (adr r2, 80061e0 <UART_SetConfig+0x2f0>)
 80061dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e0:	080061f9 	.word	0x080061f9
 80061e4:	08006201 	.word	0x08006201
 80061e8:	08006209 	.word	0x08006209
 80061ec:	08006211 	.word	0x08006211
 80061f0:	0800623d 	.word	0x0800623d
 80061f4:	08006245 	.word	0x08006245
 80061f8:	2300      	movs	r3, #0
 80061fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061fe:	e24e      	b.n	800669e <UART_SetConfig+0x7ae>
 8006200:	2304      	movs	r3, #4
 8006202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006206:	e24a      	b.n	800669e <UART_SetConfig+0x7ae>
 8006208:	2308      	movs	r3, #8
 800620a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800620e:	e246      	b.n	800669e <UART_SetConfig+0x7ae>
 8006210:	2310      	movs	r3, #16
 8006212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006216:	e242      	b.n	800669e <UART_SetConfig+0x7ae>
 8006218:	cfff69f3 	.word	0xcfff69f3
 800621c:	58000c00 	.word	0x58000c00
 8006220:	11fff4ff 	.word	0x11fff4ff
 8006224:	40011000 	.word	0x40011000
 8006228:	58024400 	.word	0x58024400
 800622c:	40004400 	.word	0x40004400
 8006230:	40004800 	.word	0x40004800
 8006234:	40004c00 	.word	0x40004c00
 8006238:	40005000 	.word	0x40005000
 800623c:	2320      	movs	r3, #32
 800623e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006242:	e22c      	b.n	800669e <UART_SetConfig+0x7ae>
 8006244:	2340      	movs	r3, #64	; 0x40
 8006246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800624a:	e228      	b.n	800669e <UART_SetConfig+0x7ae>
 800624c:	2380      	movs	r3, #128	; 0x80
 800624e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006252:	e224      	b.n	800669e <UART_SetConfig+0x7ae>
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4ab1      	ldr	r2, [pc, #708]	; (8006520 <UART_SetConfig+0x630>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d176      	bne.n	800634c <UART_SetConfig+0x45c>
 800625e:	4bb1      	ldr	r3, [pc, #708]	; (8006524 <UART_SetConfig+0x634>)
 8006260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006262:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006266:	2b28      	cmp	r3, #40	; 0x28
 8006268:	d86c      	bhi.n	8006344 <UART_SetConfig+0x454>
 800626a:	a201      	add	r2, pc, #4	; (adr r2, 8006270 <UART_SetConfig+0x380>)
 800626c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006270:	08006315 	.word	0x08006315
 8006274:	08006345 	.word	0x08006345
 8006278:	08006345 	.word	0x08006345
 800627c:	08006345 	.word	0x08006345
 8006280:	08006345 	.word	0x08006345
 8006284:	08006345 	.word	0x08006345
 8006288:	08006345 	.word	0x08006345
 800628c:	08006345 	.word	0x08006345
 8006290:	0800631d 	.word	0x0800631d
 8006294:	08006345 	.word	0x08006345
 8006298:	08006345 	.word	0x08006345
 800629c:	08006345 	.word	0x08006345
 80062a0:	08006345 	.word	0x08006345
 80062a4:	08006345 	.word	0x08006345
 80062a8:	08006345 	.word	0x08006345
 80062ac:	08006345 	.word	0x08006345
 80062b0:	08006325 	.word	0x08006325
 80062b4:	08006345 	.word	0x08006345
 80062b8:	08006345 	.word	0x08006345
 80062bc:	08006345 	.word	0x08006345
 80062c0:	08006345 	.word	0x08006345
 80062c4:	08006345 	.word	0x08006345
 80062c8:	08006345 	.word	0x08006345
 80062cc:	08006345 	.word	0x08006345
 80062d0:	0800632d 	.word	0x0800632d
 80062d4:	08006345 	.word	0x08006345
 80062d8:	08006345 	.word	0x08006345
 80062dc:	08006345 	.word	0x08006345
 80062e0:	08006345 	.word	0x08006345
 80062e4:	08006345 	.word	0x08006345
 80062e8:	08006345 	.word	0x08006345
 80062ec:	08006345 	.word	0x08006345
 80062f0:	08006335 	.word	0x08006335
 80062f4:	08006345 	.word	0x08006345
 80062f8:	08006345 	.word	0x08006345
 80062fc:	08006345 	.word	0x08006345
 8006300:	08006345 	.word	0x08006345
 8006304:	08006345 	.word	0x08006345
 8006308:	08006345 	.word	0x08006345
 800630c:	08006345 	.word	0x08006345
 8006310:	0800633d 	.word	0x0800633d
 8006314:	2301      	movs	r3, #1
 8006316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800631a:	e1c0      	b.n	800669e <UART_SetConfig+0x7ae>
 800631c:	2304      	movs	r3, #4
 800631e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006322:	e1bc      	b.n	800669e <UART_SetConfig+0x7ae>
 8006324:	2308      	movs	r3, #8
 8006326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800632a:	e1b8      	b.n	800669e <UART_SetConfig+0x7ae>
 800632c:	2310      	movs	r3, #16
 800632e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006332:	e1b4      	b.n	800669e <UART_SetConfig+0x7ae>
 8006334:	2320      	movs	r3, #32
 8006336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800633a:	e1b0      	b.n	800669e <UART_SetConfig+0x7ae>
 800633c:	2340      	movs	r3, #64	; 0x40
 800633e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006342:	e1ac      	b.n	800669e <UART_SetConfig+0x7ae>
 8006344:	2380      	movs	r3, #128	; 0x80
 8006346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800634a:	e1a8      	b.n	800669e <UART_SetConfig+0x7ae>
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a75      	ldr	r2, [pc, #468]	; (8006528 <UART_SetConfig+0x638>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d130      	bne.n	80063b8 <UART_SetConfig+0x4c8>
 8006356:	4b73      	ldr	r3, [pc, #460]	; (8006524 <UART_SetConfig+0x634>)
 8006358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800635a:	f003 0307 	and.w	r3, r3, #7
 800635e:	2b05      	cmp	r3, #5
 8006360:	d826      	bhi.n	80063b0 <UART_SetConfig+0x4c0>
 8006362:	a201      	add	r2, pc, #4	; (adr r2, 8006368 <UART_SetConfig+0x478>)
 8006364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006368:	08006381 	.word	0x08006381
 800636c:	08006389 	.word	0x08006389
 8006370:	08006391 	.word	0x08006391
 8006374:	08006399 	.word	0x08006399
 8006378:	080063a1 	.word	0x080063a1
 800637c:	080063a9 	.word	0x080063a9
 8006380:	2300      	movs	r3, #0
 8006382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006386:	e18a      	b.n	800669e <UART_SetConfig+0x7ae>
 8006388:	2304      	movs	r3, #4
 800638a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800638e:	e186      	b.n	800669e <UART_SetConfig+0x7ae>
 8006390:	2308      	movs	r3, #8
 8006392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006396:	e182      	b.n	800669e <UART_SetConfig+0x7ae>
 8006398:	2310      	movs	r3, #16
 800639a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800639e:	e17e      	b.n	800669e <UART_SetConfig+0x7ae>
 80063a0:	2320      	movs	r3, #32
 80063a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063a6:	e17a      	b.n	800669e <UART_SetConfig+0x7ae>
 80063a8:	2340      	movs	r3, #64	; 0x40
 80063aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ae:	e176      	b.n	800669e <UART_SetConfig+0x7ae>
 80063b0:	2380      	movs	r3, #128	; 0x80
 80063b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063b6:	e172      	b.n	800669e <UART_SetConfig+0x7ae>
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a5b      	ldr	r2, [pc, #364]	; (800652c <UART_SetConfig+0x63c>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d130      	bne.n	8006424 <UART_SetConfig+0x534>
 80063c2:	4b58      	ldr	r3, [pc, #352]	; (8006524 <UART_SetConfig+0x634>)
 80063c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c6:	f003 0307 	and.w	r3, r3, #7
 80063ca:	2b05      	cmp	r3, #5
 80063cc:	d826      	bhi.n	800641c <UART_SetConfig+0x52c>
 80063ce:	a201      	add	r2, pc, #4	; (adr r2, 80063d4 <UART_SetConfig+0x4e4>)
 80063d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d4:	080063ed 	.word	0x080063ed
 80063d8:	080063f5 	.word	0x080063f5
 80063dc:	080063fd 	.word	0x080063fd
 80063e0:	08006405 	.word	0x08006405
 80063e4:	0800640d 	.word	0x0800640d
 80063e8:	08006415 	.word	0x08006415
 80063ec:	2300      	movs	r3, #0
 80063ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063f2:	e154      	b.n	800669e <UART_SetConfig+0x7ae>
 80063f4:	2304      	movs	r3, #4
 80063f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063fa:	e150      	b.n	800669e <UART_SetConfig+0x7ae>
 80063fc:	2308      	movs	r3, #8
 80063fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006402:	e14c      	b.n	800669e <UART_SetConfig+0x7ae>
 8006404:	2310      	movs	r3, #16
 8006406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800640a:	e148      	b.n	800669e <UART_SetConfig+0x7ae>
 800640c:	2320      	movs	r3, #32
 800640e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006412:	e144      	b.n	800669e <UART_SetConfig+0x7ae>
 8006414:	2340      	movs	r3, #64	; 0x40
 8006416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800641a:	e140      	b.n	800669e <UART_SetConfig+0x7ae>
 800641c:	2380      	movs	r3, #128	; 0x80
 800641e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006422:	e13c      	b.n	800669e <UART_SetConfig+0x7ae>
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a41      	ldr	r2, [pc, #260]	; (8006530 <UART_SetConfig+0x640>)
 800642a:	4293      	cmp	r3, r2
 800642c:	f040 8082 	bne.w	8006534 <UART_SetConfig+0x644>
 8006430:	4b3c      	ldr	r3, [pc, #240]	; (8006524 <UART_SetConfig+0x634>)
 8006432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006434:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006438:	2b28      	cmp	r3, #40	; 0x28
 800643a:	d86d      	bhi.n	8006518 <UART_SetConfig+0x628>
 800643c:	a201      	add	r2, pc, #4	; (adr r2, 8006444 <UART_SetConfig+0x554>)
 800643e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006442:	bf00      	nop
 8006444:	080064e9 	.word	0x080064e9
 8006448:	08006519 	.word	0x08006519
 800644c:	08006519 	.word	0x08006519
 8006450:	08006519 	.word	0x08006519
 8006454:	08006519 	.word	0x08006519
 8006458:	08006519 	.word	0x08006519
 800645c:	08006519 	.word	0x08006519
 8006460:	08006519 	.word	0x08006519
 8006464:	080064f1 	.word	0x080064f1
 8006468:	08006519 	.word	0x08006519
 800646c:	08006519 	.word	0x08006519
 8006470:	08006519 	.word	0x08006519
 8006474:	08006519 	.word	0x08006519
 8006478:	08006519 	.word	0x08006519
 800647c:	08006519 	.word	0x08006519
 8006480:	08006519 	.word	0x08006519
 8006484:	080064f9 	.word	0x080064f9
 8006488:	08006519 	.word	0x08006519
 800648c:	08006519 	.word	0x08006519
 8006490:	08006519 	.word	0x08006519
 8006494:	08006519 	.word	0x08006519
 8006498:	08006519 	.word	0x08006519
 800649c:	08006519 	.word	0x08006519
 80064a0:	08006519 	.word	0x08006519
 80064a4:	08006501 	.word	0x08006501
 80064a8:	08006519 	.word	0x08006519
 80064ac:	08006519 	.word	0x08006519
 80064b0:	08006519 	.word	0x08006519
 80064b4:	08006519 	.word	0x08006519
 80064b8:	08006519 	.word	0x08006519
 80064bc:	08006519 	.word	0x08006519
 80064c0:	08006519 	.word	0x08006519
 80064c4:	08006509 	.word	0x08006509
 80064c8:	08006519 	.word	0x08006519
 80064cc:	08006519 	.word	0x08006519
 80064d0:	08006519 	.word	0x08006519
 80064d4:	08006519 	.word	0x08006519
 80064d8:	08006519 	.word	0x08006519
 80064dc:	08006519 	.word	0x08006519
 80064e0:	08006519 	.word	0x08006519
 80064e4:	08006511 	.word	0x08006511
 80064e8:	2301      	movs	r3, #1
 80064ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ee:	e0d6      	b.n	800669e <UART_SetConfig+0x7ae>
 80064f0:	2304      	movs	r3, #4
 80064f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064f6:	e0d2      	b.n	800669e <UART_SetConfig+0x7ae>
 80064f8:	2308      	movs	r3, #8
 80064fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064fe:	e0ce      	b.n	800669e <UART_SetConfig+0x7ae>
 8006500:	2310      	movs	r3, #16
 8006502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006506:	e0ca      	b.n	800669e <UART_SetConfig+0x7ae>
 8006508:	2320      	movs	r3, #32
 800650a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800650e:	e0c6      	b.n	800669e <UART_SetConfig+0x7ae>
 8006510:	2340      	movs	r3, #64	; 0x40
 8006512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006516:	e0c2      	b.n	800669e <UART_SetConfig+0x7ae>
 8006518:	2380      	movs	r3, #128	; 0x80
 800651a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800651e:	e0be      	b.n	800669e <UART_SetConfig+0x7ae>
 8006520:	40011400 	.word	0x40011400
 8006524:	58024400 	.word	0x58024400
 8006528:	40007800 	.word	0x40007800
 800652c:	40007c00 	.word	0x40007c00
 8006530:	40011800 	.word	0x40011800
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4aad      	ldr	r2, [pc, #692]	; (80067f0 <UART_SetConfig+0x900>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d176      	bne.n	800662c <UART_SetConfig+0x73c>
 800653e:	4bad      	ldr	r3, [pc, #692]	; (80067f4 <UART_SetConfig+0x904>)
 8006540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006542:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006546:	2b28      	cmp	r3, #40	; 0x28
 8006548:	d86c      	bhi.n	8006624 <UART_SetConfig+0x734>
 800654a:	a201      	add	r2, pc, #4	; (adr r2, 8006550 <UART_SetConfig+0x660>)
 800654c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006550:	080065f5 	.word	0x080065f5
 8006554:	08006625 	.word	0x08006625
 8006558:	08006625 	.word	0x08006625
 800655c:	08006625 	.word	0x08006625
 8006560:	08006625 	.word	0x08006625
 8006564:	08006625 	.word	0x08006625
 8006568:	08006625 	.word	0x08006625
 800656c:	08006625 	.word	0x08006625
 8006570:	080065fd 	.word	0x080065fd
 8006574:	08006625 	.word	0x08006625
 8006578:	08006625 	.word	0x08006625
 800657c:	08006625 	.word	0x08006625
 8006580:	08006625 	.word	0x08006625
 8006584:	08006625 	.word	0x08006625
 8006588:	08006625 	.word	0x08006625
 800658c:	08006625 	.word	0x08006625
 8006590:	08006605 	.word	0x08006605
 8006594:	08006625 	.word	0x08006625
 8006598:	08006625 	.word	0x08006625
 800659c:	08006625 	.word	0x08006625
 80065a0:	08006625 	.word	0x08006625
 80065a4:	08006625 	.word	0x08006625
 80065a8:	08006625 	.word	0x08006625
 80065ac:	08006625 	.word	0x08006625
 80065b0:	0800660d 	.word	0x0800660d
 80065b4:	08006625 	.word	0x08006625
 80065b8:	08006625 	.word	0x08006625
 80065bc:	08006625 	.word	0x08006625
 80065c0:	08006625 	.word	0x08006625
 80065c4:	08006625 	.word	0x08006625
 80065c8:	08006625 	.word	0x08006625
 80065cc:	08006625 	.word	0x08006625
 80065d0:	08006615 	.word	0x08006615
 80065d4:	08006625 	.word	0x08006625
 80065d8:	08006625 	.word	0x08006625
 80065dc:	08006625 	.word	0x08006625
 80065e0:	08006625 	.word	0x08006625
 80065e4:	08006625 	.word	0x08006625
 80065e8:	08006625 	.word	0x08006625
 80065ec:	08006625 	.word	0x08006625
 80065f0:	0800661d 	.word	0x0800661d
 80065f4:	2301      	movs	r3, #1
 80065f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065fa:	e050      	b.n	800669e <UART_SetConfig+0x7ae>
 80065fc:	2304      	movs	r3, #4
 80065fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006602:	e04c      	b.n	800669e <UART_SetConfig+0x7ae>
 8006604:	2308      	movs	r3, #8
 8006606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800660a:	e048      	b.n	800669e <UART_SetConfig+0x7ae>
 800660c:	2310      	movs	r3, #16
 800660e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006612:	e044      	b.n	800669e <UART_SetConfig+0x7ae>
 8006614:	2320      	movs	r3, #32
 8006616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800661a:	e040      	b.n	800669e <UART_SetConfig+0x7ae>
 800661c:	2340      	movs	r3, #64	; 0x40
 800661e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006622:	e03c      	b.n	800669e <UART_SetConfig+0x7ae>
 8006624:	2380      	movs	r3, #128	; 0x80
 8006626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800662a:	e038      	b.n	800669e <UART_SetConfig+0x7ae>
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a71      	ldr	r2, [pc, #452]	; (80067f8 <UART_SetConfig+0x908>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d130      	bne.n	8006698 <UART_SetConfig+0x7a8>
 8006636:	4b6f      	ldr	r3, [pc, #444]	; (80067f4 <UART_SetConfig+0x904>)
 8006638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800663a:	f003 0307 	and.w	r3, r3, #7
 800663e:	2b05      	cmp	r3, #5
 8006640:	d826      	bhi.n	8006690 <UART_SetConfig+0x7a0>
 8006642:	a201      	add	r2, pc, #4	; (adr r2, 8006648 <UART_SetConfig+0x758>)
 8006644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006648:	08006661 	.word	0x08006661
 800664c:	08006669 	.word	0x08006669
 8006650:	08006671 	.word	0x08006671
 8006654:	08006679 	.word	0x08006679
 8006658:	08006681 	.word	0x08006681
 800665c:	08006689 	.word	0x08006689
 8006660:	2302      	movs	r3, #2
 8006662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006666:	e01a      	b.n	800669e <UART_SetConfig+0x7ae>
 8006668:	2304      	movs	r3, #4
 800666a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800666e:	e016      	b.n	800669e <UART_SetConfig+0x7ae>
 8006670:	2308      	movs	r3, #8
 8006672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006676:	e012      	b.n	800669e <UART_SetConfig+0x7ae>
 8006678:	2310      	movs	r3, #16
 800667a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800667e:	e00e      	b.n	800669e <UART_SetConfig+0x7ae>
 8006680:	2320      	movs	r3, #32
 8006682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006686:	e00a      	b.n	800669e <UART_SetConfig+0x7ae>
 8006688:	2340      	movs	r3, #64	; 0x40
 800668a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800668e:	e006      	b.n	800669e <UART_SetConfig+0x7ae>
 8006690:	2380      	movs	r3, #128	; 0x80
 8006692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006696:	e002      	b.n	800669e <UART_SetConfig+0x7ae>
 8006698:	2380      	movs	r3, #128	; 0x80
 800669a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a55      	ldr	r2, [pc, #340]	; (80067f8 <UART_SetConfig+0x908>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	f040 80f8 	bne.w	800689a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066aa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80066ae:	2b20      	cmp	r3, #32
 80066b0:	dc46      	bgt.n	8006740 <UART_SetConfig+0x850>
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	db75      	blt.n	80067a2 <UART_SetConfig+0x8b2>
 80066b6:	3b02      	subs	r3, #2
 80066b8:	2b1e      	cmp	r3, #30
 80066ba:	d872      	bhi.n	80067a2 <UART_SetConfig+0x8b2>
 80066bc:	a201      	add	r2, pc, #4	; (adr r2, 80066c4 <UART_SetConfig+0x7d4>)
 80066be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c2:	bf00      	nop
 80066c4:	08006747 	.word	0x08006747
 80066c8:	080067a3 	.word	0x080067a3
 80066cc:	0800674f 	.word	0x0800674f
 80066d0:	080067a3 	.word	0x080067a3
 80066d4:	080067a3 	.word	0x080067a3
 80066d8:	080067a3 	.word	0x080067a3
 80066dc:	0800675f 	.word	0x0800675f
 80066e0:	080067a3 	.word	0x080067a3
 80066e4:	080067a3 	.word	0x080067a3
 80066e8:	080067a3 	.word	0x080067a3
 80066ec:	080067a3 	.word	0x080067a3
 80066f0:	080067a3 	.word	0x080067a3
 80066f4:	080067a3 	.word	0x080067a3
 80066f8:	080067a3 	.word	0x080067a3
 80066fc:	0800676f 	.word	0x0800676f
 8006700:	080067a3 	.word	0x080067a3
 8006704:	080067a3 	.word	0x080067a3
 8006708:	080067a3 	.word	0x080067a3
 800670c:	080067a3 	.word	0x080067a3
 8006710:	080067a3 	.word	0x080067a3
 8006714:	080067a3 	.word	0x080067a3
 8006718:	080067a3 	.word	0x080067a3
 800671c:	080067a3 	.word	0x080067a3
 8006720:	080067a3 	.word	0x080067a3
 8006724:	080067a3 	.word	0x080067a3
 8006728:	080067a3 	.word	0x080067a3
 800672c:	080067a3 	.word	0x080067a3
 8006730:	080067a3 	.word	0x080067a3
 8006734:	080067a3 	.word	0x080067a3
 8006738:	080067a3 	.word	0x080067a3
 800673c:	08006795 	.word	0x08006795
 8006740:	2b40      	cmp	r3, #64	; 0x40
 8006742:	d02a      	beq.n	800679a <UART_SetConfig+0x8aa>
 8006744:	e02d      	b.n	80067a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006746:	f7fe faa9 	bl	8004c9c <HAL_RCCEx_GetD3PCLK1Freq>
 800674a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800674c:	e02f      	b.n	80067ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800674e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006752:	4618      	mov	r0, r3
 8006754:	f7fe fab8 	bl	8004cc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800675c:	e027      	b.n	80067ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800675e:	f107 0318 	add.w	r3, r7, #24
 8006762:	4618      	mov	r0, r3
 8006764:	f7fe fc04 	bl	8004f70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800676c:	e01f      	b.n	80067ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800676e:	4b21      	ldr	r3, [pc, #132]	; (80067f4 <UART_SetConfig+0x904>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0320 	and.w	r3, r3, #32
 8006776:	2b00      	cmp	r3, #0
 8006778:	d009      	beq.n	800678e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800677a:	4b1e      	ldr	r3, [pc, #120]	; (80067f4 <UART_SetConfig+0x904>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	08db      	lsrs	r3, r3, #3
 8006780:	f003 0303 	and.w	r3, r3, #3
 8006784:	4a1d      	ldr	r2, [pc, #116]	; (80067fc <UART_SetConfig+0x90c>)
 8006786:	fa22 f303 	lsr.w	r3, r2, r3
 800678a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800678c:	e00f      	b.n	80067ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800678e:	4b1b      	ldr	r3, [pc, #108]	; (80067fc <UART_SetConfig+0x90c>)
 8006790:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006792:	e00c      	b.n	80067ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006794:	4b1a      	ldr	r3, [pc, #104]	; (8006800 <UART_SetConfig+0x910>)
 8006796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006798:	e009      	b.n	80067ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800679a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800679e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067a0:	e005      	b.n	80067ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80067a2:	2300      	movs	r3, #0
 80067a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80067ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80067ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 81ee 	beq.w	8006b92 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ba:	4a12      	ldr	r2, [pc, #72]	; (8006804 <UART_SetConfig+0x914>)
 80067bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067c0:	461a      	mov	r2, r3
 80067c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80067c8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	4613      	mov	r3, r2
 80067d0:	005b      	lsls	r3, r3, #1
 80067d2:	4413      	add	r3, r2
 80067d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d305      	bcc.n	80067e6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d910      	bls.n	8006808 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80067ec:	e1d1      	b.n	8006b92 <UART_SetConfig+0xca2>
 80067ee:	bf00      	nop
 80067f0:	40011c00 	.word	0x40011c00
 80067f4:	58024400 	.word	0x58024400
 80067f8:	58000c00 	.word	0x58000c00
 80067fc:	03d09000 	.word	0x03d09000
 8006800:	003d0900 	.word	0x003d0900
 8006804:	0800731c 	.word	0x0800731c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800680a:	2200      	movs	r2, #0
 800680c:	60bb      	str	r3, [r7, #8]
 800680e:	60fa      	str	r2, [r7, #12]
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006814:	4ac0      	ldr	r2, [pc, #768]	; (8006b18 <UART_SetConfig+0xc28>)
 8006816:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800681a:	b29b      	uxth	r3, r3
 800681c:	2200      	movs	r2, #0
 800681e:	603b      	str	r3, [r7, #0]
 8006820:	607a      	str	r2, [r7, #4]
 8006822:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006826:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800682a:	f7f9 fd77 	bl	800031c <__aeabi_uldivmod>
 800682e:	4602      	mov	r2, r0
 8006830:	460b      	mov	r3, r1
 8006832:	4610      	mov	r0, r2
 8006834:	4619      	mov	r1, r3
 8006836:	f04f 0200 	mov.w	r2, #0
 800683a:	f04f 0300 	mov.w	r3, #0
 800683e:	020b      	lsls	r3, r1, #8
 8006840:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006844:	0202      	lsls	r2, r0, #8
 8006846:	6979      	ldr	r1, [r7, #20]
 8006848:	6849      	ldr	r1, [r1, #4]
 800684a:	0849      	lsrs	r1, r1, #1
 800684c:	2000      	movs	r0, #0
 800684e:	460c      	mov	r4, r1
 8006850:	4605      	mov	r5, r0
 8006852:	eb12 0804 	adds.w	r8, r2, r4
 8006856:	eb43 0905 	adc.w	r9, r3, r5
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	469a      	mov	sl, r3
 8006862:	4693      	mov	fp, r2
 8006864:	4652      	mov	r2, sl
 8006866:	465b      	mov	r3, fp
 8006868:	4640      	mov	r0, r8
 800686a:	4649      	mov	r1, r9
 800686c:	f7f9 fd56 	bl	800031c <__aeabi_uldivmod>
 8006870:	4602      	mov	r2, r0
 8006872:	460b      	mov	r3, r1
 8006874:	4613      	mov	r3, r2
 8006876:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800687e:	d308      	bcc.n	8006892 <UART_SetConfig+0x9a2>
 8006880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006882:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006886:	d204      	bcs.n	8006892 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800688e:	60da      	str	r2, [r3, #12]
 8006890:	e17f      	b.n	8006b92 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006898:	e17b      	b.n	8006b92 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	69db      	ldr	r3, [r3, #28]
 800689e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068a2:	f040 80bd 	bne.w	8006a20 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80068a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80068aa:	2b20      	cmp	r3, #32
 80068ac:	dc48      	bgt.n	8006940 <UART_SetConfig+0xa50>
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	db7b      	blt.n	80069aa <UART_SetConfig+0xaba>
 80068b2:	2b20      	cmp	r3, #32
 80068b4:	d879      	bhi.n	80069aa <UART_SetConfig+0xaba>
 80068b6:	a201      	add	r2, pc, #4	; (adr r2, 80068bc <UART_SetConfig+0x9cc>)
 80068b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068bc:	08006947 	.word	0x08006947
 80068c0:	0800694f 	.word	0x0800694f
 80068c4:	080069ab 	.word	0x080069ab
 80068c8:	080069ab 	.word	0x080069ab
 80068cc:	08006957 	.word	0x08006957
 80068d0:	080069ab 	.word	0x080069ab
 80068d4:	080069ab 	.word	0x080069ab
 80068d8:	080069ab 	.word	0x080069ab
 80068dc:	08006967 	.word	0x08006967
 80068e0:	080069ab 	.word	0x080069ab
 80068e4:	080069ab 	.word	0x080069ab
 80068e8:	080069ab 	.word	0x080069ab
 80068ec:	080069ab 	.word	0x080069ab
 80068f0:	080069ab 	.word	0x080069ab
 80068f4:	080069ab 	.word	0x080069ab
 80068f8:	080069ab 	.word	0x080069ab
 80068fc:	08006977 	.word	0x08006977
 8006900:	080069ab 	.word	0x080069ab
 8006904:	080069ab 	.word	0x080069ab
 8006908:	080069ab 	.word	0x080069ab
 800690c:	080069ab 	.word	0x080069ab
 8006910:	080069ab 	.word	0x080069ab
 8006914:	080069ab 	.word	0x080069ab
 8006918:	080069ab 	.word	0x080069ab
 800691c:	080069ab 	.word	0x080069ab
 8006920:	080069ab 	.word	0x080069ab
 8006924:	080069ab 	.word	0x080069ab
 8006928:	080069ab 	.word	0x080069ab
 800692c:	080069ab 	.word	0x080069ab
 8006930:	080069ab 	.word	0x080069ab
 8006934:	080069ab 	.word	0x080069ab
 8006938:	080069ab 	.word	0x080069ab
 800693c:	0800699d 	.word	0x0800699d
 8006940:	2b40      	cmp	r3, #64	; 0x40
 8006942:	d02e      	beq.n	80069a2 <UART_SetConfig+0xab2>
 8006944:	e031      	b.n	80069aa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006946:	f7fc ffdd 	bl	8003904 <HAL_RCC_GetPCLK1Freq>
 800694a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800694c:	e033      	b.n	80069b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800694e:	f7fc ffef 	bl	8003930 <HAL_RCC_GetPCLK2Freq>
 8006952:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006954:	e02f      	b.n	80069b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800695a:	4618      	mov	r0, r3
 800695c:	f7fe f9b4 	bl	8004cc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006962:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006964:	e027      	b.n	80069b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006966:	f107 0318 	add.w	r3, r7, #24
 800696a:	4618      	mov	r0, r3
 800696c:	f7fe fb00 	bl	8004f70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006974:	e01f      	b.n	80069b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006976:	4b69      	ldr	r3, [pc, #420]	; (8006b1c <UART_SetConfig+0xc2c>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0320 	and.w	r3, r3, #32
 800697e:	2b00      	cmp	r3, #0
 8006980:	d009      	beq.n	8006996 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006982:	4b66      	ldr	r3, [pc, #408]	; (8006b1c <UART_SetConfig+0xc2c>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	08db      	lsrs	r3, r3, #3
 8006988:	f003 0303 	and.w	r3, r3, #3
 800698c:	4a64      	ldr	r2, [pc, #400]	; (8006b20 <UART_SetConfig+0xc30>)
 800698e:	fa22 f303 	lsr.w	r3, r2, r3
 8006992:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006994:	e00f      	b.n	80069b6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006996:	4b62      	ldr	r3, [pc, #392]	; (8006b20 <UART_SetConfig+0xc30>)
 8006998:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800699a:	e00c      	b.n	80069b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800699c:	4b61      	ldr	r3, [pc, #388]	; (8006b24 <UART_SetConfig+0xc34>)
 800699e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069a0:	e009      	b.n	80069b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069a8:	e005      	b.n	80069b6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80069aa:	2300      	movs	r3, #0
 80069ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80069b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f000 80ea 	beq.w	8006b92 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c2:	4a55      	ldr	r2, [pc, #340]	; (8006b18 <UART_SetConfig+0xc28>)
 80069c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069c8:	461a      	mov	r2, r3
 80069ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80069d0:	005a      	lsls	r2, r3, #1
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	085b      	lsrs	r3, r3, #1
 80069d8:	441a      	add	r2, r3
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e6:	2b0f      	cmp	r3, #15
 80069e8:	d916      	bls.n	8006a18 <UART_SetConfig+0xb28>
 80069ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069f0:	d212      	bcs.n	8006a18 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	f023 030f 	bic.w	r3, r3, #15
 80069fa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fe:	085b      	lsrs	r3, r3, #1
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	f003 0307 	and.w	r3, r3, #7
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006a14:	60da      	str	r2, [r3, #12]
 8006a16:	e0bc      	b.n	8006b92 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006a1e:	e0b8      	b.n	8006b92 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a20:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006a24:	2b20      	cmp	r3, #32
 8006a26:	dc4b      	bgt.n	8006ac0 <UART_SetConfig+0xbd0>
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f2c0 8087 	blt.w	8006b3c <UART_SetConfig+0xc4c>
 8006a2e:	2b20      	cmp	r3, #32
 8006a30:	f200 8084 	bhi.w	8006b3c <UART_SetConfig+0xc4c>
 8006a34:	a201      	add	r2, pc, #4	; (adr r2, 8006a3c <UART_SetConfig+0xb4c>)
 8006a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3a:	bf00      	nop
 8006a3c:	08006ac7 	.word	0x08006ac7
 8006a40:	08006acf 	.word	0x08006acf
 8006a44:	08006b3d 	.word	0x08006b3d
 8006a48:	08006b3d 	.word	0x08006b3d
 8006a4c:	08006ad7 	.word	0x08006ad7
 8006a50:	08006b3d 	.word	0x08006b3d
 8006a54:	08006b3d 	.word	0x08006b3d
 8006a58:	08006b3d 	.word	0x08006b3d
 8006a5c:	08006ae7 	.word	0x08006ae7
 8006a60:	08006b3d 	.word	0x08006b3d
 8006a64:	08006b3d 	.word	0x08006b3d
 8006a68:	08006b3d 	.word	0x08006b3d
 8006a6c:	08006b3d 	.word	0x08006b3d
 8006a70:	08006b3d 	.word	0x08006b3d
 8006a74:	08006b3d 	.word	0x08006b3d
 8006a78:	08006b3d 	.word	0x08006b3d
 8006a7c:	08006af7 	.word	0x08006af7
 8006a80:	08006b3d 	.word	0x08006b3d
 8006a84:	08006b3d 	.word	0x08006b3d
 8006a88:	08006b3d 	.word	0x08006b3d
 8006a8c:	08006b3d 	.word	0x08006b3d
 8006a90:	08006b3d 	.word	0x08006b3d
 8006a94:	08006b3d 	.word	0x08006b3d
 8006a98:	08006b3d 	.word	0x08006b3d
 8006a9c:	08006b3d 	.word	0x08006b3d
 8006aa0:	08006b3d 	.word	0x08006b3d
 8006aa4:	08006b3d 	.word	0x08006b3d
 8006aa8:	08006b3d 	.word	0x08006b3d
 8006aac:	08006b3d 	.word	0x08006b3d
 8006ab0:	08006b3d 	.word	0x08006b3d
 8006ab4:	08006b3d 	.word	0x08006b3d
 8006ab8:	08006b3d 	.word	0x08006b3d
 8006abc:	08006b2f 	.word	0x08006b2f
 8006ac0:	2b40      	cmp	r3, #64	; 0x40
 8006ac2:	d037      	beq.n	8006b34 <UART_SetConfig+0xc44>
 8006ac4:	e03a      	b.n	8006b3c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ac6:	f7fc ff1d 	bl	8003904 <HAL_RCC_GetPCLK1Freq>
 8006aca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006acc:	e03c      	b.n	8006b48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ace:	f7fc ff2f 	bl	8003930 <HAL_RCC_GetPCLK2Freq>
 8006ad2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006ad4:	e038      	b.n	8006b48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7fe f8f4 	bl	8004cc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ae4:	e030      	b.n	8006b48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ae6:	f107 0318 	add.w	r3, r7, #24
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fe fa40 	bl	8004f70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006af4:	e028      	b.n	8006b48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006af6:	4b09      	ldr	r3, [pc, #36]	; (8006b1c <UART_SetConfig+0xc2c>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0320 	and.w	r3, r3, #32
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d012      	beq.n	8006b28 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b02:	4b06      	ldr	r3, [pc, #24]	; (8006b1c <UART_SetConfig+0xc2c>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	08db      	lsrs	r3, r3, #3
 8006b08:	f003 0303 	and.w	r3, r3, #3
 8006b0c:	4a04      	ldr	r2, [pc, #16]	; (8006b20 <UART_SetConfig+0xc30>)
 8006b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b14:	e018      	b.n	8006b48 <UART_SetConfig+0xc58>
 8006b16:	bf00      	nop
 8006b18:	0800731c 	.word	0x0800731c
 8006b1c:	58024400 	.word	0x58024400
 8006b20:	03d09000 	.word	0x03d09000
 8006b24:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006b28:	4b24      	ldr	r3, [pc, #144]	; (8006bbc <UART_SetConfig+0xccc>)
 8006b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b2c:	e00c      	b.n	8006b48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b2e:	4b24      	ldr	r3, [pc, #144]	; (8006bc0 <UART_SetConfig+0xcd0>)
 8006b30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b32:	e009      	b.n	8006b48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b3a:	e005      	b.n	8006b48 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006b46:	bf00      	nop
    }

    if (pclk != 0U)
 8006b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d021      	beq.n	8006b92 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b52:	4a1c      	ldr	r2, [pc, #112]	; (8006bc4 <UART_SetConfig+0xcd4>)
 8006b54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b58:	461a      	mov	r2, r3
 8006b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b5c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	085b      	lsrs	r3, r3, #1
 8006b66:	441a      	add	r2, r3
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b70:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b74:	2b0f      	cmp	r3, #15
 8006b76:	d909      	bls.n	8006b8c <UART_SetConfig+0xc9c>
 8006b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b7e:	d205      	bcs.n	8006b8c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	60da      	str	r2, [r3, #12]
 8006b8a:	e002      	b.n	8006b92 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	2200      	movs	r2, #0
 8006bac:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006bae:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3748      	adds	r7, #72	; 0x48
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bbc:	03d09000 	.word	0x03d09000
 8006bc0:	003d0900 	.word	0x003d0900
 8006bc4:	0800731c 	.word	0x0800731c

08006bc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd4:	f003 0301 	and.w	r3, r3, #1
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00a      	beq.n	8006bf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf6:	f003 0302 	and.w	r3, r3, #2
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00a      	beq.n	8006c14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	430a      	orrs	r2, r1
 8006c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c18:	f003 0304 	and.w	r3, r3, #4
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00a      	beq.n	8006c36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	430a      	orrs	r2, r1
 8006c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3a:	f003 0308 	and.w	r3, r3, #8
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00a      	beq.n	8006c58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	430a      	orrs	r2, r1
 8006c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5c:	f003 0310 	and.w	r3, r3, #16
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00a      	beq.n	8006c7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c7e:	f003 0320 	and.w	r3, r3, #32
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00a      	beq.n	8006c9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	430a      	orrs	r2, r1
 8006c9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d01a      	beq.n	8006cde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cc6:	d10a      	bne.n	8006cde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00a      	beq.n	8006d00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	605a      	str	r2, [r3, #4]
  }
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b098      	sub	sp, #96	; 0x60
 8006d10:	af02      	add	r7, sp, #8
 8006d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d1c:	f7fa ff56 	bl	8001bcc <HAL_GetTick>
 8006d20:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0308 	and.w	r3, r3, #8
 8006d2c:	2b08      	cmp	r3, #8
 8006d2e:	d12f      	bne.n	8006d90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f88e 	bl	8006e60 <UART_WaitOnFlagUntilTimeout>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d022      	beq.n	8006d90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d52:	e853 3f00 	ldrex	r3, [r3]
 8006d56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d5e:	653b      	str	r3, [r7, #80]	; 0x50
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	461a      	mov	r2, r3
 8006d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d68:	647b      	str	r3, [r7, #68]	; 0x44
 8006d6a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d70:	e841 2300 	strex	r3, r2, [r1]
 8006d74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d1e6      	bne.n	8006d4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2220      	movs	r2, #32
 8006d80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e063      	b.n	8006e58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0304 	and.w	r3, r3, #4
 8006d9a:	2b04      	cmp	r3, #4
 8006d9c:	d149      	bne.n	8006e32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006da2:	9300      	str	r3, [sp, #0]
 8006da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006da6:	2200      	movs	r2, #0
 8006da8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f857 	bl	8006e60 <UART_WaitOnFlagUntilTimeout>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d03c      	beq.n	8006e32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc0:	e853 3f00 	ldrex	r3, [r3]
 8006dc4:	623b      	str	r3, [r7, #32]
   return(result);
 8006dc6:	6a3b      	ldr	r3, [r7, #32]
 8006dc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dd6:	633b      	str	r3, [r7, #48]	; 0x30
 8006dd8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dde:	e841 2300 	strex	r3, r2, [r1]
 8006de2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1e6      	bne.n	8006db8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	3308      	adds	r3, #8
 8006df0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	e853 3f00 	ldrex	r3, [r3]
 8006df8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f023 0301 	bic.w	r3, r3, #1
 8006e00:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	3308      	adds	r3, #8
 8006e08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e0a:	61fa      	str	r2, [r7, #28]
 8006e0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0e:	69b9      	ldr	r1, [r7, #24]
 8006e10:	69fa      	ldr	r2, [r7, #28]
 8006e12:	e841 2300 	strex	r3, r2, [r1]
 8006e16:	617b      	str	r3, [r7, #20]
   return(result);
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1e5      	bne.n	8006dea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2220      	movs	r2, #32
 8006e22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e012      	b.n	8006e58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2220      	movs	r2, #32
 8006e36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2220      	movs	r2, #32
 8006e3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3758      	adds	r7, #88	; 0x58
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	603b      	str	r3, [r7, #0]
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e70:	e049      	b.n	8006f06 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e78:	d045      	beq.n	8006f06 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e7a:	f7fa fea7 	bl	8001bcc <HAL_GetTick>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	69ba      	ldr	r2, [r7, #24]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d302      	bcc.n	8006e90 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e048      	b.n	8006f26 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0304 	and.w	r3, r3, #4
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d031      	beq.n	8006f06 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	69db      	ldr	r3, [r3, #28]
 8006ea8:	f003 0308 	and.w	r3, r3, #8
 8006eac:	2b08      	cmp	r3, #8
 8006eae:	d110      	bne.n	8006ed2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2208      	movs	r2, #8
 8006eb6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f000 f839 	bl	8006f30 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2208      	movs	r2, #8
 8006ec2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e029      	b.n	8006f26 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	69db      	ldr	r3, [r3, #28]
 8006ed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006edc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ee0:	d111      	bne.n	8006f06 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006eea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f000 f81f 	bl	8006f30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2220      	movs	r2, #32
 8006ef6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e00f      	b.n	8006f26 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	69da      	ldr	r2, [r3, #28]
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	4013      	ands	r3, r2
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	bf0c      	ite	eq
 8006f16:	2301      	moveq	r3, #1
 8006f18:	2300      	movne	r3, #0
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	79fb      	ldrb	r3, [r7, #7]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d0a6      	beq.n	8006e72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
	...

08006f30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b095      	sub	sp, #84	; 0x54
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f40:	e853 3f00 	ldrex	r3, [r3]
 8006f44:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	461a      	mov	r2, r3
 8006f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f56:	643b      	str	r3, [r7, #64]	; 0x40
 8006f58:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f5e:	e841 2300 	strex	r3, r2, [r1]
 8006f62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1e6      	bne.n	8006f38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	3308      	adds	r3, #8
 8006f70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f72:	6a3b      	ldr	r3, [r7, #32]
 8006f74:	e853 3f00 	ldrex	r3, [r3]
 8006f78:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f7a:	69fa      	ldr	r2, [r7, #28]
 8006f7c:	4b1e      	ldr	r3, [pc, #120]	; (8006ff8 <UART_EndRxTransfer+0xc8>)
 8006f7e:	4013      	ands	r3, r2
 8006f80:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	3308      	adds	r3, #8
 8006f88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f92:	e841 2300 	strex	r3, r2, [r1]
 8006f96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1e5      	bne.n	8006f6a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d118      	bne.n	8006fd8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	e853 3f00 	ldrex	r3, [r3]
 8006fb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	f023 0310 	bic.w	r3, r3, #16
 8006fba:	647b      	str	r3, [r7, #68]	; 0x44
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fc4:	61bb      	str	r3, [r7, #24]
 8006fc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc8:	6979      	ldr	r1, [r7, #20]
 8006fca:	69ba      	ldr	r2, [r7, #24]
 8006fcc:	e841 2300 	strex	r3, r2, [r1]
 8006fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1e6      	bne.n	8006fa6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2220      	movs	r2, #32
 8006fdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006fec:	bf00      	nop
 8006fee:	3754      	adds	r7, #84	; 0x54
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr
 8006ff8:	effffffe 	.word	0xeffffffe

08006ffc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800700a:	2b01      	cmp	r3, #1
 800700c:	d101      	bne.n	8007012 <HAL_UARTEx_DisableFifoMode+0x16>
 800700e:	2302      	movs	r3, #2
 8007010:	e027      	b.n	8007062 <HAL_UARTEx_DisableFifoMode+0x66>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2201      	movs	r2, #1
 8007016:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2224      	movs	r2, #36	; 0x24
 800701e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f022 0201 	bic.w	r2, r2, #1
 8007038:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007040:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2220      	movs	r2, #32
 8007054:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr

0800706e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b084      	sub	sp, #16
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
 8007076:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800707e:	2b01      	cmp	r3, #1
 8007080:	d101      	bne.n	8007086 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007082:	2302      	movs	r3, #2
 8007084:	e02d      	b.n	80070e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2224      	movs	r2, #36	; 0x24
 8007092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f022 0201 	bic.w	r2, r2, #1
 80070ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	683a      	ldr	r2, [r7, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f850 	bl	8007168 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2220      	movs	r2, #32
 80070d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b084      	sub	sp, #16
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
 80070f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d101      	bne.n	8007102 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80070fe:	2302      	movs	r3, #2
 8007100:	e02d      	b.n	800715e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2224      	movs	r2, #36	; 0x24
 800710e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f022 0201 	bic.w	r2, r2, #1
 8007128:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	683a      	ldr	r2, [r7, #0]
 800713a:	430a      	orrs	r2, r1
 800713c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 f812 	bl	8007168 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2220      	movs	r2, #32
 8007150:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
	...

08007168 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007174:	2b00      	cmp	r3, #0
 8007176:	d108      	bne.n	800718a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007188:	e031      	b.n	80071ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800718a:	2310      	movs	r3, #16
 800718c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800718e:	2310      	movs	r3, #16
 8007190:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	0e5b      	lsrs	r3, r3, #25
 800719a:	b2db      	uxtb	r3, r3
 800719c:	f003 0307 	and.w	r3, r3, #7
 80071a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	0f5b      	lsrs	r3, r3, #29
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	f003 0307 	and.w	r3, r3, #7
 80071b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80071b2:	7bbb      	ldrb	r3, [r7, #14]
 80071b4:	7b3a      	ldrb	r2, [r7, #12]
 80071b6:	4911      	ldr	r1, [pc, #68]	; (80071fc <UARTEx_SetNbDataToProcess+0x94>)
 80071b8:	5c8a      	ldrb	r2, [r1, r2]
 80071ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80071be:	7b3a      	ldrb	r2, [r7, #12]
 80071c0:	490f      	ldr	r1, [pc, #60]	; (8007200 <UARTEx_SetNbDataToProcess+0x98>)
 80071c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80071c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
 80071d2:	7b7a      	ldrb	r2, [r7, #13]
 80071d4:	4909      	ldr	r1, [pc, #36]	; (80071fc <UARTEx_SetNbDataToProcess+0x94>)
 80071d6:	5c8a      	ldrb	r2, [r1, r2]
 80071d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80071dc:	7b7a      	ldrb	r2, [r7, #13]
 80071de:	4908      	ldr	r1, [pc, #32]	; (8007200 <UARTEx_SetNbDataToProcess+0x98>)
 80071e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80071e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80071ee:	bf00      	nop
 80071f0:	3714      	adds	r7, #20
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	08007334 	.word	0x08007334
 8007200:	0800733c 	.word	0x0800733c

08007204 <memset>:
 8007204:	4402      	add	r2, r0
 8007206:	4603      	mov	r3, r0
 8007208:	4293      	cmp	r3, r2
 800720a:	d100      	bne.n	800720e <memset+0xa>
 800720c:	4770      	bx	lr
 800720e:	f803 1b01 	strb.w	r1, [r3], #1
 8007212:	e7f9      	b.n	8007208 <memset+0x4>

08007214 <__libc_init_array>:
 8007214:	b570      	push	{r4, r5, r6, lr}
 8007216:	4d0d      	ldr	r5, [pc, #52]	; (800724c <__libc_init_array+0x38>)
 8007218:	4c0d      	ldr	r4, [pc, #52]	; (8007250 <__libc_init_array+0x3c>)
 800721a:	1b64      	subs	r4, r4, r5
 800721c:	10a4      	asrs	r4, r4, #2
 800721e:	2600      	movs	r6, #0
 8007220:	42a6      	cmp	r6, r4
 8007222:	d109      	bne.n	8007238 <__libc_init_array+0x24>
 8007224:	4d0b      	ldr	r5, [pc, #44]	; (8007254 <__libc_init_array+0x40>)
 8007226:	4c0c      	ldr	r4, [pc, #48]	; (8007258 <__libc_init_array+0x44>)
 8007228:	f000 f818 	bl	800725c <_init>
 800722c:	1b64      	subs	r4, r4, r5
 800722e:	10a4      	asrs	r4, r4, #2
 8007230:	2600      	movs	r6, #0
 8007232:	42a6      	cmp	r6, r4
 8007234:	d105      	bne.n	8007242 <__libc_init_array+0x2e>
 8007236:	bd70      	pop	{r4, r5, r6, pc}
 8007238:	f855 3b04 	ldr.w	r3, [r5], #4
 800723c:	4798      	blx	r3
 800723e:	3601      	adds	r6, #1
 8007240:	e7ee      	b.n	8007220 <__libc_init_array+0xc>
 8007242:	f855 3b04 	ldr.w	r3, [r5], #4
 8007246:	4798      	blx	r3
 8007248:	3601      	adds	r6, #1
 800724a:	e7f2      	b.n	8007232 <__libc_init_array+0x1e>
 800724c:	0800734c 	.word	0x0800734c
 8007250:	0800734c 	.word	0x0800734c
 8007254:	0800734c 	.word	0x0800734c
 8007258:	08007350 	.word	0x08007350

0800725c <_init>:
 800725c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725e:	bf00      	nop
 8007260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007262:	bc08      	pop	{r3}
 8007264:	469e      	mov	lr, r3
 8007266:	4770      	bx	lr

08007268 <_fini>:
 8007268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726a:	bf00      	nop
 800726c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800726e:	bc08      	pop	{r3}
 8007270:	469e      	mov	lr, r3
 8007272:	4770      	bx	lr
