
old_drivebase_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e04  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003ffc  08003ffc  00013ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004014  08004014  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004014  08004014  00014014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800401c  0800401c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800401c  0800401c  0001401c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004020  08004020  00014020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  08004030  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08004030  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f51a  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fcb  00000000  00000000  0002f597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d98  00000000  00000000  00031568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aa1  00000000  00000000  00032300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000273bd  00000000  00000000  00032da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010b60  00000000  00000000  0005a15e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7fc3  00000000  00000000  0006acbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000038c0  00000000  00000000  00162c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00166544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003fe4 	.word	0x08003fe4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08003fe4 	.word	0x08003fe4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <SSL_Motors_Init>:
 */

#include <SSL_motors.h>
#include "main.h"

void SSL_Motors_Init(){
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0

	/* Set GPIO to known states */
	HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800053e:	481c      	ldr	r0, [pc, #112]	; (80005b0 <SSL_Motors_Init+0x7c>)
 8000540:	f001 f8b0 	bl	80016a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	2104      	movs	r1, #4
 8000548:	4819      	ldr	r0, [pc, #100]	; (80005b0 <SSL_Motors_Init+0x7c>)
 800054a:	f001 f8ab 	bl	80016a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	2101      	movs	r1, #1
 8000552:	4817      	ldr	r0, [pc, #92]	; (80005b0 <SSL_Motors_Init+0x7c>)
 8000554:	f001 f8a6 	bl	80016a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800055e:	4815      	ldr	r0, [pc, #84]	; (80005b4 <SSL_Motors_Init+0x80>)
 8000560:	f001 f8a0 	bl	80016a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M3_IN1_GPIO_Port, M3_IN1_Pin, RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800056a:	4811      	ldr	r0, [pc, #68]	; (80005b0 <SSL_Motors_Init+0x7c>)
 800056c:	f001 f89a 	bl	80016a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M3_IN2_GPIO_Port, M3_IN2_Pin, RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000576:	4810      	ldr	r0, [pc, #64]	; (80005b8 <SSL_Motors_Init+0x84>)
 8000578:	f001 f894 	bl	80016a4 <HAL_GPIO_WritePin>

	/* Start timers for PWM */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); /* M1_EN */
 800057c:	210c      	movs	r1, #12
 800057e:	480f      	ldr	r0, [pc, #60]	; (80005bc <SSL_Motors_Init+0x88>)
 8000580:	f002 fa5e 	bl	8002a40 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); /* M2_EN */
 8000584:	2100      	movs	r1, #0
 8000586:	480e      	ldr	r0, [pc, #56]	; (80005c0 <SSL_Motors_Init+0x8c>)
 8000588:	f002 fa5a 	bl	8002a40 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); /* M3_EN */
 800058c:	210c      	movs	r1, #12
 800058e:	480c      	ldr	r0, [pc, #48]	; (80005c0 <SSL_Motors_Init+0x8c>)
 8000590:	f002 fa56 	bl	8002a40 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8000594:	4b09      	ldr	r3, [pc, #36]	; (80005bc <SSL_Motors_Init+0x88>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2200      	movs	r2, #0
 800059a:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <SSL_Motors_Init+0x8c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2200      	movs	r2, #0
 80005a2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <SSL_Motors_Init+0x8c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2200      	movs	r2, #0
 80005aa:	641a      	str	r2, [r3, #64]	; 0x40
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40021000 	.word	0x40021000
 80005b4:	40020c00 	.word	0x40020c00
 80005b8:	40020400 	.word	0x40020400
 80005bc:	20000028 	.word	0x20000028
 80005c0:	20000074 	.word	0x20000074

080005c4 <SSL_Motor_Set_Speed>:

/* Set speed between -1000 and +1000 */
void SSL_Motor_Set_Speed(uint8_t motor, int16_t speed){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	460a      	mov	r2, r1
 80005ce:	71fb      	strb	r3, [r7, #7]
 80005d0:	4613      	mov	r3, r2
 80005d2:	80bb      	strh	r3, [r7, #4]

	switch (motor){
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	2b03      	cmp	r3, #3
 80005d8:	d075      	beq.n	80006c6 <SSL_Motor_Set_Speed+0x102>
 80005da:	2b03      	cmp	r3, #3
 80005dc:	f300 80ad 	bgt.w	800073a <SSL_Motor_Set_Speed+0x176>
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d002      	beq.n	80005ea <SSL_Motor_Set_Speed+0x26>
 80005e4:	2b02      	cmp	r3, #2
 80005e6:	d037      	beq.n	8000658 <SSL_Motor_Set_Speed+0x94>
			break;

		default:

		}
}
 80005e8:	e0a7      	b.n	800073a <SSL_Motor_Set_Speed+0x176>
			if (speed == 0){
 80005ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d10b      	bne.n	800060a <SSL_Motor_Set_Speed+0x46>
				HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f8:	4852      	ldr	r0, [pc, #328]	; (8000744 <SSL_Motor_Set_Speed+0x180>)
 80005fa:	f001 f853 	bl	80016a4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2104      	movs	r1, #4
 8000602:	4850      	ldr	r0, [pc, #320]	; (8000744 <SSL_Motor_Set_Speed+0x180>)
 8000604:	f001 f84e 	bl	80016a4 <HAL_GPIO_WritePin>
			break;
 8000608:	e097      	b.n	800073a <SSL_Motor_Set_Speed+0x176>
			else if (speed > 0){
 800060a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800060e:	2b00      	cmp	r3, #0
 8000610:	dd10      	ble.n	8000634 <SSL_Motor_Set_Speed+0x70>
				HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000618:	484a      	ldr	r0, [pc, #296]	; (8000744 <SSL_Motor_Set_Speed+0x180>)
 800061a:	f001 f843 	bl	80016a4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, SET);
 800061e:	2201      	movs	r2, #1
 8000620:	2104      	movs	r1, #4
 8000622:	4848      	ldr	r0, [pc, #288]	; (8000744 <SSL_Motor_Set_Speed+0x180>)
 8000624:	f001 f83e 	bl	80016a4 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, speed);
 8000628:	4b47      	ldr	r3, [pc, #284]	; (8000748 <SSL_Motor_Set_Speed+0x184>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000630:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000632:	e082      	b.n	800073a <SSL_Motor_Set_Speed+0x176>
				HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, SET);
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800063a:	4842      	ldr	r0, [pc, #264]	; (8000744 <SSL_Motor_Set_Speed+0x180>)
 800063c:	f001 f832 	bl	80016a4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2104      	movs	r1, #4
 8000644:	483f      	ldr	r0, [pc, #252]	; (8000744 <SSL_Motor_Set_Speed+0x180>)
 8000646:	f001 f82d 	bl	80016a4 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, -speed);
 800064a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800064e:	425a      	negs	r2, r3
 8000650:	4b3d      	ldr	r3, [pc, #244]	; (8000748 <SSL_Motor_Set_Speed+0x184>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000656:	e070      	b.n	800073a <SSL_Motor_Set_Speed+0x176>
			if (speed == 0){
 8000658:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d10b      	bne.n	8000678 <SSL_Motor_Set_Speed+0xb4>
				HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	2101      	movs	r1, #1
 8000664:	4837      	ldr	r0, [pc, #220]	; (8000744 <SSL_Motor_Set_Speed+0x180>)
 8000666:	f001 f81d 	bl	80016a4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000670:	4836      	ldr	r0, [pc, #216]	; (800074c <SSL_Motor_Set_Speed+0x188>)
 8000672:	f001 f817 	bl	80016a4 <HAL_GPIO_WritePin>
			break;
 8000676:	e060      	b.n	800073a <SSL_Motor_Set_Speed+0x176>
			else if (speed > 0){
 8000678:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800067c:	2b00      	cmp	r3, #0
 800067e:	dd10      	ble.n	80006a2 <SSL_Motor_Set_Speed+0xde>
				HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	2101      	movs	r1, #1
 8000684:	482f      	ldr	r0, [pc, #188]	; (8000744 <SSL_Motor_Set_Speed+0x180>)
 8000686:	f001 f80d 	bl	80016a4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, SET);
 800068a:	2201      	movs	r2, #1
 800068c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000690:	482e      	ldr	r0, [pc, #184]	; (800074c <SSL_Motor_Set_Speed+0x188>)
 8000692:	f001 f807 	bl	80016a4 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed);
 8000696:	4b2e      	ldr	r3, [pc, #184]	; (8000750 <SSL_Motor_Set_Speed+0x18c>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800069e:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80006a0:	e04b      	b.n	800073a <SSL_Motor_Set_Speed+0x176>
				HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, SET);
 80006a2:	2201      	movs	r2, #1
 80006a4:	2101      	movs	r1, #1
 80006a6:	4827      	ldr	r0, [pc, #156]	; (8000744 <SSL_Motor_Set_Speed+0x180>)
 80006a8:	f000 fffc 	bl	80016a4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006b2:	4826      	ldr	r0, [pc, #152]	; (800074c <SSL_Motor_Set_Speed+0x188>)
 80006b4:	f000 fff6 	bl	80016a4 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, -speed);
 80006b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006bc:	425a      	negs	r2, r3
 80006be:	4b24      	ldr	r3, [pc, #144]	; (8000750 <SSL_Motor_Set_Speed+0x18c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80006c4:	e039      	b.n	800073a <SSL_Motor_Set_Speed+0x176>
			if (speed == 0){
 80006c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d10c      	bne.n	80006e8 <SSL_Motor_Set_Speed+0x124>
				HAL_GPIO_WritePin(M3_IN1_GPIO_Port, M3_IN1_Pin, RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006d4:	481b      	ldr	r0, [pc, #108]	; (8000744 <SSL_Motor_Set_Speed+0x180>)
 80006d6:	f000 ffe5 	bl	80016a4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M3_IN2_GPIO_Port, M3_IN2_Pin, RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e0:	481c      	ldr	r0, [pc, #112]	; (8000754 <SSL_Motor_Set_Speed+0x190>)
 80006e2:	f000 ffdf 	bl	80016a4 <HAL_GPIO_WritePin>
			break;
 80006e6:	e027      	b.n	8000738 <SSL_Motor_Set_Speed+0x174>
			else if (speed > 0){
 80006e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	dd11      	ble.n	8000714 <SSL_Motor_Set_Speed+0x150>
				HAL_GPIO_WritePin(M3_IN1_GPIO_Port, M3_IN1_Pin, RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006f6:	4813      	ldr	r0, [pc, #76]	; (8000744 <SSL_Motor_Set_Speed+0x180>)
 80006f8:	f000 ffd4 	bl	80016a4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M3_IN2_GPIO_Port, M3_IN2_Pin, SET);
 80006fc:	2201      	movs	r2, #1
 80006fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000702:	4814      	ldr	r0, [pc, #80]	; (8000754 <SSL_Motor_Set_Speed+0x190>)
 8000704:	f000 ffce 	bl	80016a4 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, speed);
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <SSL_Motor_Set_Speed+0x18c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000710:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000712:	e011      	b.n	8000738 <SSL_Motor_Set_Speed+0x174>
				HAL_GPIO_WritePin(M3_IN1_GPIO_Port, M3_IN1_Pin, SET);
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800071a:	480a      	ldr	r0, [pc, #40]	; (8000744 <SSL_Motor_Set_Speed+0x180>)
 800071c:	f000 ffc2 	bl	80016a4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M3_IN2_GPIO_Port, M3_IN2_Pin, RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000726:	480b      	ldr	r0, [pc, #44]	; (8000754 <SSL_Motor_Set_Speed+0x190>)
 8000728:	f000 ffbc 	bl	80016a4 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, -speed);
 800072c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000730:	425a      	negs	r2, r3
 8000732:	4b07      	ldr	r3, [pc, #28]	; (8000750 <SSL_Motor_Set_Speed+0x18c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000738:	bf00      	nop
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40021000 	.word	0x40021000
 8000748:	20000028 	.word	0x20000028
 800074c:	40020c00 	.word	0x40020c00
 8000750:	20000074 	.word	0x20000074
 8000754:	40020400 	.word	0x40020400

08000758 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800075c:	f000 fc8f 	bl	800107e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000760:	f000 f81e 	bl	80007a0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000764:	f000 f9b0 	bl	8000ac8 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000768:	f000 f97e 	bl	8000a68 <MX_USART3_UART_Init>
	MX_TIM1_Init();
 800076c:	f000 f88a 	bl	8000884 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000770:	f000 f916 	bl	80009a0 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	SSL_Motors_Init();
 8000774:	f7ff fede 	bl	8000534 <SSL_Motors_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		SSL_Motor_Set_Speed(1, 1000);
 8000778:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800077c:	2001      	movs	r0, #1
 800077e:	f7ff ff21 	bl	80005c4 <SSL_Motor_Set_Speed>
		SSL_Motor_Set_Speed(2, 1000);
 8000782:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000786:	2002      	movs	r0, #2
 8000788:	f7ff ff1c 	bl	80005c4 <SSL_Motor_Set_Speed>
		SSL_Motor_Set_Speed(3, 1000);
 800078c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000790:	2003      	movs	r0, #3
 8000792:	f7ff ff17 	bl	80005c4 <SSL_Motor_Set_Speed>
		HAL_Delay(1000);
 8000796:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800079a:	f000 fccd 	bl	8001138 <HAL_Delay>
		SSL_Motor_Set_Speed(1, 1000);
 800079e:	e7eb      	b.n	8000778 <main+0x20>

080007a0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b094      	sub	sp, #80	; 0x50
 80007a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	2234      	movs	r2, #52	; 0x34
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f003 fbeb 	bl	8003f8a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80007c4:	f000 ff88 	bl	80016d8 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80007c8:	4b2c      	ldr	r3, [pc, #176]	; (800087c <SystemClock_Config+0xdc>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007cc:	4a2b      	ldr	r2, [pc, #172]	; (800087c <SystemClock_Config+0xdc>)
 80007ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d2:	6413      	str	r3, [r2, #64]	; 0x40
 80007d4:	4b29      	ldr	r3, [pc, #164]	; (800087c <SystemClock_Config+0xdc>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007e0:	4b27      	ldr	r3, [pc, #156]	; (8000880 <SystemClock_Config+0xe0>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007e8:	4a25      	ldr	r2, [pc, #148]	; (8000880 <SystemClock_Config+0xe0>)
 80007ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ee:	6013      	str	r3, [r2, #0]
 80007f0:	4b23      	ldr	r3, [pc, #140]	; (8000880 <SystemClock_Config+0xe0>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007fc:	2301      	movs	r3, #1
 80007fe:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000800:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000804:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000806:	2302      	movs	r3, #2
 8000808:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800080a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800080e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000810:	2304      	movs	r3, #4
 8000812:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 96;
 8000814:	2360      	movs	r3, #96	; 0x60
 8000816:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000818:	2302      	movs	r3, #2
 800081a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800081c:	2304      	movs	r3, #4
 800081e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000820:	2302      	movs	r3, #2
 8000822:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4618      	mov	r0, r3
 800082a:	f000 ffb5 	bl	8001798 <HAL_RCC_OscConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000834:	f000 fa86 	bl	8000d44 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000838:	f000 ff5e 	bl	80016f8 <HAL_PWREx_EnableOverDrive>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0xa6>
	{
		Error_Handler();
 8000842:	f000 fa7f 	bl	8000d44 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000846:	230f      	movs	r3, #15
 8000848:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084a:	2302      	movs	r3, #2
 800084c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000856:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800085c:	f107 0308 	add.w	r3, r7, #8
 8000860:	2103      	movs	r1, #3
 8000862:	4618      	mov	r0, r3
 8000864:	f001 fa46 	bl	8001cf4 <HAL_RCC_ClockConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0xd2>
	{
		Error_Handler();
 800086e:	f000 fa69 	bl	8000d44 <Error_Handler>
	}
}
 8000872:	bf00      	nop
 8000874:	3750      	adds	r7, #80	; 0x50
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800
 8000880:	40007000 	.word	0x40007000

08000884 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
void MX_TIM1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b096      	sub	sp, #88	; 0x58
 8000888:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800088a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000896:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]
 80008a6:	615a      	str	r2, [r3, #20]
 80008a8:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	222c      	movs	r2, #44	; 0x2c
 80008ae:	2100      	movs	r1, #0
 80008b0:	4618      	mov	r0, r3
 80008b2:	f003 fb6a 	bl	8003f8a <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80008b6:	4b38      	ldr	r3, [pc, #224]	; (8000998 <MX_TIM1_Init+0x114>)
 80008b8:	4a38      	ldr	r2, [pc, #224]	; (800099c <MX_TIM1_Init+0x118>)
 80008ba:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 95;
 80008bc:	4b36      	ldr	r3, [pc, #216]	; (8000998 <MX_TIM1_Init+0x114>)
 80008be:	225f      	movs	r2, #95	; 0x5f
 80008c0:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80008c2:	4b35      	ldr	r3, [pc, #212]	; (8000998 <MX_TIM1_Init+0x114>)
 80008c4:	2210      	movs	r2, #16
 80008c6:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 999;
 80008c8:	4b33      	ldr	r3, [pc, #204]	; (8000998 <MX_TIM1_Init+0x114>)
 80008ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008ce:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d0:	4b31      	ldr	r3, [pc, #196]	; (8000998 <MX_TIM1_Init+0x114>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80008d6:	4b30      	ldr	r3, [pc, #192]	; (8000998 <MX_TIM1_Init+0x114>)
 80008d8:	2200      	movs	r2, #0
 80008da:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008dc:	4b2e      	ldr	r3, [pc, #184]	; (8000998 <MX_TIM1_Init+0x114>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008e2:	482d      	ldr	r0, [pc, #180]	; (8000998 <MX_TIM1_Init+0x114>)
 80008e4:	f002 f854 	bl	8002990 <HAL_TIM_PWM_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM1_Init+0x6e>
	{
		Error_Handler();
 80008ee:	f000 fa29 	bl	8000d44 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f2:	2300      	movs	r3, #0
 80008f4:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008f6:	2300      	movs	r3, #0
 80008f8:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000902:	4619      	mov	r1, r3
 8000904:	4824      	ldr	r0, [pc, #144]	; (8000998 <MX_TIM1_Init+0x114>)
 8000906:	f002 fdcd 	bl	80034a4 <HAL_TIMEx_MasterConfigSynchronization>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 8000910:	f000 fa18 	bl	8000d44 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000914:	2360      	movs	r3, #96	; 0x60
 8000916:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800091c:	2300      	movs	r3, #0
 800091e:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000924:	2300      	movs	r3, #0
 8000926:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000928:	2300      	movs	r3, #0
 800092a:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800092c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000930:	220c      	movs	r2, #12
 8000932:	4619      	mov	r1, r3
 8000934:	4818      	ldr	r0, [pc, #96]	; (8000998 <MX_TIM1_Init+0x114>)
 8000936:	f002 f97d 	bl	8002c34 <HAL_TIM_PWM_ConfigChannel>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM1_Init+0xc0>
	{
		Error_Handler();
 8000940:	f000 fa00 	bl	8000d44 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000944:	2300      	movs	r3, #0
 8000946:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000958:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800095c:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000966:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000970:	2300      	movs	r3, #0
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	4619      	mov	r1, r3
 8000978:	4807      	ldr	r0, [pc, #28]	; (8000998 <MX_TIM1_Init+0x114>)
 800097a:	f002 fe21 	bl	80035c0 <HAL_TIMEx_ConfigBreakDeadTime>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM1_Init+0x104>
	{
		Error_Handler();
 8000984:	f000 f9de 	bl	8000d44 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000988:	4803      	ldr	r0, [pc, #12]	; (8000998 <MX_TIM1_Init+0x114>)
 800098a:	f000 fa37 	bl	8000dfc <HAL_TIM_MspPostInit>

}
 800098e:	bf00      	nop
 8000990:	3758      	adds	r7, #88	; 0x58
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000028 	.word	0x20000028
 800099c:	40010000 	.word	0x40010000

080009a0 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
void MX_TIM2_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80009b2:	463b      	mov	r3, r7
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
 80009c0:	615a      	str	r2, [r3, #20]
 80009c2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80009c4:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <MX_TIM2_Init+0xc4>)
 80009c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ca:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 47;
 80009cc:	4b25      	ldr	r3, [pc, #148]	; (8000a64 <MX_TIM2_Init+0xc4>)
 80009ce:	222f      	movs	r2, #47	; 0x2f
 80009d0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80009d2:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <MX_TIM2_Init+0xc4>)
 80009d4:	2210      	movs	r2, #16
 80009d6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 80009d8:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <MX_TIM2_Init+0xc4>)
 80009da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009de:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e0:	4b20      	ldr	r3, [pc, #128]	; (8000a64 <MX_TIM2_Init+0xc4>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e6:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <MX_TIM2_Init+0xc4>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009ec:	481d      	ldr	r0, [pc, #116]	; (8000a64 <MX_TIM2_Init+0xc4>)
 80009ee:	f001 ffcf 	bl	8002990 <HAL_TIM_PWM_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM2_Init+0x5c>
	{
		Error_Handler();
 80009f8:	f000 f9a4 	bl	8000d44 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4816      	ldr	r0, [pc, #88]	; (8000a64 <MX_TIM2_Init+0xc4>)
 8000a0c:	f002 fd4a 	bl	80034a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM2_Init+0x7a>
	{
		Error_Handler();
 8000a16:	f000 f995 	bl	8000d44 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a1a:	2360      	movs	r3, #96	; 0x60
 8000a1c:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	4619      	mov	r1, r3
 8000a30:	480c      	ldr	r0, [pc, #48]	; (8000a64 <MX_TIM2_Init+0xc4>)
 8000a32:	f002 f8ff 	bl	8002c34 <HAL_TIM_PWM_ConfigChannel>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM2_Init+0xa0>
	{
		Error_Handler();
 8000a3c:	f000 f982 	bl	8000d44 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a40:	463b      	mov	r3, r7
 8000a42:	220c      	movs	r2, #12
 8000a44:	4619      	mov	r1, r3
 8000a46:	4807      	ldr	r0, [pc, #28]	; (8000a64 <MX_TIM2_Init+0xc4>)
 8000a48:	f002 f8f4 	bl	8002c34 <HAL_TIM_PWM_ConfigChannel>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM2_Init+0xb6>
	{
		Error_Handler();
 8000a52:	f000 f977 	bl	8000d44 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000a56:	4803      	ldr	r0, [pc, #12]	; (8000a64 <MX_TIM2_Init+0xc4>)
 8000a58:	f000 f9d0 	bl	8000dfc <HAL_TIM_MspPostInit>

}
 8000a5c:	bf00      	nop
 8000a5e:	3728      	adds	r7, #40	; 0x28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000074 	.word	0x20000074

08000a68 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <MX_USART3_UART_Init+0x58>)
 8000a6e:	4a15      	ldr	r2, [pc, #84]	; (8000ac4 <MX_USART3_UART_Init+0x5c>)
 8000a70:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <MX_USART3_UART_Init+0x58>)
 8000a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a78:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <MX_USART3_UART_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <MX_USART3_UART_Init+0x58>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <MX_USART3_UART_Init+0x58>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <MX_USART3_UART_Init+0x58>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <MX_USART3_UART_Init+0x58>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <MX_USART3_UART_Init+0x58>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <MX_USART3_UART_Init+0x58>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <MX_USART3_UART_Init+0x58>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aaa:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <MX_USART3_UART_Init+0x58>)
 8000aac:	f002 fe06 	bl	80036bc <HAL_UART_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_USART3_UART_Init+0x52>
	{
		Error_Handler();
 8000ab6:	f000 f945 	bl	8000d44 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200000c0 	.word	0x200000c0
 8000ac4:	40004800 	.word	0x40004800

08000ac8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08c      	sub	sp, #48	; 0x30
 8000acc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
 8000adc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000ade:	4b92      	ldr	r3, [pc, #584]	; (8000d28 <MX_GPIO_Init+0x260>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a91      	ldr	r2, [pc, #580]	; (8000d28 <MX_GPIO_Init+0x260>)
 8000ae4:	f043 0310 	orr.w	r3, r3, #16
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b8f      	ldr	r3, [pc, #572]	; (8000d28 <MX_GPIO_Init+0x260>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0310 	and.w	r3, r3, #16
 8000af2:	61bb      	str	r3, [r7, #24]
 8000af4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000af6:	4b8c      	ldr	r3, [pc, #560]	; (8000d28 <MX_GPIO_Init+0x260>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a8b      	ldr	r2, [pc, #556]	; (8000d28 <MX_GPIO_Init+0x260>)
 8000afc:	f043 0304 	orr.w	r3, r3, #4
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b89      	ldr	r3, [pc, #548]	; (8000d28 <MX_GPIO_Init+0x260>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0304 	and.w	r3, r3, #4
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b0e:	4b86      	ldr	r3, [pc, #536]	; (8000d28 <MX_GPIO_Init+0x260>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a85      	ldr	r2, [pc, #532]	; (8000d28 <MX_GPIO_Init+0x260>)
 8000b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b83      	ldr	r3, [pc, #524]	; (8000d28 <MX_GPIO_Init+0x260>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b26:	4b80      	ldr	r3, [pc, #512]	; (8000d28 <MX_GPIO_Init+0x260>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a7f      	ldr	r2, [pc, #508]	; (8000d28 <MX_GPIO_Init+0x260>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b7d      	ldr	r3, [pc, #500]	; (8000d28 <MX_GPIO_Init+0x260>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3e:	4b7a      	ldr	r3, [pc, #488]	; (8000d28 <MX_GPIO_Init+0x260>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a79      	ldr	r2, [pc, #484]	; (8000d28 <MX_GPIO_Init+0x260>)
 8000b44:	f043 0302 	orr.w	r3, r3, #2
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b77      	ldr	r3, [pc, #476]	; (8000d28 <MX_GPIO_Init+0x260>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000b56:	4b74      	ldr	r3, [pc, #464]	; (8000d28 <MX_GPIO_Init+0x260>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a73      	ldr	r2, [pc, #460]	; (8000d28 <MX_GPIO_Init+0x260>)
 8000b5c:	f043 0308 	orr.w	r3, r3, #8
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b71      	ldr	r3, [pc, #452]	; (8000d28 <MX_GPIO_Init+0x260>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0308 	and.w	r3, r3, #8
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000b6e:	4b6e      	ldr	r3, [pc, #440]	; (8000d28 <MX_GPIO_Init+0x260>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a6d      	ldr	r2, [pc, #436]	; (8000d28 <MX_GPIO_Init+0x260>)
 8000b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b6b      	ldr	r3, [pc, #428]	; (8000d28 <MX_GPIO_Init+0x260>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, M1_IN2_Pin|M1_IN1_Pin|M3_IN1_Pin|M2_IN1_Pin, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	f249 0105 	movw	r1, #36869	; 0x9005
 8000b8c:	4867      	ldr	r0, [pc, #412]	; (8000d2c <MX_GPIO_Init+0x264>)
 8000b8e:	f000 fd89 	bl	80016a4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin|M3_IN2_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f244 4181 	movw	r1, #17537	; 0x4481
 8000b98:	4865      	ldr	r0, [pc, #404]	; (8000d30 <MX_GPIO_Init+0x268>)
 8000b9a:	f000 fd83 	bl	80016a4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ba4:	4863      	ldr	r0, [pc, #396]	; (8000d34 <MX_GPIO_Init+0x26c>)
 8000ba6:	f000 fd7d 	bl	80016a4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2140      	movs	r1, #64	; 0x40
 8000bae:	4862      	ldr	r0, [pc, #392]	; (8000d38 <MX_GPIO_Init+0x270>)
 8000bb0:	f000 fd78 	bl	80016a4 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : M1_IN2_Pin M1_IN1_Pin M3_IN1_Pin M2_IN1_Pin */
	GPIO_InitStruct.Pin = M1_IN2_Pin|M1_IN1_Pin|M3_IN1_Pin|M2_IN1_Pin;
 8000bb4:	f249 0305 	movw	r3, #36869	; 0x9005
 8000bb8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4857      	ldr	r0, [pc, #348]	; (8000d2c <MX_GPIO_Init+0x264>)
 8000bce:	f000 fbbd 	bl	800134c <HAL_GPIO_Init>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bdc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	4619      	mov	r1, r3
 8000be8:	4854      	ldr	r0, [pc, #336]	; (8000d3c <MX_GPIO_Init+0x274>)
 8000bea:	f000 fbaf 	bl	800134c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bee:	2332      	movs	r3, #50	; 0x32
 8000bf0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bfe:	230b      	movs	r3, #11
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	4619      	mov	r1, r3
 8000c08:	484c      	ldr	r0, [pc, #304]	; (8000d3c <MX_GPIO_Init+0x274>)
 8000c0a:	f000 fb9f 	bl	800134c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c0e:	2386      	movs	r3, #134	; 0x86
 8000c10:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c1e:	230b      	movs	r3, #11
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	4845      	ldr	r0, [pc, #276]	; (8000d40 <MX_GPIO_Init+0x278>)
 8000c2a:	f000 fb8f 	bl	800134c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin M3_IN2_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|M3_IN2_Pin|LD3_Pin|LD2_Pin;
 8000c2e:	f244 4381 	movw	r3, #17537	; 0x4481
 8000c32:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c40:	f107 031c 	add.w	r3, r7, #28
 8000c44:	4619      	mov	r1, r3
 8000c46:	483a      	ldr	r0, [pc, #232]	; (8000d30 <MX_GPIO_Init+0x268>)
 8000c48:	f000 fb80 	bl	800134c <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c50:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c5e:	230b      	movs	r3, #11
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	4619      	mov	r1, r3
 8000c68:	4831      	ldr	r0, [pc, #196]	; (8000d30 <MX_GPIO_Init+0x268>)
 8000c6a:	f000 fb6f 	bl	800134c <HAL_GPIO_Init>

	/*Configure GPIO pin : M2_IN2_Pin */
	GPIO_InitStruct.Pin = M2_IN2_Pin;
 8000c6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c72:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c74:	2301      	movs	r3, #1
 8000c76:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(M2_IN2_GPIO_Port, &GPIO_InitStruct);
 8000c80:	f107 031c 	add.w	r3, r7, #28
 8000c84:	4619      	mov	r1, r3
 8000c86:	482b      	ldr	r0, [pc, #172]	; (8000d34 <MX_GPIO_Init+0x26c>)
 8000c88:	f000 fb60 	bl	800134c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c8c:	2340      	movs	r3, #64	; 0x40
 8000c8e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4825      	ldr	r0, [pc, #148]	; (8000d38 <MX_GPIO_Init+0x270>)
 8000ca4:	f000 fb52 	bl	800134c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ca8:	2380      	movs	r3, #128	; 0x80
 8000caa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cac:	2300      	movs	r3, #0
 8000cae:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	4619      	mov	r1, r3
 8000cba:	481f      	ldr	r0, [pc, #124]	; (8000d38 <MX_GPIO_Init+0x270>)
 8000cbc:	f000 fb46 	bl	800134c <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cc0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000cc4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cd2:	230a      	movs	r3, #10
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	f107 031c 	add.w	r3, r7, #28
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4818      	ldr	r0, [pc, #96]	; (8000d40 <MX_GPIO_Init+0x278>)
 8000cde:	f000 fb35 	bl	800134c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ce2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ce6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 031c 	add.w	r3, r7, #28
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4812      	ldr	r0, [pc, #72]	; (8000d40 <MX_GPIO_Init+0x278>)
 8000cf8:	f000 fb28 	bl	800134c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000cfc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d00:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d0e:	230b      	movs	r3, #11
 8000d10:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d12:	f107 031c 	add.w	r3, r7, #28
 8000d16:	4619      	mov	r1, r3
 8000d18:	4807      	ldr	r0, [pc, #28]	; (8000d38 <MX_GPIO_Init+0x270>)
 8000d1a:	f000 fb17 	bl	800134c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000d1e:	bf00      	nop
 8000d20:	3730      	adds	r7, #48	; 0x30
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40020400 	.word	0x40020400
 8000d34:	40020c00 	.word	0x40020c00
 8000d38:	40021800 	.word	0x40021800
 8000d3c:	40020800 	.word	0x40020800
 8000d40:	40020000 	.word	0x40020000

08000d44 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d48:	b672      	cpsid	i
}
 8000d4a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d4c:	e7fe      	b.n	8000d4c <Error_Handler+0x8>
	...

08000d50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d56:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <HAL_MspInit+0x44>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	4a0e      	ldr	r2, [pc, #56]	; (8000d94 <HAL_MspInit+0x44>)
 8000d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d60:	6413      	str	r3, [r2, #64]	; 0x40
 8000d62:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <HAL_MspInit+0x44>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <HAL_MspInit+0x44>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	4a08      	ldr	r2, [pc, #32]	; (8000d94 <HAL_MspInit+0x44>)
 8000d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d78:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_MspInit+0x44>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40023800 	.word	0x40023800

08000d98 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a13      	ldr	r2, [pc, #76]	; (8000df4 <HAL_TIM_PWM_MspInit+0x5c>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d10c      	bne.n	8000dc4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000daa:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <HAL_TIM_PWM_MspInit+0x60>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <HAL_TIM_PWM_MspInit+0x60>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6453      	str	r3, [r2, #68]	; 0x44
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <HAL_TIM_PWM_MspInit+0x60>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dc2:	e010      	b.n	8000de6 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM2)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dcc:	d10b      	bne.n	8000de6 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_TIM_PWM_MspInit+0x60>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	4a09      	ldr	r2, [pc, #36]	; (8000df8 <HAL_TIM_PWM_MspInit+0x60>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dda:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <HAL_TIM_PWM_MspInit+0x60>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
}
 8000de6:	bf00      	nop
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40010000 	.word	0x40010000
 8000df8:	40023800 	.word	0x40023800

08000dfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a31      	ldr	r2, [pc, #196]	; (8000ee0 <HAL_TIM_MspPostInit+0xe4>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d11d      	bne.n	8000e5a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e1e:	4b31      	ldr	r3, [pc, #196]	; (8000ee4 <HAL_TIM_MspPostInit+0xe8>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a30      	ldr	r2, [pc, #192]	; (8000ee4 <HAL_TIM_MspPostInit+0xe8>)
 8000e24:	f043 0310 	orr.w	r3, r3, #16
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ee4 <HAL_TIM_MspPostInit+0xe8>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0310 	and.w	r3, r3, #16
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = M1_EN_Pin;
 8000e36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1_EN_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4619      	mov	r1, r3
 8000e52:	4825      	ldr	r0, [pc, #148]	; (8000ee8 <HAL_TIM_MspPostInit+0xec>)
 8000e54:	f000 fa7a 	bl	800134c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e58:	e03d      	b.n	8000ed6 <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM2)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e62:	d138      	bne.n	8000ed6 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e64:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <HAL_TIM_MspPostInit+0xe8>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e68:	4a1e      	ldr	r2, [pc, #120]	; (8000ee4 <HAL_TIM_MspPostInit+0xe8>)
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e70:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <HAL_TIM_MspPostInit+0xe8>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7c:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <HAL_TIM_MspPostInit+0xe8>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e80:	4a18      	ldr	r2, [pc, #96]	; (8000ee4 <HAL_TIM_MspPostInit+0xe8>)
 8000e82:	f043 0302 	orr.w	r3, r3, #2
 8000e86:	6313      	str	r3, [r2, #48]	; 0x30
 8000e88:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <HAL_TIM_MspPostInit+0xe8>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M2_EN_Pin;
 8000e94:	2301      	movs	r3, #1
 8000e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M2_EN_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4619      	mov	r1, r3
 8000eae:	480f      	ldr	r0, [pc, #60]	; (8000eec <HAL_TIM_MspPostInit+0xf0>)
 8000eb0:	f000 fa4c 	bl	800134c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M3_EN_Pin;
 8000eb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M3_EN_GPIO_Port, &GPIO_InitStruct);
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4807      	ldr	r0, [pc, #28]	; (8000ef0 <HAL_TIM_MspPostInit+0xf4>)
 8000ed2:	f000 fa3b 	bl	800134c <HAL_GPIO_Init>
}
 8000ed6:	bf00      	nop
 8000ed8:	3728      	adds	r7, #40	; 0x28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40010000 	.word	0x40010000
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	40020000 	.word	0x40020000
 8000ef0:	40020400 	.word	0x40020400

08000ef4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b0ae      	sub	sp, #184	; 0xb8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	2290      	movs	r2, #144	; 0x90
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f003 f838 	bl	8003f8a <memset>
  if(huart->Instance==USART3)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a22      	ldr	r2, [pc, #136]	; (8000fa8 <HAL_UART_MspInit+0xb4>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d13c      	bne.n	8000f9e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f28:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4618      	mov	r0, r3
 8000f34:	f001 f904 	bl	8002140 <HAL_RCCEx_PeriphCLKConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f3e:	f7ff ff01 	bl	8000d44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f42:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <HAL_UART_MspInit+0xb8>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	4a19      	ldr	r2, [pc, #100]	; (8000fac <HAL_UART_MspInit+0xb8>)
 8000f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4e:	4b17      	ldr	r3, [pc, #92]	; (8000fac <HAL_UART_MspInit+0xb8>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f5a:	4b14      	ldr	r3, [pc, #80]	; (8000fac <HAL_UART_MspInit+0xb8>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a13      	ldr	r2, [pc, #76]	; (8000fac <HAL_UART_MspInit+0xb8>)
 8000f60:	f043 0308 	orr.w	r3, r3, #8
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <HAL_UART_MspInit+0xb8>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0308 	and.w	r3, r3, #8
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f86:	2303      	movs	r3, #3
 8000f88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f8c:	2307      	movs	r3, #7
 8000f8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f92:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f96:	4619      	mov	r1, r3
 8000f98:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <HAL_UART_MspInit+0xbc>)
 8000f9a:	f000 f9d7 	bl	800134c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f9e:	bf00      	nop
 8000fa0:	37b8      	adds	r7, #184	; 0xb8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40004800 	.word	0x40004800
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40020c00 	.word	0x40020c00

08000fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <NMI_Handler+0x4>

08000fba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fbe:	e7fe      	b.n	8000fbe <HardFault_Handler+0x4>

08000fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <MemManage_Handler+0x4>

08000fc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <BusFault_Handler+0x4>

08000fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <UsageFault_Handler+0x4>

08000fd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001000:	f000 f87a 	bl	80010f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <SystemInit+0x20>)
 800100e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <SystemInit+0x20>)
 8001014:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001018:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 800102c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001064 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001030:	480d      	ldr	r0, [pc, #52]	; (8001068 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001032:	490e      	ldr	r1, [pc, #56]	; (800106c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001034:	4a0e      	ldr	r2, [pc, #56]	; (8001070 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001038:	e002      	b.n	8001040 <LoopCopyDataInit>

0800103a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800103c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103e:	3304      	adds	r3, #4

08001040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001044:	d3f9      	bcc.n	800103a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001046:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001048:	4c0b      	ldr	r4, [pc, #44]	; (8001078 <LoopFillZerobss+0x26>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800104c:	e001      	b.n	8001052 <LoopFillZerobss>

0800104e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001050:	3204      	adds	r2, #4

08001052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001054:	d3fb      	bcc.n	800104e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001056:	f7ff ffd7 	bl	8001008 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800105a:	f002 ff9f 	bl	8003f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105e:	f7ff fb7b 	bl	8000758 <main>
  bx  lr    
 8001062:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001064:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001068:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800106c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001070:	08004024 	.word	0x08004024
  ldr r2, =_sbss
 8001074:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001078:	2000014c 	.word	0x2000014c

0800107c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800107c:	e7fe      	b.n	800107c <ADC_IRQHandler>

0800107e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001082:	2003      	movs	r0, #3
 8001084:	f000 f92e 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001088:	2000      	movs	r0, #0
 800108a:	f000 f805 	bl	8001098 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800108e:	f7ff fe5f 	bl	8000d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	bd80      	pop	{r7, pc}

08001098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_InitTick+0x54>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_InitTick+0x58>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	4619      	mov	r1, r3
 80010aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f93b 	bl	8001332 <HAL_SYSTICK_Config>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e00e      	b.n	80010e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b0f      	cmp	r3, #15
 80010ca:	d80a      	bhi.n	80010e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010cc:	2200      	movs	r2, #0
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295
 80010d4:	f000 f911 	bl	80012fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d8:	4a06      	ldr	r2, [pc, #24]	; (80010f4 <HAL_InitTick+0x5c>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	e000      	b.n	80010e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000000 	.word	0x20000000
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20000004 	.word	0x20000004

080010f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x20>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_IncTick+0x24>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4413      	add	r3, r2
 8001108:	4a04      	ldr	r2, [pc, #16]	; (800111c <HAL_IncTick+0x24>)
 800110a:	6013      	str	r3, [r2, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000008 	.word	0x20000008
 800111c:	20000148 	.word	0x20000148

08001120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return uwTick;
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <HAL_GetTick+0x14>)
 8001126:	681b      	ldr	r3, [r3, #0]
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000148 	.word	0x20000148

08001138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001140:	f7ff ffee 	bl	8001120 <HAL_GetTick>
 8001144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001150:	d005      	beq.n	800115e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <HAL_Delay+0x44>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4413      	add	r3, r2
 800115c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800115e:	bf00      	nop
 8001160:	f7ff ffde 	bl	8001120 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	429a      	cmp	r2, r3
 800116e:	d8f7      	bhi.n	8001160 <HAL_Delay+0x28>
  {
  }
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000008 	.word	0x20000008

08001180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800119c:	4013      	ands	r3, r2
 800119e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 80011aa:	4313      	orrs	r3, r2
 80011ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ae:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <__NVIC_SetPriorityGrouping+0x40>)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	60d3      	str	r3, [r2, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00
 80011c4:	05fa0000 	.word	0x05fa0000

080011c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	f003 0307 	and.w	r3, r3, #7
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	; (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	; (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	; 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b0:	d301      	bcc.n	80012b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00f      	b.n	80012d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <SysTick_Config+0x40>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012be:	210f      	movs	r1, #15
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f7ff ff8e 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <SysTick_Config+0x40>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <SysTick_Config+0x40>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff47 	bl	8001180 <__NVIC_SetPriorityGrouping>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800130c:	f7ff ff5c 	bl	80011c8 <__NVIC_GetPriorityGrouping>
 8001310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f7ff ff8e 	bl	8001238 <NVIC_EncodePriority>
 800131c:	4602      	mov	r2, r0
 800131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff5d 	bl	80011e4 <__NVIC_SetPriority>
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ffb0 	bl	80012a0 <SysTick_Config>
 8001340:	4603      	mov	r3, r0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800134c:	b480      	push	{r7}
 800134e:	b089      	sub	sp, #36	; 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001362:	2300      	movs	r3, #0
 8001364:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
 800136a:	e175      	b.n	8001658 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800136c:	2201      	movs	r2, #1
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	429a      	cmp	r2, r3
 8001386:	f040 8164 	bne.w	8001652 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	2b01      	cmp	r3, #1
 8001394:	d005      	beq.n	80013a2 <HAL_GPIO_Init+0x56>
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d130      	bne.n	8001404 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	2203      	movs	r2, #3
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	68da      	ldr	r2, [r3, #12]
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013d8:	2201      	movs	r2, #1
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	091b      	lsrs	r3, r3, #4
 80013ee:	f003 0201 	and.w	r2, r3, #1
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 0303 	and.w	r3, r3, #3
 800140c:	2b03      	cmp	r3, #3
 800140e:	d017      	beq.n	8001440 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d123      	bne.n	8001494 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	08da      	lsrs	r2, r3, #3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3208      	adds	r2, #8
 8001454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	220f      	movs	r2, #15
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	691a      	ldr	r2, [r3, #16]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	08da      	lsrs	r2, r3, #3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3208      	adds	r2, #8
 800148e:	69b9      	ldr	r1, [r7, #24]
 8001490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	2203      	movs	r2, #3
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 0203 	and.w	r2, r3, #3
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f000 80be 	beq.w	8001652 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d6:	4b66      	ldr	r3, [pc, #408]	; (8001670 <HAL_GPIO_Init+0x324>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	4a65      	ldr	r2, [pc, #404]	; (8001670 <HAL_GPIO_Init+0x324>)
 80014dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e0:	6453      	str	r3, [r2, #68]	; 0x44
 80014e2:	4b63      	ldr	r3, [pc, #396]	; (8001670 <HAL_GPIO_Init+0x324>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80014ee:	4a61      	ldr	r2, [pc, #388]	; (8001674 <HAL_GPIO_Init+0x328>)
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	089b      	lsrs	r3, r3, #2
 80014f4:	3302      	adds	r3, #2
 80014f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	220f      	movs	r2, #15
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a58      	ldr	r2, [pc, #352]	; (8001678 <HAL_GPIO_Init+0x32c>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d037      	beq.n	800158a <HAL_GPIO_Init+0x23e>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a57      	ldr	r2, [pc, #348]	; (800167c <HAL_GPIO_Init+0x330>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d031      	beq.n	8001586 <HAL_GPIO_Init+0x23a>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a56      	ldr	r2, [pc, #344]	; (8001680 <HAL_GPIO_Init+0x334>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d02b      	beq.n	8001582 <HAL_GPIO_Init+0x236>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a55      	ldr	r2, [pc, #340]	; (8001684 <HAL_GPIO_Init+0x338>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d025      	beq.n	800157e <HAL_GPIO_Init+0x232>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a54      	ldr	r2, [pc, #336]	; (8001688 <HAL_GPIO_Init+0x33c>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d01f      	beq.n	800157a <HAL_GPIO_Init+0x22e>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a53      	ldr	r2, [pc, #332]	; (800168c <HAL_GPIO_Init+0x340>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d019      	beq.n	8001576 <HAL_GPIO_Init+0x22a>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a52      	ldr	r2, [pc, #328]	; (8001690 <HAL_GPIO_Init+0x344>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d013      	beq.n	8001572 <HAL_GPIO_Init+0x226>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a51      	ldr	r2, [pc, #324]	; (8001694 <HAL_GPIO_Init+0x348>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d00d      	beq.n	800156e <HAL_GPIO_Init+0x222>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a50      	ldr	r2, [pc, #320]	; (8001698 <HAL_GPIO_Init+0x34c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d007      	beq.n	800156a <HAL_GPIO_Init+0x21e>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a4f      	ldr	r2, [pc, #316]	; (800169c <HAL_GPIO_Init+0x350>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d101      	bne.n	8001566 <HAL_GPIO_Init+0x21a>
 8001562:	2309      	movs	r3, #9
 8001564:	e012      	b.n	800158c <HAL_GPIO_Init+0x240>
 8001566:	230a      	movs	r3, #10
 8001568:	e010      	b.n	800158c <HAL_GPIO_Init+0x240>
 800156a:	2308      	movs	r3, #8
 800156c:	e00e      	b.n	800158c <HAL_GPIO_Init+0x240>
 800156e:	2307      	movs	r3, #7
 8001570:	e00c      	b.n	800158c <HAL_GPIO_Init+0x240>
 8001572:	2306      	movs	r3, #6
 8001574:	e00a      	b.n	800158c <HAL_GPIO_Init+0x240>
 8001576:	2305      	movs	r3, #5
 8001578:	e008      	b.n	800158c <HAL_GPIO_Init+0x240>
 800157a:	2304      	movs	r3, #4
 800157c:	e006      	b.n	800158c <HAL_GPIO_Init+0x240>
 800157e:	2303      	movs	r3, #3
 8001580:	e004      	b.n	800158c <HAL_GPIO_Init+0x240>
 8001582:	2302      	movs	r3, #2
 8001584:	e002      	b.n	800158c <HAL_GPIO_Init+0x240>
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <HAL_GPIO_Init+0x240>
 800158a:	2300      	movs	r3, #0
 800158c:	69fa      	ldr	r2, [r7, #28]
 800158e:	f002 0203 	and.w	r2, r2, #3
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	4093      	lsls	r3, r2
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800159c:	4935      	ldr	r1, [pc, #212]	; (8001674 <HAL_GPIO_Init+0x328>)
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	089b      	lsrs	r3, r3, #2
 80015a2:	3302      	adds	r3, #2
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015aa:	4b3d      	ldr	r3, [pc, #244]	; (80016a0 <HAL_GPIO_Init+0x354>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ce:	4a34      	ldr	r2, [pc, #208]	; (80016a0 <HAL_GPIO_Init+0x354>)
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015d4:	4b32      	ldr	r3, [pc, #200]	; (80016a0 <HAL_GPIO_Init+0x354>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015f8:	4a29      	ldr	r2, [pc, #164]	; (80016a0 <HAL_GPIO_Init+0x354>)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015fe:	4b28      	ldr	r3, [pc, #160]	; (80016a0 <HAL_GPIO_Init+0x354>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001622:	4a1f      	ldr	r2, [pc, #124]	; (80016a0 <HAL_GPIO_Init+0x354>)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001628:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <HAL_GPIO_Init+0x354>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800164c:	4a14      	ldr	r2, [pc, #80]	; (80016a0 <HAL_GPIO_Init+0x354>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3301      	adds	r3, #1
 8001656:	61fb      	str	r3, [r7, #28]
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	2b0f      	cmp	r3, #15
 800165c:	f67f ae86 	bls.w	800136c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001660:	bf00      	nop
 8001662:	bf00      	nop
 8001664:	3724      	adds	r7, #36	; 0x24
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800
 8001674:	40013800 	.word	0x40013800
 8001678:	40020000 	.word	0x40020000
 800167c:	40020400 	.word	0x40020400
 8001680:	40020800 	.word	0x40020800
 8001684:	40020c00 	.word	0x40020c00
 8001688:	40021000 	.word	0x40021000
 800168c:	40021400 	.word	0x40021400
 8001690:	40021800 	.word	0x40021800
 8001694:	40021c00 	.word	0x40021c00
 8001698:	40022000 	.word	0x40022000
 800169c:	40022400 	.word	0x40022400
 80016a0:	40013c00 	.word	0x40013c00

080016a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	807b      	strh	r3, [r7, #2]
 80016b0:	4613      	mov	r3, r2
 80016b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016b4:	787b      	ldrb	r3, [r7, #1]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ba:	887a      	ldrh	r2, [r7, #2]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80016c0:	e003      	b.n	80016ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80016c2:	887b      	ldrh	r3, [r7, #2]
 80016c4:	041a      	lsls	r2, r3, #16
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	619a      	str	r2, [r3, #24]
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e6:	6013      	str	r3, [r2, #0]
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40007000 	.word	0x40007000

080016f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	4b23      	ldr	r3, [pc, #140]	; (8001790 <HAL_PWREx_EnableOverDrive+0x98>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	4a22      	ldr	r2, [pc, #136]	; (8001790 <HAL_PWREx_EnableOverDrive+0x98>)
 8001708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170c:	6413      	str	r3, [r2, #64]	; 0x40
 800170e:	4b20      	ldr	r3, [pc, #128]	; (8001790 <HAL_PWREx_EnableOverDrive+0x98>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800171a:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <HAL_PWREx_EnableOverDrive+0x9c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a1d      	ldr	r2, [pc, #116]	; (8001794 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001724:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001726:	f7ff fcfb 	bl	8001120 <HAL_GetTick>
 800172a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800172c:	e009      	b.n	8001742 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800172e:	f7ff fcf7 	bl	8001120 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800173c:	d901      	bls.n	8001742 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e022      	b.n	8001788 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001742:	4b14      	ldr	r3, [pc, #80]	; (8001794 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800174e:	d1ee      	bne.n	800172e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001750:	4b10      	ldr	r3, [pc, #64]	; (8001794 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0f      	ldr	r2, [pc, #60]	; (8001794 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800175a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800175c:	f7ff fce0 	bl	8001120 <HAL_GetTick>
 8001760:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001762:	e009      	b.n	8001778 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001764:	f7ff fcdc 	bl	8001120 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001772:	d901      	bls.n	8001778 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e007      	b.n	8001788 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_PWREx_EnableOverDrive+0x9c>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001780:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001784:	d1ee      	bne.n	8001764 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40023800 	.word	0x40023800
 8001794:	40007000 	.word	0x40007000

08001798 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80017a0:	2300      	movs	r3, #0
 80017a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e29b      	b.n	8001ce6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f000 8087 	beq.w	80018ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017bc:	4b96      	ldr	r3, [pc, #600]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 030c 	and.w	r3, r3, #12
 80017c4:	2b04      	cmp	r3, #4
 80017c6:	d00c      	beq.n	80017e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017c8:	4b93      	ldr	r3, [pc, #588]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 030c 	and.w	r3, r3, #12
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d112      	bne.n	80017fa <HAL_RCC_OscConfig+0x62>
 80017d4:	4b90      	ldr	r3, [pc, #576]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017e0:	d10b      	bne.n	80017fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e2:	4b8d      	ldr	r3, [pc, #564]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d06c      	beq.n	80018c8 <HAL_RCC_OscConfig+0x130>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d168      	bne.n	80018c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e275      	b.n	8001ce6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001802:	d106      	bne.n	8001812 <HAL_RCC_OscConfig+0x7a>
 8001804:	4b84      	ldr	r3, [pc, #528]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a83      	ldr	r2, [pc, #524]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 800180a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	e02e      	b.n	8001870 <HAL_RCC_OscConfig+0xd8>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10c      	bne.n	8001834 <HAL_RCC_OscConfig+0x9c>
 800181a:	4b7f      	ldr	r3, [pc, #508]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a7e      	ldr	r2, [pc, #504]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 8001820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	4b7c      	ldr	r3, [pc, #496]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a7b      	ldr	r2, [pc, #492]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 800182c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	e01d      	b.n	8001870 <HAL_RCC_OscConfig+0xd8>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800183c:	d10c      	bne.n	8001858 <HAL_RCC_OscConfig+0xc0>
 800183e:	4b76      	ldr	r3, [pc, #472]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a75      	ldr	r2, [pc, #468]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 8001844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	4b73      	ldr	r3, [pc, #460]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a72      	ldr	r2, [pc, #456]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 8001850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	e00b      	b.n	8001870 <HAL_RCC_OscConfig+0xd8>
 8001858:	4b6f      	ldr	r3, [pc, #444]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a6e      	ldr	r2, [pc, #440]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 800185e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	4b6c      	ldr	r3, [pc, #432]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a6b      	ldr	r2, [pc, #428]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 800186a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800186e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d013      	beq.n	80018a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7ff fc52 	bl	8001120 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001880:	f7ff fc4e 	bl	8001120 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b64      	cmp	r3, #100	; 0x64
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e229      	b.n	8001ce6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001892:	4b61      	ldr	r3, [pc, #388]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0xe8>
 800189e:	e014      	b.n	80018ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a0:	f7ff fc3e 	bl	8001120 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a8:	f7ff fc3a 	bl	8001120 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b64      	cmp	r3, #100	; 0x64
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e215      	b.n	8001ce6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ba:	4b57      	ldr	r3, [pc, #348]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0x110>
 80018c6:	e000      	b.n	80018ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d069      	beq.n	80019aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018d6:	4b50      	ldr	r3, [pc, #320]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00b      	beq.n	80018fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018e2:	4b4d      	ldr	r3, [pc, #308]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 030c 	and.w	r3, r3, #12
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	d11c      	bne.n	8001928 <HAL_RCC_OscConfig+0x190>
 80018ee:	4b4a      	ldr	r3, [pc, #296]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d116      	bne.n	8001928 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fa:	4b47      	ldr	r3, [pc, #284]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d005      	beq.n	8001912 <HAL_RCC_OscConfig+0x17a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d001      	beq.n	8001912 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e1e9      	b.n	8001ce6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001912:	4b41      	ldr	r3, [pc, #260]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	493d      	ldr	r1, [pc, #244]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 8001922:	4313      	orrs	r3, r2
 8001924:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001926:	e040      	b.n	80019aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d023      	beq.n	8001978 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001930:	4b39      	ldr	r3, [pc, #228]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a38      	ldr	r2, [pc, #224]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193c:	f7ff fbf0 	bl	8001120 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001944:	f7ff fbec 	bl	8001120 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e1c7      	b.n	8001ce6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001956:	4b30      	ldr	r3, [pc, #192]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001962:	4b2d      	ldr	r3, [pc, #180]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	4929      	ldr	r1, [pc, #164]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]
 8001976:	e018      	b.n	80019aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001978:	4b27      	ldr	r3, [pc, #156]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a26      	ldr	r2, [pc, #152]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 800197e:	f023 0301 	bic.w	r3, r3, #1
 8001982:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7ff fbcc 	bl	8001120 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800198c:	f7ff fbc8 	bl	8001120 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e1a3      	b.n	8001ce6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199e:	4b1e      	ldr	r3, [pc, #120]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d038      	beq.n	8001a28 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d019      	beq.n	80019f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019be:	4b16      	ldr	r3, [pc, #88]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 80019c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019c2:	4a15      	ldr	r2, [pc, #84]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ca:	f7ff fba9 	bl	8001120 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d2:	f7ff fba5 	bl	8001120 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e180      	b.n	8001ce6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 80019e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f0      	beq.n	80019d2 <HAL_RCC_OscConfig+0x23a>
 80019f0:	e01a      	b.n	8001a28 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 80019f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019f6:	4a08      	ldr	r2, [pc, #32]	; (8001a18 <HAL_RCC_OscConfig+0x280>)
 80019f8:	f023 0301 	bic.w	r3, r3, #1
 80019fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fe:	f7ff fb8f 	bl	8001120 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a04:	e00a      	b.n	8001a1c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a06:	f7ff fb8b 	bl	8001120 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d903      	bls.n	8001a1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e166      	b.n	8001ce6 <HAL_RCC_OscConfig+0x54e>
 8001a18:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a1c:	4b92      	ldr	r3, [pc, #584]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1ee      	bne.n	8001a06 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 80a4 	beq.w	8001b7e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a36:	4b8c      	ldr	r3, [pc, #560]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10d      	bne.n	8001a5e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	4b89      	ldr	r3, [pc, #548]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	4a88      	ldr	r2, [pc, #544]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4e:	4b86      	ldr	r3, [pc, #536]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a5e:	4b83      	ldr	r3, [pc, #524]	; (8001c6c <HAL_RCC_OscConfig+0x4d4>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d118      	bne.n	8001a9c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001a6a:	4b80      	ldr	r3, [pc, #512]	; (8001c6c <HAL_RCC_OscConfig+0x4d4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a7f      	ldr	r2, [pc, #508]	; (8001c6c <HAL_RCC_OscConfig+0x4d4>)
 8001a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a76:	f7ff fb53 	bl	8001120 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a7e:	f7ff fb4f 	bl	8001120 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b64      	cmp	r3, #100	; 0x64
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e12a      	b.n	8001ce6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a90:	4b76      	ldr	r3, [pc, #472]	; (8001c6c <HAL_RCC_OscConfig+0x4d4>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f0      	beq.n	8001a7e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d106      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x31a>
 8001aa4:	4b70      	ldr	r3, [pc, #448]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa8:	4a6f      	ldr	r2, [pc, #444]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab0:	e02d      	b.n	8001b0e <HAL_RCC_OscConfig+0x376>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x33c>
 8001aba:	4b6b      	ldr	r3, [pc, #428]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abe:	4a6a      	ldr	r2, [pc, #424]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001ac0:	f023 0301 	bic.w	r3, r3, #1
 8001ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac6:	4b68      	ldr	r3, [pc, #416]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aca:	4a67      	ldr	r2, [pc, #412]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001acc:	f023 0304 	bic.w	r3, r3, #4
 8001ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad2:	e01c      	b.n	8001b0e <HAL_RCC_OscConfig+0x376>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	2b05      	cmp	r3, #5
 8001ada:	d10c      	bne.n	8001af6 <HAL_RCC_OscConfig+0x35e>
 8001adc:	4b62      	ldr	r3, [pc, #392]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae0:	4a61      	ldr	r2, [pc, #388]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001ae2:	f043 0304 	orr.w	r3, r3, #4
 8001ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae8:	4b5f      	ldr	r3, [pc, #380]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aec:	4a5e      	ldr	r2, [pc, #376]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	6713      	str	r3, [r2, #112]	; 0x70
 8001af4:	e00b      	b.n	8001b0e <HAL_RCC_OscConfig+0x376>
 8001af6:	4b5c      	ldr	r3, [pc, #368]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afa:	4a5b      	ldr	r2, [pc, #364]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001afc:	f023 0301 	bic.w	r3, r3, #1
 8001b00:	6713      	str	r3, [r2, #112]	; 0x70
 8001b02:	4b59      	ldr	r3, [pc, #356]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b06:	4a58      	ldr	r2, [pc, #352]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001b08:	f023 0304 	bic.w	r3, r3, #4
 8001b0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d015      	beq.n	8001b42 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b16:	f7ff fb03 	bl	8001120 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b1c:	e00a      	b.n	8001b34 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1e:	f7ff faff 	bl	8001120 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e0d8      	b.n	8001ce6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b34:	4b4c      	ldr	r3, [pc, #304]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0ee      	beq.n	8001b1e <HAL_RCC_OscConfig+0x386>
 8001b40:	e014      	b.n	8001b6c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b42:	f7ff faed 	bl	8001120 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b48:	e00a      	b.n	8001b60 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b4a:	f7ff fae9 	bl	8001120 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e0c2      	b.n	8001ce6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b60:	4b41      	ldr	r3, [pc, #260]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1ee      	bne.n	8001b4a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b6c:	7dfb      	ldrb	r3, [r7, #23]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d105      	bne.n	8001b7e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b72:	4b3d      	ldr	r3, [pc, #244]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	4a3c      	ldr	r2, [pc, #240]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001b78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 80ae 	beq.w	8001ce4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b88:	4b37      	ldr	r3, [pc, #220]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d06d      	beq.n	8001c70 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d14b      	bne.n	8001c34 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9c:	4b32      	ldr	r3, [pc, #200]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a31      	ldr	r2, [pc, #196]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001ba2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba8:	f7ff faba 	bl	8001120 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb0:	f7ff fab6 	bl	8001120 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e091      	b.n	8001ce6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bc2:	4b29      	ldr	r3, [pc, #164]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f0      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69da      	ldr	r2, [r3, #28]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	019b      	lsls	r3, r3, #6
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be4:	085b      	lsrs	r3, r3, #1
 8001be6:	3b01      	subs	r3, #1
 8001be8:	041b      	lsls	r3, r3, #16
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf0:	061b      	lsls	r3, r3, #24
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf8:	071b      	lsls	r3, r3, #28
 8001bfa:	491b      	ldr	r1, [pc, #108]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c00:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a18      	ldr	r2, [pc, #96]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001c06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0c:	f7ff fa88 	bl	8001120 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c14:	f7ff fa84 	bl	8001120 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e05f      	b.n	8001ce6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f0      	beq.n	8001c14 <HAL_RCC_OscConfig+0x47c>
 8001c32:	e057      	b.n	8001ce4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a0b      	ldr	r2, [pc, #44]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001c3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c40:	f7ff fa6e 	bl	8001120 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c48:	f7ff fa6a 	bl	8001120 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e045      	b.n	8001ce6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5a:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <HAL_RCC_OscConfig+0x4d0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x4b0>
 8001c66:	e03d      	b.n	8001ce4 <HAL_RCC_OscConfig+0x54c>
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001c70:	4b1f      	ldr	r3, [pc, #124]	; (8001cf0 <HAL_RCC_OscConfig+0x558>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d030      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d129      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d122      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ca6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d119      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb6:	085b      	lsrs	r3, r3, #1
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d10f      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d107      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e000      	b.n	8001ce6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800

08001cf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e0d0      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d0c:	4b6a      	ldr	r3, [pc, #424]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 030f 	and.w	r3, r3, #15
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d910      	bls.n	8001d3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1a:	4b67      	ldr	r3, [pc, #412]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 020f 	bic.w	r2, r3, #15
 8001d22:	4965      	ldr	r1, [pc, #404]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2a:	4b63      	ldr	r3, [pc, #396]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0b8      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d020      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d54:	4b59      	ldr	r3, [pc, #356]	; (8001ebc <HAL_RCC_ClockConfig+0x1c8>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	4a58      	ldr	r2, [pc, #352]	; (8001ebc <HAL_RCC_ClockConfig+0x1c8>)
 8001d5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d6c:	4b53      	ldr	r3, [pc, #332]	; (8001ebc <HAL_RCC_ClockConfig+0x1c8>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	4a52      	ldr	r2, [pc, #328]	; (8001ebc <HAL_RCC_ClockConfig+0x1c8>)
 8001d72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d78:	4b50      	ldr	r3, [pc, #320]	; (8001ebc <HAL_RCC_ClockConfig+0x1c8>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	494d      	ldr	r1, [pc, #308]	; (8001ebc <HAL_RCC_ClockConfig+0x1c8>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d040      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d107      	bne.n	8001dae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9e:	4b47      	ldr	r3, [pc, #284]	; (8001ebc <HAL_RCC_ClockConfig+0x1c8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d115      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e07f      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d107      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db6:	4b41      	ldr	r3, [pc, #260]	; (8001ebc <HAL_RCC_ClockConfig+0x1c8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d109      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e073      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc6:	4b3d      	ldr	r3, [pc, #244]	; (8001ebc <HAL_RCC_ClockConfig+0x1c8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e06b      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dd6:	4b39      	ldr	r3, [pc, #228]	; (8001ebc <HAL_RCC_ClockConfig+0x1c8>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f023 0203 	bic.w	r2, r3, #3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4936      	ldr	r1, [pc, #216]	; (8001ebc <HAL_RCC_ClockConfig+0x1c8>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001de8:	f7ff f99a 	bl	8001120 <HAL_GetTick>
 8001dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dee:	e00a      	b.n	8001e06 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df0:	f7ff f996 	bl	8001120 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e053      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e06:	4b2d      	ldr	r3, [pc, #180]	; (8001ebc <HAL_RCC_ClockConfig+0x1c8>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 020c 	and.w	r2, r3, #12
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d1eb      	bne.n	8001df0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e18:	4b27      	ldr	r3, [pc, #156]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d210      	bcs.n	8001e48 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e26:	4b24      	ldr	r3, [pc, #144]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 020f 	bic.w	r2, r3, #15
 8001e2e:	4922      	ldr	r1, [pc, #136]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e36:	4b20      	ldr	r3, [pc, #128]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e032      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d008      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e54:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <HAL_RCC_ClockConfig+0x1c8>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	4916      	ldr	r1, [pc, #88]	; (8001ebc <HAL_RCC_ClockConfig+0x1c8>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d009      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e72:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <HAL_RCC_ClockConfig+0x1c8>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	490e      	ldr	r1, [pc, #56]	; (8001ebc <HAL_RCC_ClockConfig+0x1c8>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e86:	f000 f821 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_RCC_ClockConfig+0x1c8>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	490a      	ldr	r1, [pc, #40]	; (8001ec0 <HAL_RCC_ClockConfig+0x1cc>)
 8001e98:	5ccb      	ldrb	r3, [r1, r3]
 8001e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9e:	4a09      	ldr	r2, [pc, #36]	; (8001ec4 <HAL_RCC_ClockConfig+0x1d0>)
 8001ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <HAL_RCC_ClockConfig+0x1d4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff f8f6 	bl	8001098 <HAL_InitTick>

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40023c00 	.word	0x40023c00
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	08003ffc 	.word	0x08003ffc
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	20000004 	.word	0x20000004

08001ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ed0:	b094      	sub	sp, #80	; 0x50
 8001ed2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	647b      	str	r3, [r7, #68]	; 0x44
 8001ed8:	2300      	movs	r3, #0
 8001eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001edc:	2300      	movs	r3, #0
 8001ede:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ee4:	4b79      	ldr	r3, [pc, #484]	; (80020cc <HAL_RCC_GetSysClockFreq+0x200>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 030c 	and.w	r3, r3, #12
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d00d      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0x40>
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	f200 80e1 	bhi.w	80020b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d002      	beq.n	8001f00 <HAL_RCC_GetSysClockFreq+0x34>
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d003      	beq.n	8001f06 <HAL_RCC_GetSysClockFreq+0x3a>
 8001efe:	e0db      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f00:	4b73      	ldr	r3, [pc, #460]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f04:	e0db      	b.n	80020be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f06:	4b73      	ldr	r3, [pc, #460]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001f08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f0a:	e0d8      	b.n	80020be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f0c:	4b6f      	ldr	r3, [pc, #444]	; (80020cc <HAL_RCC_GetSysClockFreq+0x200>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f14:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f16:	4b6d      	ldr	r3, [pc, #436]	; (80020cc <HAL_RCC_GetSysClockFreq+0x200>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d063      	beq.n	8001fea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f22:	4b6a      	ldr	r3, [pc, #424]	; (80020cc <HAL_RCC_GetSysClockFreq+0x200>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	099b      	lsrs	r3, r3, #6
 8001f28:	2200      	movs	r2, #0
 8001f2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f34:	633b      	str	r3, [r7, #48]	; 0x30
 8001f36:	2300      	movs	r3, #0
 8001f38:	637b      	str	r3, [r7, #52]	; 0x34
 8001f3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f3e:	4622      	mov	r2, r4
 8001f40:	462b      	mov	r3, r5
 8001f42:	f04f 0000 	mov.w	r0, #0
 8001f46:	f04f 0100 	mov.w	r1, #0
 8001f4a:	0159      	lsls	r1, r3, #5
 8001f4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f50:	0150      	lsls	r0, r2, #5
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	4621      	mov	r1, r4
 8001f58:	1a51      	subs	r1, r2, r1
 8001f5a:	6139      	str	r1, [r7, #16]
 8001f5c:	4629      	mov	r1, r5
 8001f5e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f70:	4659      	mov	r1, fp
 8001f72:	018b      	lsls	r3, r1, #6
 8001f74:	4651      	mov	r1, sl
 8001f76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f7a:	4651      	mov	r1, sl
 8001f7c:	018a      	lsls	r2, r1, #6
 8001f7e:	4651      	mov	r1, sl
 8001f80:	ebb2 0801 	subs.w	r8, r2, r1
 8001f84:	4659      	mov	r1, fp
 8001f86:	eb63 0901 	sbc.w	r9, r3, r1
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	f04f 0300 	mov.w	r3, #0
 8001f92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f9e:	4690      	mov	r8, r2
 8001fa0:	4699      	mov	r9, r3
 8001fa2:	4623      	mov	r3, r4
 8001fa4:	eb18 0303 	adds.w	r3, r8, r3
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	462b      	mov	r3, r5
 8001fac:	eb49 0303 	adc.w	r3, r9, r3
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	024b      	lsls	r3, r1, #9
 8001fc2:	4621      	mov	r1, r4
 8001fc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fc8:	4621      	mov	r1, r4
 8001fca:	024a      	lsls	r2, r1, #9
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4619      	mov	r1, r3
 8001fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fdc:	f7fe f92c 	bl	8000238 <__aeabi_uldivmod>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fe8:	e058      	b.n	800209c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fea:	4b38      	ldr	r3, [pc, #224]	; (80020cc <HAL_RCC_GetSysClockFreq+0x200>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	099b      	lsrs	r3, r3, #6
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ffa:	623b      	str	r3, [r7, #32]
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8002000:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002004:	4642      	mov	r2, r8
 8002006:	464b      	mov	r3, r9
 8002008:	f04f 0000 	mov.w	r0, #0
 800200c:	f04f 0100 	mov.w	r1, #0
 8002010:	0159      	lsls	r1, r3, #5
 8002012:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002016:	0150      	lsls	r0, r2, #5
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4641      	mov	r1, r8
 800201e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002022:	4649      	mov	r1, r9
 8002024:	eb63 0b01 	sbc.w	fp, r3, r1
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	f04f 0300 	mov.w	r3, #0
 8002030:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002034:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002038:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800203c:	ebb2 040a 	subs.w	r4, r2, sl
 8002040:	eb63 050b 	sbc.w	r5, r3, fp
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	00eb      	lsls	r3, r5, #3
 800204e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002052:	00e2      	lsls	r2, r4, #3
 8002054:	4614      	mov	r4, r2
 8002056:	461d      	mov	r5, r3
 8002058:	4643      	mov	r3, r8
 800205a:	18e3      	adds	r3, r4, r3
 800205c:	603b      	str	r3, [r7, #0]
 800205e:	464b      	mov	r3, r9
 8002060:	eb45 0303 	adc.w	r3, r5, r3
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	f04f 0300 	mov.w	r3, #0
 800206e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002072:	4629      	mov	r1, r5
 8002074:	028b      	lsls	r3, r1, #10
 8002076:	4621      	mov	r1, r4
 8002078:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800207c:	4621      	mov	r1, r4
 800207e:	028a      	lsls	r2, r1, #10
 8002080:	4610      	mov	r0, r2
 8002082:	4619      	mov	r1, r3
 8002084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002086:	2200      	movs	r2, #0
 8002088:	61bb      	str	r3, [r7, #24]
 800208a:	61fa      	str	r2, [r7, #28]
 800208c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002090:	f7fe f8d2 	bl	8000238 <__aeabi_uldivmod>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4613      	mov	r3, r2
 800209a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800209c:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <HAL_RCC_GetSysClockFreq+0x200>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	0c1b      	lsrs	r3, r3, #16
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	3301      	adds	r3, #1
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80020ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020b6:	e002      	b.n	80020be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80020ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3750      	adds	r7, #80	; 0x50
 80020c4:	46bd      	mov	sp, r7
 80020c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020ca:	bf00      	nop
 80020cc:	40023800 	.word	0x40023800
 80020d0:	00f42400 	.word	0x00f42400
 80020d4:	007a1200 	.word	0x007a1200

080020d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020dc:	4b03      	ldr	r3, [pc, #12]	; (80020ec <HAL_RCC_GetHCLKFreq+0x14>)
 80020de:	681b      	ldr	r3, [r3, #0]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000000 	.word	0x20000000

080020f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020f4:	f7ff fff0 	bl	80020d8 <HAL_RCC_GetHCLKFreq>
 80020f8:	4602      	mov	r2, r0
 80020fa:	4b05      	ldr	r3, [pc, #20]	; (8002110 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	0a9b      	lsrs	r3, r3, #10
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	4903      	ldr	r1, [pc, #12]	; (8002114 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002106:	5ccb      	ldrb	r3, [r1, r3]
 8002108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800210c:	4618      	mov	r0, r3
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40023800 	.word	0x40023800
 8002114:	0800400c 	.word	0x0800400c

08002118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800211c:	f7ff ffdc 	bl	80020d8 <HAL_RCC_GetHCLKFreq>
 8002120:	4602      	mov	r2, r0
 8002122:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	0b5b      	lsrs	r3, r3, #13
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	4903      	ldr	r1, [pc, #12]	; (800213c <HAL_RCC_GetPCLK2Freq+0x24>)
 800212e:	5ccb      	ldrb	r3, [r1, r3]
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002134:	4618      	mov	r0, r3
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40023800 	.word	0x40023800
 800213c:	0800400c 	.word	0x0800400c

08002140 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b088      	sub	sp, #32
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	d012      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002168:	4b69      	ldr	r3, [pc, #420]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	4a68      	ldr	r2, [pc, #416]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800216e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002172:	6093      	str	r3, [r2, #8]
 8002174:	4b66      	ldr	r3, [pc, #408]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800217c:	4964      	ldr	r1, [pc, #400]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800217e:	4313      	orrs	r3, r2
 8002180:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800218a:	2301      	movs	r3, #1
 800218c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d017      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800219a:	4b5d      	ldr	r3, [pc, #372]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800219c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a8:	4959      	ldr	r1, [pc, #356]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021b8:	d101      	bne.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80021ba:	2301      	movs	r3, #1
 80021bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80021c6:	2301      	movs	r3, #1
 80021c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d017      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021d6:	4b4e      	ldr	r3, [pc, #312]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	494a      	ldr	r1, [pc, #296]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021f4:	d101      	bne.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80021f6:	2301      	movs	r3, #1
 80021f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002202:	2301      	movs	r3, #1
 8002204:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002212:	2301      	movs	r3, #1
 8002214:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0320 	and.w	r3, r3, #32
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 808b 	beq.w	800233a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002224:	4b3a      	ldr	r3, [pc, #232]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	4a39      	ldr	r2, [pc, #228]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800222a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800222e:	6413      	str	r3, [r2, #64]	; 0x40
 8002230:	4b37      	ldr	r3, [pc, #220]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800223c:	4b35      	ldr	r3, [pc, #212]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a34      	ldr	r2, [pc, #208]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002246:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002248:	f7fe ff6a 	bl	8001120 <HAL_GetTick>
 800224c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002250:	f7fe ff66 	bl	8001120 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b64      	cmp	r3, #100	; 0x64
 800225c:	d901      	bls.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e38f      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002262:	4b2c      	ldr	r3, [pc, #176]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800226e:	4b28      	ldr	r3, [pc, #160]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002276:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d035      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	429a      	cmp	r2, r3
 800228a:	d02e      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800228c:	4b20      	ldr	r3, [pc, #128]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800228e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002294:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002296:	4b1e      	ldr	r3, [pc, #120]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229a:	4a1d      	ldr	r2, [pc, #116]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800229c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022a2:	4b1b      	ldr	r3, [pc, #108]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a6:	4a1a      	ldr	r2, [pc, #104]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80022ae:	4a18      	ldr	r2, [pc, #96]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80022b4:	4b16      	ldr	r3, [pc, #88]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d114      	bne.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7fe ff2e 	bl	8001120 <HAL_GetTick>
 80022c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c6:	e00a      	b.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c8:	f7fe ff2a 	bl	8001120 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d901      	bls.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e351      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022de:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0ee      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022f6:	d111      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80022f8:	4b05      	ldr	r3, [pc, #20]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002306:	400b      	ands	r3, r1
 8002308:	4901      	ldr	r1, [pc, #4]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800230a:	4313      	orrs	r3, r2
 800230c:	608b      	str	r3, [r1, #8]
 800230e:	e00b      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002310:	40023800 	.word	0x40023800
 8002314:	40007000 	.word	0x40007000
 8002318:	0ffffcff 	.word	0x0ffffcff
 800231c:	4bac      	ldr	r3, [pc, #688]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	4aab      	ldr	r2, [pc, #684]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002322:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002326:	6093      	str	r3, [r2, #8]
 8002328:	4ba9      	ldr	r3, [pc, #676]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800232a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002334:	49a6      	ldr	r1, [pc, #664]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002336:	4313      	orrs	r3, r2
 8002338:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0310 	and.w	r3, r3, #16
 8002342:	2b00      	cmp	r3, #0
 8002344:	d010      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002346:	4ba2      	ldr	r3, [pc, #648]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800234c:	4aa0      	ldr	r2, [pc, #640]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800234e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002352:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002356:	4b9e      	ldr	r3, [pc, #632]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002358:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002360:	499b      	ldr	r1, [pc, #620]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002362:	4313      	orrs	r3, r2
 8002364:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00a      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002374:	4b96      	ldr	r3, [pc, #600]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002382:	4993      	ldr	r1, [pc, #588]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00a      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002396:	4b8e      	ldr	r3, [pc, #568]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023a4:	498a      	ldr	r1, [pc, #552]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00a      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023b8:	4b85      	ldr	r3, [pc, #532]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023c6:	4982      	ldr	r1, [pc, #520]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00a      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80023da:	4b7d      	ldr	r3, [pc, #500]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e8:	4979      	ldr	r1, [pc, #484]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00a      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023fc:	4b74      	ldr	r3, [pc, #464]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002402:	f023 0203 	bic.w	r2, r3, #3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240a:	4971      	ldr	r1, [pc, #452]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800240c:	4313      	orrs	r3, r2
 800240e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00a      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800241e:	4b6c      	ldr	r3, [pc, #432]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002424:	f023 020c 	bic.w	r2, r3, #12
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800242c:	4968      	ldr	r1, [pc, #416]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800242e:	4313      	orrs	r3, r2
 8002430:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00a      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002440:	4b63      	ldr	r3, [pc, #396]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002446:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800244e:	4960      	ldr	r1, [pc, #384]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002450:	4313      	orrs	r3, r2
 8002452:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00a      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002462:	4b5b      	ldr	r3, [pc, #364]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002468:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002470:	4957      	ldr	r1, [pc, #348]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002472:	4313      	orrs	r3, r2
 8002474:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00a      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002484:	4b52      	ldr	r3, [pc, #328]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002492:	494f      	ldr	r1, [pc, #316]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002494:	4313      	orrs	r3, r2
 8002496:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00a      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80024a6:	4b4a      	ldr	r3, [pc, #296]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b4:	4946      	ldr	r1, [pc, #280]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00a      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80024c8:	4b41      	ldr	r3, [pc, #260]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d6:	493e      	ldr	r1, [pc, #248]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00a      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80024ea:	4b39      	ldr	r3, [pc, #228]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f8:	4935      	ldr	r1, [pc, #212]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00a      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800250c:	4b30      	ldr	r3, [pc, #192]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800250e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002512:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800251a:	492d      	ldr	r1, [pc, #180]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800251c:	4313      	orrs	r3, r2
 800251e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d011      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800252e:	4b28      	ldr	r3, [pc, #160]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002534:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800253c:	4924      	ldr	r1, [pc, #144]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800253e:	4313      	orrs	r3, r2
 8002540:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002548:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800254c:	d101      	bne.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800254e:	2301      	movs	r3, #1
 8002550:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800255e:	2301      	movs	r3, #1
 8002560:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800256e:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002574:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257c:	4914      	ldr	r1, [pc, #80]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800257e:	4313      	orrs	r3, r2
 8002580:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00b      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002590:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002596:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025a0:	490b      	ldr	r1, [pc, #44]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00f      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025c4:	4902      	ldr	r1, [pc, #8]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025cc:	e002      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80025ce:	bf00      	nop
 80025d0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00b      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025e0:	4b8a      	ldr	r3, [pc, #552]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f0:	4986      	ldr	r1, [pc, #536]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00b      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002604:	4b81      	ldr	r3, [pc, #516]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002606:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800260a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002614:	497d      	ldr	r1, [pc, #500]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d006      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 80d6 	beq.w	80027dc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002630:	4b76      	ldr	r3, [pc, #472]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a75      	ldr	r2, [pc, #468]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002636:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800263a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800263c:	f7fe fd70 	bl	8001120 <HAL_GetTick>
 8002640:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002644:	f7fe fd6c 	bl	8001120 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	; 0x64
 8002650:	d901      	bls.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e195      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002656:	4b6d      	ldr	r3, [pc, #436]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d021      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002672:	2b00      	cmp	r3, #0
 8002674:	d11d      	bne.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002676:	4b65      	ldr	r3, [pc, #404]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800267c:	0c1b      	lsrs	r3, r3, #16
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002684:	4b61      	ldr	r3, [pc, #388]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800268a:	0e1b      	lsrs	r3, r3, #24
 800268c:	f003 030f 	and.w	r3, r3, #15
 8002690:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	019a      	lsls	r2, r3, #6
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	041b      	lsls	r3, r3, #16
 800269c:	431a      	orrs	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	061b      	lsls	r3, r3, #24
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	071b      	lsls	r3, r3, #28
 80026aa:	4958      	ldr	r1, [pc, #352]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d004      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026c6:	d00a      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d02e      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026dc:	d129      	bne.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80026de:	4b4b      	ldr	r3, [pc, #300]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026e4:	0c1b      	lsrs	r3, r3, #16
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026ec:	4b47      	ldr	r3, [pc, #284]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026f2:	0f1b      	lsrs	r3, r3, #28
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	019a      	lsls	r2, r3, #6
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	041b      	lsls	r3, r3, #16
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	061b      	lsls	r3, r3, #24
 800270c:	431a      	orrs	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	071b      	lsls	r3, r3, #28
 8002712:	493e      	ldr	r1, [pc, #248]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800271a:	4b3c      	ldr	r3, [pc, #240]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800271c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002720:	f023 021f 	bic.w	r2, r3, #31
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	3b01      	subs	r3, #1
 800272a:	4938      	ldr	r1, [pc, #224]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d01d      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800273e:	4b33      	ldr	r3, [pc, #204]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002744:	0e1b      	lsrs	r3, r3, #24
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800274c:	4b2f      	ldr	r3, [pc, #188]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800274e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002752:	0f1b      	lsrs	r3, r3, #28
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	019a      	lsls	r2, r3, #6
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	041b      	lsls	r3, r3, #16
 8002766:	431a      	orrs	r2, r3
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	061b      	lsls	r3, r3, #24
 800276c:	431a      	orrs	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	071b      	lsls	r3, r3, #28
 8002772:	4926      	ldr	r1, [pc, #152]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d011      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	019a      	lsls	r2, r3, #6
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	041b      	lsls	r3, r3, #16
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	061b      	lsls	r3, r3, #24
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	071b      	lsls	r3, r3, #28
 80027a2:	491a      	ldr	r1, [pc, #104]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80027aa:	4b18      	ldr	r3, [pc, #96]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a17      	ldr	r2, [pc, #92]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027b6:	f7fe fcb3 	bl	8001120 <HAL_GetTick>
 80027ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027bc:	e008      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80027be:	f7fe fcaf 	bl	8001120 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b64      	cmp	r3, #100	; 0x64
 80027ca:	d901      	bls.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e0d8      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027d0:	4b0e      	ldr	r3, [pc, #56]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0f0      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	f040 80ce 	bne.w	8002980 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80027e4:	4b09      	ldr	r3, [pc, #36]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a08      	ldr	r2, [pc, #32]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027f0:	f7fe fc96 	bl	8001120 <HAL_GetTick>
 80027f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80027f6:	e00b      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80027f8:	f7fe fc92 	bl	8001120 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b64      	cmp	r3, #100	; 0x64
 8002804:	d904      	bls.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e0bb      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800280a:	bf00      	nop
 800280c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002810:	4b5e      	ldr	r3, [pc, #376]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002818:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800281c:	d0ec      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282e:	2b00      	cmp	r3, #0
 8002830:	d009      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800283a:	2b00      	cmp	r3, #0
 800283c:	d02e      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	2b00      	cmp	r3, #0
 8002844:	d12a      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002846:	4b51      	ldr	r3, [pc, #324]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284c:	0c1b      	lsrs	r3, r3, #16
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002854:	4b4d      	ldr	r3, [pc, #308]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285a:	0f1b      	lsrs	r3, r3, #28
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	019a      	lsls	r2, r3, #6
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	041b      	lsls	r3, r3, #16
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	061b      	lsls	r3, r3, #24
 8002874:	431a      	orrs	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	071b      	lsls	r3, r3, #28
 800287a:	4944      	ldr	r1, [pc, #272]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800287c:	4313      	orrs	r3, r2
 800287e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002882:	4b42      	ldr	r3, [pc, #264]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002888:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002890:	3b01      	subs	r3, #1
 8002892:	021b      	lsls	r3, r3, #8
 8002894:	493d      	ldr	r1, [pc, #244]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002896:	4313      	orrs	r3, r2
 8002898:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d022      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028b0:	d11d      	bne.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028b2:	4b36      	ldr	r3, [pc, #216]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b8:	0e1b      	lsrs	r3, r3, #24
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80028c0:	4b32      	ldr	r3, [pc, #200]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c6:	0f1b      	lsrs	r3, r3, #28
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	019a      	lsls	r2, r3, #6
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	041b      	lsls	r3, r3, #16
 80028da:	431a      	orrs	r2, r3
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	061b      	lsls	r3, r3, #24
 80028e0:	431a      	orrs	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	071b      	lsls	r3, r3, #28
 80028e6:	4929      	ldr	r1, [pc, #164]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d028      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028fa:	4b24      	ldr	r3, [pc, #144]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002900:	0e1b      	lsrs	r3, r3, #24
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002908:	4b20      	ldr	r3, [pc, #128]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290e:	0c1b      	lsrs	r3, r3, #16
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	019a      	lsls	r2, r3, #6
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	041b      	lsls	r3, r3, #16
 8002920:	431a      	orrs	r2, r3
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	061b      	lsls	r3, r3, #24
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	071b      	lsls	r3, r3, #28
 800292e:	4917      	ldr	r1, [pc, #92]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002936:	4b15      	ldr	r3, [pc, #84]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800293c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	4911      	ldr	r1, [pc, #68]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002946:	4313      	orrs	r3, r2
 8002948:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800294c:	4b0f      	ldr	r3, [pc, #60]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a0e      	ldr	r2, [pc, #56]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002956:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002958:	f7fe fbe2 	bl	8001120 <HAL_GetTick>
 800295c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002960:	f7fe fbde 	bl	8001120 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b64      	cmp	r3, #100	; 0x64
 800296c:	d901      	bls.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e007      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002972:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800297a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800297e:	d1ef      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3720      	adds	r7, #32
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40023800 	.word	0x40023800

08002990 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e049      	b.n	8002a36 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d106      	bne.n	80029bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7fe f9ee 	bl	8000d98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2202      	movs	r2, #2
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3304      	adds	r3, #4
 80029cc:	4619      	mov	r1, r3
 80029ce:	4610      	mov	r0, r2
 80029d0:	f000 fa44 	bl	8002e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d109      	bne.n	8002a64 <HAL_TIM_PWM_Start+0x24>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	bf14      	ite	ne
 8002a5c:	2301      	movne	r3, #1
 8002a5e:	2300      	moveq	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	e03c      	b.n	8002ade <HAL_TIM_PWM_Start+0x9e>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d109      	bne.n	8002a7e <HAL_TIM_PWM_Start+0x3e>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	bf14      	ite	ne
 8002a76:	2301      	movne	r3, #1
 8002a78:	2300      	moveq	r3, #0
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	e02f      	b.n	8002ade <HAL_TIM_PWM_Start+0x9e>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d109      	bne.n	8002a98 <HAL_TIM_PWM_Start+0x58>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	bf14      	ite	ne
 8002a90:	2301      	movne	r3, #1
 8002a92:	2300      	moveq	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	e022      	b.n	8002ade <HAL_TIM_PWM_Start+0x9e>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	2b0c      	cmp	r3, #12
 8002a9c:	d109      	bne.n	8002ab2 <HAL_TIM_PWM_Start+0x72>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	bf14      	ite	ne
 8002aaa:	2301      	movne	r3, #1
 8002aac:	2300      	moveq	r3, #0
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	e015      	b.n	8002ade <HAL_TIM_PWM_Start+0x9e>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b10      	cmp	r3, #16
 8002ab6:	d109      	bne.n	8002acc <HAL_TIM_PWM_Start+0x8c>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	bf14      	ite	ne
 8002ac4:	2301      	movne	r3, #1
 8002ac6:	2300      	moveq	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	e008      	b.n	8002ade <HAL_TIM_PWM_Start+0x9e>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	bf14      	ite	ne
 8002ad8:	2301      	movne	r3, #1
 8002ada:	2300      	moveq	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e092      	b.n	8002c0c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d104      	bne.n	8002af6 <HAL_TIM_PWM_Start+0xb6>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002af4:	e023      	b.n	8002b3e <HAL_TIM_PWM_Start+0xfe>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	d104      	bne.n	8002b06 <HAL_TIM_PWM_Start+0xc6>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2202      	movs	r2, #2
 8002b00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b04:	e01b      	b.n	8002b3e <HAL_TIM_PWM_Start+0xfe>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d104      	bne.n	8002b16 <HAL_TIM_PWM_Start+0xd6>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b14:	e013      	b.n	8002b3e <HAL_TIM_PWM_Start+0xfe>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b0c      	cmp	r3, #12
 8002b1a:	d104      	bne.n	8002b26 <HAL_TIM_PWM_Start+0xe6>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b24:	e00b      	b.n	8002b3e <HAL_TIM_PWM_Start+0xfe>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2b10      	cmp	r3, #16
 8002b2a:	d104      	bne.n	8002b36 <HAL_TIM_PWM_Start+0xf6>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b34:	e003      	b.n	8002b3e <HAL_TIM_PWM_Start+0xfe>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2202      	movs	r2, #2
 8002b3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2201      	movs	r2, #1
 8002b44:	6839      	ldr	r1, [r7, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 fc86 	bl	8003458 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a30      	ldr	r2, [pc, #192]	; (8002c14 <HAL_TIM_PWM_Start+0x1d4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d004      	beq.n	8002b60 <HAL_TIM_PWM_Start+0x120>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a2f      	ldr	r2, [pc, #188]	; (8002c18 <HAL_TIM_PWM_Start+0x1d8>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d101      	bne.n	8002b64 <HAL_TIM_PWM_Start+0x124>
 8002b60:	2301      	movs	r3, #1
 8002b62:	e000      	b.n	8002b66 <HAL_TIM_PWM_Start+0x126>
 8002b64:	2300      	movs	r3, #0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d007      	beq.n	8002b7a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a25      	ldr	r2, [pc, #148]	; (8002c14 <HAL_TIM_PWM_Start+0x1d4>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d022      	beq.n	8002bca <HAL_TIM_PWM_Start+0x18a>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b8c:	d01d      	beq.n	8002bca <HAL_TIM_PWM_Start+0x18a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a22      	ldr	r2, [pc, #136]	; (8002c1c <HAL_TIM_PWM_Start+0x1dc>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d018      	beq.n	8002bca <HAL_TIM_PWM_Start+0x18a>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a20      	ldr	r2, [pc, #128]	; (8002c20 <HAL_TIM_PWM_Start+0x1e0>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d013      	beq.n	8002bca <HAL_TIM_PWM_Start+0x18a>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a1f      	ldr	r2, [pc, #124]	; (8002c24 <HAL_TIM_PWM_Start+0x1e4>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d00e      	beq.n	8002bca <HAL_TIM_PWM_Start+0x18a>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a19      	ldr	r2, [pc, #100]	; (8002c18 <HAL_TIM_PWM_Start+0x1d8>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d009      	beq.n	8002bca <HAL_TIM_PWM_Start+0x18a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a1b      	ldr	r2, [pc, #108]	; (8002c28 <HAL_TIM_PWM_Start+0x1e8>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d004      	beq.n	8002bca <HAL_TIM_PWM_Start+0x18a>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a19      	ldr	r2, [pc, #100]	; (8002c2c <HAL_TIM_PWM_Start+0x1ec>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d115      	bne.n	8002bf6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	4b17      	ldr	r3, [pc, #92]	; (8002c30 <HAL_TIM_PWM_Start+0x1f0>)
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2b06      	cmp	r3, #6
 8002bda:	d015      	beq.n	8002c08 <HAL_TIM_PWM_Start+0x1c8>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be2:	d011      	beq.n	8002c08 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f042 0201 	orr.w	r2, r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf4:	e008      	b.n	8002c08 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f042 0201 	orr.w	r2, r2, #1
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	e000      	b.n	8002c0a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40010000 	.word	0x40010000
 8002c18:	40010400 	.word	0x40010400
 8002c1c:	40000400 	.word	0x40000400
 8002c20:	40000800 	.word	0x40000800
 8002c24:	40000c00 	.word	0x40000c00
 8002c28:	40014000 	.word	0x40014000
 8002c2c:	40001800 	.word	0x40001800
 8002c30:	00010007 	.word	0x00010007

08002c34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e0ff      	b.n	8002e52 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b14      	cmp	r3, #20
 8002c5e:	f200 80f0 	bhi.w	8002e42 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002c62:	a201      	add	r2, pc, #4	; (adr r2, 8002c68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c68:	08002cbd 	.word	0x08002cbd
 8002c6c:	08002e43 	.word	0x08002e43
 8002c70:	08002e43 	.word	0x08002e43
 8002c74:	08002e43 	.word	0x08002e43
 8002c78:	08002cfd 	.word	0x08002cfd
 8002c7c:	08002e43 	.word	0x08002e43
 8002c80:	08002e43 	.word	0x08002e43
 8002c84:	08002e43 	.word	0x08002e43
 8002c88:	08002d3f 	.word	0x08002d3f
 8002c8c:	08002e43 	.word	0x08002e43
 8002c90:	08002e43 	.word	0x08002e43
 8002c94:	08002e43 	.word	0x08002e43
 8002c98:	08002d7f 	.word	0x08002d7f
 8002c9c:	08002e43 	.word	0x08002e43
 8002ca0:	08002e43 	.word	0x08002e43
 8002ca4:	08002e43 	.word	0x08002e43
 8002ca8:	08002dc1 	.word	0x08002dc1
 8002cac:	08002e43 	.word	0x08002e43
 8002cb0:	08002e43 	.word	0x08002e43
 8002cb4:	08002e43 	.word	0x08002e43
 8002cb8:	08002e01 	.word	0x08002e01
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 f96a 	bl	8002f9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699a      	ldr	r2, [r3, #24]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0208 	orr.w	r2, r2, #8
 8002cd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699a      	ldr	r2, [r3, #24]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0204 	bic.w	r2, r2, #4
 8002ce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6999      	ldr	r1, [r3, #24]
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	691a      	ldr	r2, [r3, #16]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	619a      	str	r2, [r3, #24]
      break;
 8002cfa:	e0a5      	b.n	8002e48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 f9bc 	bl	8003080 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699a      	ldr	r2, [r3, #24]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699a      	ldr	r2, [r3, #24]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6999      	ldr	r1, [r3, #24]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	021a      	lsls	r2, r3, #8
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	619a      	str	r2, [r3, #24]
      break;
 8002d3c:	e084      	b.n	8002e48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68b9      	ldr	r1, [r7, #8]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 fa13 	bl	8003170 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	69da      	ldr	r2, [r3, #28]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f042 0208 	orr.w	r2, r2, #8
 8002d58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	69da      	ldr	r2, [r3, #28]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0204 	bic.w	r2, r2, #4
 8002d68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	69d9      	ldr	r1, [r3, #28]
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	61da      	str	r2, [r3, #28]
      break;
 8002d7c:	e064      	b.n	8002e48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68b9      	ldr	r1, [r7, #8]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 fa69 	bl	800325c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	69da      	ldr	r2, [r3, #28]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	69da      	ldr	r2, [r3, #28]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002da8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	69d9      	ldr	r1, [r3, #28]
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	021a      	lsls	r2, r3, #8
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	61da      	str	r2, [r3, #28]
      break;
 8002dbe:	e043      	b.n	8002e48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68b9      	ldr	r1, [r7, #8]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 faa0 	bl	800330c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0208 	orr.w	r2, r2, #8
 8002dda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0204 	bic.w	r2, r2, #4
 8002dea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	691a      	ldr	r2, [r3, #16]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002dfe:	e023      	b.n	8002e48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68b9      	ldr	r1, [r7, #8]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 fad2 	bl	80033b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	021a      	lsls	r2, r3, #8
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002e40:	e002      	b.n	8002e48 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	75fb      	strb	r3, [r7, #23]
      break;
 8002e46:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop

08002e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a40      	ldr	r2, [pc, #256]	; (8002f70 <TIM_Base_SetConfig+0x114>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d013      	beq.n	8002e9c <TIM_Base_SetConfig+0x40>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e7a:	d00f      	beq.n	8002e9c <TIM_Base_SetConfig+0x40>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a3d      	ldr	r2, [pc, #244]	; (8002f74 <TIM_Base_SetConfig+0x118>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d00b      	beq.n	8002e9c <TIM_Base_SetConfig+0x40>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a3c      	ldr	r2, [pc, #240]	; (8002f78 <TIM_Base_SetConfig+0x11c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d007      	beq.n	8002e9c <TIM_Base_SetConfig+0x40>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a3b      	ldr	r2, [pc, #236]	; (8002f7c <TIM_Base_SetConfig+0x120>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d003      	beq.n	8002e9c <TIM_Base_SetConfig+0x40>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a3a      	ldr	r2, [pc, #232]	; (8002f80 <TIM_Base_SetConfig+0x124>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d108      	bne.n	8002eae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a2f      	ldr	r2, [pc, #188]	; (8002f70 <TIM_Base_SetConfig+0x114>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d02b      	beq.n	8002f0e <TIM_Base_SetConfig+0xb2>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ebc:	d027      	beq.n	8002f0e <TIM_Base_SetConfig+0xb2>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a2c      	ldr	r2, [pc, #176]	; (8002f74 <TIM_Base_SetConfig+0x118>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d023      	beq.n	8002f0e <TIM_Base_SetConfig+0xb2>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a2b      	ldr	r2, [pc, #172]	; (8002f78 <TIM_Base_SetConfig+0x11c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d01f      	beq.n	8002f0e <TIM_Base_SetConfig+0xb2>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a2a      	ldr	r2, [pc, #168]	; (8002f7c <TIM_Base_SetConfig+0x120>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d01b      	beq.n	8002f0e <TIM_Base_SetConfig+0xb2>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a29      	ldr	r2, [pc, #164]	; (8002f80 <TIM_Base_SetConfig+0x124>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d017      	beq.n	8002f0e <TIM_Base_SetConfig+0xb2>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a28      	ldr	r2, [pc, #160]	; (8002f84 <TIM_Base_SetConfig+0x128>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d013      	beq.n	8002f0e <TIM_Base_SetConfig+0xb2>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a27      	ldr	r2, [pc, #156]	; (8002f88 <TIM_Base_SetConfig+0x12c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d00f      	beq.n	8002f0e <TIM_Base_SetConfig+0xb2>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a26      	ldr	r2, [pc, #152]	; (8002f8c <TIM_Base_SetConfig+0x130>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d00b      	beq.n	8002f0e <TIM_Base_SetConfig+0xb2>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a25      	ldr	r2, [pc, #148]	; (8002f90 <TIM_Base_SetConfig+0x134>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d007      	beq.n	8002f0e <TIM_Base_SetConfig+0xb2>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a24      	ldr	r2, [pc, #144]	; (8002f94 <TIM_Base_SetConfig+0x138>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d003      	beq.n	8002f0e <TIM_Base_SetConfig+0xb2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a23      	ldr	r2, [pc, #140]	; (8002f98 <TIM_Base_SetConfig+0x13c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d108      	bne.n	8002f20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a0a      	ldr	r2, [pc, #40]	; (8002f70 <TIM_Base_SetConfig+0x114>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d003      	beq.n	8002f54 <TIM_Base_SetConfig+0xf8>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a0c      	ldr	r2, [pc, #48]	; (8002f80 <TIM_Base_SetConfig+0x124>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d103      	bne.n	8002f5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	615a      	str	r2, [r3, #20]
}
 8002f62:	bf00      	nop
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40010000 	.word	0x40010000
 8002f74:	40000400 	.word	0x40000400
 8002f78:	40000800 	.word	0x40000800
 8002f7c:	40000c00 	.word	0x40000c00
 8002f80:	40010400 	.word	0x40010400
 8002f84:	40014000 	.word	0x40014000
 8002f88:	40014400 	.word	0x40014400
 8002f8c:	40014800 	.word	0x40014800
 8002f90:	40001800 	.word	0x40001800
 8002f94:	40001c00 	.word	0x40001c00
 8002f98:	40002000 	.word	0x40002000

08002f9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	f023 0201 	bic.w	r2, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	4b2b      	ldr	r3, [pc, #172]	; (8003074 <TIM_OC1_SetConfig+0xd8>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f023 0303 	bic.w	r3, r3, #3
 8002fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f023 0302 	bic.w	r3, r3, #2
 8002fe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a21      	ldr	r2, [pc, #132]	; (8003078 <TIM_OC1_SetConfig+0xdc>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d003      	beq.n	8003000 <TIM_OC1_SetConfig+0x64>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a20      	ldr	r2, [pc, #128]	; (800307c <TIM_OC1_SetConfig+0xe0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d10c      	bne.n	800301a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f023 0308 	bic.w	r3, r3, #8
 8003006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	4313      	orrs	r3, r2
 8003010:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f023 0304 	bic.w	r3, r3, #4
 8003018:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a16      	ldr	r2, [pc, #88]	; (8003078 <TIM_OC1_SetConfig+0xdc>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d003      	beq.n	800302a <TIM_OC1_SetConfig+0x8e>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a15      	ldr	r2, [pc, #84]	; (800307c <TIM_OC1_SetConfig+0xe0>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d111      	bne.n	800304e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4313      	orrs	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	621a      	str	r2, [r3, #32]
}
 8003068:	bf00      	nop
 800306a:	371c      	adds	r7, #28
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	fffeff8f 	.word	0xfffeff8f
 8003078:	40010000 	.word	0x40010000
 800307c:	40010400 	.word	0x40010400

08003080 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	f023 0210 	bic.w	r2, r3, #16
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	4b2e      	ldr	r3, [pc, #184]	; (8003164 <TIM_OC2_SetConfig+0xe4>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	021b      	lsls	r3, r3, #8
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	f023 0320 	bic.w	r3, r3, #32
 80030ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a23      	ldr	r2, [pc, #140]	; (8003168 <TIM_OC2_SetConfig+0xe8>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d003      	beq.n	80030e8 <TIM_OC2_SetConfig+0x68>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a22      	ldr	r2, [pc, #136]	; (800316c <TIM_OC2_SetConfig+0xec>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d10d      	bne.n	8003104 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003102:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a18      	ldr	r2, [pc, #96]	; (8003168 <TIM_OC2_SetConfig+0xe8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d003      	beq.n	8003114 <TIM_OC2_SetConfig+0x94>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a17      	ldr	r2, [pc, #92]	; (800316c <TIM_OC2_SetConfig+0xec>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d113      	bne.n	800313c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800311a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003122:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	4313      	orrs	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4313      	orrs	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	621a      	str	r2, [r3, #32]
}
 8003156:	bf00      	nop
 8003158:	371c      	adds	r7, #28
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	feff8fff 	.word	0xfeff8fff
 8003168:	40010000 	.word	0x40010000
 800316c:	40010400 	.word	0x40010400

08003170 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003170:	b480      	push	{r7}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	4b2d      	ldr	r3, [pc, #180]	; (8003250 <TIM_OC3_SetConfig+0xe0>)
 800319c:	4013      	ands	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f023 0303 	bic.w	r3, r3, #3
 80031a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a22      	ldr	r2, [pc, #136]	; (8003254 <TIM_OC3_SetConfig+0xe4>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d003      	beq.n	80031d6 <TIM_OC3_SetConfig+0x66>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a21      	ldr	r2, [pc, #132]	; (8003258 <TIM_OC3_SetConfig+0xe8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d10d      	bne.n	80031f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	021b      	lsls	r3, r3, #8
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a17      	ldr	r2, [pc, #92]	; (8003254 <TIM_OC3_SetConfig+0xe4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d003      	beq.n	8003202 <TIM_OC3_SetConfig+0x92>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a16      	ldr	r2, [pc, #88]	; (8003258 <TIM_OC3_SetConfig+0xe8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d113      	bne.n	800322a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	621a      	str	r2, [r3, #32]
}
 8003244:	bf00      	nop
 8003246:	371c      	adds	r7, #28
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	fffeff8f 	.word	0xfffeff8f
 8003254:	40010000 	.word	0x40010000
 8003258:	40010400 	.word	0x40010400

0800325c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	4b1e      	ldr	r3, [pc, #120]	; (8003300 <TIM_OC4_SetConfig+0xa4>)
 8003288:	4013      	ands	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003292:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	021b      	lsls	r3, r3, #8
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	4313      	orrs	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	031b      	lsls	r3, r3, #12
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a13      	ldr	r2, [pc, #76]	; (8003304 <TIM_OC4_SetConfig+0xa8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d003      	beq.n	80032c4 <TIM_OC4_SetConfig+0x68>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a12      	ldr	r2, [pc, #72]	; (8003308 <TIM_OC4_SetConfig+0xac>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d109      	bne.n	80032d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	019b      	lsls	r3, r3, #6
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	621a      	str	r2, [r3, #32]
}
 80032f2:	bf00      	nop
 80032f4:	371c      	adds	r7, #28
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	feff8fff 	.word	0xfeff8fff
 8003304:	40010000 	.word	0x40010000
 8003308:	40010400 	.word	0x40010400

0800330c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800330c:	b480      	push	{r7}
 800330e:	b087      	sub	sp, #28
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	4b1b      	ldr	r3, [pc, #108]	; (80033a4 <TIM_OC5_SetConfig+0x98>)
 8003338:	4013      	ands	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	4313      	orrs	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800334c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	041b      	lsls	r3, r3, #16
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4313      	orrs	r3, r2
 8003358:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a12      	ldr	r2, [pc, #72]	; (80033a8 <TIM_OC5_SetConfig+0x9c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d003      	beq.n	800336a <TIM_OC5_SetConfig+0x5e>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a11      	ldr	r2, [pc, #68]	; (80033ac <TIM_OC5_SetConfig+0xa0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d109      	bne.n	800337e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003370:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	021b      	lsls	r3, r3, #8
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	4313      	orrs	r3, r2
 800337c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	621a      	str	r2, [r3, #32]
}
 8003398:	bf00      	nop
 800339a:	371c      	adds	r7, #28
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	fffeff8f 	.word	0xfffeff8f
 80033a8:	40010000 	.word	0x40010000
 80033ac:	40010400 	.word	0x40010400

080033b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4b1c      	ldr	r3, [pc, #112]	; (800344c <TIM_OC6_SetConfig+0x9c>)
 80033dc:	4013      	ands	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	021b      	lsls	r3, r3, #8
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	051b      	lsls	r3, r3, #20
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a13      	ldr	r2, [pc, #76]	; (8003450 <TIM_OC6_SetConfig+0xa0>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d003      	beq.n	8003410 <TIM_OC6_SetConfig+0x60>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a12      	ldr	r2, [pc, #72]	; (8003454 <TIM_OC6_SetConfig+0xa4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d109      	bne.n	8003424 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003416:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	029b      	lsls	r3, r3, #10
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	4313      	orrs	r3, r2
 8003422:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	621a      	str	r2, [r3, #32]
}
 800343e:	bf00      	nop
 8003440:	371c      	adds	r7, #28
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	feff8fff 	.word	0xfeff8fff
 8003450:	40010000 	.word	0x40010000
 8003454:	40010400 	.word	0x40010400

08003458 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f003 031f 	and.w	r3, r3, #31
 800346a:	2201      	movs	r2, #1
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a1a      	ldr	r2, [r3, #32]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	43db      	mvns	r3, r3
 800347a:	401a      	ands	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6a1a      	ldr	r2, [r3, #32]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	f003 031f 	and.w	r3, r3, #31
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	fa01 f303 	lsl.w	r3, r1, r3
 8003490:	431a      	orrs	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	621a      	str	r2, [r3, #32]
}
 8003496:	bf00      	nop
 8003498:	371c      	adds	r7, #28
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
	...

080034a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d101      	bne.n	80034bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034b8:	2302      	movs	r3, #2
 80034ba:	e06d      	b.n	8003598 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2202      	movs	r2, #2
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a30      	ldr	r2, [pc, #192]	; (80035a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d004      	beq.n	80034f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a2f      	ldr	r2, [pc, #188]	; (80035a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d108      	bne.n	8003502 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80034f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	4313      	orrs	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003508:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	4313      	orrs	r3, r2
 8003512:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a20      	ldr	r2, [pc, #128]	; (80035a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d022      	beq.n	800356c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352e:	d01d      	beq.n	800356c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a1d      	ldr	r2, [pc, #116]	; (80035ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d018      	beq.n	800356c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a1c      	ldr	r2, [pc, #112]	; (80035b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d013      	beq.n	800356c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a1a      	ldr	r2, [pc, #104]	; (80035b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00e      	beq.n	800356c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a15      	ldr	r2, [pc, #84]	; (80035a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d009      	beq.n	800356c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a16      	ldr	r2, [pc, #88]	; (80035b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d004      	beq.n	800356c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a15      	ldr	r2, [pc, #84]	; (80035bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d10c      	bne.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003572:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	4313      	orrs	r3, r2
 800357c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	40010000 	.word	0x40010000
 80035a8:	40010400 	.word	0x40010400
 80035ac:	40000400 	.word	0x40000400
 80035b0:	40000800 	.word	0x40000800
 80035b4:	40000c00 	.word	0x40000c00
 80035b8:	40014000 	.word	0x40014000
 80035bc:	40001800 	.word	0x40001800

080035c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d101      	bne.n	80035dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80035d8:	2302      	movs	r3, #2
 80035da:	e065      	b.n	80036a8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	4313      	orrs	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4313      	orrs	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	4313      	orrs	r3, r2
 8003636:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003642:	4313      	orrs	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	041b      	lsls	r3, r3, #16
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a16      	ldr	r2, [pc, #88]	; (80036b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d004      	beq.n	800366a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a14      	ldr	r2, [pc, #80]	; (80036b8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d115      	bne.n	8003696 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	051b      	lsls	r3, r3, #20
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	4313      	orrs	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	4313      	orrs	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	40010000 	.word	0x40010000
 80036b8:	40010400 	.word	0x40010400

080036bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e040      	b.n	8003750 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d106      	bne.n	80036e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7fd fc08 	bl	8000ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2224      	movs	r2, #36	; 0x24
 80036e8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0201 	bic.w	r2, r2, #1
 80036f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f82c 	bl	8003758 <UART_SetConfig>
 8003700:	4603      	mov	r3, r0
 8003702:	2b01      	cmp	r3, #1
 8003704:	d101      	bne.n	800370a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e022      	b.n	8003750 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 fa84 	bl	8003c20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003726:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003736:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0201 	orr.w	r2, r2, #1
 8003746:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 fb0b 	bl	8003d64 <UART_CheckIdleState>
 800374e:	4603      	mov	r3, r0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003760:	2300      	movs	r3, #0
 8003762:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	431a      	orrs	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	4313      	orrs	r3, r2
 800377a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	4ba6      	ldr	r3, [pc, #664]	; (8003a1c <UART_SetConfig+0x2c4>)
 8003784:	4013      	ands	r3, r2
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6812      	ldr	r2, [r2, #0]
 800378a:	6979      	ldr	r1, [r7, #20]
 800378c:	430b      	orrs	r3, r1
 800378e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a94      	ldr	r2, [pc, #592]	; (8003a20 <UART_SetConfig+0x2c8>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d120      	bne.n	8003816 <UART_SetConfig+0xbe>
 80037d4:	4b93      	ldr	r3, [pc, #588]	; (8003a24 <UART_SetConfig+0x2cc>)
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d816      	bhi.n	8003810 <UART_SetConfig+0xb8>
 80037e2:	a201      	add	r2, pc, #4	; (adr r2, 80037e8 <UART_SetConfig+0x90>)
 80037e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e8:	080037f9 	.word	0x080037f9
 80037ec:	08003805 	.word	0x08003805
 80037f0:	080037ff 	.word	0x080037ff
 80037f4:	0800380b 	.word	0x0800380b
 80037f8:	2301      	movs	r3, #1
 80037fa:	77fb      	strb	r3, [r7, #31]
 80037fc:	e150      	b.n	8003aa0 <UART_SetConfig+0x348>
 80037fe:	2302      	movs	r3, #2
 8003800:	77fb      	strb	r3, [r7, #31]
 8003802:	e14d      	b.n	8003aa0 <UART_SetConfig+0x348>
 8003804:	2304      	movs	r3, #4
 8003806:	77fb      	strb	r3, [r7, #31]
 8003808:	e14a      	b.n	8003aa0 <UART_SetConfig+0x348>
 800380a:	2308      	movs	r3, #8
 800380c:	77fb      	strb	r3, [r7, #31]
 800380e:	e147      	b.n	8003aa0 <UART_SetConfig+0x348>
 8003810:	2310      	movs	r3, #16
 8003812:	77fb      	strb	r3, [r7, #31]
 8003814:	e144      	b.n	8003aa0 <UART_SetConfig+0x348>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a83      	ldr	r2, [pc, #524]	; (8003a28 <UART_SetConfig+0x2d0>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d132      	bne.n	8003886 <UART_SetConfig+0x12e>
 8003820:	4b80      	ldr	r3, [pc, #512]	; (8003a24 <UART_SetConfig+0x2cc>)
 8003822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003826:	f003 030c 	and.w	r3, r3, #12
 800382a:	2b0c      	cmp	r3, #12
 800382c:	d828      	bhi.n	8003880 <UART_SetConfig+0x128>
 800382e:	a201      	add	r2, pc, #4	; (adr r2, 8003834 <UART_SetConfig+0xdc>)
 8003830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003834:	08003869 	.word	0x08003869
 8003838:	08003881 	.word	0x08003881
 800383c:	08003881 	.word	0x08003881
 8003840:	08003881 	.word	0x08003881
 8003844:	08003875 	.word	0x08003875
 8003848:	08003881 	.word	0x08003881
 800384c:	08003881 	.word	0x08003881
 8003850:	08003881 	.word	0x08003881
 8003854:	0800386f 	.word	0x0800386f
 8003858:	08003881 	.word	0x08003881
 800385c:	08003881 	.word	0x08003881
 8003860:	08003881 	.word	0x08003881
 8003864:	0800387b 	.word	0x0800387b
 8003868:	2300      	movs	r3, #0
 800386a:	77fb      	strb	r3, [r7, #31]
 800386c:	e118      	b.n	8003aa0 <UART_SetConfig+0x348>
 800386e:	2302      	movs	r3, #2
 8003870:	77fb      	strb	r3, [r7, #31]
 8003872:	e115      	b.n	8003aa0 <UART_SetConfig+0x348>
 8003874:	2304      	movs	r3, #4
 8003876:	77fb      	strb	r3, [r7, #31]
 8003878:	e112      	b.n	8003aa0 <UART_SetConfig+0x348>
 800387a:	2308      	movs	r3, #8
 800387c:	77fb      	strb	r3, [r7, #31]
 800387e:	e10f      	b.n	8003aa0 <UART_SetConfig+0x348>
 8003880:	2310      	movs	r3, #16
 8003882:	77fb      	strb	r3, [r7, #31]
 8003884:	e10c      	b.n	8003aa0 <UART_SetConfig+0x348>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a68      	ldr	r2, [pc, #416]	; (8003a2c <UART_SetConfig+0x2d4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d120      	bne.n	80038d2 <UART_SetConfig+0x17a>
 8003890:	4b64      	ldr	r3, [pc, #400]	; (8003a24 <UART_SetConfig+0x2cc>)
 8003892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003896:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800389a:	2b30      	cmp	r3, #48	; 0x30
 800389c:	d013      	beq.n	80038c6 <UART_SetConfig+0x16e>
 800389e:	2b30      	cmp	r3, #48	; 0x30
 80038a0:	d814      	bhi.n	80038cc <UART_SetConfig+0x174>
 80038a2:	2b20      	cmp	r3, #32
 80038a4:	d009      	beq.n	80038ba <UART_SetConfig+0x162>
 80038a6:	2b20      	cmp	r3, #32
 80038a8:	d810      	bhi.n	80038cc <UART_SetConfig+0x174>
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d002      	beq.n	80038b4 <UART_SetConfig+0x15c>
 80038ae:	2b10      	cmp	r3, #16
 80038b0:	d006      	beq.n	80038c0 <UART_SetConfig+0x168>
 80038b2:	e00b      	b.n	80038cc <UART_SetConfig+0x174>
 80038b4:	2300      	movs	r3, #0
 80038b6:	77fb      	strb	r3, [r7, #31]
 80038b8:	e0f2      	b.n	8003aa0 <UART_SetConfig+0x348>
 80038ba:	2302      	movs	r3, #2
 80038bc:	77fb      	strb	r3, [r7, #31]
 80038be:	e0ef      	b.n	8003aa0 <UART_SetConfig+0x348>
 80038c0:	2304      	movs	r3, #4
 80038c2:	77fb      	strb	r3, [r7, #31]
 80038c4:	e0ec      	b.n	8003aa0 <UART_SetConfig+0x348>
 80038c6:	2308      	movs	r3, #8
 80038c8:	77fb      	strb	r3, [r7, #31]
 80038ca:	e0e9      	b.n	8003aa0 <UART_SetConfig+0x348>
 80038cc:	2310      	movs	r3, #16
 80038ce:	77fb      	strb	r3, [r7, #31]
 80038d0:	e0e6      	b.n	8003aa0 <UART_SetConfig+0x348>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a56      	ldr	r2, [pc, #344]	; (8003a30 <UART_SetConfig+0x2d8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d120      	bne.n	800391e <UART_SetConfig+0x1c6>
 80038dc:	4b51      	ldr	r3, [pc, #324]	; (8003a24 <UART_SetConfig+0x2cc>)
 80038de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038e6:	2bc0      	cmp	r3, #192	; 0xc0
 80038e8:	d013      	beq.n	8003912 <UART_SetConfig+0x1ba>
 80038ea:	2bc0      	cmp	r3, #192	; 0xc0
 80038ec:	d814      	bhi.n	8003918 <UART_SetConfig+0x1c0>
 80038ee:	2b80      	cmp	r3, #128	; 0x80
 80038f0:	d009      	beq.n	8003906 <UART_SetConfig+0x1ae>
 80038f2:	2b80      	cmp	r3, #128	; 0x80
 80038f4:	d810      	bhi.n	8003918 <UART_SetConfig+0x1c0>
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <UART_SetConfig+0x1a8>
 80038fa:	2b40      	cmp	r3, #64	; 0x40
 80038fc:	d006      	beq.n	800390c <UART_SetConfig+0x1b4>
 80038fe:	e00b      	b.n	8003918 <UART_SetConfig+0x1c0>
 8003900:	2300      	movs	r3, #0
 8003902:	77fb      	strb	r3, [r7, #31]
 8003904:	e0cc      	b.n	8003aa0 <UART_SetConfig+0x348>
 8003906:	2302      	movs	r3, #2
 8003908:	77fb      	strb	r3, [r7, #31]
 800390a:	e0c9      	b.n	8003aa0 <UART_SetConfig+0x348>
 800390c:	2304      	movs	r3, #4
 800390e:	77fb      	strb	r3, [r7, #31]
 8003910:	e0c6      	b.n	8003aa0 <UART_SetConfig+0x348>
 8003912:	2308      	movs	r3, #8
 8003914:	77fb      	strb	r3, [r7, #31]
 8003916:	e0c3      	b.n	8003aa0 <UART_SetConfig+0x348>
 8003918:	2310      	movs	r3, #16
 800391a:	77fb      	strb	r3, [r7, #31]
 800391c:	e0c0      	b.n	8003aa0 <UART_SetConfig+0x348>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a44      	ldr	r2, [pc, #272]	; (8003a34 <UART_SetConfig+0x2dc>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d125      	bne.n	8003974 <UART_SetConfig+0x21c>
 8003928:	4b3e      	ldr	r3, [pc, #248]	; (8003a24 <UART_SetConfig+0x2cc>)
 800392a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003932:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003936:	d017      	beq.n	8003968 <UART_SetConfig+0x210>
 8003938:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800393c:	d817      	bhi.n	800396e <UART_SetConfig+0x216>
 800393e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003942:	d00b      	beq.n	800395c <UART_SetConfig+0x204>
 8003944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003948:	d811      	bhi.n	800396e <UART_SetConfig+0x216>
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <UART_SetConfig+0x1fe>
 800394e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003952:	d006      	beq.n	8003962 <UART_SetConfig+0x20a>
 8003954:	e00b      	b.n	800396e <UART_SetConfig+0x216>
 8003956:	2300      	movs	r3, #0
 8003958:	77fb      	strb	r3, [r7, #31]
 800395a:	e0a1      	b.n	8003aa0 <UART_SetConfig+0x348>
 800395c:	2302      	movs	r3, #2
 800395e:	77fb      	strb	r3, [r7, #31]
 8003960:	e09e      	b.n	8003aa0 <UART_SetConfig+0x348>
 8003962:	2304      	movs	r3, #4
 8003964:	77fb      	strb	r3, [r7, #31]
 8003966:	e09b      	b.n	8003aa0 <UART_SetConfig+0x348>
 8003968:	2308      	movs	r3, #8
 800396a:	77fb      	strb	r3, [r7, #31]
 800396c:	e098      	b.n	8003aa0 <UART_SetConfig+0x348>
 800396e:	2310      	movs	r3, #16
 8003970:	77fb      	strb	r3, [r7, #31]
 8003972:	e095      	b.n	8003aa0 <UART_SetConfig+0x348>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a2f      	ldr	r2, [pc, #188]	; (8003a38 <UART_SetConfig+0x2e0>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d125      	bne.n	80039ca <UART_SetConfig+0x272>
 800397e:	4b29      	ldr	r3, [pc, #164]	; (8003a24 <UART_SetConfig+0x2cc>)
 8003980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003984:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003988:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800398c:	d017      	beq.n	80039be <UART_SetConfig+0x266>
 800398e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003992:	d817      	bhi.n	80039c4 <UART_SetConfig+0x26c>
 8003994:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003998:	d00b      	beq.n	80039b2 <UART_SetConfig+0x25a>
 800399a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800399e:	d811      	bhi.n	80039c4 <UART_SetConfig+0x26c>
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <UART_SetConfig+0x254>
 80039a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039a8:	d006      	beq.n	80039b8 <UART_SetConfig+0x260>
 80039aa:	e00b      	b.n	80039c4 <UART_SetConfig+0x26c>
 80039ac:	2301      	movs	r3, #1
 80039ae:	77fb      	strb	r3, [r7, #31]
 80039b0:	e076      	b.n	8003aa0 <UART_SetConfig+0x348>
 80039b2:	2302      	movs	r3, #2
 80039b4:	77fb      	strb	r3, [r7, #31]
 80039b6:	e073      	b.n	8003aa0 <UART_SetConfig+0x348>
 80039b8:	2304      	movs	r3, #4
 80039ba:	77fb      	strb	r3, [r7, #31]
 80039bc:	e070      	b.n	8003aa0 <UART_SetConfig+0x348>
 80039be:	2308      	movs	r3, #8
 80039c0:	77fb      	strb	r3, [r7, #31]
 80039c2:	e06d      	b.n	8003aa0 <UART_SetConfig+0x348>
 80039c4:	2310      	movs	r3, #16
 80039c6:	77fb      	strb	r3, [r7, #31]
 80039c8:	e06a      	b.n	8003aa0 <UART_SetConfig+0x348>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a1b      	ldr	r2, [pc, #108]	; (8003a3c <UART_SetConfig+0x2e4>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d138      	bne.n	8003a46 <UART_SetConfig+0x2ee>
 80039d4:	4b13      	ldr	r3, [pc, #76]	; (8003a24 <UART_SetConfig+0x2cc>)
 80039d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039da:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80039de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039e2:	d017      	beq.n	8003a14 <UART_SetConfig+0x2bc>
 80039e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039e8:	d82a      	bhi.n	8003a40 <UART_SetConfig+0x2e8>
 80039ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ee:	d00b      	beq.n	8003a08 <UART_SetConfig+0x2b0>
 80039f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039f4:	d824      	bhi.n	8003a40 <UART_SetConfig+0x2e8>
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <UART_SetConfig+0x2aa>
 80039fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039fe:	d006      	beq.n	8003a0e <UART_SetConfig+0x2b6>
 8003a00:	e01e      	b.n	8003a40 <UART_SetConfig+0x2e8>
 8003a02:	2300      	movs	r3, #0
 8003a04:	77fb      	strb	r3, [r7, #31]
 8003a06:	e04b      	b.n	8003aa0 <UART_SetConfig+0x348>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	77fb      	strb	r3, [r7, #31]
 8003a0c:	e048      	b.n	8003aa0 <UART_SetConfig+0x348>
 8003a0e:	2304      	movs	r3, #4
 8003a10:	77fb      	strb	r3, [r7, #31]
 8003a12:	e045      	b.n	8003aa0 <UART_SetConfig+0x348>
 8003a14:	2308      	movs	r3, #8
 8003a16:	77fb      	strb	r3, [r7, #31]
 8003a18:	e042      	b.n	8003aa0 <UART_SetConfig+0x348>
 8003a1a:	bf00      	nop
 8003a1c:	efff69f3 	.word	0xefff69f3
 8003a20:	40011000 	.word	0x40011000
 8003a24:	40023800 	.word	0x40023800
 8003a28:	40004400 	.word	0x40004400
 8003a2c:	40004800 	.word	0x40004800
 8003a30:	40004c00 	.word	0x40004c00
 8003a34:	40005000 	.word	0x40005000
 8003a38:	40011400 	.word	0x40011400
 8003a3c:	40007800 	.word	0x40007800
 8003a40:	2310      	movs	r3, #16
 8003a42:	77fb      	strb	r3, [r7, #31]
 8003a44:	e02c      	b.n	8003aa0 <UART_SetConfig+0x348>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a72      	ldr	r2, [pc, #456]	; (8003c14 <UART_SetConfig+0x4bc>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d125      	bne.n	8003a9c <UART_SetConfig+0x344>
 8003a50:	4b71      	ldr	r3, [pc, #452]	; (8003c18 <UART_SetConfig+0x4c0>)
 8003a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a56:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a5a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a5e:	d017      	beq.n	8003a90 <UART_SetConfig+0x338>
 8003a60:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a64:	d817      	bhi.n	8003a96 <UART_SetConfig+0x33e>
 8003a66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a6a:	d00b      	beq.n	8003a84 <UART_SetConfig+0x32c>
 8003a6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a70:	d811      	bhi.n	8003a96 <UART_SetConfig+0x33e>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <UART_SetConfig+0x326>
 8003a76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a7a:	d006      	beq.n	8003a8a <UART_SetConfig+0x332>
 8003a7c:	e00b      	b.n	8003a96 <UART_SetConfig+0x33e>
 8003a7e:	2300      	movs	r3, #0
 8003a80:	77fb      	strb	r3, [r7, #31]
 8003a82:	e00d      	b.n	8003aa0 <UART_SetConfig+0x348>
 8003a84:	2302      	movs	r3, #2
 8003a86:	77fb      	strb	r3, [r7, #31]
 8003a88:	e00a      	b.n	8003aa0 <UART_SetConfig+0x348>
 8003a8a:	2304      	movs	r3, #4
 8003a8c:	77fb      	strb	r3, [r7, #31]
 8003a8e:	e007      	b.n	8003aa0 <UART_SetConfig+0x348>
 8003a90:	2308      	movs	r3, #8
 8003a92:	77fb      	strb	r3, [r7, #31]
 8003a94:	e004      	b.n	8003aa0 <UART_SetConfig+0x348>
 8003a96:	2310      	movs	r3, #16
 8003a98:	77fb      	strb	r3, [r7, #31]
 8003a9a:	e001      	b.n	8003aa0 <UART_SetConfig+0x348>
 8003a9c:	2310      	movs	r3, #16
 8003a9e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aa8:	d15b      	bne.n	8003b62 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003aaa:	7ffb      	ldrb	r3, [r7, #31]
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	d828      	bhi.n	8003b02 <UART_SetConfig+0x3aa>
 8003ab0:	a201      	add	r2, pc, #4	; (adr r2, 8003ab8 <UART_SetConfig+0x360>)
 8003ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab6:	bf00      	nop
 8003ab8:	08003add 	.word	0x08003add
 8003abc:	08003ae5 	.word	0x08003ae5
 8003ac0:	08003aed 	.word	0x08003aed
 8003ac4:	08003b03 	.word	0x08003b03
 8003ac8:	08003af3 	.word	0x08003af3
 8003acc:	08003b03 	.word	0x08003b03
 8003ad0:	08003b03 	.word	0x08003b03
 8003ad4:	08003b03 	.word	0x08003b03
 8003ad8:	08003afb 	.word	0x08003afb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003adc:	f7fe fb08 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 8003ae0:	61b8      	str	r0, [r7, #24]
        break;
 8003ae2:	e013      	b.n	8003b0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ae4:	f7fe fb18 	bl	8002118 <HAL_RCC_GetPCLK2Freq>
 8003ae8:	61b8      	str	r0, [r7, #24]
        break;
 8003aea:	e00f      	b.n	8003b0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aec:	4b4b      	ldr	r3, [pc, #300]	; (8003c1c <UART_SetConfig+0x4c4>)
 8003aee:	61bb      	str	r3, [r7, #24]
        break;
 8003af0:	e00c      	b.n	8003b0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003af2:	f7fe f9eb 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8003af6:	61b8      	str	r0, [r7, #24]
        break;
 8003af8:	e008      	b.n	8003b0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003afe:	61bb      	str	r3, [r7, #24]
        break;
 8003b00:	e004      	b.n	8003b0c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	77bb      	strb	r3, [r7, #30]
        break;
 8003b0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d074      	beq.n	8003bfc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	005a      	lsls	r2, r3, #1
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	085b      	lsrs	r3, r3, #1
 8003b1c:	441a      	add	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	2b0f      	cmp	r3, #15
 8003b2c:	d916      	bls.n	8003b5c <UART_SetConfig+0x404>
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b34:	d212      	bcs.n	8003b5c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	f023 030f 	bic.w	r3, r3, #15
 8003b3e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	085b      	lsrs	r3, r3, #1
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	89fb      	ldrh	r3, [r7, #14]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	89fa      	ldrh	r2, [r7, #14]
 8003b58:	60da      	str	r2, [r3, #12]
 8003b5a:	e04f      	b.n	8003bfc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	77bb      	strb	r3, [r7, #30]
 8003b60:	e04c      	b.n	8003bfc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b62:	7ffb      	ldrb	r3, [r7, #31]
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d828      	bhi.n	8003bba <UART_SetConfig+0x462>
 8003b68:	a201      	add	r2, pc, #4	; (adr r2, 8003b70 <UART_SetConfig+0x418>)
 8003b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6e:	bf00      	nop
 8003b70:	08003b95 	.word	0x08003b95
 8003b74:	08003b9d 	.word	0x08003b9d
 8003b78:	08003ba5 	.word	0x08003ba5
 8003b7c:	08003bbb 	.word	0x08003bbb
 8003b80:	08003bab 	.word	0x08003bab
 8003b84:	08003bbb 	.word	0x08003bbb
 8003b88:	08003bbb 	.word	0x08003bbb
 8003b8c:	08003bbb 	.word	0x08003bbb
 8003b90:	08003bb3 	.word	0x08003bb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b94:	f7fe faac 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 8003b98:	61b8      	str	r0, [r7, #24]
        break;
 8003b9a:	e013      	b.n	8003bc4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b9c:	f7fe fabc 	bl	8002118 <HAL_RCC_GetPCLK2Freq>
 8003ba0:	61b8      	str	r0, [r7, #24]
        break;
 8003ba2:	e00f      	b.n	8003bc4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ba4:	4b1d      	ldr	r3, [pc, #116]	; (8003c1c <UART_SetConfig+0x4c4>)
 8003ba6:	61bb      	str	r3, [r7, #24]
        break;
 8003ba8:	e00c      	b.n	8003bc4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003baa:	f7fe f98f 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8003bae:	61b8      	str	r0, [r7, #24]
        break;
 8003bb0:	e008      	b.n	8003bc4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bb6:	61bb      	str	r3, [r7, #24]
        break;
 8003bb8:	e004      	b.n	8003bc4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	77bb      	strb	r3, [r7, #30]
        break;
 8003bc2:	bf00      	nop
    }

    if (pclk != 0U)
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d018      	beq.n	8003bfc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	085a      	lsrs	r2, r3, #1
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	441a      	add	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bdc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	2b0f      	cmp	r3, #15
 8003be2:	d909      	bls.n	8003bf8 <UART_SetConfig+0x4a0>
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bea:	d205      	bcs.n	8003bf8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	60da      	str	r2, [r3, #12]
 8003bf6:	e001      	b.n	8003bfc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003c08:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3720      	adds	r7, #32
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40007c00 	.word	0x40007c00
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	00f42400 	.word	0x00f42400

08003c20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00a      	beq.n	8003c4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00a      	beq.n	8003c8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	f003 0310 	and.w	r3, r3, #16
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00a      	beq.n	8003cd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	f003 0320 	and.w	r3, r3, #32
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d01a      	beq.n	8003d36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d1e:	d10a      	bne.n	8003d36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	605a      	str	r2, [r3, #4]
  }
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af02      	add	r7, sp, #8
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d74:	f7fd f9d4 	bl	8001120 <HAL_GetTick>
 8003d78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0308 	and.w	r3, r3, #8
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d10e      	bne.n	8003da6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f831 	bl	8003dfe <UART_WaitOnFlagUntilTimeout>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e027      	b.n	8003df6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d10e      	bne.n	8003dd2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003db4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f81b 	bl	8003dfe <UART_WaitOnFlagUntilTimeout>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e011      	b.n	8003df6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b09c      	sub	sp, #112	; 0x70
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	60f8      	str	r0, [r7, #12]
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	603b      	str	r3, [r7, #0]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e0e:	e0a7      	b.n	8003f60 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e16:	f000 80a3 	beq.w	8003f60 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e1a:	f7fd f981 	bl	8001120 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d302      	bcc.n	8003e30 <UART_WaitOnFlagUntilTimeout+0x32>
 8003e2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d13f      	bne.n	8003eb0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e38:	e853 3f00 	ldrex	r3, [r3]
 8003e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e44:	667b      	str	r3, [r7, #100]	; 0x64
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e50:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003e54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e56:	e841 2300 	strex	r3, r2, [r1]
 8003e5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1e6      	bne.n	8003e30 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3308      	adds	r3, #8
 8003e68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e6c:	e853 3f00 	ldrex	r3, [r3]
 8003e70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e74:	f023 0301 	bic.w	r3, r3, #1
 8003e78:	663b      	str	r3, [r7, #96]	; 0x60
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	3308      	adds	r3, #8
 8003e80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e82:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e8a:	e841 2300 	strex	r3, r2, [r1]
 8003e8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1e5      	bne.n	8003e62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e068      	b.n	8003f82 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d050      	beq.n	8003f60 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ec8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ecc:	d148      	bne.n	8003f60 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ed6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee0:	e853 3f00 	ldrex	r3, [r3]
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003eec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ef8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003efe:	e841 2300 	strex	r3, r2, [r1]
 8003f02:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1e6      	bne.n	8003ed8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3308      	adds	r3, #8
 8003f10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	e853 3f00 	ldrex	r3, [r3]
 8003f18:	613b      	str	r3, [r7, #16]
   return(result);
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f023 0301 	bic.w	r3, r3, #1
 8003f20:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3308      	adds	r3, #8
 8003f28:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f2a:	623a      	str	r2, [r7, #32]
 8003f2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2e:	69f9      	ldr	r1, [r7, #28]
 8003f30:	6a3a      	ldr	r2, [r7, #32]
 8003f32:	e841 2300 	strex	r3, r2, [r1]
 8003f36:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1e5      	bne.n	8003f0a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2220      	movs	r2, #32
 8003f42:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e010      	b.n	8003f82 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	69da      	ldr	r2, [r3, #28]
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	bf0c      	ite	eq
 8003f70:	2301      	moveq	r3, #1
 8003f72:	2300      	movne	r3, #0
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	461a      	mov	r2, r3
 8003f78:	79fb      	ldrb	r3, [r7, #7]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	f43f af48 	beq.w	8003e10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3770      	adds	r7, #112	; 0x70
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <memset>:
 8003f8a:	4402      	add	r2, r0
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d100      	bne.n	8003f94 <memset+0xa>
 8003f92:	4770      	bx	lr
 8003f94:	f803 1b01 	strb.w	r1, [r3], #1
 8003f98:	e7f9      	b.n	8003f8e <memset+0x4>
	...

08003f9c <__libc_init_array>:
 8003f9c:	b570      	push	{r4, r5, r6, lr}
 8003f9e:	4d0d      	ldr	r5, [pc, #52]	; (8003fd4 <__libc_init_array+0x38>)
 8003fa0:	4c0d      	ldr	r4, [pc, #52]	; (8003fd8 <__libc_init_array+0x3c>)
 8003fa2:	1b64      	subs	r4, r4, r5
 8003fa4:	10a4      	asrs	r4, r4, #2
 8003fa6:	2600      	movs	r6, #0
 8003fa8:	42a6      	cmp	r6, r4
 8003faa:	d109      	bne.n	8003fc0 <__libc_init_array+0x24>
 8003fac:	4d0b      	ldr	r5, [pc, #44]	; (8003fdc <__libc_init_array+0x40>)
 8003fae:	4c0c      	ldr	r4, [pc, #48]	; (8003fe0 <__libc_init_array+0x44>)
 8003fb0:	f000 f818 	bl	8003fe4 <_init>
 8003fb4:	1b64      	subs	r4, r4, r5
 8003fb6:	10a4      	asrs	r4, r4, #2
 8003fb8:	2600      	movs	r6, #0
 8003fba:	42a6      	cmp	r6, r4
 8003fbc:	d105      	bne.n	8003fca <__libc_init_array+0x2e>
 8003fbe:	bd70      	pop	{r4, r5, r6, pc}
 8003fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc4:	4798      	blx	r3
 8003fc6:	3601      	adds	r6, #1
 8003fc8:	e7ee      	b.n	8003fa8 <__libc_init_array+0xc>
 8003fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fce:	4798      	blx	r3
 8003fd0:	3601      	adds	r6, #1
 8003fd2:	e7f2      	b.n	8003fba <__libc_init_array+0x1e>
 8003fd4:	0800401c 	.word	0x0800401c
 8003fd8:	0800401c 	.word	0x0800401c
 8003fdc:	0800401c 	.word	0x0800401c
 8003fe0:	08004020 	.word	0x08004020

08003fe4 <_init>:
 8003fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe6:	bf00      	nop
 8003fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fea:	bc08      	pop	{r3}
 8003fec:	469e      	mov	lr, r3
 8003fee:	4770      	bx	lr

08003ff0 <_fini>:
 8003ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff2:	bf00      	nop
 8003ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ff6:	bc08      	pop	{r3}
 8003ff8:	469e      	mov	lr, r3
 8003ffa:	4770      	bx	lr
