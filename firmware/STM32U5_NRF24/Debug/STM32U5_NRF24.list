
STM32U5_NRF24.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2d0  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  0800a508  0800a508  0001a508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a6e8  0800a6e8  0001a6e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a6f0  0800a6f0  0001a6f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a6f4  0800a6f4  0001a6f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000009  20000000  0800a6f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000704  2000000c  0800a701  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000710  0800a701  00020710  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020009  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003f  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001c377  00000000  00000000  00020082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003788  00000000  00000000  0003c3f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001610  00000000  00000000  0003fb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000010ea  00000000  00000000  00041198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00037bb3  00000000  00000000  00042282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001bdf8  00000000  00000000  00079e35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00161980  00000000  00000000  00095c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005dd0  00000000  00000000  001f75b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000075  00000000  00000000  001fd380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	00000000 	.word	0x00000000
 8000258:	0800a4f0 	.word	0x0800a4f0

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000010 	.word	0x20000010
 8000274:	0800a4f0 	.word	0x0800a4f0

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_uldivmod>:
 8000288:	b953      	cbnz	r3, 80002a0 <__aeabi_uldivmod+0x18>
 800028a:	b94a      	cbnz	r2, 80002a0 <__aeabi_uldivmod+0x18>
 800028c:	2900      	cmp	r1, #0
 800028e:	bf08      	it	eq
 8000290:	2800      	cmpeq	r0, #0
 8000292:	bf1c      	itt	ne
 8000294:	f04f 31ff 	movne.w	r1, #4294967295
 8000298:	f04f 30ff 	movne.w	r0, #4294967295
 800029c:	f000 b982 	b.w	80005a4 <__aeabi_idiv0>
 80002a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a8:	f000 f806 	bl	80002b8 <__udivmoddi4>
 80002ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b4:	b004      	add	sp, #16
 80002b6:	4770      	bx	lr

080002b8 <__udivmoddi4>:
 80002b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002be:	460d      	mov	r5, r1
 80002c0:	4604      	mov	r4, r0
 80002c2:	460f      	mov	r7, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d146      	bne.n	8000356 <__udivmoddi4+0x9e>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	4694      	mov	ip, r2
 80002cc:	d95e      	bls.n	800038c <__udivmoddi4+0xd4>
 80002ce:	fab2 f382 	clz	r3, r2
 80002d2:	b143      	cbz	r3, 80002e6 <__udivmoddi4+0x2e>
 80002d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d8:	f1c3 0220 	rsb	r2, r3, #32
 80002dc:	409f      	lsls	r7, r3
 80002de:	409c      	lsls	r4, r3
 80002e0:	fa20 f202 	lsr.w	r2, r0, r2
 80002e4:	4317      	orrs	r7, r2
 80002e6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002ea:	fa1f f58c 	uxth.w	r5, ip
 80002ee:	0c22      	lsrs	r2, r4, #16
 80002f0:	fbb7 f1fe 	udiv	r1, r7, lr
 80002f4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f8:	fb01 f005 	mul.w	r0, r1, r5
 80002fc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000300:	4290      	cmp	r0, r2
 8000302:	d908      	bls.n	8000316 <__udivmoddi4+0x5e>
 8000304:	eb1c 0202 	adds.w	r2, ip, r2
 8000308:	f101 37ff 	add.w	r7, r1, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x5c>
 800030e:	4290      	cmp	r0, r2
 8000310:	f200 8134 	bhi.w	800057c <__udivmoddi4+0x2c4>
 8000314:	4639      	mov	r1, r7
 8000316:	1a12      	subs	r2, r2, r0
 8000318:	b2a4      	uxth	r4, r4
 800031a:	fbb2 f0fe 	udiv	r0, r2, lr
 800031e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032a:	42a5      	cmp	r5, r4
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x88>
 800032e:	eb1c 0404 	adds.w	r4, ip, r4
 8000332:	f100 32ff 	add.w	r2, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x86>
 8000338:	42a5      	cmp	r5, r4
 800033a:	f200 8119 	bhi.w	8000570 <__udivmoddi4+0x2b8>
 800033e:	4610      	mov	r0, r2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0x9a>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xb4>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80fc 	beq.w	8000558 <__udivmoddi4+0x2a0>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d14c      	bne.n	800040e <__udivmoddi4+0x156>
 8000374:	42ab      	cmp	r3, r5
 8000376:	f0c0 80f2 	bcc.w	800055e <__udivmoddi4+0x2a6>
 800037a:	4282      	cmp	r2, r0
 800037c:	f240 80ef 	bls.w	800055e <__udivmoddi4+0x2a6>
 8000380:	4608      	mov	r0, r1
 8000382:	2e00      	cmp	r6, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0x9a>
 8000386:	e9c6 4700 	strd	r4, r7, [r6]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0x9a>
 800038c:	b902      	cbnz	r2, 8000390 <__udivmoddi4+0xd8>
 800038e:	deff      	udf	#255	; 0xff
 8000390:	fab2 f382 	clz	r3, r2
 8000394:	2b00      	cmp	r3, #0
 8000396:	f040 809f 	bne.w	80004d8 <__udivmoddi4+0x220>
 800039a:	1a8a      	subs	r2, r1, r2
 800039c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a0:	fa1f f78c 	uxth.w	r7, ip
 80003a4:	2101      	movs	r1, #1
 80003a6:	fbb2 f5fe 	udiv	r5, r2, lr
 80003aa:	fb0e 2015 	mls	r0, lr, r5, r2
 80003ae:	0c22      	lsrs	r2, r4, #16
 80003b0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003b4:	fb07 f005 	mul.w	r0, r7, r5
 80003b8:	4290      	cmp	r0, r2
 80003ba:	d90f      	bls.n	80003dc <__udivmoddi4+0x124>
 80003bc:	eb1c 0202 	adds.w	r2, ip, r2
 80003c0:	f105 38ff 	add.w	r8, r5, #4294967295
 80003c4:	bf2c      	ite	cs
 80003c6:	f04f 0901 	movcs.w	r9, #1
 80003ca:	f04f 0900 	movcc.w	r9, #0
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d903      	bls.n	80003da <__udivmoddi4+0x122>
 80003d2:	f1b9 0f00 	cmp.w	r9, #0
 80003d6:	f000 80ce 	beq.w	8000576 <__udivmoddi4+0x2be>
 80003da:	4645      	mov	r5, r8
 80003dc:	1a12      	subs	r2, r2, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb2 f0fe 	udiv	r0, r2, lr
 80003e4:	fb0e 2210 	mls	r2, lr, r0, r2
 80003e8:	fb00 f707 	mul.w	r7, r0, r7
 80003ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f0:	42a7      	cmp	r7, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x14e>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x14c>
 80003fe:	42a7      	cmp	r7, r4
 8000400:	f200 80b3 	bhi.w	800056a <__udivmoddi4+0x2b2>
 8000404:	4610      	mov	r0, r2
 8000406:	1be4      	subs	r4, r4, r7
 8000408:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800040c:	e79c      	b.n	8000348 <__udivmoddi4+0x90>
 800040e:	f1c1 0420 	rsb	r4, r1, #32
 8000412:	408b      	lsls	r3, r1
 8000414:	fa05 fc01 	lsl.w	ip, r5, r1
 8000418:	fa22 f704 	lsr.w	r7, r2, r4
 800041c:	40e5      	lsrs	r5, r4
 800041e:	408a      	lsls	r2, r1
 8000420:	431f      	orrs	r7, r3
 8000422:	fa20 f304 	lsr.w	r3, r0, r4
 8000426:	4088      	lsls	r0, r1
 8000428:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800042c:	ea43 030c 	orr.w	r3, r3, ip
 8000430:	fa1f fc87 	uxth.w	ip, r7
 8000434:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000438:	fbb5 fef8 	udiv	lr, r5, r8
 800043c:	fb08 551e 	mls	r5, r8, lr, r5
 8000440:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a9      	cmp	r9, r5
 800044a:	d90e      	bls.n	800046a <__udivmoddi4+0x1b2>
 800044c:	197d      	adds	r5, r7, r5
 800044e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000452:	bf2c      	ite	cs
 8000454:	f04f 0b01 	movcs.w	fp, #1
 8000458:	f04f 0b00 	movcc.w	fp, #0
 800045c:	45a9      	cmp	r9, r5
 800045e:	d903      	bls.n	8000468 <__udivmoddi4+0x1b0>
 8000460:	f1bb 0f00 	cmp.w	fp, #0
 8000464:	f000 808d 	beq.w	8000582 <__udivmoddi4+0x2ca>
 8000468:	46d6      	mov	lr, sl
 800046a:	eba5 0509 	sub.w	r5, r5, r9
 800046e:	fa1f f983 	uxth.w	r9, r3
 8000472:	fbb5 f3f8 	udiv	r3, r5, r8
 8000476:	fb08 5513 	mls	r5, r8, r3, r5
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000482:	45ac      	cmp	ip, r5
 8000484:	d906      	bls.n	8000494 <__udivmoddi4+0x1dc>
 8000486:	197d      	adds	r5, r7, r5
 8000488:	f103 38ff 	add.w	r8, r3, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x1da>
 800048e:	45ac      	cmp	ip, r5
 8000490:	d87e      	bhi.n	8000590 <__udivmoddi4+0x2d8>
 8000492:	4643      	mov	r3, r8
 8000494:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000498:	eba5 050c 	sub.w	r5, r5, ip
 800049c:	fba3 9802 	umull	r9, r8, r3, r2
 80004a0:	4545      	cmp	r5, r8
 80004a2:	46ce      	mov	lr, r9
 80004a4:	46c4      	mov	ip, r8
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0x1f6>
 80004a8:	d106      	bne.n	80004b8 <__udivmoddi4+0x200>
 80004aa:	4548      	cmp	r0, r9
 80004ac:	d204      	bcs.n	80004b8 <__udivmoddi4+0x200>
 80004ae:	3b01      	subs	r3, #1
 80004b0:	ebb9 0e02 	subs.w	lr, r9, r2
 80004b4:	eb68 0c07 	sbc.w	ip, r8, r7
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d06f      	beq.n	800059c <__udivmoddi4+0x2e4>
 80004bc:	ebb0 020e 	subs.w	r2, r0, lr
 80004c0:	eb65 050c 	sbc.w	r5, r5, ip
 80004c4:	40ca      	lsrs	r2, r1
 80004c6:	fa05 f404 	lsl.w	r4, r5, r4
 80004ca:	40cd      	lsrs	r5, r1
 80004cc:	4618      	mov	r0, r3
 80004ce:	4314      	orrs	r4, r2
 80004d0:	2100      	movs	r1, #0
 80004d2:	e9c6 4500 	strd	r4, r5, [r6]
 80004d6:	e73c      	b.n	8000352 <__udivmoddi4+0x9a>
 80004d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004dc:	f1c3 0220 	rsb	r2, r3, #32
 80004e0:	4099      	lsls	r1, r3
 80004e2:	409c      	lsls	r4, r3
 80004e4:	40d5      	lsrs	r5, r2
 80004e6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004ea:	fa20 f202 	lsr.w	r2, r0, r2
 80004ee:	fa1f f78c 	uxth.w	r7, ip
 80004f2:	fbb5 f0fe 	udiv	r0, r5, lr
 80004f6:	430a      	orrs	r2, r1
 80004f8:	fb0e 5510 	mls	r5, lr, r0, r5
 80004fc:	0c11      	lsrs	r1, r2, #16
 80004fe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000502:	fb00 f507 	mul.w	r5, r0, r7
 8000506:	428d      	cmp	r5, r1
 8000508:	d90e      	bls.n	8000528 <__udivmoddi4+0x270>
 800050a:	eb1c 0101 	adds.w	r1, ip, r1
 800050e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000512:	bf2c      	ite	cs
 8000514:	f04f 0901 	movcs.w	r9, #1
 8000518:	f04f 0900 	movcc.w	r9, #0
 800051c:	428d      	cmp	r5, r1
 800051e:	d902      	bls.n	8000526 <__udivmoddi4+0x26e>
 8000520:	f1b9 0f00 	cmp.w	r9, #0
 8000524:	d031      	beq.n	800058a <__udivmoddi4+0x2d2>
 8000526:	4640      	mov	r0, r8
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5fe 	udiv	r5, r1, lr
 8000530:	fb0e 1115 	mls	r1, lr, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f107 	mul.w	r1, r5, r7
 800053c:	4291      	cmp	r1, r2
 800053e:	d907      	bls.n	8000550 <__udivmoddi4+0x298>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d201      	bcs.n	800054e <__udivmoddi4+0x296>
 800054a:	4291      	cmp	r1, r2
 800054c:	d823      	bhi.n	8000596 <__udivmoddi4+0x2de>
 800054e:	4645      	mov	r5, r8
 8000550:	1a52      	subs	r2, r2, r1
 8000552:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000556:	e726      	b.n	80003a6 <__udivmoddi4+0xee>
 8000558:	4631      	mov	r1, r6
 800055a:	4630      	mov	r0, r6
 800055c:	e6f9      	b.n	8000352 <__udivmoddi4+0x9a>
 800055e:	1a84      	subs	r4, r0, r2
 8000560:	eb65 0203 	sbc.w	r2, r5, r3
 8000564:	2001      	movs	r0, #1
 8000566:	4617      	mov	r7, r2
 8000568:	e70b      	b.n	8000382 <__udivmoddi4+0xca>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e74a      	b.n	8000406 <__udivmoddi4+0x14e>
 8000570:	4464      	add	r4, ip
 8000572:	3802      	subs	r0, #2
 8000574:	e6e4      	b.n	8000340 <__udivmoddi4+0x88>
 8000576:	3d02      	subs	r5, #2
 8000578:	4462      	add	r2, ip
 800057a:	e72f      	b.n	80003dc <__udivmoddi4+0x124>
 800057c:	3902      	subs	r1, #2
 800057e:	4462      	add	r2, ip
 8000580:	e6c9      	b.n	8000316 <__udivmoddi4+0x5e>
 8000582:	f1ae 0e02 	sub.w	lr, lr, #2
 8000586:	443d      	add	r5, r7
 8000588:	e76f      	b.n	800046a <__udivmoddi4+0x1b2>
 800058a:	3802      	subs	r0, #2
 800058c:	4461      	add	r1, ip
 800058e:	e7cb      	b.n	8000528 <__udivmoddi4+0x270>
 8000590:	3b02      	subs	r3, #2
 8000592:	443d      	add	r5, r7
 8000594:	e77e      	b.n	8000494 <__udivmoddi4+0x1dc>
 8000596:	3d02      	subs	r5, #2
 8000598:	4462      	add	r2, ip
 800059a:	e7d9      	b.n	8000550 <__udivmoddi4+0x298>
 800059c:	4618      	mov	r0, r3
 800059e:	4631      	mov	r1, r6
 80005a0:	e6d7      	b.n	8000352 <__udivmoddi4+0x9a>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 80005b0:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <LL_AHB2_GRP1_EnableClock+0x34>)
 80005b2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80005b6:	4909      	ldr	r1, [pc, #36]	; (80005dc <LL_AHB2_GRP1_EnableClock+0x34>)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4313      	orrs	r3, r2
 80005bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <LL_AHB2_GRP1_EnableClock+0x34>)
 80005c2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4013      	ands	r3, r2
 80005ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005cc:	68fb      	ldr	r3, [r7, #12]
}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	46020c00 	.word	0x46020c00

080005e0 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80005e8:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <LL_APB1_GRP2_EnableClock+0x34>)
 80005ea:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80005ee:	4909      	ldr	r1, [pc, #36]	; (8000614 <LL_APB1_GRP2_EnableClock+0x34>)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4313      	orrs	r3, r2
 80005f4:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <LL_APB1_GRP2_EnableClock+0x34>)
 80005fa:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4013      	ands	r3, r2
 8000602:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000604:	68fb      	ldr	r3, [r7, #12]
}
 8000606:	bf00      	nop
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	46020c00 	.word	0x46020c00

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061c:	f001 fb98 	bl	8001d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000620:	f000 f813 	bl	800064a <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000624:	f000 f875 	bl	8000712 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 fa24 	bl	8000a74 <MX_GPIO_Init>
  MX_ADC1_Init();
 800062c:	f000 f880 	bl	8000730 <MX_ADC1_Init>
  MX_ICACHE_Init();
 8000630:	f000 f8c2 	bl	80007b8 <MX_ICACHE_Init>
  MX_UCPD1_Init();
 8000634:	f000 f96a 	bl	800090c <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 8000638:	f000 f99e 	bl	8000978 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800063c:	f000 f9e8 	bl	8000a10 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000640:	f000 f8f4 	bl	800082c <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  runRadio();
 8000644:	f000 fff6 	bl	8001634 <runRadio>
  while (1)
 8000648:	e7fe      	b.n	8000648 <main+0x30>

0800064a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b09e      	sub	sp, #120	; 0x78
 800064e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000650:	f107 0318 	add.w	r3, r7, #24
 8000654:	2260      	movs	r2, #96	; 0x60
 8000656:	2100      	movs	r1, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f009 ff1d 	bl	800a498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065e:	463b      	mov	r3, r7
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
 800066c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800066e:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000672:	f003 fc2b 	bl	8003ecc <HAL_PWREx_ControlVoltageScaling>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800067c:	f000 fb0a 	bl	8000c94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000680:	2332      	movs	r3, #50	; 0x32
 8000682:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000684:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800068a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2310      	movs	r3, #16
 8000692:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000698:	2310      	movs	r3, #16
 800069a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 800069c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006a6:	2301      	movs	r3, #1
 80006a8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ae:	2301      	movs	r3, #1
 80006b0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 80006b2:	2350      	movs	r3, #80	; 0x50
 80006b4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006be:	2302      	movs	r3, #2
 80006c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	f107 0318 	add.w	r3, r7, #24
 80006ce:	4618      	mov	r0, r3
 80006d0:	f003 fd08 	bl	80040e4 <HAL_RCC_OscConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006da:	f000 fadb 	bl	8000c94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006de:	231f      	movs	r3, #31
 80006e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e2:	2303      	movs	r3, #3
 80006e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006f6:	463b      	mov	r3, r7
 80006f8:	2104      	movs	r1, #4
 80006fa:	4618      	mov	r0, r3
 80006fc:	f004 fbce 	bl	8004e9c <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000706:	f000 fac5 	bl	8000c94 <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3778      	adds	r7, #120	; 0x78
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000716:	f003 fcc5 	bl	80040a4 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800071a:	2002      	movs	r0, #2
 800071c:	f003 fc62 	bl	8003fe4 <HAL_PWREx_ConfigSupply>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000726:	f000 fab5 	bl	8000c94 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000734:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <MX_ADC1_Init+0x80>)
 8000736:	4a1f      	ldr	r2, [pc, #124]	; (80007b4 <MX_ADC1_Init+0x84>)
 8000738:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800073a:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <MX_ADC1_Init+0x80>)
 800073c:	2200      	movs	r2, #0
 800073e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <MX_ADC1_Init+0x80>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000746:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_ADC1_Init+0x80>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_ADC1_Init+0x80>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <MX_ADC1_Init+0x80>)
 8000754:	2204      	movs	r2, #4
 8000756:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_ADC1_Init+0x80>)
 800075a:	2200      	movs	r2, #0
 800075c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_ADC1_Init+0x80>)
 8000760:	2200      	movs	r2, #0
 8000762:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_ADC1_Init+0x80>)
 8000768:	2201      	movs	r2, #1
 800076a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800076c:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_ADC1_Init+0x80>)
 800076e:	2200      	movs	r2, #0
 8000770:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_ADC1_Init+0x80>)
 8000776:	2200      	movs	r2, #0
 8000778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_ADC1_Init+0x80>)
 800077e:	2200      	movs	r2, #0
 8000780:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_ADC1_Init+0x80>)
 8000784:	2200      	movs	r2, #0
 8000786:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_ADC1_Init+0x80>)
 800078a:	2200      	movs	r2, #0
 800078c:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_ADC1_Init+0x80>)
 8000790:	2200      	movs	r2, #0
 8000792:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_ADC1_Init+0x80>)
 8000796:	2200      	movs	r2, #0
 8000798:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800079c:	4804      	ldr	r0, [pc, #16]	; (80007b0 <MX_ADC1_Init+0x80>)
 800079e:	f001 fc7d 	bl	800209c <HAL_ADC_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80007a8:	f000 fa74 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000028 	.word	0x20000028
 80007b4:	42028000 	.word	0x42028000

080007b8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ICACHE_Init 0 */

  /* USER CODE END ICACHE_Init 0 */

  ICACHE_RegionConfigTypeDef pRegionConfig = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]

  /* USER CODE END ICACHE_Init 1 */

  /** Configure and enable a region for memory remapping.
  */
  if (HAL_ICACHE_Disable() != HAL_OK)
 80007cc:	f002 fa7a 	bl	8002cc4 <HAL_ICACHE_Disable>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80007d6:	f000 fa5d 	bl	8000c94 <Error_Handler>
  }
  pRegionConfig.BaseAddress = 0x10000000;
 80007da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80007de:	607b      	str	r3, [r7, #4]
  pRegionConfig.RemapAddress = 0x60000000;
 80007e0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80007e4:	60bb      	str	r3, [r7, #8]
  pRegionConfig.Size = ICACHE_REGIONSIZE_2MB;
 80007e6:	2301      	movs	r3, #1
 80007e8:	60fb      	str	r3, [r7, #12]
  pRegionConfig.TrafficRoute = ICACHE_MASTER1_PORT;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
  if (HAL_ICACHE_EnableRemapRegion(_NULL, &pRegionConfig) != HAL_OK)
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	4619      	mov	r1, r3
 80007f6:	2000      	movs	r0, #0
 80007f8:	f002 fa94 	bl	8002d24 <HAL_ICACHE_EnableRemapRegion>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_ICACHE_Init+0x4e>
  {
    Error_Handler();
 8000802:	f000 fa47 	bl	8000c94 <Error_Handler>
  }

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000806:	2000      	movs	r0, #0
 8000808:	f002 fa2c 	bl	8002c64 <HAL_ICACHE_ConfigAssociativityMode>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_ICACHE_Init+0x5e>
  {
    Error_Handler();
 8000812:	f000 fa3f 	bl	8000c94 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000816:	f002 fa45 	bl	8002ca4 <HAL_ICACHE_Enable>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ICACHE_Init+0x6c>
  {
    Error_Handler();
 8000820:	f000 fa38 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	3718      	adds	r7, #24
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800083c:	4b31      	ldr	r3, [pc, #196]	; (8000904 <MX_SPI1_Init+0xd8>)
 800083e:	4a32      	ldr	r2, [pc, #200]	; (8000908 <MX_SPI1_Init+0xdc>)
 8000840:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000842:	4b30      	ldr	r3, [pc, #192]	; (8000904 <MX_SPI1_Init+0xd8>)
 8000844:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000848:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800084a:	4b2e      	ldr	r3, [pc, #184]	; (8000904 <MX_SPI1_Init+0xd8>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000850:	4b2c      	ldr	r3, [pc, #176]	; (8000904 <MX_SPI1_Init+0xd8>)
 8000852:	2207      	movs	r2, #7
 8000854:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000856:	4b2b      	ldr	r3, [pc, #172]	; (8000904 <MX_SPI1_Init+0xd8>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800085c:	4b29      	ldr	r3, [pc, #164]	; (8000904 <MX_SPI1_Init+0xd8>)
 800085e:	2200      	movs	r2, #0
 8000860:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000862:	4b28      	ldr	r3, [pc, #160]	; (8000904 <MX_SPI1_Init+0xd8>)
 8000864:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000868:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800086a:	4b26      	ldr	r3, [pc, #152]	; (8000904 <MX_SPI1_Init+0xd8>)
 800086c:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000870:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000872:	4b24      	ldr	r3, [pc, #144]	; (8000904 <MX_SPI1_Init+0xd8>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000878:	4b22      	ldr	r3, [pc, #136]	; (8000904 <MX_SPI1_Init+0xd8>)
 800087a:	2200      	movs	r2, #0
 800087c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800087e:	4b21      	ldr	r3, [pc, #132]	; (8000904 <MX_SPI1_Init+0xd8>)
 8000880:	2200      	movs	r2, #0
 8000882:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000884:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <MX_SPI1_Init+0xd8>)
 8000886:	2207      	movs	r2, #7
 8000888:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800088a:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <MX_SPI1_Init+0xd8>)
 800088c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000890:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000892:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <MX_SPI1_Init+0xd8>)
 8000894:	2200      	movs	r2, #0
 8000896:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000898:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_SPI1_Init+0xd8>)
 800089a:	2200      	movs	r2, #0
 800089c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800089e:	4b19      	ldr	r3, [pc, #100]	; (8000904 <MX_SPI1_Init+0xd8>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80008a4:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_SPI1_Init+0xd8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80008aa:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_SPI1_Init+0xd8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_SPI1_Init+0xd8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <MX_SPI1_Init+0xd8>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_SPI1_Init+0xd8>)
 80008be:	2200      	movs	r2, #0
 80008c0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <MX_SPI1_Init+0xd8>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008c8:	480e      	ldr	r0, [pc, #56]	; (8000904 <MX_SPI1_Init+0xd8>)
 80008ca:	f007 fb4f 	bl	8007f6c <HAL_SPI_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_SPI1_Init+0xac>
  {
    Error_Handler();
 80008d4:	f000 f9de 	bl	8000c94 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80008dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008e0:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	4619      	mov	r1, r3
 80008ea:	4806      	ldr	r0, [pc, #24]	; (8000904 <MX_SPI1_Init+0xd8>)
 80008ec:	f007 ff7b 	bl	80087e6 <HAL_SPIEx_SetConfigAutonomousMode>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_SPI1_Init+0xce>
  {
    Error_Handler();
 80008f6:	f000 f9cd 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200000b4 	.word	0x200000b4
 8000908:	40013000 	.word	0x40013000

0800090c <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	463b      	mov	r3, r7
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
 8000920:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000922:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000926:	f7ff fe5b 	bl	80005e0 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800092a:	2002      	movs	r0, #2
 800092c:	f7ff fe3c 	bl	80005a8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000930:	2001      	movs	r0, #1
 8000932:	f7ff fe39 	bl	80005a8 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800093a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800093c:	2303      	movs	r3, #3
 800093e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000944:	463b      	mov	r3, r7
 8000946:	4619      	mov	r1, r3
 8000948:	4809      	ldr	r0, [pc, #36]	; (8000970 <MX_UCPD1_Init+0x64>)
 800094a:	f008 ff5c 	bl	8009806 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800094e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000952:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000954:	2303      	movs	r3, #3
 8000956:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000958:	2300      	movs	r3, #0
 800095a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095c:	463b      	mov	r3, r7
 800095e:	4619      	mov	r1, r3
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_UCPD1_Init+0x68>)
 8000962:	f008 ff50 	bl	8009806 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	3718      	adds	r7, #24
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	42020400 	.word	0x42020400
 8000974:	42020000 	.word	0x42020000

08000978 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800097c:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <MX_USART1_UART_Init+0x90>)
 800097e:	4a23      	ldr	r2, [pc, #140]	; (8000a0c <MX_USART1_UART_Init+0x94>)
 8000980:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000982:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <MX_USART1_UART_Init+0x90>)
 8000984:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000988:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <MX_USART1_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <MX_USART1_UART_Init+0x90>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <MX_USART1_UART_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <MX_USART1_UART_Init+0x90>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <MX_USART1_UART_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <MX_USART1_UART_Init+0x90>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <MX_USART1_UART_Init+0x90>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_USART1_UART_Init+0x90>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <MX_USART1_UART_Init+0x90>)
 80009bc:	2200      	movs	r2, #0
 80009be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009c0:	4811      	ldr	r0, [pc, #68]	; (8000a08 <MX_USART1_UART_Init+0x90>)
 80009c2:	f007 ff51 	bl	8008868 <HAL_UART_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009cc:	f000 f962 	bl	8000c94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d0:	2100      	movs	r1, #0
 80009d2:	480d      	ldr	r0, [pc, #52]	; (8000a08 <MX_USART1_UART_Init+0x90>)
 80009d4:	f008 fd02 	bl	80093dc <HAL_UARTEx_SetTxFifoThreshold>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009de:	f000 f959 	bl	8000c94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e2:	2100      	movs	r1, #0
 80009e4:	4808      	ldr	r0, [pc, #32]	; (8000a08 <MX_USART1_UART_Init+0x90>)
 80009e6:	f008 fd37 	bl	8009458 <HAL_UARTEx_SetRxFifoThreshold>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009f0:	f000 f950 	bl	8000c94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009f4:	4804      	ldr	r0, [pc, #16]	; (8000a08 <MX_USART1_UART_Init+0x90>)
 80009f6:	f008 fcb8 	bl	800936a <HAL_UARTEx_DisableFifoMode>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a00:	f000 f948 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000144 	.word	0x20000144
 8000a0c:	40013800 	.word	0x40013800

08000a10 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a16:	4a16      	ldr	r2, [pc, #88]	; (8000a70 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a18:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a1c:	2206      	movs	r2, #6
 8000a1e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a22:	2202      	movs	r2, #2
 8000a24:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a28:	2202      	movs	r2, #2
 8000a2a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a58:	f002 f9b6 	bl	8002dc8 <HAL_PCD_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a62:	f000 f917 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200001d8 	.word	0x200001d8
 8000a70:	42040000 	.word	0x42040000

08000a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08c      	sub	sp, #48	; 0x30
 8000a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8a:	4b7a      	ldr	r3, [pc, #488]	; (8000c74 <MX_GPIO_Init+0x200>)
 8000a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a90:	4a78      	ldr	r2, [pc, #480]	; (8000c74 <MX_GPIO_Init+0x200>)
 8000a92:	f043 0304 	orr.w	r3, r3, #4
 8000a96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a9a:	4b76      	ldr	r3, [pc, #472]	; (8000c74 <MX_GPIO_Init+0x200>)
 8000a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000aa0:	f003 0304 	and.w	r3, r3, #4
 8000aa4:	61bb      	str	r3, [r7, #24]
 8000aa6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa8:	4b72      	ldr	r3, [pc, #456]	; (8000c74 <MX_GPIO_Init+0x200>)
 8000aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000aae:	4a71      	ldr	r2, [pc, #452]	; (8000c74 <MX_GPIO_Init+0x200>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ab8:	4b6e      	ldr	r3, [pc, #440]	; (8000c74 <MX_GPIO_Init+0x200>)
 8000aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ac6:	4b6b      	ldr	r3, [pc, #428]	; (8000c74 <MX_GPIO_Init+0x200>)
 8000ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000acc:	4a69      	ldr	r2, [pc, #420]	; (8000c74 <MX_GPIO_Init+0x200>)
 8000ace:	f043 0320 	orr.w	r3, r3, #32
 8000ad2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ad6:	4b67      	ldr	r3, [pc, #412]	; (8000c74 <MX_GPIO_Init+0x200>)
 8000ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000adc:	f003 0320 	and.w	r3, r3, #32
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae4:	4b63      	ldr	r3, [pc, #396]	; (8000c74 <MX_GPIO_Init+0x200>)
 8000ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000aea:	4a62      	ldr	r2, [pc, #392]	; (8000c74 <MX_GPIO_Init+0x200>)
 8000aec:	f043 0302 	orr.w	r3, r3, #2
 8000af0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000af4:	4b5f      	ldr	r3, [pc, #380]	; (8000c74 <MX_GPIO_Init+0x200>)
 8000af6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b02:	4b5c      	ldr	r3, [pc, #368]	; (8000c74 <MX_GPIO_Init+0x200>)
 8000b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b08:	4a5a      	ldr	r2, [pc, #360]	; (8000c74 <MX_GPIO_Init+0x200>)
 8000b0a:	f043 0308 	orr.w	r3, r3, #8
 8000b0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b12:	4b58      	ldr	r3, [pc, #352]	; (8000c74 <MX_GPIO_Init+0x200>)
 8000b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b18:	f003 0308 	and.w	r3, r3, #8
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b20:	4b54      	ldr	r3, [pc, #336]	; (8000c74 <MX_GPIO_Init+0x200>)
 8000b22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b26:	4a53      	ldr	r2, [pc, #332]	; (8000c74 <MX_GPIO_Init+0x200>)
 8000b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b2c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b30:	4b50      	ldr	r3, [pc, #320]	; (8000c74 <MX_GPIO_Init+0x200>)
 8000b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2110      	movs	r1, #16
 8000b42:	484d      	ldr	r0, [pc, #308]	; (8000c78 <MX_GPIO_Init+0x204>)
 8000b44:	f002 f85c 	bl	8002c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b4e:	484b      	ldr	r0, [pc, #300]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000b50:	f002 f856 	bl	8002c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2104      	movs	r1, #4
 8000b58:	4849      	ldr	r0, [pc, #292]	; (8000c80 <MX_GPIO_Init+0x20c>)
 8000b5a:	f002 f851 	bl	8002c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2180      	movs	r1, #128	; 0x80
 8000b62:	4848      	ldr	r0, [pc, #288]	; (8000c84 <MX_GPIO_Init+0x210>)
 8000b64:	f002 f84c 	bl	8002c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	21a0      	movs	r1, #160	; 0xa0
 8000b6c:	4846      	ldr	r0, [pc, #280]	; (8000c88 <MX_GPIO_Init+0x214>)
 8000b6e:	f002 f847 	bl	8002c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000b72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b78:	4b44      	ldr	r3, [pc, #272]	; (8000c8c <MX_GPIO_Init+0x218>)
 8000b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000b80:	f107 031c 	add.w	r3, r7, #28
 8000b84:	4619      	mov	r1, r3
 8000b86:	483f      	ldr	r0, [pc, #252]	; (8000c84 <MX_GPIO_Init+0x210>)
 8000b88:	f001 fe62 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin;
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(NRF_CSN_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4835      	ldr	r0, [pc, #212]	; (8000c78 <MX_GPIO_Init+0x204>)
 8000ba4:	f001 fe54 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8000ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bae:	4b37      	ldr	r3, [pc, #220]	; (8000c8c <MX_GPIO_Init+0x218>)
 8000bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4834      	ldr	r0, [pc, #208]	; (8000c90 <MX_GPIO_Init+0x21c>)
 8000bbe:	f001 fe47 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000bc2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	482c      	ldr	r0, [pc, #176]	; (8000c88 <MX_GPIO_Init+0x214>)
 8000bd8:	f001 fe3a 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8000bdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4821      	ldr	r0, [pc, #132]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000bf6:	f001 fe2b 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c06:	2302      	movs	r3, #2
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	481b      	ldr	r0, [pc, #108]	; (8000c80 <MX_GPIO_Init+0x20c>)
 8000c12:	f001 fe1d 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000c16:	2380      	movs	r3, #128	; 0x80
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c22:	2302      	movs	r3, #2
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4815      	ldr	r0, [pc, #84]	; (8000c84 <MX_GPIO_Init+0x210>)
 8000c2e:	f001 fe0f 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8000c32:	2320      	movs	r3, #32
 8000c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	4619      	mov	r1, r3
 8000c48:	480f      	ldr	r0, [pc, #60]	; (8000c88 <MX_GPIO_Init+0x214>)
 8000c4a:	f001 fe01 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000c4e:	2380      	movs	r3, #128	; 0x80
 8000c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	4619      	mov	r1, r3
 8000c64:	4808      	ldr	r0, [pc, #32]	; (8000c88 <MX_GPIO_Init+0x214>)
 8000c66:	f001 fdf3 	bl	8002850 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c6a:	bf00      	nop
 8000c6c:	3730      	adds	r7, #48	; 0x30
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	46020c00 	.word	0x46020c00
 8000c78:	42020000 	.word	0x42020000
 8000c7c:	42020c00 	.word	0x42020c00
 8000c80:	42021800 	.word	0x42021800
 8000c84:	42020800 	.word	0x42020800
 8000c88:	42020400 	.word	0x42020400
 8000c8c:	10210000 	.word	0x10210000
 8000c90:	42021400 	.word	0x42021400

08000c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c98:	b672      	cpsid	i
}
 8000c9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <Error_Handler+0x8>
	...

08000ca0 <nRF24_CSN_L>:

static inline void nRF24_CE_H() {
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
}

static inline void nRF24_CSN_L() {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2110      	movs	r1, #16
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <nRF24_CSN_L+0x14>)
 8000caa:	f001 ffa9 	bl	8002c00 <HAL_GPIO_WritePin>
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	42020000 	.word	0x42020000

08000cb8 <nRF24_CSN_H>:

static inline void nRF24_CSN_H() {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2110      	movs	r1, #16
 8000cc0:	4802      	ldr	r0, [pc, #8]	; (8000ccc <nRF24_CSN_H+0x14>)
 8000cc2:	f001 ff9d 	bl	8002c00 <HAL_GPIO_WritePin>
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	42020000 	.word	0x42020000

08000cd0 <nRF24_LL_RW>:


static inline uint8_t nRF24_LL_RW(uint8_t data) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af02      	add	r7, sp, #8
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
    // Wait until TX buffer is empty
    uint8_t result;
    if(HAL_SPI_TransmitReceive(&hspi1,&data,&result,1,2000)!=HAL_OK) {
 8000cda:	f107 020f 	add.w	r2, r7, #15
 8000cde:	1df9      	adds	r1, r7, #7
 8000ce0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ce4:	9300      	str	r3, [sp, #0]
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	4806      	ldr	r0, [pc, #24]	; (8000d04 <nRF24_LL_RW+0x34>)
 8000cea:	f007 fa55 	bl	8008198 <HAL_SPI_TransmitReceive>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <nRF24_LL_RW+0x28>
        Error_Handler();
 8000cf4:	f7ff ffce 	bl	8000c94 <Error_Handler>
    };
    return result;
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	200000b4 	.word	0x200000b4

08000d08 <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8000d12:	f7ff ffc5 	bl	8000ca0 <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	f003 031f 	and.w	r3, r3, #31
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ffd6 	bl	8000cd0 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8000d24:	20ff      	movs	r0, #255	; 0xff
 8000d26:	f7ff ffd3 	bl	8000cd0 <nRF24_LL_RW>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8000d2e:	f7ff ffc3 	bl	8000cb8 <nRF24_CSN_H>

	return value;
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	460a      	mov	r2, r1
 8000d46:	71fb      	strb	r3, [r7, #7]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000d4c:	f7ff ffa8 	bl	8000ca0 <nRF24_CSN_L>
	HAL_Delay(1);
 8000d50:	2001      	movs	r0, #1
 8000d52:	f001 f881 	bl	8001e58 <HAL_Delay>
	if (reg < nRF24_CMD_W_REGISTER) {
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	2b1f      	cmp	r3, #31
 8000d5a:	d810      	bhi.n	8000d7e <nRF24_WriteReg+0x42>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8000d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d60:	f003 031f 	and.w	r3, r3, #31
 8000d64:	b25b      	sxtb	r3, r3
 8000d66:	f043 0320 	orr.w	r3, r3, #32
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff ffae 	bl	8000cd0 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8000d74:	79bb      	ldrb	r3, [r7, #6]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ffaa 	bl	8000cd0 <nRF24_LL_RW>
 8000d7c:	e013      	b.n	8000da6 <nRF24_WriteReg+0x6a>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ffa5 	bl	8000cd0 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	2be1      	cmp	r3, #225	; 0xe1
 8000d8a:	d00c      	beq.n	8000da6 <nRF24_WriteReg+0x6a>
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	2be2      	cmp	r3, #226	; 0xe2
 8000d90:	d009      	beq.n	8000da6 <nRF24_WriteReg+0x6a>
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	2be3      	cmp	r3, #227	; 0xe3
 8000d96:	d006      	beq.n	8000da6 <nRF24_WriteReg+0x6a>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	2bff      	cmp	r3, #255	; 0xff
 8000d9c:	d003      	beq.n	8000da6 <nRF24_WriteReg+0x6a>
			// Send register value
			nRF24_LL_RW(value);
 8000d9e:	79bb      	ldrb	r3, [r7, #6]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff95 	bl	8000cd0 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8000da6:	f7ff ff87 	bl	8000cb8 <nRF24_CSN_H>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8000db2:	b590      	push	{r4, r7, lr}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4603      	mov	r3, r0
 8000dba:	6039      	str	r1, [r7, #0]
 8000dbc:	71fb      	strb	r3, [r7, #7]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000dc2:	f7ff ff6d 	bl	8000ca0 <nRF24_CSN_L>
	HAL_Delay(1);
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f001 f846 	bl	8001e58 <HAL_Delay>
	nRF24_LL_RW(reg);
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff7e 	bl	8000cd0 <nRF24_LL_RW>
	while (count--) {
 8000dd4:	e007      	b.n	8000de6 <nRF24_ReadMBReg+0x34>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8000dd6:	683c      	ldr	r4, [r7, #0]
 8000dd8:	1c63      	adds	r3, r4, #1
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	20ff      	movs	r0, #255	; 0xff
 8000dde:	f7ff ff77 	bl	8000cd0 <nRF24_LL_RW>
 8000de2:	4603      	mov	r3, r0
 8000de4:	7023      	strb	r3, [r4, #0]
	while (count--) {
 8000de6:	79bb      	ldrb	r3, [r7, #6]
 8000de8:	1e5a      	subs	r2, r3, #1
 8000dea:	71ba      	strb	r2, [r7, #6]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1f2      	bne.n	8000dd6 <nRF24_ReadMBReg+0x24>
	}
	nRF24_CSN_H();
 8000df0:	f7ff ff62 	bl	8000cb8 <nRF24_CSN_H>
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd90      	pop	{r4, r7, pc}

08000dfc <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	71fb      	strb	r3, [r7, #7]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000e0c:	f7ff ff48 	bl	8000ca0 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff ff5c 	bl	8000cd0 <nRF24_LL_RW>
	while (count--) {
 8000e18:	e006      	b.n	8000e28 <nRF24_WriteMBReg+0x2c>
		nRF24_LL_RW(*pBuf++);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	1c5a      	adds	r2, r3, #1
 8000e1e:	603a      	str	r2, [r7, #0]
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff ff54 	bl	8000cd0 <nRF24_LL_RW>
	while (count--) {
 8000e28:	79bb      	ldrb	r3, [r7, #6]
 8000e2a:	1e5a      	subs	r2, r3, #1
 8000e2c:	71ba      	strb	r2, [r7, #6]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1f3      	bne.n	8000e1a <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 8000e32:	f7ff ff41 	bl	8000cb8 <nRF24_CSN_H>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 8000e42:	2108      	movs	r1, #8
 8000e44:	2000      	movs	r0, #0
 8000e46:	f7ff ff79 	bl	8000d3c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 8000e4a:	213f      	movs	r1, #63	; 0x3f
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f7ff ff75 	bl	8000d3c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 8000e52:	2103      	movs	r1, #3
 8000e54:	2002      	movs	r0, #2
 8000e56:	f7ff ff71 	bl	8000d3c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 8000e5a:	2103      	movs	r1, #3
 8000e5c:	2003      	movs	r0, #3
 8000e5e:	f7ff ff6d 	bl	8000d3c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 8000e62:	2103      	movs	r1, #3
 8000e64:	2004      	movs	r0, #4
 8000e66:	f7ff ff69 	bl	8000d3c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 8000e6a:	2102      	movs	r1, #2
 8000e6c:	2005      	movs	r0, #5
 8000e6e:	f7ff ff65 	bl	8000d3c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 8000e72:	210e      	movs	r1, #14
 8000e74:	2006      	movs	r0, #6
 8000e76:	f7ff ff61 	bl	8000d3c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	2007      	movs	r0, #7
 8000e7e:	f7ff ff5d 	bl	8000d3c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8000e82:	2100      	movs	r1, #0
 8000e84:	2011      	movs	r0, #17
 8000e86:	f7ff ff59 	bl	8000d3c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	2012      	movs	r0, #18
 8000e8e:	f7ff ff55 	bl	8000d3c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8000e92:	2100      	movs	r1, #0
 8000e94:	2013      	movs	r0, #19
 8000e96:	f7ff ff51 	bl	8000d3c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2014      	movs	r0, #20
 8000e9e:	f7ff ff4d 	bl	8000d3c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	2015      	movs	r0, #21
 8000ea6:	f7ff ff49 	bl	8000d3c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8000eaa:	2100      	movs	r1, #0
 8000eac:	2016      	movs	r0, #22
 8000eae:	f7ff ff45 	bl	8000d3c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	201c      	movs	r0, #28
 8000eb6:	f7ff ff41 	bl	8000d3c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 8000eba:	2100      	movs	r1, #0
 8000ebc:	201d      	movs	r0, #29
 8000ebe:	f7ff ff3d 	bl	8000d3c <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 8000ec2:	f000 f9e3 	bl	800128c <nRF24_FlushRX>
	nRF24_FlushTX();
 8000ec6:	f000 f9d9 	bl	800127c <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 8000eca:	f000 f9e7 	bl	800129c <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 8000ece:	f7ff fef3 	bl	8000cb8 <nRF24_CSN_H>
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <nRF24_Check+0x58>)
 8000ee0:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8000ee2:	2205      	movs	r2, #5
 8000ee4:	68b9      	ldr	r1, [r7, #8]
 8000ee6:	2030      	movs	r0, #48	; 0x30
 8000ee8:	f7ff ff88 	bl	8000dfc <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8000eec:	463b      	mov	r3, r7
 8000eee:	2205      	movs	r2, #5
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	2010      	movs	r0, #16
 8000ef4:	f7ff ff5d 	bl	8000db2 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 8000ef8:	2300      	movs	r3, #0
 8000efa:	73fb      	strb	r3, [r7, #15]
 8000efc:	e00f      	b.n	8000f1e <nRF24_Check+0x46>
//		HAL_UART_Transmit(&huart1, &rxbuf[i], 1, 200);
//		HAL_UART_Transmit(&huart1, ptr, 1, 200);
		if (rxbuf[i] != *ptr++) return 0;
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	3310      	adds	r3, #16
 8000f02:	443b      	add	r3, r7
 8000f04:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	1c59      	adds	r1, r3, #1
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d001      	beq.n	8000f18 <nRF24_Check+0x40>
 8000f14:	2300      	movs	r3, #0
 8000f16:	e006      	b.n	8000f26 <nRF24_Check+0x4e>
	for (i = 0; i < 5; i++) {
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	73fb      	strb	r3, [r7, #15]
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d9ec      	bls.n	8000efe <nRF24_Check+0x26>
	}

	return 1;
 8000f24:	2301      	movs	r3, #1
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	0800a508 	.word	0x0800a508

08000f34 <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f7ff fee2 	bl	8000d08 <nRF24_ReadReg>
 8000f44:	4603      	mov	r3, r0
 8000f46:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d104      	bne.n	8000f58 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	73fb      	strb	r3, [r7, #15]
 8000f56:	e003      	b.n	8000f60 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	f023 0302 	bic.w	r3, r3, #2
 8000f5e:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	4619      	mov	r1, r3
 8000f64:	2000      	movs	r0, #0
 8000f66:	f7ff fee9 	bl	8000d3c <nRF24_WriteReg>
}
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b084      	sub	sp, #16
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4603      	mov	r3, r0
 8000f7a:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f7ff fec3 	bl	8000d08 <nRF24_ReadReg>
 8000f82:	4603      	mov	r3, r0
 8000f84:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	f023 0301 	bic.w	r3, r3, #1
 8000f8c:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	b25a      	sxtb	r2, r3
 8000f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	b25b      	sxtb	r3, r3
 8000fa0:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f7ff fec8 	bl	8000d3c <nRF24_WriteReg>
}
 8000fac:	bf00      	nop
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <nRF24_SetDynamicPayloadLength>:

// Set transceiver DynamicPayloadLength feature for all the pipes
// input:
//   mode - status, one of nRF24_DPL_xx values
void nRF24_SetDynamicPayloadLength(uint8_t mode) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg  = nRF24_ReadReg(nRF24_REG_FEATURE);
 8000fbe:	201d      	movs	r0, #29
 8000fc0:	f7ff fea2 	bl	8000d08 <nRF24_ReadReg>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	73fb      	strb	r3, [r7, #15]
	if(mode) {
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d00c      	beq.n	8000fe8 <nRF24_SetDynamicPayloadLength+0x34>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg | nRF24_FEATURE_EN_DPL);
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	f043 0304 	orr.w	r3, r3, #4
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	201d      	movs	r0, #29
 8000fda:	f7ff feaf 	bl	8000d3c <nRF24_WriteReg>
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x1F);
 8000fde:	211f      	movs	r1, #31
 8000fe0:	201c      	movs	r0, #28
 8000fe2:	f7ff feab 	bl	8000d3c <nRF24_WriteReg>
	} else {
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_DPL);
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x0);
	}
}
 8000fe6:	e00b      	b.n	8001000 <nRF24_SetDynamicPayloadLength+0x4c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_DPL);
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	f023 0304 	bic.w	r3, r3, #4
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	201d      	movs	r0, #29
 8000ff4:	f7ff fea2 	bl	8000d3c <nRF24_WriteReg>
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x0);
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	201c      	movs	r0, #28
 8000ffc:	f7ff fe9e 	bl	8000d3c <nRF24_WriteReg>
}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <nRF24_SetPayloadWithAck>:

// Enables Payload With Ack. NB Refer to the datasheet for proper retransmit timing.
// input:
//   mode - status, 1 or 0
void nRF24_SetPayloadWithAck(uint8_t mode) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg  = nRF24_ReadReg(nRF24_REG_FEATURE);
 8001012:	201d      	movs	r0, #29
 8001014:	f7ff fe78 	bl	8000d08 <nRF24_ReadReg>
 8001018:	4603      	mov	r3, r0
 800101a:	73fb      	strb	r3, [r7, #15]
	if(mode) {
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d008      	beq.n	8001034 <nRF24_SetPayloadWithAck+0x2c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg | nRF24_FEATURE_EN_ACK_PAY);
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	b2db      	uxtb	r3, r3
 800102a:	4619      	mov	r1, r3
 800102c:	201d      	movs	r0, #29
 800102e:	f7ff fe85 	bl	8000d3c <nRF24_WriteReg>
	} else {
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_ACK_PAY);
	}
}
 8001032:	e007      	b.n	8001044 <nRF24_SetPayloadWithAck+0x3c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_ACK_PAY);
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	f023 0302 	bic.w	r3, r3, #2
 800103a:	b2db      	uxtb	r3, r3
 800103c:	4619      	mov	r1, r3
 800103e:	201d      	movs	r0, #29
 8001040:	f7ff fe7c 	bl	8000d3c <nRF24_WriteReg>
}
 8001044:	bf00      	nop
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8001056:	2000      	movs	r0, #0
 8001058:	f7ff fe56 	bl	8000d08 <nRF24_ReadReg>
 800105c:	4603      	mov	r3, r0
 800105e:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	f023 030c 	bic.w	r3, r3, #12
 8001066:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	f003 030c 	and.w	r3, r3, #12
 8001070:	b25a      	sxtb	r2, r3
 8001072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001076:	4313      	orrs	r3, r2
 8001078:	b25b      	sxtb	r3, r3
 800107a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	4619      	mov	r1, r3
 8001080:	2000      	movs	r0, #0
 8001082:	f7ff fe5b 	bl	8000d3c <nRF24_WriteReg>
}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	4619      	mov	r1, r3
 800109c:	2005      	movs	r0, #5
 800109e:	f7ff fe4d 	bl	8000d3c <nRF24_WriteReg>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <nRF24_SetAutoRetr>:
// Set automatic retransmission parameters
// input:
//   ard - auto retransmit delay, one of nRF24_ARD_xx values
//   arc - count of auto retransmits, value form 0 to 15
// note: zero arc value means that the automatic retransmission disabled
void nRF24_SetAutoRetr(uint8_t ard, uint8_t arc) {
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	460a      	mov	r2, r1
 80010b4:	71fb      	strb	r3, [r7, #7]
 80010b6:	4613      	mov	r3, r2
 80010b8:	71bb      	strb	r3, [r7, #6]
	// Set auto retransmit settings (SETUP_RETR register)
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, (uint8_t)((ard << 4) | (arc & nRF24_MASK_RETR_ARC)));
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	011b      	lsls	r3, r3, #4
 80010be:	b25a      	sxtb	r2, r3
 80010c0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010c4:	f003 030f 	and.w	r3, r3, #15
 80010c8:	b25b      	sxtb	r3, r3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b25b      	sxtb	r3, r3
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	4619      	mov	r1, r3
 80010d2:	2004      	movs	r0, #4
 80010d4:	f7ff fe32 	bl	8000d3c <nRF24_WriteReg>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	3b02      	subs	r3, #2
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	4619      	mov	r1, r3
 80010f2:	2003      	movs	r0, #3
 80010f4:	f7ff fe22 	bl	8000d3c <nRF24_WriteReg>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	2b06      	cmp	r3, #6
 8001110:	d00a      	beq.n	8001128 <nRF24_SetAddr+0x28>
 8001112:	2b06      	cmp	r3, #6
 8001114:	dc36      	bgt.n	8001184 <nRF24_SetAddr+0x84>
 8001116:	2b01      	cmp	r3, #1
 8001118:	dc02      	bgt.n	8001120 <nRF24_SetAddr+0x20>
 800111a:	2b00      	cmp	r3, #0
 800111c:	da04      	bge.n	8001128 <nRF24_SetAddr+0x28>
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
			break;
		default:
			// Incorrect pipe number -> do nothing
			break;
 800111e:	e031      	b.n	8001184 <nRF24_SetAddr+0x84>
 8001120:	3b02      	subs	r3, #2
	switch (pipe) {
 8001122:	2b03      	cmp	r3, #3
 8001124:	d82e      	bhi.n	8001184 <nRF24_SetAddr+0x84>
 8001126:	e023      	b.n	8001170 <nRF24_SetAddr+0x70>
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8001128:	2003      	movs	r0, #3
 800112a:	f7ff fded 	bl	8000d08 <nRF24_ReadReg>
 800112e:	4603      	mov	r3, r0
 8001130:	3301      	adds	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
			addr += addr_width;
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	683a      	ldr	r2, [r7, #0]
 8001138:	4413      	add	r3, r2
 800113a:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 800113c:	f7ff fdb0 	bl	8000ca0 <nRF24_CSN_L>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	4a13      	ldr	r2, [pc, #76]	; (8001190 <nRF24_SetAddr+0x90>)
 8001144:	5cd3      	ldrb	r3, [r2, r3]
 8001146:	f043 0320 	orr.w	r3, r3, #32
 800114a:	b2db      	uxtb	r3, r3
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fdbf 	bl	8000cd0 <nRF24_LL_RW>
				nRF24_LL_RW(*addr--);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	1e5a      	subs	r2, r3, #1
 8001156:	603a      	str	r2, [r7, #0]
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fdb8 	bl	8000cd0 <nRF24_LL_RW>
			} while (addr_width--);
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	1e5a      	subs	r2, r3, #1
 8001164:	73fa      	strb	r2, [r7, #15]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1f3      	bne.n	8001152 <nRF24_SetAddr+0x52>
			nRF24_CSN_H();
 800116a:	f7ff fda5 	bl	8000cb8 <nRF24_CSN_H>
			break;
 800116e:	e00a      	b.n	8001186 <nRF24_SetAddr+0x86>
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	4a07      	ldr	r2, [pc, #28]	; (8001190 <nRF24_SetAddr+0x90>)
 8001174:	5cd2      	ldrb	r2, [r2, r3]
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	4619      	mov	r1, r3
 800117c:	4610      	mov	r0, r2
 800117e:	f7ff fddd 	bl	8000d3c <nRF24_WriteReg>
			break;
 8001182:	e000      	b.n	8001186 <nRF24_SetAddr+0x86>
			break;
 8001184:	bf00      	nop
	}
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	0800a5dc 	.word	0x0800a5dc

08001194 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 800119e:	2006      	movs	r0, #6
 80011a0:	f7ff fdb2 	bl	8000d08 <nRF24_ReadReg>
 80011a4:	4603      	mov	r3, r0
 80011a6:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	f023 0306 	bic.w	r3, r3, #6
 80011ae:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 80011b0:	7bfa      	ldrb	r2, [r7, #15]
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	4619      	mov	r1, r3
 80011bc:	2006      	movs	r0, #6
 80011be:	f7ff fdbd 	bl	8000d3c <nRF24_WriteReg>
}
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b084      	sub	sp, #16
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 80011d4:	2006      	movs	r0, #6
 80011d6:	f7ff fd97 	bl	8000d08 <nRF24_ReadReg>
 80011da:	4603      	mov	r3, r0
 80011dc:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80011e4:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 80011e6:	7bfa      	ldrb	r2, [r7, #15]
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	4619      	mov	r1, r3
 80011f2:	2006      	movs	r0, #6
 80011f4:	f7ff fda2 	bl	8000d3c <nRF24_WriteReg>
}
 80011f8:	bf00      	nop
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <nRF24_EnableAA>:
}

// Enable the auto retransmit (a.k.a. enhanced ShockBurst) for the specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
void nRF24_EnableAA(uint8_t pipe) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Set bit in EN_AA register
	reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 800120a:	2001      	movs	r0, #1
 800120c:	f7ff fd7c 	bl	8000d08 <nRF24_ReadReg>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]
	reg |= (1 << pipe);
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	2201      	movs	r2, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	b25a      	sxtb	r2, r3
 800121e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001222:	4313      	orrs	r3, r2
 8001224:	b25b      	sxtb	r3, r3
 8001226:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	4619      	mov	r1, r3
 800122c:	2001      	movs	r0, #1
 800122e:	f7ff fd85 	bl	8000d3c <nRF24_WriteReg>
}
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <nRF24_GetStatus>:
	}
}

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 800123a:	b580      	push	{r7, lr}
 800123c:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 800123e:	2007      	movs	r0, #7
 8001240:	f7ff fd62 	bl	8000d08 <nRF24_ReadReg>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	bd80      	pop	{r7, pc}

0800124a <nRF24_GetRetransmitCounters>:

// Get auto retransmit statistic
// return: value of OBSERVE_TX register which contains two counters encoded in nibbles:
//   high - lost packets count (max value 15, can be reseted by write to RF_CH register)
//   low  - retransmitted packets count (max value 15, reseted when new transmission starts)
uint8_t nRF24_GetRetransmitCounters(void) {
 800124a:	b580      	push	{r7, lr}
 800124c:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_OBSERVE_TX));
 800124e:	2008      	movs	r0, #8
 8001250:	f7ff fd5a 	bl	8000d08 <nRF24_ReadReg>
 8001254:	4603      	mov	r3, r0
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}

0800125a <nRF24_ResetPLOS>:

// Reset packet lost counter (PLOS_CNT bits in OBSERVER_TX register)
void nRF24_ResetPLOS(void) {
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
	uint8_t reg;

	// The PLOS counter is reset after write to RF_CH register
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
 8001260:	2005      	movs	r0, #5
 8001262:	f7ff fd51 	bl	8000d08 <nRF24_ReadReg>
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	4619      	mov	r1, r3
 800126e:	2005      	movs	r0, #5
 8001270:	f7ff fd64 	bl	8000d3c <nRF24_WriteReg>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <nRF24_FlushTX>:

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8001280:	21ff      	movs	r1, #255	; 0xff
 8001282:	20e1      	movs	r0, #225	; 0xe1
 8001284:	f7ff fd5a 	bl	8000d3c <nRF24_WriteReg>
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}

0800128c <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8001290:	21ff      	movs	r1, #255	; 0xff
 8001292:	20e2      	movs	r0, #226	; 0xe2
 8001294:	f7ff fd52 	bl	8000d3c <nRF24_WriteReg>
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}

0800129c <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 80012a2:	2007      	movs	r0, #7
 80012a4:	f7ff fd30 	bl	8000d08 <nRF24_ReadReg>
 80012a8:	4603      	mov	r3, r0
 80012aa:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80012b2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	4619      	mov	r1, r3
 80012b8:	2007      	movs	r0, #7
 80012ba:	f7ff fd3f 	bl	8000d3c <nRF24_WriteReg>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <nRF24_WritePayload>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	460b      	mov	r3, r1
 80012d0:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 80012d2:	78fb      	ldrb	r3, [r7, #3]
 80012d4:	461a      	mov	r2, r3
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	20a0      	movs	r0, #160	; 0xa0
 80012da:	f7ff fd8f 	bl	8000dfc <nRF24_WriteMBReg>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <nRF24_GetRxDplPayloadWidth>:

static uint8_t nRF24_GetRxDplPayloadWidth() {
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
	uint8_t value;

	nRF24_CSN_L();
 80012ec:	f7ff fcd8 	bl	8000ca0 <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 80012f0:	2060      	movs	r0, #96	; 0x60
 80012f2:	f7ff fced 	bl	8000cd0 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 80012f6:	20ff      	movs	r0, #255	; 0xff
 80012f8:	f7ff fcea 	bl	8000cd0 <nRF24_LL_RW>
 80012fc:	4603      	mov	r3, r0
 80012fe:	71fb      	strb	r3, [r7, #7]
	nRF24_CSN_H();
 8001300:	f7ff fcda 	bl	8000cb8 <nRF24_CSN_H>

	return value;
 8001304:	79fb      	ldrb	r3, [r7, #7]

}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <nRF24_ReadPayloadGeneric>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	4613      	mov	r3, r2
 800131c:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 800131e:	2007      	movs	r0, #7
 8001320:	f7ff fcf2 	bl	8000d08 <nRF24_ReadReg>
 8001324:	4603      	mov	r3, r0
 8001326:	105b      	asrs	r3, r3, #1
 8001328:	b2db      	uxtb	r3, r3
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6) {
 8001330:	7dfb      	ldrb	r3, [r7, #23]
 8001332:	2b05      	cmp	r3, #5
 8001334:	d829      	bhi.n	800138a <nRF24_ReadPayloadGeneric+0x7a>
		// Get payload length
		if(dpl) {
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d00f      	beq.n	800135c <nRF24_ReadPayloadGeneric+0x4c>
			*length = nRF24_GetRxDplPayloadWidth();
 800133c:	f7ff ffd3 	bl	80012e6 <nRF24_GetRxDplPayloadWidth>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	701a      	strb	r2, [r3, #0]
			if(*length>32) { //broken packet
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b20      	cmp	r3, #32
 800134e:	d90f      	bls.n	8001370 <nRF24_ReadPayloadGeneric+0x60>
				*length = 0;
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]
				nRF24_FlushRX();
 8001356:	f7ff ff99 	bl	800128c <nRF24_FlushRX>
 800135a:	e009      	b.n	8001370 <nRF24_ReadPayloadGeneric+0x60>
			}
		} else {
			*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 800135c:	7dfb      	ldrb	r3, [r7, #23]
 800135e:	4a0f      	ldr	r2, [pc, #60]	; (800139c <nRF24_ReadPayloadGeneric+0x8c>)
 8001360:	5cd3      	ldrb	r3, [r2, r3]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fcd0 	bl	8000d08 <nRF24_ReadReg>
 8001368:	4603      	mov	r3, r0
 800136a:	461a      	mov	r2, r3
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	701a      	strb	r2, [r3, #0]
		}

		// Read a payload from the RX FIFO
		if (*length) {
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d006      	beq.n	8001386 <nRF24_ReadPayloadGeneric+0x76>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	68f9      	ldr	r1, [r7, #12]
 8001380:	2061      	movs	r0, #97	; 0x61
 8001382:	f7ff fd16 	bl	8000db2 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 8001386:	7dfb      	ldrb	r3, [r7, #23]
 8001388:	e003      	b.n	8001392 <nRF24_ReadPayloadGeneric+0x82>
	}

	// The RX FIFO is empty
	*length = 0;
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 8001390:	23ff      	movs	r3, #255	; 0xff
}
 8001392:	4618      	mov	r0, r3
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	0800a5d4 	.word	0x0800a5d4

080013a0 <nRF24_ReadPayloadDpl>:
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
	return nRF24_ReadPayloadGeneric(pBuf, length,0);
}

nRF24_RXResult nRF24_ReadPayloadDpl(uint8_t *pBuf, uint8_t *length) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
	return nRF24_ReadPayloadGeneric(pBuf, length,1);
 80013aa:	2201      	movs	r2, #1
 80013ac:	6839      	ldr	r1, [r7, #0]
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ffae 	bl	8001310 <nRF24_ReadPayloadGeneric>
 80013b4:	4603      	mov	r3, r0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <nRF24_CE_L>:
static inline void nRF24_CE_L() {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 80013c4:	2200      	movs	r2, #0
 80013c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013ca:	4802      	ldr	r0, [pc, #8]	; (80013d4 <nRF24_CE_L+0x14>)
 80013cc:	f001 fc18 	bl	8002c00 <HAL_GPIO_WritePin>
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	42020c00 	.word	0x42020c00

080013d8 <nRF24_CE_H>:
static inline void nRF24_CE_H() {
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 80013dc:	2201      	movs	r2, #1
 80013de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013e2:	4802      	ldr	r0, [pc, #8]	; (80013ec <nRF24_CE_H+0x14>)
 80013e4:	f001 fc0c 	bl	8002c00 <HAL_GPIO_WritePin>
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	42020c00 	.word	0x42020c00

080013f0 <Delay_ms>:


static inline void Delay_ms(uint32_t ms) { HAL_Delay(ms); }
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 fd2d 	bl	8001e58 <HAL_Delay>
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <UART_SendChar>:

#ifdef USE_HAL_DRIVER

extern UART_HandleTypeDef huart1;

void UART_SendChar(char b) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t *) &b, 1, 200);
 8001412:	1df9      	adds	r1, r7, #7
 8001414:	23c8      	movs	r3, #200	; 0xc8
 8001416:	2201      	movs	r2, #1
 8001418:	4803      	ldr	r0, [pc, #12]	; (8001428 <UART_SendChar+0x20>)
 800141a:	f007 fa75 	bl	8008908 <HAL_UART_Transmit>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000144 	.word	0x20000144

0800142c <UART_SendStr>:

void UART_SendStr(char *string) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) string, (uint16_t) strlen(string), 200);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7fe ff1f 	bl	8000278 <strlen>
 800143a:	4603      	mov	r3, r0
 800143c:	b29a      	uxth	r2, r3
 800143e:	23c8      	movs	r3, #200	; 0xc8
 8001440:	6879      	ldr	r1, [r7, #4]
 8001442:	4803      	ldr	r0, [pc, #12]	; (8001450 <UART_SendStr+0x24>)
 8001444:	f007 fa60 	bl	8008908 <HAL_UART_Transmit>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000144 	.word	0x20000144

08001454 <Toggle_LED>:

void Toggle_LED() {
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 8001458:	2180      	movs	r1, #128	; 0x80
 800145a:	4802      	ldr	r0, [pc, #8]	; (8001464 <Toggle_LED+0x10>)
 800145c:	f001 fbe8 	bl	8002c30 <HAL_GPIO_TogglePin>
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	42020800 	.word	0x42020800

08001468 <UART_SendBufHex>:
	LL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
}

#endif

void UART_SendBufHex(char *buf, uint16_t bufsize) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	char ch;
	for (i = 0; i < bufsize; i++) {
 8001474:	2300      	movs	r3, #0
 8001476:	81fb      	strh	r3, [r7, #14]
 8001478:	e018      	b.n	80014ac <UART_SendBufHex+0x44>
		ch = *buf++;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	607a      	str	r2, [r7, #4]
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	737b      	strb	r3, [r7, #13]
		UART_SendChar(HEX_CHARS[(ch >> 4)   % 0x10]);
 8001484:	7b7b      	ldrb	r3, [r7, #13]
 8001486:	091b      	lsrs	r3, r3, #4
 8001488:	b2db      	uxtb	r3, r3
 800148a:	461a      	mov	r2, r3
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <UART_SendBufHex+0x58>)
 800148e:	5c9b      	ldrb	r3, [r3, r2]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ffb9 	bl	8001408 <UART_SendChar>
		UART_SendChar(HEX_CHARS[(ch & 0x0f) % 0x10]);
 8001496:	7b7b      	ldrb	r3, [r7, #13]
 8001498:	f003 030f 	and.w	r3, r3, #15
 800149c:	4a08      	ldr	r2, [pc, #32]	; (80014c0 <UART_SendBufHex+0x58>)
 800149e:	5cd3      	ldrb	r3, [r2, r3]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ffb1 	bl	8001408 <UART_SendChar>
	for (i = 0; i < bufsize; i++) {
 80014a6:	89fb      	ldrh	r3, [r7, #14]
 80014a8:	3301      	adds	r3, #1
 80014aa:	81fb      	strh	r3, [r7, #14]
 80014ac:	89fa      	ldrh	r2, [r7, #14]
 80014ae:	887b      	ldrh	r3, [r7, #2]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d3e2      	bcc.n	800147a <UART_SendBufHex+0x12>
	}
}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	0800a510 	.word	0x0800a510

080014c4 <UART_SendHex8>:
void UART_SendHex8(uint16_t num) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	80fb      	strh	r3, [r7, #6]
	UART_SendChar(HEX_CHARS[(num >> 4)   % 0x10]);
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	091b      	lsrs	r3, r3, #4
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	f003 030f 	and.w	r3, r3, #15
 80014d8:	4a08      	ldr	r2, [pc, #32]	; (80014fc <UART_SendHex8+0x38>)
 80014da:	5cd3      	ldrb	r3, [r2, r3]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff93 	bl	8001408 <UART_SendChar>
	UART_SendChar(HEX_CHARS[(num & 0x0f) % 0x10]);
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	f003 030f 	and.w	r3, r3, #15
 80014e8:	4a04      	ldr	r2, [pc, #16]	; (80014fc <UART_SendHex8+0x38>)
 80014ea:	5cd3      	ldrb	r3, [r2, r3]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff8b 	bl	8001408 <UART_SendChar>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	0800a510 	.word	0x0800a510

08001500 <UART_SendInt>:

void UART_SendInt(int32_t num) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	char str[10]; // 10 chars max for INT32_MAX
	int i = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
	if (num < 0) {
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	da05      	bge.n	800151e <UART_SendInt+0x1e>
		UART_SendChar('-');
 8001512:	202d      	movs	r0, #45	; 0x2d
 8001514:	f7ff ff78 	bl	8001408 <UART_SendChar>
		num *= -1;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	425b      	negs	r3, r3
 800151c:	607b      	str	r3, [r7, #4]
	}
	do str[i++] = (char) (num % 10 + '0'); while ((num /= 10) > 0);
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <UART_SendInt+0x90>)
 8001522:	fb83 1302 	smull	r1, r3, r3, r2
 8001526:	1099      	asrs	r1, r3, #2
 8001528:	17d3      	asrs	r3, r2, #31
 800152a:	1ac9      	subs	r1, r1, r3
 800152c:	460b      	mov	r3, r1
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	1ad1      	subs	r1, r2, r3
 8001536:	b2ca      	uxtb	r2, r1
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	1c59      	adds	r1, r3, #1
 800153c:	6179      	str	r1, [r7, #20]
 800153e:	3230      	adds	r2, #48	; 0x30
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	3318      	adds	r3, #24
 8001544:	443b      	add	r3, r7
 8001546:	f803 2c10 	strb.w	r2, [r3, #-16]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a10      	ldr	r2, [pc, #64]	; (8001590 <UART_SendInt+0x90>)
 800154e:	fb82 1203 	smull	r1, r2, r2, r3
 8001552:	1092      	asrs	r2, r2, #2
 8001554:	17db      	asrs	r3, r3, #31
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	dcde      	bgt.n	800151e <UART_SendInt+0x1e>
	for (i--; i >= 0; i--) UART_SendChar(str[i]);
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	3b01      	subs	r3, #1
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	e00a      	b.n	800157e <UART_SendInt+0x7e>
 8001568:	f107 0208 	add.w	r2, r7, #8
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	4413      	add	r3, r2
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff ff48 	bl	8001408 <UART_SendChar>
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	3b01      	subs	r3, #1
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	2b00      	cmp	r3, #0
 8001582:	daf1      	bge.n	8001568 <UART_SendInt+0x68>
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	66666667 	.word	0x66666667

08001594 <nRF24_TransmitPacket>:
// Function to transmit data packet
// input:
//   pBuf - pointer to the buffer with data to transmit
//   length - length of the data buffer in bytes
// return: one of nRF24_TX_xx values
nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	70fb      	strb	r3, [r7, #3]
	volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 80015a0:	4b21      	ldr	r3, [pc, #132]	; (8001628 <nRF24_TransmitPacket+0x94>)
 80015a2:	60bb      	str	r3, [r7, #8]
	uint8_t status;

	// Deassert the CE pin (in case if it still high)
	nRF24_CE_L();
 80015a4:	f7ff ff0c 	bl	80013c0 <nRF24_CE_L>

	// Transfer a data from the specified buffer to the TX FIFO
	nRF24_WritePayload(pBuf, length);
 80015a8:	78fb      	ldrb	r3, [r7, #3]
 80015aa:	4619      	mov	r1, r3
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff fe8a 	bl	80012c6 <nRF24_WritePayload>

	// Start a transmission by asserting CE pin (must be held at least 10us)
	nRF24_CE_H();
 80015b2:	f7ff ff11 	bl	80013d8 <nRF24_CE_H>
	// Poll the transceiver status register until one of the following flags will be set:
	//   TX_DS  - means the packet has been transmitted
	//   MAX_RT - means the maximum number of TX retransmits happened
	// note: this solution is far from perfect, better to use IRQ instead of polling the status
	do {
		status = nRF24_GetStatus();
 80015b6:	f7ff fe40 	bl	800123a <nRF24_GetStatus>
 80015ba:	4603      	mov	r3, r0
 80015bc:	73fb      	strb	r3, [r7, #15]
		if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT)) {
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d105      	bne.n	80015d4 <nRF24_TransmitPacket+0x40>
			break;
		}
	} while (wait--);
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	1e5a      	subs	r2, r3, #1
 80015cc:	60ba      	str	r2, [r7, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f1      	bne.n	80015b6 <nRF24_TransmitPacket+0x22>
 80015d2:	e000      	b.n	80015d6 <nRF24_TransmitPacket+0x42>
			break;
 80015d4:	bf00      	nop

	// Deassert the CE pin (Standby-II --> Standby-I)
	nRF24_CE_L();
 80015d6:	f7ff fef3 	bl	80013c0 <nRF24_CE_L>

	if (!wait) {
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <nRF24_TransmitPacket+0x50>
		// Timeout
		return nRF24_TX_TIMEOUT;
 80015e0:	2302      	movs	r3, #2
 80015e2:	e01d      	b.n	8001620 <nRF24_TransmitPacket+0x8c>
	}

	// Check the flags in STATUS register
	UART_SendStr("[");
 80015e4:	4811      	ldr	r0, [pc, #68]	; (800162c <nRF24_TransmitPacket+0x98>)
 80015e6:	f7ff ff21 	bl	800142c <UART_SendStr>
	UART_SendHex8(status);
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff ff68 	bl	80014c4 <UART_SendHex8>
	UART_SendStr("] ");
 80015f4:	480e      	ldr	r0, [pc, #56]	; (8001630 <nRF24_TransmitPacket+0x9c>)
 80015f6:	f7ff ff19 	bl	800142c <UART_SendStr>

	// Clear pending IRQ flags
    nRF24_ClearIRQFlags();
 80015fa:	f7ff fe4f 	bl	800129c <nRF24_ClearIRQFlags>

	if (status & nRF24_FLAG_MAX_RT) {
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	f003 0310 	and.w	r3, r3, #16
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <nRF24_TransmitPacket+0x78>
		// Auto retransmit counter exceeds the programmed maximum limit (FIFO is not removed)
		return nRF24_TX_MAXRT;
 8001608:	2303      	movs	r3, #3
 800160a:	e009      	b.n	8001620 <nRF24_TransmitPacket+0x8c>
	}

	if (status & nRF24_FLAG_TX_DS) {
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	f003 0320 	and.w	r3, r3, #32
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <nRF24_TransmitPacket+0x86>
		// Successful transmission
		return nRF24_TX_SUCCESS;
 8001616:	2301      	movs	r3, #1
 8001618:	e002      	b.n	8001620 <nRF24_TransmitPacket+0x8c>
	}

	// Some banana happens, a payload remains in the TX FIFO, flush it
	nRF24_FlushTX();
 800161a:	f7ff fe2f 	bl	800127c <nRF24_FlushTX>

	return nRF24_TX_ERROR;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	000fffff 	.word	0x000fffff
 800162c:	0800a524 	.word	0x0800a524
 8001630:	0800a528 	.word	0x0800a528

08001634 <runRadio>:

#endif // DEMO_TX_



int runRadio(void) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
	UART_SendStr("\r\nSTM32L432KC is online.\r\n");
 800163a:	485f      	ldr	r0, [pc, #380]	; (80017b8 <runRadio+0x184>)
 800163c:	f7ff fef6 	bl	800142c <UART_SendStr>

	// RX/TX disabled
	nRF24_CE_L();
 8001640:	f7ff febe 	bl	80013c0 <nRF24_CE_L>
//	HAL_Delay(1);

	// Configure the nRF24L01+
	UART_SendStr("nRF24L01+ check: ");
 8001644:	485d      	ldr	r0, [pc, #372]	; (80017bc <runRadio+0x188>)
 8001646:	f7ff fef1 	bl	800142c <UART_SendStr>
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wmissing-noreturn"
	if (!nRF24_Check()) {
 800164a:	f7ff fc45 	bl	8000ed8 <nRF24_Check>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d108      	bne.n	8001666 <runRadio+0x32>
		UART_SendStr("FAIL\r\n");
 8001654:	485a      	ldr	r0, [pc, #360]	; (80017c0 <runRadio+0x18c>)
 8001656:	f7ff fee9 	bl	800142c <UART_SendStr>
		while (1) {
			Toggle_LED();
 800165a:	f7ff fefb 	bl	8001454 <Toggle_LED>
			Delay_ms(50);
 800165e:	2032      	movs	r0, #50	; 0x32
 8001660:	f7ff fec6 	bl	80013f0 <Delay_ms>
			Toggle_LED();
 8001664:	e7f9      	b.n	800165a <runRadio+0x26>
		}
	}
#pragma clang diagnostic pop
	UART_SendStr("OK\r\n");
 8001666:	4857      	ldr	r0, [pc, #348]	; (80017c4 <runRadio+0x190>)
 8001668:	f7ff fee0 	bl	800142c <UART_SendStr>

	// Initialize the nRF24L01 to its default state
	nRF24_Init();
 800166c:	f7ff fbe7 	bl	8000e3e <nRF24_Init>
	//   - CRC scheme: 2 byte

    // The transmitter sends a 10-byte packets to the address 'ESB' with Auto-ACK (ShockBurst enabled)

    // Set RF channel
    nRF24_SetRFChannel(40);
 8001670:	2028      	movs	r0, #40	; 0x28
 8001672:	f7ff fd0c 	bl	800108e <nRF24_SetRFChannel>

    // Set data rate
    nRF24_SetDataRate(nRF24_DR_2Mbps);
 8001676:	2008      	movs	r0, #8
 8001678:	f7ff fda7 	bl	80011ca <nRF24_SetDataRate>

    // Set CRC scheme
    nRF24_SetCRCScheme(nRF24_CRC_2byte);
 800167c:	200c      	movs	r0, #12
 800167e:	f7ff fce5 	bl	800104c <nRF24_SetCRCScheme>

    // Set address width, its common for all pipes (RX and TX)
    nRF24_SetAddrWidth(3);
 8001682:	2003      	movs	r0, #3
 8001684:	f7ff fd2c 	bl	80010e0 <nRF24_SetAddrWidth>

    // Configure TX PIPE
    static const uint8_t nRF24_ADDR[] = { 'E', 'S', 'B' };
    nRF24_SetAddr(nRF24_PIPETX, nRF24_ADDR); // program TX address
 8001688:	494f      	ldr	r1, [pc, #316]	; (80017c8 <runRadio+0x194>)
 800168a:	2006      	movs	r0, #6
 800168c:	f7ff fd38 	bl	8001100 <nRF24_SetAddr>
    nRF24_SetAddr(nRF24_PIPE0, nRF24_ADDR); // program address for pipe#0, must be same as TX (for Auto-ACK)
 8001690:	494d      	ldr	r1, [pc, #308]	; (80017c8 <runRadio+0x194>)
 8001692:	2000      	movs	r0, #0
 8001694:	f7ff fd34 	bl	8001100 <nRF24_SetAddr>

    // Set TX power (maximum)
    nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 8001698:	2006      	movs	r0, #6
 800169a:	f7ff fd7b 	bl	8001194 <nRF24_SetTXPower>

    // Configure auto retransmit: 10 retransmissions with pause of 2500s in between
    nRF24_SetAutoRetr(nRF24_ARD_2500us, 10);
 800169e:	210a      	movs	r1, #10
 80016a0:	2009      	movs	r0, #9
 80016a2:	f7ff fd02 	bl	80010aa <nRF24_SetAutoRetr>

    // Enable Auto-ACK for pipe#0 (for ACK packets)
    nRF24_EnableAA(nRF24_PIPE0);
 80016a6:	2000      	movs	r0, #0
 80016a8:	f7ff fdaa 	bl	8001200 <nRF24_EnableAA>

    // Set operational mode (PTX == transmitter)
    nRF24_SetOperationalMode(nRF24_MODE_TX);
 80016ac:	2000      	movs	r0, #0
 80016ae:	f7ff fc60 	bl	8000f72 <nRF24_SetOperationalMode>

    // Clear any pending IRQ flags
    nRF24_ClearIRQFlags();
 80016b2:	f7ff fdf3 	bl	800129c <nRF24_ClearIRQFlags>

    // Enable DPL
    nRF24_SetDynamicPayloadLength(nRF24_DPL_ON);
 80016b6:	2001      	movs	r0, #1
 80016b8:	f7ff fc7c 	bl	8000fb4 <nRF24_SetDynamicPayloadLength>
	nRF24_SetPayloadWithAck(1);
 80016bc:	2001      	movs	r0, #1
 80016be:	f7ff fca3 	bl	8001008 <nRF24_SetPayloadWithAck>


	// Wake the transceiver
    nRF24_SetPowerMode(nRF24_PWR_UP);
 80016c2:	2002      	movs	r0, #2
 80016c4:	f7ff fc36 	bl	8000f34 <nRF24_SetPowerMode>


    // Some variables
    uint32_t packets_lost = 0; // global counter of lost packets
 80016c8:	2300      	movs	r3, #0
 80016ca:	607b      	str	r3, [r7, #4]
    uint8_t otx_plos_cnt; // lost packet count
	uint8_t otx_arc_cnt; // retransmit count


    // The main loop
    j = 0;
 80016cc:	4b3f      	ldr	r3, [pc, #252]	; (80017cc <runRadio+0x198>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wmissing-noreturn"
    while (1) {
#pragma clang diagnostic pop

		payload_length = (uint8_t) 1;
 80016d2:	4b3f      	ldr	r3, [pc, #252]	; (80017d0 <runRadio+0x19c>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	701a      	strb	r2, [r3, #0]

		// Prepare data packet

		HAL_UART_Receive(&huart1, nRF24_payload, 1, HAL_MAX_DELAY);
 80016d8:	f04f 33ff 	mov.w	r3, #4294967295
 80016dc:	2201      	movs	r2, #1
 80016de:	493d      	ldr	r1, [pc, #244]	; (80017d4 <runRadio+0x1a0>)
 80016e0:	483d      	ldr	r0, [pc, #244]	; (80017d8 <runRadio+0x1a4>)
 80016e2:	f007 f9af 	bl	8008a44 <HAL_UART_Receive>

    	// Print a payload
    	UART_SendStr("PAYLOAD:>");
 80016e6:	483d      	ldr	r0, [pc, #244]	; (80017dc <runRadio+0x1a8>)
 80016e8:	f7ff fea0 	bl	800142c <UART_SendStr>
    	UART_SendBufHex((char *)nRF24_payload, payload_length);
 80016ec:	4b38      	ldr	r3, [pc, #224]	; (80017d0 <runRadio+0x19c>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	4619      	mov	r1, r3
 80016f4:	4837      	ldr	r0, [pc, #220]	; (80017d4 <runRadio+0x1a0>)
 80016f6:	f7ff feb7 	bl	8001468 <UART_SendBufHex>
    	UART_SendStr("< ... TX: ");
 80016fa:	4839      	ldr	r0, [pc, #228]	; (80017e0 <runRadio+0x1ac>)
 80016fc:	f7ff fe96 	bl	800142c <UART_SendStr>

    	// Transmit a packet
    	tx_res = nRF24_TransmitPacket(nRF24_payload, payload_length);
 8001700:	4b33      	ldr	r3, [pc, #204]	; (80017d0 <runRadio+0x19c>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	4833      	ldr	r0, [pc, #204]	; (80017d4 <runRadio+0x1a0>)
 8001708:	f7ff ff44 	bl	8001594 <nRF24_TransmitPacket>
 800170c:	4603      	mov	r3, r0
 800170e:	461a      	mov	r2, r3
 8001710:	4b34      	ldr	r3, [pc, #208]	; (80017e4 <runRadio+0x1b0>)
 8001712:	701a      	strb	r2, [r3, #0]
		otx = nRF24_GetRetransmitCounters();
 8001714:	f7ff fd99 	bl	800124a <nRF24_GetRetransmitCounters>
 8001718:	4603      	mov	r3, r0
 800171a:	70fb      	strb	r3, [r7, #3]
		nRF24_ReadPayloadDpl(nRF24_payload, &payload_length );
 800171c:	492c      	ldr	r1, [pc, #176]	; (80017d0 <runRadio+0x19c>)
 800171e:	482d      	ldr	r0, [pc, #180]	; (80017d4 <runRadio+0x1a0>)
 8001720:	f7ff fe3e 	bl	80013a0 <nRF24_ReadPayloadDpl>
		otx_plos_cnt = (otx & nRF24_MASK_PLOS_CNT) >> 4; // packets lost counter
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	091b      	lsrs	r3, r3, #4
 8001728:	70bb      	strb	r3, [r7, #2]
		otx_arc_cnt  = (otx & nRF24_MASK_ARC_CNT); // auto retransmissions counter
 800172a:	78fb      	ldrb	r3, [r7, #3]
 800172c:	f003 030f 	and.w	r3, r3, #15
 8001730:	707b      	strb	r3, [r7, #1]
    	switch (tx_res) {
 8001732:	4b2c      	ldr	r3, [pc, #176]	; (80017e4 <runRadio+0x1b0>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b03      	cmp	r3, #3
 8001738:	d00e      	beq.n	8001758 <runRadio+0x124>
 800173a:	2b03      	cmp	r3, #3
 800173c:	dc16      	bgt.n	800176c <runRadio+0x138>
 800173e:	2b01      	cmp	r3, #1
 8001740:	d002      	beq.n	8001748 <runRadio+0x114>
 8001742:	2b02      	cmp	r3, #2
 8001744:	d004      	beq.n	8001750 <runRadio+0x11c>
 8001746:	e011      	b.n	800176c <runRadio+0x138>
			case nRF24_TX_SUCCESS:
				UART_SendStr("OK");
 8001748:	4827      	ldr	r0, [pc, #156]	; (80017e8 <runRadio+0x1b4>)
 800174a:	f7ff fe6f 	bl	800142c <UART_SendStr>
				break;
 800174e:	e011      	b.n	8001774 <runRadio+0x140>
			case nRF24_TX_TIMEOUT:
				UART_SendStr("TIMEOUT");
 8001750:	4826      	ldr	r0, [pc, #152]	; (80017ec <runRadio+0x1b8>)
 8001752:	f7ff fe6b 	bl	800142c <UART_SendStr>
				break;
 8001756:	e00d      	b.n	8001774 <runRadio+0x140>
			case nRF24_TX_MAXRT:
				UART_SendStr("MAX RETRANSMIT");
 8001758:	4825      	ldr	r0, [pc, #148]	; (80017f0 <runRadio+0x1bc>)
 800175a:	f7ff fe67 	bl	800142c <UART_SendStr>
				packets_lost += otx_plos_cnt;
 800175e:	78bb      	ldrb	r3, [r7, #2]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	4413      	add	r3, r2
 8001764:	607b      	str	r3, [r7, #4]
				nRF24_ResetPLOS();
 8001766:	f7ff fd78 	bl	800125a <nRF24_ResetPLOS>
				break;
 800176a:	e003      	b.n	8001774 <runRadio+0x140>
			default:
				UART_SendStr("ERROR");
 800176c:	4821      	ldr	r0, [pc, #132]	; (80017f4 <runRadio+0x1c0>)
 800176e:	f7ff fe5d 	bl	800142c <UART_SendStr>
				break;
 8001772:	bf00      	nop
		}
		UART_SendStr("   ACK_PAYLOAD=>");
 8001774:	4820      	ldr	r0, [pc, #128]	; (80017f8 <runRadio+0x1c4>)
 8001776:	f7ff fe59 	bl	800142c <UART_SendStr>
    	UART_SendBufHex((char *) nRF24_payload, payload_length);
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <runRadio+0x19c>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	b29b      	uxth	r3, r3
 8001780:	4619      	mov	r1, r3
 8001782:	4814      	ldr	r0, [pc, #80]	; (80017d4 <runRadio+0x1a0>)
 8001784:	f7ff fe70 	bl	8001468 <UART_SendBufHex>
    	UART_SendStr("<   ARC=");
 8001788:	481c      	ldr	r0, [pc, #112]	; (80017fc <runRadio+0x1c8>)
 800178a:	f7ff fe4f 	bl	800142c <UART_SendStr>
		UART_SendInt(otx_arc_cnt);
 800178e:	787b      	ldrb	r3, [r7, #1]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff feb5 	bl	8001500 <UART_SendInt>
		UART_SendStr(" LOST=");
 8001796:	481a      	ldr	r0, [pc, #104]	; (8001800 <runRadio+0x1cc>)
 8001798:	f7ff fe48 	bl	800142c <UART_SendStr>
		UART_SendInt(packets_lost);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff feae 	bl	8001500 <UART_SendInt>
		UART_SendStr("\r\n");
 80017a4:	4817      	ldr	r0, [pc, #92]	; (8001804 <runRadio+0x1d0>)
 80017a6:	f7ff fe41 	bl	800142c <UART_SendStr>

    	// Wait ~0.5s
    	Delay_ms(500);
 80017aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017ae:	f7ff fe1f 	bl	80013f0 <Delay_ms>
		Toggle_LED();
 80017b2:	f7ff fe4f 	bl	8001454 <Toggle_LED>
		payload_length = (uint8_t) 1;
 80017b6:	e78c      	b.n	80016d2 <runRadio+0x9e>
 80017b8:	0800a52c 	.word	0x0800a52c
 80017bc:	0800a548 	.word	0x0800a548
 80017c0:	0800a55c 	.word	0x0800a55c
 80017c4:	0800a564 	.word	0x0800a564
 80017c8:	0800a5e4 	.word	0x0800a5e4
 80017cc:	20000704 	.word	0x20000704
 80017d0:	20000708 	.word	0x20000708
 80017d4:	200006e4 	.word	0x200006e4
 80017d8:	20000144 	.word	0x20000144
 80017dc:	0800a56c 	.word	0x0800a56c
 80017e0:	0800a578 	.word	0x0800a578
 80017e4:	20000709 	.word	0x20000709
 80017e8:	0800a584 	.word	0x0800a584
 80017ec:	0800a588 	.word	0x0800a588
 80017f0:	0800a590 	.word	0x0800a590
 80017f4:	0800a5a0 	.word	0x0800a5a0
 80017f8:	0800a5a8 	.word	0x0800a5a8
 80017fc:	0800a5bc 	.word	0x0800a5bc
 8001800:	0800a5c8 	.word	0x0800a5c8
 8001804:	0800a5d0 	.word	0x0800a5d0

08001808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <HAL_MspInit+0x38>)
 8001810:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001814:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <HAL_MspInit+0x38>)
 8001816:	f043 0304 	orr.w	r3, r3, #4
 800181a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800181e:	4b08      	ldr	r3, [pc, #32]	; (8001840 <HAL_MspInit+0x38>)
 8001820:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 800182c:	f002 fc4a 	bl	80040c4 <HAL_PWREx_EnableVddA>

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001830:	2004      	movs	r0, #4
 8001832:	f000 ffcd 	bl	80027d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	46020c00 	.word	0x46020c00

08001844 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b0ba      	sub	sp, #232	; 0xe8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800185c:	f107 0310 	add.w	r3, r7, #16
 8001860:	22c0      	movs	r2, #192	; 0xc0
 8001862:	2100      	movs	r1, #0
 8001864:	4618      	mov	r0, r3
 8001866:	f008 fe17 	bl	800a498 <memset>
  if(hadc->Instance==ADC1)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a24      	ldr	r2, [pc, #144]	; (8001900 <HAL_ADC_MspInit+0xbc>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d140      	bne.n	80018f6 <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001874:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001880:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001884:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001888:	f107 0310 	add.w	r3, r7, #16
 800188c:	4618      	mov	r0, r3
 800188e:	f003 fed5 	bl	800563c <HAL_RCCEx_PeriphCLKConfig>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8001898:	f7ff f9fc 	bl	8000c94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800189c:	4b19      	ldr	r3, [pc, #100]	; (8001904 <HAL_ADC_MspInit+0xc0>)
 800189e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018a2:	4a18      	ldr	r2, [pc, #96]	; (8001904 <HAL_ADC_MspInit+0xc0>)
 80018a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018a8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80018ac:	4b15      	ldr	r3, [pc, #84]	; (8001904 <HAL_ADC_MspInit+0xc0>)
 80018ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ba:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_ADC_MspInit+0xc0>)
 80018bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018c0:	4a10      	ldr	r2, [pc, #64]	; (8001904 <HAL_ADC_MspInit+0xc0>)
 80018c2:	f043 0304 	orr.w	r3, r3, #4
 80018c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <HAL_ADC_MspInit+0xc0>)
 80018cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80018d8:	2304      	movs	r3, #4
 80018da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018de:	2303      	movs	r3, #3
 80018e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80018ea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018ee:	4619      	mov	r1, r3
 80018f0:	4805      	ldr	r0, [pc, #20]	; (8001908 <HAL_ADC_MspInit+0xc4>)
 80018f2:	f000 ffad 	bl	8002850 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018f6:	bf00      	nop
 80018f8:	37e8      	adds	r7, #232	; 0xe8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	42028000 	.word	0x42028000
 8001904:	46020c00 	.word	0x46020c00
 8001908:	42020800 	.word	0x42020800

0800190c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b0bc      	sub	sp, #240	; 0xf0
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001924:	f107 0318 	add.w	r3, r7, #24
 8001928:	22c0      	movs	r2, #192	; 0xc0
 800192a:	2100      	movs	r1, #0
 800192c:	4618      	mov	r0, r3
 800192e:	f008 fdb3 	bl	800a498 <memset>
  if(hspi->Instance==SPI1)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a39      	ldr	r2, [pc, #228]	; (8001a1c <HAL_SPI_MspInit+0x110>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d16a      	bne.n	8001a12 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800193c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001940:	f04f 0300 	mov.w	r3, #0
 8001944:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8001948:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800194c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001950:	f107 0318 	add.w	r3, r7, #24
 8001954:	4618      	mov	r0, r3
 8001956:	f003 fe71 	bl	800563c <HAL_RCCEx_PeriphCLKConfig>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001960:	f7ff f998 	bl	8000c94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001964:	4b2e      	ldr	r3, [pc, #184]	; (8001a20 <HAL_SPI_MspInit+0x114>)
 8001966:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800196a:	4a2d      	ldr	r2, [pc, #180]	; (8001a20 <HAL_SPI_MspInit+0x114>)
 800196c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001970:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001974:	4b2a      	ldr	r3, [pc, #168]	; (8001a20 <HAL_SPI_MspInit+0x114>)
 8001976:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800197a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001982:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <HAL_SPI_MspInit+0x114>)
 8001984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001988:	4a25      	ldr	r2, [pc, #148]	; (8001a20 <HAL_SPI_MspInit+0x114>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001992:	4b23      	ldr	r3, [pc, #140]	; (8001a20 <HAL_SPI_MspInit+0x114>)
 8001994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a0:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <HAL_SPI_MspInit+0x114>)
 80019a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019a6:	4a1e      	ldr	r2, [pc, #120]	; (8001a20 <HAL_SPI_MspInit+0x114>)
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80019b0:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <HAL_SPI_MspInit+0x114>)
 80019b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 80019be:	2382      	movs	r3, #130	; 0x82
 80019c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019d6:	2305      	movs	r3, #5
 80019d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019e0:	4619      	mov	r1, r3
 80019e2:	4810      	ldr	r0, [pc, #64]	; (8001a24 <HAL_SPI_MspInit+0x118>)
 80019e4:	f000 ff34 	bl	8002850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019e8:	2310      	movs	r3, #16
 80019ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ee:	2302      	movs	r3, #2
 80019f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a00:	2305      	movs	r3, #5
 8001a02:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a06:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4806      	ldr	r0, [pc, #24]	; (8001a28 <HAL_SPI_MspInit+0x11c>)
 8001a0e:	f000 ff1f 	bl	8002850 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a12:	bf00      	nop
 8001a14:	37f0      	adds	r7, #240	; 0xf0
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40013000 	.word	0x40013000
 8001a20:	46020c00 	.word	0x46020c00
 8001a24:	42020000 	.word	0x42020000
 8001a28:	42020400 	.word	0x42020400

08001a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b0ba      	sub	sp, #232	; 0xe8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a44:	f107 0310 	add.w	r3, r7, #16
 8001a48:	22c0      	movs	r2, #192	; 0xc0
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f008 fd23 	bl	800a498 <memset>
  if(huart->Instance==USART1)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a26      	ldr	r2, [pc, #152]	; (8001af0 <HAL_UART_MspInit+0xc4>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d145      	bne.n	8001ae8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a5c:	f04f 0201 	mov.w	r2, #1
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a6c:	f107 0310 	add.w	r3, r7, #16
 8001a70:	4618      	mov	r0, r3
 8001a72:	f003 fde3 	bl	800563c <HAL_RCCEx_PeriphCLKConfig>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001a7c:	f7ff f90a 	bl	8000c94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a80:	4b1c      	ldr	r3, [pc, #112]	; (8001af4 <HAL_UART_MspInit+0xc8>)
 8001a82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001a86:	4a1b      	ldr	r2, [pc, #108]	; (8001af4 <HAL_UART_MspInit+0xc8>)
 8001a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a8c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001a90:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <HAL_UART_MspInit+0xc8>)
 8001a92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <HAL_UART_MspInit+0xc8>)
 8001aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001aa4:	4a13      	ldr	r2, [pc, #76]	; (8001af4 <HAL_UART_MspInit+0xc8>)
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001aae:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <HAL_UART_MspInit+0xc8>)
 8001ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8001abc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ac0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001aca:	2302      	movs	r3, #2
 8001acc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ad6:	2307      	movs	r3, #7
 8001ad8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001adc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4805      	ldr	r0, [pc, #20]	; (8001af8 <HAL_UART_MspInit+0xcc>)
 8001ae4:	f000 feb4 	bl	8002850 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ae8:	bf00      	nop
 8001aea:	37e8      	adds	r7, #232	; 0xe8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40013800 	.word	0x40013800
 8001af4:	46020c00 	.word	0x46020c00
 8001af8:	42020000 	.word	0x42020000

08001afc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b0bc      	sub	sp, #240	; 0xf0
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b14:	f107 0318 	add.w	r3, r7, #24
 8001b18:	22c0      	movs	r2, #192	; 0xc0
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f008 fcbb 	bl	800a498 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a3c      	ldr	r2, [pc, #240]	; (8001c18 <HAL_PCD_MspInit+0x11c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d171      	bne.n	8001c10 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001b2c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b3e:	f107 0318 	add.w	r3, r7, #24
 8001b42:	4618      	mov	r0, r3
 8001b44:	f003 fd7a 	bl	800563c <HAL_RCCEx_PeriphCLKConfig>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8001b4e:	f7ff f8a1 	bl	8000c94 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	4b32      	ldr	r3, [pc, #200]	; (8001c1c <HAL_PCD_MspInit+0x120>)
 8001b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b58:	4a30      	ldr	r2, [pc, #192]	; (8001c1c <HAL_PCD_MspInit+0x120>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001b62:	4b2e      	ldr	r3, [pc, #184]	; (8001c1c <HAL_PCD_MspInit+0x120>)
 8001b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001b70:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b84:	2303      	movs	r3, #3
 8001b86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001b8a:	230a      	movs	r3, #10
 8001b8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b90:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b94:	4619      	mov	r1, r3
 8001b96:	4822      	ldr	r0, [pc, #136]	; (8001c20 <HAL_PCD_MspInit+0x124>)
 8001b98:	f000 fe5a 	bl	8002850 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001b9c:	4b1f      	ldr	r3, [pc, #124]	; (8001c1c <HAL_PCD_MspInit+0x120>)
 8001b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ba2:	4a1e      	ldr	r2, [pc, #120]	; (8001c1c <HAL_PCD_MspInit+0x120>)
 8001ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001bac:	4b1b      	ldr	r3, [pc, #108]	; (8001c1c <HAL_PCD_MspInit+0x120>)
 8001bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bba:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <HAL_PCD_MspInit+0x120>)
 8001bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d119      	bne.n	8001bfc <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bc8:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <HAL_PCD_MspInit+0x120>)
 8001bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bce:	4a13      	ldr	r2, [pc, #76]	; (8001c1c <HAL_PCD_MspInit+0x120>)
 8001bd0:	f043 0304 	orr.w	r3, r3, #4
 8001bd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001bd8:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <HAL_PCD_MspInit+0x120>)
 8001bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bde:	f003 0304 	and.w	r3, r3, #4
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001be6:	f002 fa4d 	bl	8004084 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bea:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <HAL_PCD_MspInit+0x120>)
 8001bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf0:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <HAL_PCD_MspInit+0x120>)
 8001bf2:	f023 0304 	bic.w	r3, r3, #4
 8001bf6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001bfa:	e001      	b.n	8001c00 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8001bfc:	f002 fa42 	bl	8004084 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001c00:	2200      	movs	r2, #0
 8001c02:	2100      	movs	r1, #0
 8001c04:	2049      	movs	r0, #73	; 0x49
 8001c06:	f000 fdee 	bl	80027e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001c0a:	2049      	movs	r0, #73	; 0x49
 8001c0c:	f000 fe05 	bl	800281a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001c10:	bf00      	nop
 8001c12:	37f0      	adds	r7, #240	; 0xf0
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	42040000 	.word	0x42040000
 8001c1c:	46020c00 	.word	0x46020c00
 8001c20:	42020000 	.word	0x42020000

08001c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c28:	e7fe      	b.n	8001c28 <NMI_Handler+0x4>

08001c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c2e:	e7fe      	b.n	8001c2e <HardFault_Handler+0x4>

08001c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c34:	e7fe      	b.n	8001c34 <MemManage_Handler+0x4>

08001c36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c3a:	e7fe      	b.n	8001c3a <BusFault_Handler+0x4>

08001c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <UsageFault_Handler+0x4>

08001c42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c70:	f000 f8d2 	bl	8001e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c7c:	4802      	ldr	r0, [pc, #8]	; (8001c88 <OTG_FS_IRQHandler+0x10>)
 8001c7e:	f001 f9c7 	bl	8003010 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	200001d8 	.word	0x200001d8

08001c8c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c90:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <SystemInit+0x68>)
 8001c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c96:	4a17      	ldr	r2, [pc, #92]	; (8001cf4 <SystemInit+0x68>)
 8001c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001ca0:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <SystemInit+0x6c>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001ca6:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <SystemInit+0x6c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001cac:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <SystemInit+0x6c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001cb2:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <SystemInit+0x6c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <SystemInit+0x6c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a0e      	ldr	r2, [pc, #56]	; (8001cf8 <SystemInit+0x6c>)
 8001cbe:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001cc2:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001cc6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <SystemInit+0x6c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001cce:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <SystemInit+0x6c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a09      	ldr	r2, [pc, #36]	; (8001cf8 <SystemInit+0x6c>)
 8001cd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001cda:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <SystemInit+0x6c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <SystemInit+0x68>)
 8001ce2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ce6:	609a      	str	r2, [r3, #8]
  #endif
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000ed00 	.word	0xe000ed00
 8001cf8:	46020c00 	.word	0x46020c00

08001cfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001cfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d34 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d00:	f7ff ffc4 	bl	8001c8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d04:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d06:	e003      	b.n	8001d10 <LoopCopyDataInit>

08001d08 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d0a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d0c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d0e:	3104      	adds	r1, #4

08001d10 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d10:	480a      	ldr	r0, [pc, #40]	; (8001d3c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001d12:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001d14:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d16:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d18:	d3f6      	bcc.n	8001d08 <CopyDataInit>
	ldr	r2, =_sbss
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	; (8001d44 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d1c:	e002      	b.n	8001d24 <LoopFillZerobss>

08001d1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d1e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d20:	f842 3b04 	str.w	r3, [r2], #4

08001d24 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d24:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <LoopForever+0x16>)
	cmp	r2, r3
 8001d26:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d28:	d3f9      	bcc.n	8001d1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d2a:	f008 fbbd 	bl	800a4a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d2e:	f7fe fc73 	bl	8000618 <main>

08001d32 <LoopForever>:

LoopForever:
    b LoopForever
 8001d32:	e7fe      	b.n	8001d32 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001d34:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001d38:	0800a6f8 	.word	0x0800a6f8
	ldr	r0, =_sdata
 8001d3c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d40:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8001d44:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001d48:	20000710 	.word	0x20000710

08001d4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d4c:	e7fe      	b.n	8001d4c <ADC1_IRQHandler>
	...

08001d50 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d54:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <HAL_Init+0x4c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a10      	ldr	r2, [pc, #64]	; (8001d9c <HAL_Init+0x4c>)
 8001d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d60:	2003      	movs	r0, #3
 8001d62:	f000 fd35 	bl	80027d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001d66:	f003 fa8b 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <HAL_Init+0x50>)
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	f003 030f 	and.w	r3, r3, #15
 8001d74:	490b      	ldr	r1, [pc, #44]	; (8001da4 <HAL_Init+0x54>)
 8001d76:	5ccb      	ldrb	r3, [r1, r3]
 8001d78:	fa22 f303 	lsr.w	r3, r2, r3
 8001d7c:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <HAL_Init+0x58>)
 8001d7e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d80:	2000      	movs	r0, #0
 8001d82:	f000 f813 	bl	8001dac <HAL_InitTick>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e002      	b.n	8001d96 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d90:	f7ff fd3a 	bl	8001808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40022000 	.word	0x40022000
 8001da0:	46020c00 	.word	0x46020c00
 8001da4:	0800a5e8 	.word	0x0800a5e8
 8001da8:	20000000 	.word	0x20000000

08001dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001db4:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <HAL_InitTick+0x60>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e021      	b.n	8001e04 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001dc0:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <HAL_InitTick+0x64>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <HAL_InitTick+0x60>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 fd2d 	bl	8002836 <HAL_SYSTICK_Config>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00e      	b.n	8001e04 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b0f      	cmp	r3, #15
 8001dea:	d80a      	bhi.n	8001e02 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dec:	2200      	movs	r2, #0
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295
 8001df4:	f000 fcf7 	bl	80027e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df8:	4a06      	ldr	r2, [pc, #24]	; (8001e14 <HAL_InitTick+0x68>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	e000      	b.n	8001e04 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000008 	.word	0x20000008
 8001e10:	20000000 	.word	0x20000000
 8001e14:	20000004 	.word	0x20000004

08001e18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_IncTick+0x20>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <HAL_IncTick+0x24>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	4a04      	ldr	r2, [pc, #16]	; (8001e3c <HAL_IncTick+0x24>)
 8001e2a:	6013      	str	r3, [r2, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000008 	.word	0x20000008
 8001e3c:	2000070c 	.word	0x2000070c

08001e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return uwTick;
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <HAL_GetTick+0x14>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	2000070c 	.word	0x2000070c

08001e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e60:	f7ff ffee 	bl	8001e40 <HAL_GetTick>
 8001e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e70:	d005      	beq.n	8001e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e72:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <HAL_Delay+0x44>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e7e:	bf00      	nop
 8001e80:	f7ff ffde 	bl	8001e40 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d8f7      	bhi.n	8001e80 <HAL_Delay+0x28>
  {
  }
}
 8001e90:	bf00      	nop
 8001e92:	bf00      	nop
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000008 	.word	0x20000008

08001ea0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	601a      	str	r2, [r3, #0]
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a0a      	ldr	r2, [pc, #40]	; (8001f04 <LL_ADC_SetResolution+0x3c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d104      	bne.n	8001ee8 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	f003 030c 	and.w	r3, r3, #12
 8001ee6:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f023 020c 	bic.w	r2, r3, #12
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	60da      	str	r2, [r3, #12]
}
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	46021000 	.word	0x46021000

08001f08 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f16:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f1a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	431a      	orrs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	2a00      	cmp	r2, #0
 8001f32:	d002      	beq.n	8001f3a <LL_ADC_SetGainCompensation+0x32>
 8001f34:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f38:	e000      	b.n	8001f3c <LL_ADC_SetGainCompensation+0x34>
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	671a      	str	r2, [r3, #112]	; 0x70
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b085      	sub	sp, #20
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	60f8      	str	r0, [r7, #12]
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	695a      	ldr	r2, [r3, #20]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2107      	movs	r1, #7
 8001f66:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	401a      	ands	r2, r3
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001f80:	bf00      	nop
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001f9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6093      	str	r3, [r2, #8]
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fc4:	d101      	bne.n	8001fca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001fe8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002010:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002014:	d101      	bne.n	800201a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <LL_ADC_IsEnabled+0x18>
 800203c:	2301      	movs	r3, #1
 800203e:	e000      	b.n	8002042 <LL_ADC_IsEnabled+0x1a>
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	2b04      	cmp	r3, #4
 8002060:	d101      	bne.n	8002066 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	2b08      	cmp	r3, #8
 8002086:	d101      	bne.n	800208c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002088:	2301      	movs	r3, #1
 800208a:	e000      	b.n	800208e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
	...

0800209c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	; 0x28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e2b3      	b.n	8002624 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a8b      	ldr	r2, [pc, #556]	; (80022f8 <HAL_ADC_Init+0x25c>)
 80020ca:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d109      	bne.n	80020e8 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff fbb5 	bl	8001844 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff5f 	bl	8001fb0 <LL_ADC_IsDeepPowerDownEnabled>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d004      	beq.n	8002102 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff45 	bl	8001f8c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ff7a 	bl	8002000 <LL_ADC_IsInternalRegulatorEnabled>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d115      	bne.n	800213e <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff ff5e 	bl	8001fd8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800211c:	4b77      	ldr	r3, [pc, #476]	; (80022fc <HAL_ADC_Init+0x260>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	099b      	lsrs	r3, r3, #6
 8002122:	4a77      	ldr	r2, [pc, #476]	; (8002300 <HAL_ADC_Init+0x264>)
 8002124:	fba2 2303 	umull	r2, r3, r2, r3
 8002128:	099b      	lsrs	r3, r3, #6
 800212a:	3301      	adds	r3, #1
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002130:	e002      	b.n	8002138 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	3b01      	subs	r3, #1
 8002136:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f9      	bne.n	8002132 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff ff5c 	bl	8002000 <LL_ADC_IsInternalRegulatorEnabled>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10e      	bne.n	800216c <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002152:	f043 0210 	orr.w	r2, r3, #16
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800215e:	f043 0201 	orr.w	r2, r3, #1
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff ff6c 	bl	800204e <LL_ADC_REG_IsConversionOngoing>
 8002176:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800217c:	f003 0310 	and.w	r3, r3, #16
 8002180:	2b00      	cmp	r3, #0
 8002182:	f040 8244 	bne.w	800260e <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	2b00      	cmp	r3, #0
 800218a:	f040 8240 	bne.w	800260e <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002192:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002196:	f043 0202 	orr.w	r2, r3, #2
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff ff40 	bl	8002028 <LL_ADC_IsEnabled>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d140      	bne.n	8002230 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a51      	ldr	r2, [pc, #324]	; (80022f8 <HAL_ADC_Init+0x25c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d028      	beq.n	800220a <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a51      	ldr	r2, [pc, #324]	; (8002304 <HAL_ADC_Init+0x268>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d109      	bne.n	80021d6 <HAL_ADC_Init+0x13a>
 80021c2:	4850      	ldr	r0, [pc, #320]	; (8002304 <HAL_ADC_Init+0x268>)
 80021c4:	f7ff ff30 	bl	8002028 <LL_ADC_IsEnabled>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	bf0c      	ite	eq
 80021ce:	2301      	moveq	r3, #1
 80021d0:	2300      	movne	r3, #0
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	e008      	b.n	80021e8 <HAL_ADC_Init+0x14c>
 80021d6:	4848      	ldr	r0, [pc, #288]	; (80022f8 <HAL_ADC_Init+0x25c>)
 80021d8:	f7ff ff26 	bl	8002028 <LL_ADC_IsEnabled>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	bf0c      	ite	eq
 80021e2:	2301      	moveq	r3, #1
 80021e4:	2300      	movne	r3, #0
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d021      	beq.n	8002230 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a44      	ldr	r2, [pc, #272]	; (8002304 <HAL_ADC_Init+0x268>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d101      	bne.n	80021fa <HAL_ADC_Init+0x15e>
 80021f6:	4a44      	ldr	r2, [pc, #272]	; (8002308 <HAL_ADC_Init+0x26c>)
 80021f8:	e000      	b.n	80021fc <HAL_ADC_Init+0x160>
 80021fa:	4a44      	ldr	r2, [pc, #272]	; (800230c <HAL_ADC_Init+0x270>)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	4619      	mov	r1, r3
 8002202:	4610      	mov	r0, r2
 8002204:	f7ff fe4c 	bl	8001ea0 <LL_ADC_SetCommonClock>
 8002208:	e012      	b.n	8002230 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	4619      	mov	r1, r3
 8002214:	4610      	mov	r0, r2
 8002216:	f7ff fe57 	bl	8001ec8 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 800221a:	4b3c      	ldr	r3, [pc, #240]	; (800230c <HAL_ADC_Init+0x270>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800222a:	4938      	ldr	r1, [pc, #224]	; (800230c <HAL_ADC_Init+0x270>)
 800222c:	4313      	orrs	r3, r2
 800222e:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a30      	ldr	r2, [pc, #192]	; (80022f8 <HAL_ADC_Init+0x25c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d010      	beq.n	800225c <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002240:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002246:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 800224c:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002254:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8002256:	4313      	orrs	r3, r2
 8002258:	623b      	str	r3, [r7, #32]
 800225a:	e030      	b.n	80022be <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	7f1b      	ldrb	r3, [r3, #28]
 8002260:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002268:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800226a:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002270:	2a00      	cmp	r2, #0
 8002272:	d002      	beq.n	800227a <HAL_ADC_Init+0x1de>
 8002274:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002278:	e000      	b.n	800227c <HAL_ADC_Init+0x1e0>
 800227a:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800227c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002282:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	2b00      	cmp	r3, #0
 800228a:	da04      	bge.n	8002296 <HAL_ADC_Init+0x1fa>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002294:	e001      	b.n	800229a <HAL_ADC_Init+0x1fe>
 8002296:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 800229a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4918      	ldr	r1, [pc, #96]	; (8002304 <HAL_ADC_Init+0x268>)
 80022a2:	428b      	cmp	r3, r1
 80022a4:	d103      	bne.n	80022ae <HAL_ADC_Init+0x212>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022ac:	e003      	b.n	80022b6 <HAL_ADC_Init+0x21a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022b4:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80022b6:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022b8:	6a3a      	ldr	r2, [r7, #32]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d12f      	bne.n	8002328 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <HAL_ADC_Init+0x25c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d007      	beq.n	80022e2 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	3b01      	subs	r3, #1
 80022d8:	045b      	lsls	r3, r3, #17
 80022da:	6a3a      	ldr	r2, [r7, #32]
 80022dc:	4313      	orrs	r3, r2
 80022de:	623b      	str	r3, [r7, #32]
 80022e0:	e022      	b.n	8002328 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d111      	bne.n	8002310 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f2:	623b      	str	r3, [r7, #32]
 80022f4:	e018      	b.n	8002328 <HAL_ADC_Init+0x28c>
 80022f6:	bf00      	nop
 80022f8:	46021000 	.word	0x46021000
 80022fc:	20000000 	.word	0x20000000
 8002300:	053e2d63 	.word	0x053e2d63
 8002304:	42028000 	.word	0x42028000
 8002308:	42028308 	.word	0x42028308
 800230c:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002314:	f043 0220 	orr.w	r2, r3, #32
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002320:	f043 0201 	orr.w	r2, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a92      	ldr	r2, [pc, #584]	; (8002578 <HAL_ADC_Init+0x4dc>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d018      	beq.n	8002364 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002336:	2b00      	cmp	r3, #0
 8002338:	d009      	beq.n	800234e <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800233e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002346:	4313      	orrs	r3, r2
 8002348:	6a3a      	ldr	r2, [r7, #32]
 800234a:	4313      	orrs	r3, r2
 800234c:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	4b89      	ldr	r3, [pc, #548]	; (800257c <HAL_ADC_Init+0x4e0>)
 8002356:	4013      	ands	r3, r2
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	6a39      	ldr	r1, [r7, #32]
 800235e:	430b      	orrs	r3, r1
 8002360:	60d3      	str	r3, [r2, #12]
 8002362:	e031      	b.n	80023c8 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002368:	2b00      	cmp	r3, #0
 800236a:	d009      	beq.n	8002380 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002370:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002378:	4313      	orrs	r3, r2
 800237a:	6a3a      	ldr	r2, [r7, #32]
 800237c:	4313      	orrs	r3, r2
 800237e:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	4b7e      	ldr	r3, [pc, #504]	; (8002580 <HAL_ADC_Init+0x4e4>)
 8002388:	4013      	ands	r3, r2
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	6a39      	ldr	r1, [r7, #32]
 8002390:	430b      	orrs	r3, r1
 8002392:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1a      	ldr	r2, [r3, #32]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d008      	beq.n	80023c8 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a6a      	ldr	r2, [pc, #424]	; (8002578 <HAL_ADC_Init+0x4dc>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	f000 8093 	beq.w	80024fa <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fe38 	bl	800204e <LL_ADC_REG_IsConversionOngoing>
 80023de:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fe45 	bl	8002074 <LL_ADC_INJ_IsConversionOngoing>
 80023ea:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d161      	bne.n	80024b6 <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d15e      	bne.n	80024b6 <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	7f1b      	ldrb	r3, [r3, #28]
 80023fc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4960      	ldr	r1, [pc, #384]	; (8002584 <HAL_ADC_Init+0x4e8>)
 8002404:	428b      	cmp	r3, r1
 8002406:	d102      	bne.n	800240e <HAL_ADC_Init+0x372>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240c:	e002      	b.n	8002414 <HAL_ADC_Init+0x378>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002412:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002414:	4313      	orrs	r3, r2
 8002416:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002422:	f023 0303 	bic.w	r3, r3, #3
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	6a39      	ldr	r1, [r7, #32]
 800242c:	430b      	orrs	r3, r1
 800242e:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d007      	beq.n	8002448 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	4619      	mov	r1, r3
 8002442:	4610      	mov	r0, r2
 8002444:	f7ff fd60 	bl	8001f08 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800244e:	2b01      	cmp	r3, #1
 8002450:	d11e      	bne.n	8002490 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002456:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	691a      	ldr	r2, [r3, #16]
 800245e:	4b4a      	ldr	r3, [pc, #296]	; (8002588 <HAL_ADC_Init+0x4ec>)
 8002460:	4013      	ands	r3, r2
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002466:	0411      	lsls	r1, r2, #16
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800246c:	4311      	orrs	r1, r2
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8002472:	4311      	orrs	r1, r2
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002478:	4311      	orrs	r1, r2
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800247e:	0892      	lsrs	r2, r2, #2
 8002480:	430a      	orrs	r2, r1
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f042 0201 	orr.w	r2, r2, #1
 800248c:	611a      	str	r2, [r3, #16]
 800248e:	e007      	b.n	80024a0 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691a      	ldr	r2, [r3, #16]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0201 	bic.w	r2, r2, #1
 800249e:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d10c      	bne.n	80024d8 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c4:	f023 010f 	bic.w	r1, r3, #15
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024cc:	1e5a      	subs	r2, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	631a      	str	r2, [r3, #48]	; 0x30
 80024d6:	e007      	b.n	80024e8 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 020f 	bic.w	r2, r2, #15
 80024e6:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024ec:	f023 0303 	bic.w	r3, r3, #3
 80024f0:	f043 0201 	orr.w	r2, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80024f8:	e092      	b.n	8002620 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002500:	2b01      	cmp	r3, #1
 8002502:	d111      	bne.n	8002528 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800250c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8002512:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8002518:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800251a:	69fa      	ldr	r2, [r7, #28]
 800251c:	4313      	orrs	r3, r2
 800251e:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691a      	ldr	r2, [r3, #16]
 800252e:	4b17      	ldr	r3, [pc, #92]	; (800258c <HAL_ADC_Init+0x4f0>)
 8002530:	4013      	ands	r3, r2
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	69f9      	ldr	r1, [r7, #28]
 8002538:	430b      	orrs	r3, r1
 800253a:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002544:	461a      	mov	r2, r3
 8002546:	2100      	movs	r1, #0
 8002548:	f7ff fd01 	bl	8001f4e <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6818      	ldr	r0, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002554:	461a      	mov	r2, r3
 8002556:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 800255a:	f7ff fcf8 	bl	8001f4e <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d114      	bne.n	8002590 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f062 020f 	orn	r2, r2, #15
 8002574:	629a      	str	r2, [r3, #40]	; 0x28
 8002576:	e024      	b.n	80025c2 <HAL_ADC_Init+0x526>
 8002578:	46021000 	.word	0x46021000
 800257c:	fff0c013 	.word	0xfff0c013
 8002580:	ffde800d 	.word	0xffde800d
 8002584:	42028000 	.word	0x42028000
 8002588:	fc00f81e 	.word	0xfc00f81e
 800258c:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002598:	d113      	bne.n	80025c2 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a4:	3b01      	subs	r3, #1
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	f003 031c 	and.w	r3, r3, #28
 80025ac:	f06f 020f 	mvn.w	r2, #15
 80025b0:	fa02 f103 	lsl.w	r1, r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	4b18      	ldr	r3, [pc, #96]	; (800262c <HAL_ADC_Init+0x590>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	6a3a      	ldr	r2, [r7, #32]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d10b      	bne.n	80025ea <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025dc:	f023 0303 	bic.w	r3, r3, #3
 80025e0:	f043 0201 	orr.w	r2, r3, #1
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80025e8:	e01a      	b.n	8002620 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025ee:	f023 0312 	bic.w	r3, r3, #18
 80025f2:	f043 0210 	orr.w	r2, r3, #16
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025fe:	f043 0201 	orr.w	r2, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800260c:	e008      	b.n	8002620 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002612:	f043 0210 	orr.w	r2, r3, #16
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8002620:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002624:	4618      	mov	r0, r3
 8002626:	3728      	adds	r7, #40	; 0x28
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	833ffff3 	.word	0x833ffff3

08002630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002640:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <__NVIC_SetPriorityGrouping+0x44>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800264c:	4013      	ands	r3, r2
 800264e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800265c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002662:	4a04      	ldr	r2, [pc, #16]	; (8002674 <__NVIC_SetPriorityGrouping+0x44>)
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	60d3      	str	r3, [r2, #12]
}
 8002668:	bf00      	nop
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800267c:	4b04      	ldr	r3, [pc, #16]	; (8002690 <__NVIC_GetPriorityGrouping+0x18>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	0a1b      	lsrs	r3, r3, #8
 8002682:	f003 0307 	and.w	r3, r3, #7
}
 8002686:	4618      	mov	r0, r3
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800269e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	db0b      	blt.n	80026be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	f003 021f 	and.w	r2, r3, #31
 80026ac:	4907      	ldr	r1, [pc, #28]	; (80026cc <__NVIC_EnableIRQ+0x38>)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	2001      	movs	r0, #1
 80026b6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	e000e100 	.word	0xe000e100

080026d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	6039      	str	r1, [r7, #0]
 80026da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	db0a      	blt.n	80026fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	490c      	ldr	r1, [pc, #48]	; (800271c <__NVIC_SetPriority+0x4c>)
 80026ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ee:	0112      	lsls	r2, r2, #4
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	440b      	add	r3, r1
 80026f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026f8:	e00a      	b.n	8002710 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	4908      	ldr	r1, [pc, #32]	; (8002720 <__NVIC_SetPriority+0x50>)
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	3b04      	subs	r3, #4
 8002708:	0112      	lsls	r2, r2, #4
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	440b      	add	r3, r1
 800270e:	761a      	strb	r2, [r3, #24]
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	e000e100 	.word	0xe000e100
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002724:	b480      	push	{r7}
 8002726:	b089      	sub	sp, #36	; 0x24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f1c3 0307 	rsb	r3, r3, #7
 800273e:	2b04      	cmp	r3, #4
 8002740:	bf28      	it	cs
 8002742:	2304      	movcs	r3, #4
 8002744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	3304      	adds	r3, #4
 800274a:	2b06      	cmp	r3, #6
 800274c:	d902      	bls.n	8002754 <NVIC_EncodePriority+0x30>
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3b03      	subs	r3, #3
 8002752:	e000      	b.n	8002756 <NVIC_EncodePriority+0x32>
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002758:	f04f 32ff 	mov.w	r2, #4294967295
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43da      	mvns	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	401a      	ands	r2, r3
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800276c:	f04f 31ff 	mov.w	r1, #4294967295
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	fa01 f303 	lsl.w	r3, r1, r3
 8002776:	43d9      	mvns	r1, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800277c:	4313      	orrs	r3, r2
         );
}
 800277e:	4618      	mov	r0, r3
 8002780:	3724      	adds	r7, #36	; 0x24
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3b01      	subs	r3, #1
 8002798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800279c:	d301      	bcc.n	80027a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800279e:	2301      	movs	r3, #1
 80027a0:	e00f      	b.n	80027c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027a2:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <SysTick_Config+0x40>)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027aa:	210f      	movs	r1, #15
 80027ac:	f04f 30ff 	mov.w	r0, #4294967295
 80027b0:	f7ff ff8e 	bl	80026d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <SysTick_Config+0x40>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ba:	4b04      	ldr	r3, [pc, #16]	; (80027cc <SysTick_Config+0x40>)
 80027bc:	2207      	movs	r2, #7
 80027be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	e000e010 	.word	0xe000e010

080027d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff ff29 	bl	8002630 <__NVIC_SetPriorityGrouping>
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b086      	sub	sp, #24
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	4603      	mov	r3, r0
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	607a      	str	r2, [r7, #4]
 80027f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027f4:	f7ff ff40 	bl	8002678 <__NVIC_GetPriorityGrouping>
 80027f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	68b9      	ldr	r1, [r7, #8]
 80027fe:	6978      	ldr	r0, [r7, #20]
 8002800:	f7ff ff90 	bl	8002724 <NVIC_EncodePriority>
 8002804:	4602      	mov	r2, r0
 8002806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800280a:	4611      	mov	r1, r2
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff ff5f 	bl	80026d0 <__NVIC_SetPriority>
}
 8002812:	bf00      	nop
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	4603      	mov	r3, r0
 8002822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ff33 	bl	8002694 <__NVIC_EnableIRQ>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7ff ffa4 	bl	800278c <SysTick_Config>
 8002844:	4603      	mov	r3, r0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002850:	b480      	push	{r7}
 8002852:	b089      	sub	sp, #36	; 0x24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002862:	e1ba      	b.n	8002bda <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	2101      	movs	r1, #1
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	fa01 f303 	lsl.w	r3, r1, r3
 8002870:	4013      	ands	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 81aa 	beq.w	8002bd4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a55      	ldr	r2, [pc, #340]	; (80029d8 <HAL_GPIO_Init+0x188>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d15d      	bne.n	8002944 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800288e:	2201      	movs	r2, #1
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	69fa      	ldr	r2, [r7, #28]
 800289a:	4013      	ands	r3, r2
 800289c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 0201 	and.w	r2, r3, #1
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69fa      	ldr	r2, [r7, #28]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69fa      	ldr	r2, [r7, #28]
 80028b6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80028b8:	4a48      	ldr	r2, [pc, #288]	; (80029dc <HAL_GPIO_Init+0x18c>)
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80028c0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80028c2:	4a46      	ldr	r2, [pc, #280]	; (80029dc <HAL_GPIO_Init+0x18c>)
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4413      	add	r3, r2
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	08da      	lsrs	r2, r3, #3
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	3208      	adds	r2, #8
 80028d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028da:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	220f      	movs	r2, #15
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69fa      	ldr	r2, [r7, #28]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	220b      	movs	r2, #11
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	69fa      	ldr	r2, [r7, #28]
 8002902:	4313      	orrs	r3, r2
 8002904:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	08da      	lsrs	r2, r3, #3
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	3208      	adds	r2, #8
 800290e:	69f9      	ldr	r1, [r7, #28]
 8002910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	2203      	movs	r2, #3
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	69fa      	ldr	r2, [r7, #28]
 8002928:	4013      	ands	r3, r2
 800292a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	2202      	movs	r2, #2
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	69fa      	ldr	r2, [r7, #28]
 8002938:	4313      	orrs	r3, r2
 800293a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	69fa      	ldr	r2, [r7, #28]
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	e067      	b.n	8002a14 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d003      	beq.n	8002954 <HAL_GPIO_Init+0x104>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b12      	cmp	r3, #18
 8002952:	d145      	bne.n	80029e0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	08da      	lsrs	r2, r3, #3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3208      	adds	r2, #8
 800295c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002960:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	220f      	movs	r2, #15
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	69fa      	ldr	r2, [r7, #28]
 8002974:	4013      	ands	r3, r2
 8002976:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	f003 020f 	and.w	r2, r3, #15
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	69fa      	ldr	r2, [r7, #28]
 800298e:	4313      	orrs	r3, r2
 8002990:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	08da      	lsrs	r2, r3, #3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3208      	adds	r2, #8
 800299a:	69f9      	ldr	r1, [r7, #28]
 800299c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	2203      	movs	r2, #3
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69fa      	ldr	r2, [r7, #28]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 0203 	and.w	r2, r3, #3
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	69fa      	ldr	r2, [r7, #28]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	69fa      	ldr	r2, [r7, #28]
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	e01e      	b.n	8002a14 <HAL_GPIO_Init+0x1c4>
 80029d6:	bf00      	nop
 80029d8:	46020000 	.word	0x46020000
 80029dc:	0800a640 	.word	0x0800a640
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	2203      	movs	r2, #3
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	43db      	mvns	r3, r3
 80029f2:	69fa      	ldr	r2, [r7, #28]
 80029f4:	4013      	ands	r3, r2
 80029f6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 0203 	and.w	r2, r3, #3
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	69fa      	ldr	r2, [r7, #28]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	69fa      	ldr	r2, [r7, #28]
 8002a12:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d00b      	beq.n	8002a34 <HAL_GPIO_Init+0x1e4>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d007      	beq.n	8002a34 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a28:	2b11      	cmp	r3, #17
 8002a2a:	d003      	beq.n	8002a34 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b12      	cmp	r3, #18
 8002a32:	d130      	bne.n	8002a96 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	2203      	movs	r2, #3
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43db      	mvns	r3, r3
 8002a46:	69fa      	ldr	r2, [r7, #28]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69fa      	ldr	r2, [r7, #28]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	69fa      	ldr	r2, [r7, #28]
 8002a62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43db      	mvns	r3, r3
 8002a74:	69fa      	ldr	r2, [r7, #28]
 8002a76:	4013      	ands	r3, r2
 8002a78:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	091b      	lsrs	r3, r3, #4
 8002a80:	f003 0201 	and.w	r2, r3, #1
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	69fa      	ldr	r2, [r7, #28]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	69fa      	ldr	r2, [r7, #28]
 8002a94:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	d017      	beq.n	8002ace <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	69fa      	ldr	r2, [r7, #28]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	69fa      	ldr	r2, [r7, #28]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	69fa      	ldr	r2, [r7, #28]
 8002acc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d07c      	beq.n	8002bd4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002ada:	4a47      	ldr	r2, [pc, #284]	; (8002bf8 <HAL_GPIO_Init+0x3a8>)
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	089b      	lsrs	r3, r3, #2
 8002ae0:	3318      	adds	r3, #24
 8002ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	220f      	movs	r2, #15
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	43db      	mvns	r3, r3
 8002af8:	69fa      	ldr	r2, [r7, #28]
 8002afa:	4013      	ands	r3, r2
 8002afc:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	0a9a      	lsrs	r2, r3, #10
 8002b02:	4b3e      	ldr	r3, [pc, #248]	; (8002bfc <HAL_GPIO_Init+0x3ac>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	f002 0203 	and.w	r2, r2, #3
 8002b0c:	00d2      	lsls	r2, r2, #3
 8002b0e:	4093      	lsls	r3, r2
 8002b10:	69fa      	ldr	r2, [r7, #28]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002b16:	4938      	ldr	r1, [pc, #224]	; (8002bf8 <HAL_GPIO_Init+0x3a8>)
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	089b      	lsrs	r3, r3, #2
 8002b1c:	3318      	adds	r3, #24
 8002b1e:	69fa      	ldr	r2, [r7, #28]
 8002b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002b24:	4b34      	ldr	r3, [pc, #208]	; (8002bf8 <HAL_GPIO_Init+0x3a8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	69fa      	ldr	r2, [r7, #28]
 8002b30:	4013      	ands	r3, r2
 8002b32:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002b40:	69fa      	ldr	r2, [r7, #28]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002b48:	4a2b      	ldr	r2, [pc, #172]	; (8002bf8 <HAL_GPIO_Init+0x3a8>)
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002b4e:	4b2a      	ldr	r3, [pc, #168]	; (8002bf8 <HAL_GPIO_Init+0x3a8>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	43db      	mvns	r3, r3
 8002b58:	69fa      	ldr	r2, [r7, #28]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8002b6a:	69fa      	ldr	r2, [r7, #28]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8002b72:	4a21      	ldr	r2, [pc, #132]	; (8002bf8 <HAL_GPIO_Init+0x3a8>)
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002b78:	4b1f      	ldr	r3, [pc, #124]	; (8002bf8 <HAL_GPIO_Init+0x3a8>)
 8002b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b7e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	43db      	mvns	r3, r3
 8002b84:	69fa      	ldr	r2, [r7, #28]
 8002b86:	4013      	ands	r3, r2
 8002b88:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002b96:	69fa      	ldr	r2, [r7, #28]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002b9e:	4a16      	ldr	r2, [pc, #88]	; (8002bf8 <HAL_GPIO_Init+0x3a8>)
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8002ba6:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <HAL_GPIO_Init+0x3a8>)
 8002ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bac:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69fa      	ldr	r2, [r7, #28]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002bc4:	69fa      	ldr	r2, [r7, #28]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002bcc:	4a0a      	ldr	r2, [pc, #40]	; (8002bf8 <HAL_GPIO_Init+0x3a8>)
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	fa22 f303 	lsr.w	r3, r2, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f47f ae3d 	bne.w	8002864 <HAL_GPIO_Init+0x14>
  }
}
 8002bea:	bf00      	nop
 8002bec:	bf00      	nop
 8002bee:	3724      	adds	r7, #36	; 0x24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	46022000 	.word	0x46022000
 8002bfc:	002f7f7f 	.word	0x002f7f7f

08002c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	807b      	strh	r3, [r7, #2]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c10:	787b      	ldrb	r3, [r7, #1]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c16:	887a      	ldrh	r2, [r7, #2]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002c1c:	e002      	b.n	8002c24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002c1e:	887a      	ldrh	r2, [r7, #2]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c42:	887a      	ldrh	r2, [r7, #2]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4013      	ands	r3, r2
 8002c48:	041a      	lsls	r2, r3, #16
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	43d9      	mvns	r1, r3
 8002c4e:	887b      	ldrh	r3, [r7, #2]
 8002c50:	400b      	ands	r3, r1
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	619a      	str	r2, [r3, #24]
}
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002c70:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	73fb      	strb	r3, [r7, #15]
 8002c80:	e007      	b.n	8002c92 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002c82:	4b07      	ldr	r3, [pc, #28]	; (8002ca0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f023 0204 	bic.w	r2, r3, #4
 8002c8a:	4905      	ldr	r1, [pc, #20]	; (8002ca0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	40030400 	.word	0x40030400

08002ca4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002ca8:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <HAL_ICACHE_Enable+0x1c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a04      	ldr	r2, [pc, #16]	; (8002cc0 <HAL_ICACHE_Enable+0x1c>)
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	40030400 	.word	0x40030400

08002cc4 <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 8002cce:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <HAL_ICACHE_Disable+0x5c>)
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002cd4:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_ICACHE_Disable+0x5c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a11      	ldr	r2, [pc, #68]	; (8002d20 <HAL_ICACHE_Disable+0x5c>)
 8002cda:	f023 0301 	bic.w	r3, r3, #1
 8002cde:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ce0:	f7ff f8ae 	bl	8001e40 <HAL_GetTick>
 8002ce4:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002ce6:	e00f      	b.n	8002d08 <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 8002ce8:	f7ff f8aa 	bl	8001e40 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d908      	bls.n	8002d08 <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <HAL_ICACHE_Disable+0x5c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	71fb      	strb	r3, [r7, #7]
        break;
 8002d06:	e005      	b.n	8002d14 <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002d08:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <HAL_ICACHE_Disable+0x5c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1e9      	bne.n	8002ce8 <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 8002d14:	79fb      	ldrb	r3, [r7, #7]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40030400 	.word	0x40030400

08002d24 <HAL_ICACHE_EnableRemapRegion>:
                     This parameter can be a value of @arg @ref ICACHE_Region
  * @param  pRegionConfig  Pointer to structure of ICACHE region configuration parameters
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef  HAL_ICACHE_EnableRemapRegion(uint32_t Region, const ICACHE_RegionConfigTypeDef *const pRegionConfig)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ICACHE_REGION_SIZE(pRegionConfig->Size));
  assert_param(IS_ICACHE_REGION_TRAFFIC_ROUTE(pRegionConfig->TrafficRoute));
  assert_param(IS_ICACHE_REGION_OUTPUT_BURST_TYPE(pRegionConfig->OutputBurstType));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002d32:	4b22      	ldr	r3, [pc, #136]	; (8002dbc <HAL_ICACHE_EnableRemapRegion+0x98>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <HAL_ICACHE_EnableRemapRegion+0x20>
  {
    status = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	75fb      	strb	r3, [r7, #23]
 8002d42:	e034      	b.n	8002dae <HAL_ICACHE_EnableRemapRegion+0x8a>
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	009a      	lsls	r2, r3, #2
 8002d48:	4b1d      	ldr	r3, [pc, #116]	; (8002dc0 <HAL_ICACHE_EnableRemapRegion+0x9c>)
 8002d4a:	4413      	add	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]

    /* Check region is not already enabled */
    if ((*p_reg & ICACHE_CRRx_REN) != 0U)
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <HAL_ICACHE_EnableRemapRegion+0x3c>
    {
      status = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	75fb      	strb	r3, [r7, #23]
 8002d5e:	e026      	b.n	8002dae <HAL_ICACHE_EnableRemapRegion+0x8a>
      /* Region 8MB:   BaseAddress size 6 bits, RemapAddress size 9 bits  */
      /* Region 16MB:  BaseAddress size 5 bits, RemapAddress size 8 bits  */
      /* Region 32MB:  BaseAddress size 4 bits, RemapAddress size 7 bits  */
      /* Region 64MB:  BaseAddress size 3 bits, RemapAddress size 6 bits  */
      /* Region 128MB: BaseAddress size 2 bits, RemapAddress size 5 bits  */
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	0d5a      	lsrs	r2, r3, #21
               (0xFFU & ~(pRegionConfig->Size - 1U));
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	425b      	negs	r3, r3
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	60fb      	str	r3, [r7, #12]
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	095a      	lsrs	r2, r3, #5
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	425b      	negs	r3, r3
 8002d7e:	041b      	lsls	r3, r3, #16
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8002d80:	401a      	ands	r2, r3
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <HAL_ICACHE_EnableRemapRegion+0xa0>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	025a      	lsls	r2, r3, #9
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	431a      	orrs	r2, r3
               pRegionConfig->OutputBurstType;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	691b      	ldr	r3, [r3, #16]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]
      *p_reg = (value | ICACHE_CRRx_REN);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 8002dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	371c      	adds	r7, #28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	40030400 	.word	0x40030400
 8002dc0:	40030420 	.word	0x40030420
 8002dc4:	07ff0000 	.word	0x07ff0000

08002dc8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dca:	b08f      	sub	sp, #60	; 0x3c
 8002dcc:	af0a      	add	r7, sp, #40	; 0x28
 8002dce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e116      	b.n	8003008 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d106      	bne.n	8002dfa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7fe fe81 	bl	8001afc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 14)) == 0U)
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d102      	bne.n	8002e14 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f006 fe41 	bl	8009aa0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	687e      	ldr	r6, [r7, #4]
 8002e26:	466d      	mov	r5, sp
 8002e28:	f106 0410 	add.w	r4, r6, #16
 8002e2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e38:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e3c:	1d33      	adds	r3, r6, #4
 8002e3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e40:	6838      	ldr	r0, [r7, #0]
 8002e42:	f006 fd5e 	bl	8009902 <USB_CoreInit>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e0d7      	b.n	8003008 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f006 fe2f 	bl	8009ac2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e64:	2300      	movs	r3, #0
 8002e66:	73fb      	strb	r3, [r7, #15]
 8002e68:	e04a      	b.n	8002f00 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e6a:	7bfa      	ldrb	r2, [r7, #15]
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	4413      	add	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	440b      	add	r3, r1
 8002e78:	333d      	adds	r3, #61	; 0x3d
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e7e:	7bfa      	ldrb	r2, [r7, #15]
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	333c      	adds	r3, #60	; 0x3c
 8002e8e:	7bfa      	ldrb	r2, [r7, #15]
 8002e90:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e92:	7bfa      	ldrb	r2, [r7, #15]
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
 8002e96:	b298      	uxth	r0, r3
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	3356      	adds	r3, #86	; 0x56
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002eaa:	7bfa      	ldrb	r2, [r7, #15]
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	3340      	adds	r3, #64	; 0x40
 8002eba:	2200      	movs	r2, #0
 8002ebc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ebe:	7bfa      	ldrb	r2, [r7, #15]
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	3344      	adds	r3, #68	; 0x44
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ed2:	7bfa      	ldrb	r2, [r7, #15]
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4413      	add	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	3348      	adds	r3, #72	; 0x48
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ee6:	7bfa      	ldrb	r2, [r7, #15]
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4413      	add	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	334c      	adds	r3, #76	; 0x4c
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
 8002efc:	3301      	adds	r3, #1
 8002efe:	73fb      	strb	r3, [r7, #15]
 8002f00:	7bfa      	ldrb	r2, [r7, #15]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d3af      	bcc.n	8002e6a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	73fb      	strb	r3, [r7, #15]
 8002f0e:	e044      	b.n	8002f9a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f10:	7bfa      	ldrb	r2, [r7, #15]
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f26:	7bfa      	ldrb	r2, [r7, #15]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4413      	add	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002f38:	7bfa      	ldrb	r2, [r7, #15]
 8002f3a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f3c:	7bfa      	ldrb	r2, [r7, #15]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f4e:	2200      	movs	r2, #0
 8002f50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f52:	7bfa      	ldrb	r2, [r7, #15]
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f68:	7bfa      	ldrb	r2, [r7, #15]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f7e:	7bfa      	ldrb	r2, [r7, #15]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	4413      	add	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	3301      	adds	r3, #1
 8002f98:	73fb      	strb	r3, [r7, #15]
 8002f9a:	7bfa      	ldrb	r2, [r7, #15]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d3b5      	bcc.n	8002f10 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	603b      	str	r3, [r7, #0]
 8002faa:	687e      	ldr	r6, [r7, #4]
 8002fac:	466d      	mov	r5, sp
 8002fae:	f106 0410 	add.w	r4, r6, #16
 8002fb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fbe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fc2:	1d33      	adds	r3, r6, #4
 8002fc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fc6:	6838      	ldr	r0, [r7, #0]
 8002fc8:	f006 fdc8 	bl	8009b5c <USB_DevInit>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d005      	beq.n	8002fde <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e014      	b.n	8003008 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d102      	bne.n	8002ffc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 ff38 	bl	8003e6c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f007 f8d1 	bl	800a1a8 <USB_DevDisconnect>

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003010 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003010:	b590      	push	{r4, r7, lr}
 8003012:	b08d      	sub	sp, #52	; 0x34
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f007 f972 	bl	800a310 <USB_GetMode>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	f040 84b7 	bne.w	80039a2 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f007 f8d6 	bl	800a1ea <USB_ReadInterrupts>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 84ad 	beq.w	80039a0 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	0a1b      	lsrs	r3, r3, #8
 8003050:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f007 f8c3 	bl	800a1ea <USB_ReadInterrupts>
 8003064:	4603      	mov	r3, r0
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b02      	cmp	r3, #2
 800306c:	d107      	bne.n	800307e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695a      	ldr	r2, [r3, #20]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f002 0202 	and.w	r2, r2, #2
 800307c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f007 f8b1 	bl	800a1ea <USB_ReadInterrupts>
 8003088:	4603      	mov	r3, r0
 800308a:	f003 0310 	and.w	r3, r3, #16
 800308e:	2b10      	cmp	r3, #16
 8003090:	d161      	bne.n	8003156 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	699a      	ldr	r2, [r3, #24]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0210 	bic.w	r2, r2, #16
 80030a0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	f003 020f 	and.w	r2, r3, #15
 80030ae:	4613      	mov	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	4413      	add	r3, r2
 80030be:	3304      	adds	r3, #4
 80030c0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	0c5b      	lsrs	r3, r3, #17
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d124      	bne.n	8003118 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80030d4:	4013      	ands	r3, r2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d035      	beq.n	8003146 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80030e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	461a      	mov	r2, r3
 80030ec:	6a38      	ldr	r0, [r7, #32]
 80030ee:	f007 f803 	bl	800a0f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	091b      	lsrs	r3, r3, #4
 80030fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030fe:	441a      	add	r2, r3
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	695a      	ldr	r2, [r3, #20]
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	091b      	lsrs	r3, r3, #4
 800310c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003110:	441a      	add	r2, r3
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	615a      	str	r2, [r3, #20]
 8003116:	e016      	b.n	8003146 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	0c5b      	lsrs	r3, r3, #17
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	2b06      	cmp	r3, #6
 8003122:	d110      	bne.n	8003146 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800312a:	2208      	movs	r2, #8
 800312c:	4619      	mov	r1, r3
 800312e:	6a38      	ldr	r0, [r7, #32]
 8003130:	f006 ffe2 	bl	800a0f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	695a      	ldr	r2, [r3, #20]
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	091b      	lsrs	r3, r3, #4
 800313c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003140:	441a      	add	r2, r3
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699a      	ldr	r2, [r3, #24]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f042 0210 	orr.w	r2, r2, #16
 8003154:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f007 f845 	bl	800a1ea <USB_ReadInterrupts>
 8003160:	4603      	mov	r3, r0
 8003162:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003166:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800316a:	f040 80a7 	bne.w	80032bc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f007 f84a 	bl	800a210 <USB_ReadDevAllOutEpInterrupt>
 800317c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800317e:	e099      	b.n	80032b4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 808e 	beq.w	80032a8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	4611      	mov	r1, r2
 8003196:	4618      	mov	r0, r3
 8003198:	f007 f86e 	bl	800a278 <USB_ReadDevOutEPInterrupt>
 800319c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00c      	beq.n	80031c2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	015a      	lsls	r2, r3, #5
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	4413      	add	r3, r2
 80031b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b4:	461a      	mov	r2, r3
 80031b6:	2301      	movs	r3, #1
 80031b8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80031ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 fd27 	bl	8003c10 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	f003 0308 	and.w	r3, r3, #8
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00c      	beq.n	80031e6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d8:	461a      	mov	r2, r3
 80031da:	2308      	movs	r3, #8
 80031dc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80031de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 fdfd 	bl	8003de0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f003 0310 	and.w	r3, r3, #16
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d008      	beq.n	8003202 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	015a      	lsls	r2, r3, #5
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031fc:	461a      	mov	r2, r3
 80031fe:	2310      	movs	r3, #16
 8003200:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d030      	beq.n	800326e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003214:	2b80      	cmp	r3, #128	; 0x80
 8003216:	d109      	bne.n	800322c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	69fa      	ldr	r2, [r7, #28]
 8003222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800322a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800322c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800322e:	4613      	mov	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4413      	add	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	4413      	add	r3, r2
 800323e:	3304      	adds	r3, #4
 8003240:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	78db      	ldrb	r3, [r3, #3]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d108      	bne.n	800325c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2200      	movs	r2, #0
 800324e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	b2db      	uxtb	r3, r3
 8003254:	4619      	mov	r1, r3
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 fbf0 	bl	8003a3c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	4413      	add	r3, r2
 8003264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003268:	461a      	mov	r2, r3
 800326a:	2302      	movs	r3, #2
 800326c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f003 0320 	and.w	r3, r3, #32
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	015a      	lsls	r2, r3, #5
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	4413      	add	r3, r2
 8003280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003284:	461a      	mov	r2, r3
 8003286:	2320      	movs	r3, #32
 8003288:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d009      	beq.n	80032a8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	4413      	add	r3, r2
 800329c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a0:	461a      	mov	r2, r3
 80032a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032a6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	3301      	adds	r3, #1
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80032ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b0:	085b      	lsrs	r3, r3, #1
 80032b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80032b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f47f af62 	bne.w	8003180 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f006 ff92 	bl	800a1ea <USB_ReadInterrupts>
 80032c6:	4603      	mov	r3, r0
 80032c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032d0:	f040 80db 	bne.w	800348a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f006 ffb3 	bl	800a244 <USB_ReadDevAllInEpInterrupt>
 80032de:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80032e4:	e0cd      	b.n	8003482 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80032e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 80c2 	beq.w	8003476 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	4611      	mov	r1, r2
 80032fc:	4618      	mov	r0, r3
 80032fe:	f006 ffd9 	bl	800a2b4 <USB_ReadDevInEPInterrupt>
 8003302:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d057      	beq.n	80033be <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	f003 030f 	and.w	r3, r3, #15
 8003314:	2201      	movs	r2, #1
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003322:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	43db      	mvns	r3, r3
 8003328:	69f9      	ldr	r1, [r7, #28]
 800332a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800332e:	4013      	ands	r3, r2
 8003330:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003334:	015a      	lsls	r2, r3, #5
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	4413      	add	r3, r2
 800333a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800333e:	461a      	mov	r2, r3
 8003340:	2301      	movs	r3, #1
 8003342:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d132      	bne.n	80033b2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003350:	4613      	mov	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	3348      	adds	r3, #72	; 0x48
 800335c:	6819      	ldr	r1, [r3, #0]
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003362:	4613      	mov	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	4413      	add	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4403      	add	r3, r0
 800336c:	3344      	adds	r3, #68	; 0x44
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4419      	add	r1, r3
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003376:	4613      	mov	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	4413      	add	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4403      	add	r3, r0
 8003380:	3348      	adds	r3, #72	; 0x48
 8003382:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	2b00      	cmp	r3, #0
 8003388:	d113      	bne.n	80033b2 <HAL_PCD_IRQHandler+0x3a2>
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800338e:	4613      	mov	r3, r2
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	4413      	add	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	440b      	add	r3, r1
 8003398:	334c      	adds	r3, #76	; 0x4c
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d108      	bne.n	80033b2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6818      	ldr	r0, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033aa:	461a      	mov	r2, r3
 80033ac:	2101      	movs	r1, #1
 80033ae:	f006 ffe1 	bl	800a374 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	4619      	mov	r1, r3
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 fb01 	bl	80039c0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d008      	beq.n	80033da <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	015a      	lsls	r2, r3, #5
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033d4:	461a      	mov	r2, r3
 80033d6:	2308      	movs	r3, #8
 80033d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f003 0310 	and.w	r3, r3, #16
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e6:	015a      	lsls	r2, r3, #5
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	4413      	add	r3, r2
 80033ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033f0:	461a      	mov	r2, r3
 80033f2:	2310      	movs	r3, #16
 80033f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d008      	beq.n	8003412 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	015a      	lsls	r2, r3, #5
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	4413      	add	r3, r2
 8003408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800340c:	461a      	mov	r2, r3
 800340e:	2340      	movs	r3, #64	; 0x40
 8003410:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d023      	beq.n	8003464 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800341c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800341e:	6a38      	ldr	r0, [r7, #32]
 8003420:	f006 fce0 	bl	8009de4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003426:	4613      	mov	r3, r2
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	4413      	add	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	3338      	adds	r3, #56	; 0x38
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	4413      	add	r3, r2
 8003434:	3304      	adds	r3, #4
 8003436:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	78db      	ldrb	r3, [r3, #3]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d108      	bne.n	8003452 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	2200      	movs	r2, #0
 8003444:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	b2db      	uxtb	r3, r3
 800344a:	4619      	mov	r1, r3
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fb01 	bl	8003a54 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	015a      	lsls	r2, r3, #5
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	4413      	add	r3, r2
 800345a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800345e:	461a      	mov	r2, r3
 8003460:	2302      	movs	r3, #2
 8003462:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800346e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 fb40 	bl	8003af6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	3301      	adds	r3, #1
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800347c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347e:	085b      	lsrs	r3, r3, #1
 8003480:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003484:	2b00      	cmp	r3, #0
 8003486:	f47f af2e 	bne.w	80032e6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f006 feab 	bl	800a1ea <USB_ReadInterrupts>
 8003494:	4603      	mov	r3, r0
 8003496:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800349a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800349e:	d122      	bne.n	80034e6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	69fa      	ldr	r2, [r7, #28]
 80034aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034ae:	f023 0301 	bic.w	r3, r3, #1
 80034b2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d108      	bne.n	80034d0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80034c6:	2100      	movs	r1, #0
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 fcf3 	bl	8003eb4 <HAL_PCDEx_LPM_Callback>
 80034ce:	e002      	b.n	80034d6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 faa9 	bl	8003a28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695a      	ldr	r2, [r3, #20]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80034e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f006 fe7d 	bl	800a1ea <USB_ReadInterrupts>
 80034f0:	4603      	mov	r3, r0
 80034f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034fa:	d112      	bne.n	8003522 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b01      	cmp	r3, #1
 800350a:	d102      	bne.n	8003512 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 fa81 	bl	8003a14 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695a      	ldr	r2, [r3, #20]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003520:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f006 fe5f 	bl	800a1ea <USB_ReadInterrupts>
 800352c:	4603      	mov	r3, r0
 800352e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003532:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003536:	d121      	bne.n	800357c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	695a      	ldr	r2, [r3, #20]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003546:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800354e:	2b00      	cmp	r3, #0
 8003550:	d111      	bne.n	8003576 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003560:	089b      	lsrs	r3, r3, #2
 8003562:	f003 020f 	and.w	r2, r3, #15
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800356c:	2101      	movs	r1, #1
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fca0 	bl	8003eb4 <HAL_PCDEx_LPM_Callback>
 8003574:	e002      	b.n	800357c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 fa4c 	bl	8003a14 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f006 fe32 	bl	800a1ea <USB_ReadInterrupts>
 8003586:	4603      	mov	r3, r0
 8003588:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800358c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003590:	f040 80b7 	bne.w	8003702 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	69fa      	ldr	r2, [r7, #28]
 800359e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035a2:	f023 0301 	bic.w	r3, r3, #1
 80035a6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2110      	movs	r1, #16
 80035ae:	4618      	mov	r0, r3
 80035b0:	f006 fc18 	bl	8009de4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035b4:	2300      	movs	r3, #0
 80035b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035b8:	e046      	b.n	8003648 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80035ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c6:	461a      	mov	r2, r3
 80035c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035cc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80035ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035de:	0151      	lsls	r1, r2, #5
 80035e0:	69fa      	ldr	r2, [r7, #28]
 80035e2:	440a      	add	r2, r1
 80035e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80035ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f0:	015a      	lsls	r2, r3, #5
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	4413      	add	r3, r2
 80035f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035fa:	461a      	mov	r2, r3
 80035fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003600:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	4413      	add	r3, r2
 800360a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003612:	0151      	lsls	r1, r2, #5
 8003614:	69fa      	ldr	r2, [r7, #28]
 8003616:	440a      	add	r2, r1
 8003618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800361c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003620:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003624:	015a      	lsls	r2, r3, #5
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	4413      	add	r3, r2
 800362a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003632:	0151      	lsls	r1, r2, #5
 8003634:	69fa      	ldr	r2, [r7, #28]
 8003636:	440a      	add	r2, r1
 8003638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800363c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003640:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003644:	3301      	adds	r3, #1
 8003646:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800364e:	429a      	cmp	r2, r3
 8003650:	d3b3      	bcc.n	80035ba <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	69fa      	ldr	r2, [r7, #28]
 800365c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003660:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003664:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	2b00      	cmp	r3, #0
 800366c:	d016      	beq.n	800369c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003678:	69fa      	ldr	r2, [r7, #28]
 800367a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800367e:	f043 030b 	orr.w	r3, r3, #11
 8003682:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800368c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368e:	69fa      	ldr	r2, [r7, #28]
 8003690:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003694:	f043 030b 	orr.w	r3, r3, #11
 8003698:	6453      	str	r3, [r2, #68]	; 0x44
 800369a:	e015      	b.n	80036c8 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	69fa      	ldr	r2, [r7, #28]
 80036a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036ae:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80036b2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	69fa      	ldr	r2, [r7, #28]
 80036be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036c2:	f043 030b 	orr.w	r3, r3, #11
 80036c6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	69fa      	ldr	r2, [r7, #28]
 80036d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036d6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80036da:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6818      	ldr	r0, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036ec:	461a      	mov	r2, r3
 80036ee:	f006 fe41 	bl	800a374 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695a      	ldr	r2, [r3, #20]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003700:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f006 fd6f 	bl	800a1ea <USB_ReadInterrupts>
 800370c:	4603      	mov	r3, r0
 800370e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003716:	d124      	bne.n	8003762 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f006 fe05 	bl	800a32c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f006 fbd9 	bl	8009ede <USB_GetDevSpeed>
 800372c:	4603      	mov	r3, r0
 800372e:	461a      	mov	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681c      	ldr	r4, [r3, #0]
 8003738:	f001 fea4 	bl	8005484 <HAL_RCC_GetHCLKFreq>
 800373c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003742:	b2db      	uxtb	r3, r3
 8003744:	461a      	mov	r2, r3
 8003746:	4620      	mov	r0, r4
 8003748:	f006 f908 	bl	800995c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f957 	bl	8003a00 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695a      	ldr	r2, [r3, #20]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003760:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f006 fd3f 	bl	800a1ea <USB_ReadInterrupts>
 800376c:	4603      	mov	r3, r0
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b08      	cmp	r3, #8
 8003774:	d10a      	bne.n	800378c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f938 	bl	80039ec <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695a      	ldr	r2, [r3, #20]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f002 0208 	and.w	r2, r2, #8
 800378a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f006 fd2a 	bl	800a1ea <USB_ReadInterrupts>
 8003796:	4603      	mov	r3, r0
 8003798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379c:	2b80      	cmp	r3, #128	; 0x80
 800379e:	d122      	bne.n	80037e6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037ac:	2301      	movs	r3, #1
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24
 80037b0:	e014      	b.n	80037dc <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b6:	4613      	mov	r3, r2
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	4413      	add	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	440b      	add	r3, r1
 80037c0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d105      	bne.n	80037d6 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	4619      	mov	r1, r3
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f95f 	bl	8003a94 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	3301      	adds	r3, #1
 80037da:	627b      	str	r3, [r7, #36]	; 0x24
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d3e5      	bcc.n	80037b2 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f006 fcfd 	bl	800a1ea <USB_ReadInterrupts>
 80037f0:	4603      	mov	r3, r0
 80037f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037fa:	d13b      	bne.n	8003874 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037fc:	2301      	movs	r3, #1
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003800:	e02b      	b.n	800385a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	015a      	lsls	r2, r3, #5
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	4413      	add	r3, r2
 800380a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003816:	4613      	mov	r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	4413      	add	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	440b      	add	r3, r1
 8003820:	3340      	adds	r3, #64	; 0x40
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d115      	bne.n	8003854 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003828:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800382a:	2b00      	cmp	r3, #0
 800382c:	da12      	bge.n	8003854 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003832:	4613      	mov	r3, r2
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	333f      	adds	r3, #63	; 0x3f
 800383e:	2201      	movs	r2, #1
 8003840:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	b2db      	uxtb	r3, r3
 8003846:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800384a:	b2db      	uxtb	r3, r3
 800384c:	4619      	mov	r1, r3
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f920 	bl	8003a94 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	3301      	adds	r3, #1
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003860:	429a      	cmp	r2, r3
 8003862:	d3ce      	bcc.n	8003802 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695a      	ldr	r2, [r3, #20]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003872:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f006 fcb6 	bl	800a1ea <USB_ReadInterrupts>
 800387e:	4603      	mov	r3, r0
 8003880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003884:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003888:	d155      	bne.n	8003936 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800388a:	2301      	movs	r3, #1
 800388c:	627b      	str	r3, [r7, #36]	; 0x24
 800388e:	e045      	b.n	800391c <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	015a      	lsls	r2, r3, #5
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	4413      	add	r3, r2
 8003898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a4:	4613      	mov	r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4413      	add	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d12e      	bne.n	8003916 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038b8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	da2b      	bge.n	8003916 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80038ca:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d121      	bne.n	8003916 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d6:	4613      	mov	r3, r2
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	4413      	add	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	440b      	add	r3, r1
 80038e0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80038e4:	2201      	movs	r2, #1
 80038e6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10a      	bne.n	8003916 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	69fa      	ldr	r2, [r7, #28]
 800390a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800390e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003912:	6053      	str	r3, [r2, #4]
            break;
 8003914:	e007      	b.n	8003926 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	3301      	adds	r3, #1
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003922:	429a      	cmp	r2, r3
 8003924:	d3b4      	bcc.n	8003890 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695a      	ldr	r2, [r3, #20]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003934:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f006 fc55 	bl	800a1ea <USB_ReadInterrupts>
 8003940:	4603      	mov	r3, r0
 8003942:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394a:	d10a      	bne.n	8003962 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f88d 	bl	8003a6c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695a      	ldr	r2, [r3, #20]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003960:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f006 fc3f 	bl	800a1ea <USB_ReadInterrupts>
 800396c:	4603      	mov	r3, r0
 800396e:	f003 0304 	and.w	r3, r3, #4
 8003972:	2b04      	cmp	r3, #4
 8003974:	d115      	bne.n	80039a2 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f879 	bl	8003a80 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6859      	ldr	r1, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	430a      	orrs	r2, r1
 800399c:	605a      	str	r2, [r3, #4]
 800399e:	e000      	b.n	80039a2 <HAL_PCD_IRQHandler+0x992>
      return;
 80039a0:	bf00      	nop
    }
  }
}
 80039a2:	3734      	adds	r7, #52	; 0x34
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd90      	pop	{r4, r7, pc}

080039a8 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003aa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	da0c      	bge.n	8003ac2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	f003 020f 	and.w	r2, r3, #15
 8003aae:	4613      	mov	r3, r2
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	3338      	adds	r3, #56	; 0x38
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	4413      	add	r3, r2
 8003abc:	3304      	adds	r3, #4
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	e00c      	b.n	8003adc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ac2:	78fb      	ldrb	r3, [r7, #3]
 8003ac4:	f003 020f 	and.w	r2, r3, #15
 8003ac8:	4613      	mov	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4413      	add	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	3304      	adds	r3, #4
 8003ada:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68f9      	ldr	r1, [r7, #12]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f006 fa20 	bl	8009f28 <USB_EPStopXfer>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003aec:	7afb      	ldrb	r3, [r7, #11]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b08a      	sub	sp, #40	; 0x28
 8003afa:	af02      	add	r7, sp, #8
 8003afc:	6078      	str	r0, [r7, #4]
 8003afe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	4413      	add	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	3338      	adds	r3, #56	; 0x38
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	4413      	add	r3, r2
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	695a      	ldr	r2, [r3, #20]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d901      	bls.n	8003b2e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e06c      	b.n	8003c08 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	691a      	ldr	r2, [r3, #16]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	69fa      	ldr	r2, [r7, #28]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d902      	bls.n	8003b4a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	3303      	adds	r3, #3
 8003b4e:	089b      	lsrs	r3, r3, #2
 8003b50:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b52:	e02b      	b.n	8003bac <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	691a      	ldr	r2, [r3, #16]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	69fa      	ldr	r2, [r7, #28]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d902      	bls.n	8003b70 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	3303      	adds	r3, #3
 8003b74:	089b      	lsrs	r3, r3, #2
 8003b76:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	68d9      	ldr	r1, [r3, #12]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	6978      	ldr	r0, [r7, #20]
 8003b90:	f006 fa74 	bl	800a07c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	441a      	add	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	695a      	ldr	r2, [r3, #20]
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	441a      	add	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d809      	bhi.n	8003bd6 <PCD_WriteEmptyTxFifo+0xe0>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	695a      	ldr	r2, [r3, #20]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d203      	bcs.n	8003bd6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1be      	bne.n	8003b54 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	691a      	ldr	r2, [r3, #16]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d811      	bhi.n	8003c06 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	f003 030f 	and.w	r3, r3, #15
 8003be8:	2201      	movs	r2, #1
 8003bea:	fa02 f303 	lsl.w	r3, r2, r3
 8003bee:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	6939      	ldr	r1, [r7, #16]
 8003bfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c02:	4013      	ands	r3, r2
 8003c04:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3720      	adds	r7, #32
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b088      	sub	sp, #32
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	333c      	adds	r3, #60	; 0x3c
 8003c28:	3304      	adds	r3, #4
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d17b      	bne.n	8003d3e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f003 0308 	and.w	r3, r3, #8
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d015      	beq.n	8003c7c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	4a61      	ldr	r2, [pc, #388]	; (8003dd8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	f240 80b9 	bls.w	8003dcc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 80b3 	beq.w	8003dcc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	015a      	lsls	r2, r3, #5
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c72:	461a      	mov	r2, r3
 8003c74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c78:	6093      	str	r3, [r2, #8]
 8003c7a:	e0a7      	b.n	8003dcc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f003 0320 	and.w	r3, r3, #32
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d009      	beq.n	8003c9a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	015a      	lsls	r2, r3, #5
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c92:	461a      	mov	r2, r3
 8003c94:	2320      	movs	r3, #32
 8003c96:	6093      	str	r3, [r2, #8]
 8003c98:	e098      	b.n	8003dcc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f040 8093 	bne.w	8003dcc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	4a4b      	ldr	r2, [pc, #300]	; (8003dd8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d90f      	bls.n	8003cce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00a      	beq.n	8003cce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cca:	6093      	str	r3, [r2, #8]
 8003ccc:	e07e      	b.n	8003dcc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	4413      	add	r3, r2
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a1a      	ldr	r2, [r3, #32]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	0159      	lsls	r1, r3, #5
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	440b      	add	r3, r1
 8003cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cfa:	1ad2      	subs	r2, r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d114      	bne.n	8003d30 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d109      	bne.n	8003d22 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d18:	461a      	mov	r2, r3
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	f006 fb2a 	bl	800a374 <USB_EP0_OutStart>
 8003d20:	e006      	b.n	8003d30 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	441a      	add	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	4619      	mov	r1, r3
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7ff fe36 	bl	80039a8 <HAL_PCD_DataOutStageCallback>
 8003d3c:	e046      	b.n	8003dcc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	4a26      	ldr	r2, [pc, #152]	; (8003ddc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d124      	bne.n	8003d90 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00a      	beq.n	8003d66 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d62:	6093      	str	r3, [r2, #8]
 8003d64:	e032      	b.n	8003dcc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f003 0320 	and.w	r3, r3, #32
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	2320      	movs	r3, #32
 8003d80:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	4619      	mov	r1, r3
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff fe0d 	bl	80039a8 <HAL_PCD_DataOutStageCallback>
 8003d8e:	e01d      	b.n	8003dcc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d114      	bne.n	8003dc0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	4413      	add	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	440b      	add	r3, r1
 8003da4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d108      	bne.n	8003dc0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6818      	ldr	r0, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003db8:	461a      	mov	r2, r3
 8003dba:	2100      	movs	r1, #0
 8003dbc:	f006 fada 	bl	800a374 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7ff fdee 	bl	80039a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3720      	adds	r7, #32
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	4f54300a 	.word	0x4f54300a
 8003ddc:	4f54310a 	.word	0x4f54310a

08003de0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	333c      	adds	r3, #60	; 0x3c
 8003df8:	3304      	adds	r3, #4
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	015a      	lsls	r2, r3, #5
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	4413      	add	r3, r2
 8003e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4a15      	ldr	r2, [pc, #84]	; (8003e68 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d90e      	bls.n	8003e34 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d009      	beq.n	8003e34 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e32:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f7ff fdcf 	bl	80039d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4a0a      	ldr	r2, [pc, #40]	; (8003e68 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d90c      	bls.n	8003e5c <PCD_EP_OutSetupPacket_int+0x7c>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d108      	bne.n	8003e5c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6818      	ldr	r0, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e54:	461a      	mov	r2, r3
 8003e56:	2101      	movs	r1, #1
 8003e58:	f006 fa8c 	bl	800a374 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3718      	adds	r7, #24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	4f54300a 	.word	0x4f54300a

08003e6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e9e:	f043 0303 	orr.w	r3, r3, #3
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003ed4:	4b39      	ldr	r3, [pc, #228]	; (8003fbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003edc:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d10b      	bne.n	8003efe <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eec:	d905      	bls.n	8003efa <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003eee:	4b33      	ldr	r3, [pc, #204]	; (8003fbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	4a32      	ldr	r2, [pc, #200]	; (8003fbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ef8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	e057      	b.n	8003fae <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f04:	d90a      	bls.n	8003f1c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003f06:	4b2d      	ldr	r3, [pc, #180]	; (8003fbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	4a2a      	ldr	r2, [pc, #168]	; (8003fbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f18:	60d3      	str	r3, [r2, #12]
 8003f1a:	e007      	b.n	8003f2c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003f1c:	4b27      	ldr	r3, [pc, #156]	; (8003fbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003f24:	4925      	ldr	r1, [pc, #148]	; (8003fbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003f2c:	4b24      	ldr	r3, [pc, #144]	; (8003fc0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a24      	ldr	r2, [pc, #144]	; (8003fc4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003f32:	fba2 2303 	umull	r2, r3, r2, r3
 8003f36:	099b      	lsrs	r3, r3, #6
 8003f38:	2232      	movs	r2, #50	; 0x32
 8003f3a:	fb02 f303 	mul.w	r3, r2, r3
 8003f3e:	4a21      	ldr	r2, [pc, #132]	; (8003fc4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003f40:	fba2 2303 	umull	r2, r3, r2, r3
 8003f44:	099b      	lsrs	r3, r3, #6
 8003f46:	3301      	adds	r3, #1
 8003f48:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003f4a:	e002      	b.n	8003f52 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003f52:	4b1a      	ldr	r3, [pc, #104]	; (8003fbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d102      	bne.n	8003f64 <HAL_PWREx_ControlVoltageScaling+0x98>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1f3      	bne.n	8003f4c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d01b      	beq.n	8003fa2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003f6a:	4b15      	ldr	r3, [pc, #84]	; (8003fc0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a15      	ldr	r2, [pc, #84]	; (8003fc4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003f70:	fba2 2303 	umull	r2, r3, r2, r3
 8003f74:	099b      	lsrs	r3, r3, #6
 8003f76:	2232      	movs	r2, #50	; 0x32
 8003f78:	fb02 f303 	mul.w	r3, r2, r3
 8003f7c:	4a11      	ldr	r2, [pc, #68]	; (8003fc4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f82:	099b      	lsrs	r3, r3, #6
 8003f84:	3301      	adds	r3, #1
 8003f86:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003f88:	e002      	b.n	8003f90 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003f90:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d102      	bne.n	8003fa2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f3      	bne.n	8003f8a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e000      	b.n	8003fae <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	46020800 	.word	0x46020800
 8003fc0:	20000000 	.word	0x20000000
 8003fc4:	10624dd3 	.word	0x10624dd3

08003fc8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003fcc:	4b04      	ldr	r3, [pc, #16]	; (8003fe0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	46020800 	.word	0x46020800

08003fe4 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003fec:	4b22      	ldr	r3, [pc, #136]	; (8004078 <HAL_PWREx_ConfigSupply+0x94>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a22      	ldr	r2, [pc, #136]	; (800407c <HAL_PWREx_ConfigSupply+0x98>)
 8003ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff6:	099b      	lsrs	r3, r3, #6
 8003ff8:	2232      	movs	r2, #50	; 0x32
 8003ffa:	fb02 f303 	mul.w	r3, r2, r3
 8003ffe:	4a1f      	ldr	r2, [pc, #124]	; (800407c <HAL_PWREx_ConfigSupply+0x98>)
 8004000:	fba2 2303 	umull	r2, r3, r2, r3
 8004004:	099b      	lsrs	r3, r3, #6
 8004006:	3301      	adds	r3, #1
 8004008:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d113      	bne.n	8004038 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004010:	4b1b      	ldr	r3, [pc, #108]	; (8004080 <HAL_PWREx_ConfigSupply+0x9c>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	4a1a      	ldr	r2, [pc, #104]	; (8004080 <HAL_PWREx_ConfigSupply+0x9c>)
 8004016:	f023 0302 	bic.w	r3, r3, #2
 800401a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800401c:	e002      	b.n	8004024 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	3b01      	subs	r3, #1
 8004022:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004024:	4b16      	ldr	r3, [pc, #88]	; (8004080 <HAL_PWREx_ConfigSupply+0x9c>)
 8004026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b02      	cmp	r3, #2
 800402e:	d116      	bne.n	800405e <HAL_PWREx_ConfigSupply+0x7a>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1f3      	bne.n	800401e <HAL_PWREx_ConfigSupply+0x3a>
 8004036:	e012      	b.n	800405e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004038:	4b11      	ldr	r3, [pc, #68]	; (8004080 <HAL_PWREx_ConfigSupply+0x9c>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	4a10      	ldr	r2, [pc, #64]	; (8004080 <HAL_PWREx_ConfigSupply+0x9c>)
 800403e:	f043 0302 	orr.w	r3, r3, #2
 8004042:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004044:	e002      	b.n	800404c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	3b01      	subs	r3, #1
 800404a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800404c:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <HAL_PWREx_ConfigSupply+0x9c>)
 800404e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d102      	bne.n	800405e <HAL_PWREx_ConfigSupply+0x7a>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1f3      	bne.n	8004046 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e000      	b.n	800406a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	20000000 	.word	0x20000000
 800407c:	10624dd3 	.word	0x10624dd3
 8004080:	46020800 	.word	0x46020800

08004084 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8004088:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	4a04      	ldr	r2, [pc, #16]	; (80040a0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800408e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004092:	6113      	str	r3, [r2, #16]
}
 8004094:	bf00      	nop
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	46020800 	.word	0x46020800

080040a4 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80040a8:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	4a04      	ldr	r2, [pc, #16]	; (80040c0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80040ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040b2:	6113      	str	r3, [r2, #16]
}
 80040b4:	bf00      	nop
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	46020800 	.word	0x46020800

080040c4 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 80040c8:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <HAL_PWREx_EnableVddA+0x1c>)
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	4a04      	ldr	r2, [pc, #16]	; (80040e0 <HAL_PWREx_EnableVddA+0x1c>)
 80040ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040d2:	6113      	str	r3, [r2, #16]
}
 80040d4:	bf00      	nop
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	46020800 	.word	0x46020800

080040e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b08e      	sub	sp, #56	; 0x38
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80040ec:	2300      	movs	r3, #0
 80040ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d102      	bne.n	80040fe <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	f000 bec8 	b.w	8004e8e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040fe:	4b99      	ldr	r3, [pc, #612]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	f003 030c 	and.w	r3, r3, #12
 8004106:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004108:	4b96      	ldr	r3, [pc, #600]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 800410a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410c:	f003 0303 	and.w	r3, r3, #3
 8004110:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0310 	and.w	r3, r3, #16
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 816c 	beq.w	80043f8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004122:	2b00      	cmp	r3, #0
 8004124:	d007      	beq.n	8004136 <HAL_RCC_OscConfig+0x52>
 8004126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004128:	2b0c      	cmp	r3, #12
 800412a:	f040 80de 	bne.w	80042ea <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800412e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004130:	2b01      	cmp	r3, #1
 8004132:	f040 80da 	bne.w	80042ea <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d102      	bne.n	8004144 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	f000 bea5 	b.w	8004e8e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004148:	4b86      	ldr	r3, [pc, #536]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d004      	beq.n	800415e <HAL_RCC_OscConfig+0x7a>
 8004154:	4b83      	ldr	r3, [pc, #524]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800415c:	e005      	b.n	800416a <HAL_RCC_OscConfig+0x86>
 800415e:	4b81      	ldr	r3, [pc, #516]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 8004160:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004164:	041b      	lsls	r3, r3, #16
 8004166:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800416a:	4293      	cmp	r3, r2
 800416c:	d255      	bcs.n	800421a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800416e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10a      	bne.n	800418a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	4618      	mov	r0, r3
 800417a:	f001 f9d9 	bl	8005530 <RCC_SetFlashLatencyFromMSIRange>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	f000 be82 	b.w	8004e8e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800418a:	4b76      	ldr	r3, [pc, #472]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	4a75      	ldr	r2, [pc, #468]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 8004190:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004194:	6093      	str	r3, [r2, #8]
 8004196:	4b73      	ldr	r3, [pc, #460]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	4970      	ldr	r1, [pc, #448]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80041b0:	d309      	bcc.n	80041c6 <HAL_RCC_OscConfig+0xe2>
 80041b2:	4b6c      	ldr	r3, [pc, #432]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f023 021f 	bic.w	r2, r3, #31
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	4969      	ldr	r1, [pc, #420]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60cb      	str	r3, [r1, #12]
 80041c4:	e07e      	b.n	80042c4 <HAL_RCC_OscConfig+0x1e0>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	da0a      	bge.n	80041e4 <HAL_RCC_OscConfig+0x100>
 80041ce:	4b65      	ldr	r3, [pc, #404]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	015b      	lsls	r3, r3, #5
 80041dc:	4961      	ldr	r1, [pc, #388]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	60cb      	str	r3, [r1, #12]
 80041e2:	e06f      	b.n	80042c4 <HAL_RCC_OscConfig+0x1e0>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ec:	d30a      	bcc.n	8004204 <HAL_RCC_OscConfig+0x120>
 80041ee:	4b5d      	ldr	r3, [pc, #372]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	029b      	lsls	r3, r3, #10
 80041fc:	4959      	ldr	r1, [pc, #356]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	60cb      	str	r3, [r1, #12]
 8004202:	e05f      	b.n	80042c4 <HAL_RCC_OscConfig+0x1e0>
 8004204:	4b57      	ldr	r3, [pc, #348]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	03db      	lsls	r3, r3, #15
 8004212:	4954      	ldr	r1, [pc, #336]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 8004214:	4313      	orrs	r3, r2
 8004216:	60cb      	str	r3, [r1, #12]
 8004218:	e054      	b.n	80042c4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800421a:	4b52      	ldr	r3, [pc, #328]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	4a51      	ldr	r2, [pc, #324]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 8004220:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004224:	6093      	str	r3, [r2, #8]
 8004226:	4b4f      	ldr	r3, [pc, #316]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	494c      	ldr	r1, [pc, #304]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 8004234:	4313      	orrs	r3, r2
 8004236:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004240:	d309      	bcc.n	8004256 <HAL_RCC_OscConfig+0x172>
 8004242:	4b48      	ldr	r3, [pc, #288]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f023 021f 	bic.w	r2, r3, #31
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	4945      	ldr	r1, [pc, #276]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 8004250:	4313      	orrs	r3, r2
 8004252:	60cb      	str	r3, [r1, #12]
 8004254:	e028      	b.n	80042a8 <HAL_RCC_OscConfig+0x1c4>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	2b00      	cmp	r3, #0
 800425c:	da0a      	bge.n	8004274 <HAL_RCC_OscConfig+0x190>
 800425e:	4b41      	ldr	r3, [pc, #260]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	015b      	lsls	r3, r3, #5
 800426c:	493d      	ldr	r1, [pc, #244]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 800426e:	4313      	orrs	r3, r2
 8004270:	60cb      	str	r3, [r1, #12]
 8004272:	e019      	b.n	80042a8 <HAL_RCC_OscConfig+0x1c4>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800427c:	d30a      	bcc.n	8004294 <HAL_RCC_OscConfig+0x1b0>
 800427e:	4b39      	ldr	r3, [pc, #228]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	029b      	lsls	r3, r3, #10
 800428c:	4935      	ldr	r1, [pc, #212]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 800428e:	4313      	orrs	r3, r2
 8004290:	60cb      	str	r3, [r1, #12]
 8004292:	e009      	b.n	80042a8 <HAL_RCC_OscConfig+0x1c4>
 8004294:	4b33      	ldr	r3, [pc, #204]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	03db      	lsls	r3, r3, #15
 80042a2:	4930      	ldr	r1, [pc, #192]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80042a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10a      	bne.n	80042c4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	4618      	mov	r0, r3
 80042b4:	f001 f93c 	bl	8005530 <RCC_SetFlashLatencyFromMSIRange>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	f000 bde5 	b.w	8004e8e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80042c4:	f001 f8de 	bl	8005484 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80042c8:	4b27      	ldr	r3, [pc, #156]	; (8004368 <HAL_RCC_OscConfig+0x284>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7fd fd6d 	bl	8001dac <HAL_InitTick>
 80042d2:	4603      	mov	r3, r0
 80042d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 80042d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 808a 	beq.w	80043f6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80042e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042e6:	f000 bdd2 	b.w	8004e8e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d066      	beq.n	80043c0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80042f2:	4b1c      	ldr	r3, [pc, #112]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a1b      	ldr	r2, [pc, #108]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80042fe:	f7fd fd9f 	bl	8001e40 <HAL_GetTick>
 8004302:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004304:	e009      	b.n	800431a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004306:	f7fd fd9b 	bl	8001e40 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d902      	bls.n	800431a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	f000 bdba 	b.w	8004e8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800431a:	4b12      	ldr	r3, [pc, #72]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0304 	and.w	r3, r3, #4
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0ef      	beq.n	8004306 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004326:	4b0f      	ldr	r3, [pc, #60]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	4a0e      	ldr	r2, [pc, #56]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 800432c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004330:	6093      	str	r3, [r2, #8]
 8004332:	4b0c      	ldr	r3, [pc, #48]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	4909      	ldr	r1, [pc, #36]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 8004340:	4313      	orrs	r3, r2
 8004342:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800434c:	d30e      	bcc.n	800436c <HAL_RCC_OscConfig+0x288>
 800434e:	4b05      	ldr	r3, [pc, #20]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	f023 021f 	bic.w	r2, r3, #31
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	4902      	ldr	r1, [pc, #8]	; (8004364 <HAL_RCC_OscConfig+0x280>)
 800435c:	4313      	orrs	r3, r2
 800435e:	60cb      	str	r3, [r1, #12]
 8004360:	e04a      	b.n	80043f8 <HAL_RCC_OscConfig+0x314>
 8004362:	bf00      	nop
 8004364:	46020c00 	.word	0x46020c00
 8004368:	20000004 	.word	0x20000004
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	2b00      	cmp	r3, #0
 8004372:	da0a      	bge.n	800438a <HAL_RCC_OscConfig+0x2a6>
 8004374:	4b98      	ldr	r3, [pc, #608]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	015b      	lsls	r3, r3, #5
 8004382:	4995      	ldr	r1, [pc, #596]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 8004384:	4313      	orrs	r3, r2
 8004386:	60cb      	str	r3, [r1, #12]
 8004388:	e036      	b.n	80043f8 <HAL_RCC_OscConfig+0x314>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004392:	d30a      	bcc.n	80043aa <HAL_RCC_OscConfig+0x2c6>
 8004394:	4b90      	ldr	r3, [pc, #576]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	029b      	lsls	r3, r3, #10
 80043a2:	498d      	ldr	r1, [pc, #564]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60cb      	str	r3, [r1, #12]
 80043a8:	e026      	b.n	80043f8 <HAL_RCC_OscConfig+0x314>
 80043aa:	4b8b      	ldr	r3, [pc, #556]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	03db      	lsls	r3, r3, #15
 80043b8:	4987      	ldr	r1, [pc, #540]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60cb      	str	r3, [r1, #12]
 80043be:	e01b      	b.n	80043f8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80043c0:	4b85      	ldr	r3, [pc, #532]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a84      	ldr	r2, [pc, #528]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 80043c6:	f023 0301 	bic.w	r3, r3, #1
 80043ca:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80043cc:	f7fd fd38 	bl	8001e40 <HAL_GetTick>
 80043d0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80043d2:	e009      	b.n	80043e8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043d4:	f7fd fd34 	bl	8001e40 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d902      	bls.n	80043e8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	f000 bd53 	b.w	8004e8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80043e8:	4b7b      	ldr	r3, [pc, #492]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1ef      	bne.n	80043d4 <HAL_RCC_OscConfig+0x2f0>
 80043f4:	e000      	b.n	80043f8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80043f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 808b 	beq.w	800451c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004408:	2b08      	cmp	r3, #8
 800440a:	d005      	beq.n	8004418 <HAL_RCC_OscConfig+0x334>
 800440c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440e:	2b0c      	cmp	r3, #12
 8004410:	d109      	bne.n	8004426 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004414:	2b03      	cmp	r3, #3
 8004416:	d106      	bne.n	8004426 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d17d      	bne.n	800451c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	f000 bd34 	b.w	8004e8e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800442e:	d106      	bne.n	800443e <HAL_RCC_OscConfig+0x35a>
 8004430:	4b69      	ldr	r3, [pc, #420]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a68      	ldr	r2, [pc, #416]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 8004436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	e041      	b.n	80044c2 <HAL_RCC_OscConfig+0x3de>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004446:	d112      	bne.n	800446e <HAL_RCC_OscConfig+0x38a>
 8004448:	4b63      	ldr	r3, [pc, #396]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a62      	ldr	r2, [pc, #392]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 800444e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	4b60      	ldr	r3, [pc, #384]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a5f      	ldr	r2, [pc, #380]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 800445a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800445e:	6013      	str	r3, [r2, #0]
 8004460:	4b5d      	ldr	r3, [pc, #372]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a5c      	ldr	r2, [pc, #368]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 8004466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	e029      	b.n	80044c2 <HAL_RCC_OscConfig+0x3de>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004476:	d112      	bne.n	800449e <HAL_RCC_OscConfig+0x3ba>
 8004478:	4b57      	ldr	r3, [pc, #348]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a56      	ldr	r2, [pc, #344]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 800447e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	4b54      	ldr	r3, [pc, #336]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a53      	ldr	r2, [pc, #332]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 800448a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	4b51      	ldr	r3, [pc, #324]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a50      	ldr	r2, [pc, #320]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 8004496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800449a:	6013      	str	r3, [r2, #0]
 800449c:	e011      	b.n	80044c2 <HAL_RCC_OscConfig+0x3de>
 800449e:	4b4e      	ldr	r3, [pc, #312]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a4d      	ldr	r2, [pc, #308]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 80044a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	4b4b      	ldr	r3, [pc, #300]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a4a      	ldr	r2, [pc, #296]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 80044b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	4b48      	ldr	r3, [pc, #288]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a47      	ldr	r2, [pc, #284]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 80044bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80044c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d014      	beq.n	80044f4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80044ca:	f7fd fcb9 	bl	8001e40 <HAL_GetTick>
 80044ce:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044d0:	e009      	b.n	80044e6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044d2:	f7fd fcb5 	bl	8001e40 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b64      	cmp	r3, #100	; 0x64
 80044de:	d902      	bls.n	80044e6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	f000 bcd4 	b.w	8004e8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044e6:	4b3c      	ldr	r3, [pc, #240]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0ef      	beq.n	80044d2 <HAL_RCC_OscConfig+0x3ee>
 80044f2:	e013      	b.n	800451c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80044f4:	f7fd fca4 	bl	8001e40 <HAL_GetTick>
 80044f8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044fa:	e009      	b.n	8004510 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044fc:	f7fd fca0 	bl	8001e40 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b64      	cmp	r3, #100	; 0x64
 8004508:	d902      	bls.n	8004510 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	f000 bcbf 	b.w	8004e8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004510:	4b31      	ldr	r3, [pc, #196]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1ef      	bne.n	80044fc <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d05f      	beq.n	80045e8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452a:	2b04      	cmp	r3, #4
 800452c:	d005      	beq.n	800453a <HAL_RCC_OscConfig+0x456>
 800452e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004530:	2b0c      	cmp	r3, #12
 8004532:	d114      	bne.n	800455e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004536:	2b02      	cmp	r3, #2
 8004538:	d111      	bne.n	800455e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d102      	bne.n	8004548 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	f000 bca3 	b.w	8004e8e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004548:	4b23      	ldr	r3, [pc, #140]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	041b      	lsls	r3, r3, #16
 8004556:	4920      	ldr	r1, [pc, #128]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 8004558:	4313      	orrs	r3, r2
 800455a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800455c:	e044      	b.n	80045e8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d024      	beq.n	80045b0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004566:	4b1c      	ldr	r3, [pc, #112]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a1b      	ldr	r2, [pc, #108]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 800456c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004570:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004572:	f7fd fc65 	bl	8001e40 <HAL_GetTick>
 8004576:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004578:	e009      	b.n	800458e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800457a:	f7fd fc61 	bl	8001e40 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d902      	bls.n	800458e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	f000 bc80 	b.w	8004e8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800458e:	4b12      	ldr	r3, [pc, #72]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0ef      	beq.n	800457a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800459a:	4b0f      	ldr	r3, [pc, #60]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	041b      	lsls	r3, r3, #16
 80045a8:	490b      	ldr	r1, [pc, #44]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	610b      	str	r3, [r1, #16]
 80045ae:	e01b      	b.n	80045e8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80045b0:	4b09      	ldr	r3, [pc, #36]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a08      	ldr	r2, [pc, #32]	; (80045d8 <HAL_RCC_OscConfig+0x4f4>)
 80045b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045ba:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80045bc:	f7fd fc40 	bl	8001e40 <HAL_GetTick>
 80045c0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045c2:	e00b      	b.n	80045dc <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045c4:	f7fd fc3c 	bl	8001e40 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d904      	bls.n	80045dc <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	f000 bc5b 	b.w	8004e8e <HAL_RCC_OscConfig+0xdaa>
 80045d8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045dc:	4baf      	ldr	r3, [pc, #700]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1ed      	bne.n	80045c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0308 	and.w	r3, r3, #8
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 80c8 	beq.w	8004786 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80045f6:	2300      	movs	r3, #0
 80045f8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045fc:	4ba7      	ldr	r3, [pc, #668]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 80045fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004602:	f003 0304 	and.w	r3, r3, #4
 8004606:	2b00      	cmp	r3, #0
 8004608:	d111      	bne.n	800462e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800460a:	4ba4      	ldr	r3, [pc, #656]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 800460c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004610:	4aa2      	ldr	r2, [pc, #648]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 8004612:	f043 0304 	orr.w	r3, r3, #4
 8004616:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800461a:	4ba0      	ldr	r3, [pc, #640]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 800461c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	617b      	str	r3, [r7, #20]
 8004626:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004628:	2301      	movs	r3, #1
 800462a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800462e:	4b9c      	ldr	r3, [pc, #624]	; (80048a0 <HAL_RCC_OscConfig+0x7bc>)
 8004630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d119      	bne.n	800466e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800463a:	4b99      	ldr	r3, [pc, #612]	; (80048a0 <HAL_RCC_OscConfig+0x7bc>)
 800463c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463e:	4a98      	ldr	r2, [pc, #608]	; (80048a0 <HAL_RCC_OscConfig+0x7bc>)
 8004640:	f043 0301 	orr.w	r3, r3, #1
 8004644:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004646:	f7fd fbfb 	bl	8001e40 <HAL_GetTick>
 800464a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800464c:	e009      	b.n	8004662 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800464e:	f7fd fbf7 	bl	8001e40 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d902      	bls.n	8004662 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	f000 bc16 	b.w	8004e8e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004662:	4b8f      	ldr	r3, [pc, #572]	; (80048a0 <HAL_RCC_OscConfig+0x7bc>)
 8004664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0ef      	beq.n	800464e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d05f      	beq.n	8004736 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004676:	4b89      	ldr	r3, [pc, #548]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 8004678:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800467c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	699a      	ldr	r2, [r3, #24]
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004688:	429a      	cmp	r2, r3
 800468a:	d037      	beq.n	80046fc <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d006      	beq.n	80046a4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e3f4      	b.n	8004e8e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d01b      	beq.n	80046e6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80046ae:	4b7b      	ldr	r3, [pc, #492]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 80046b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046b4:	4a79      	ldr	r2, [pc, #484]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 80046b6:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80046ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80046be:	f7fd fbbf 	bl	8001e40 <HAL_GetTick>
 80046c2:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80046c4:	e008      	b.n	80046d8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046c6:	f7fd fbbb 	bl	8001e40 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b05      	cmp	r3, #5
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e3da      	b.n	8004e8e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80046d8:	4b70      	ldr	r3, [pc, #448]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 80046da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1ef      	bne.n	80046c6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80046e6:	4b6d      	ldr	r3, [pc, #436]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 80046e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046ec:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	4969      	ldr	r1, [pc, #420]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80046fc:	4b67      	ldr	r3, [pc, #412]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 80046fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004702:	4a66      	ldr	r2, [pc, #408]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 8004704:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004708:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800470c:	f7fd fb98 	bl	8001e40 <HAL_GetTick>
 8004710:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004714:	f7fd fb94 	bl	8001e40 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b05      	cmp	r3, #5
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e3b3      	b.n	8004e8e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004726:	4b5d      	ldr	r3, [pc, #372]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 8004728:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800472c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0ef      	beq.n	8004714 <HAL_RCC_OscConfig+0x630>
 8004734:	e01b      	b.n	800476e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004736:	4b59      	ldr	r3, [pc, #356]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 8004738:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800473c:	4a57      	ldr	r2, [pc, #348]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 800473e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8004742:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8004746:	f7fd fb7b 	bl	8001e40 <HAL_GetTick>
 800474a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800474c:	e008      	b.n	8004760 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800474e:	f7fd fb77 	bl	8001e40 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b05      	cmp	r3, #5
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e396      	b.n	8004e8e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004760:	4b4e      	ldr	r3, [pc, #312]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 8004762:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004766:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1ef      	bne.n	800474e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800476e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004772:	2b01      	cmp	r3, #1
 8004774:	d107      	bne.n	8004786 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004776:	4b49      	ldr	r3, [pc, #292]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 8004778:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800477c:	4a47      	ldr	r2, [pc, #284]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 800477e:	f023 0304 	bic.w	r3, r3, #4
 8004782:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0304 	and.w	r3, r3, #4
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 8111 	beq.w	80049b6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8004794:	2300      	movs	r3, #0
 8004796:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800479a:	4b40      	ldr	r3, [pc, #256]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 800479c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d111      	bne.n	80047cc <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047a8:	4b3c      	ldr	r3, [pc, #240]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 80047aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ae:	4a3b      	ldr	r2, [pc, #236]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 80047b0:	f043 0304 	orr.w	r3, r3, #4
 80047b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80047b8:	4b38      	ldr	r3, [pc, #224]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 80047ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047be:	f003 0304 	and.w	r3, r3, #4
 80047c2:	613b      	str	r3, [r7, #16]
 80047c4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80047c6:	2301      	movs	r3, #1
 80047c8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80047cc:	4b34      	ldr	r3, [pc, #208]	; (80048a0 <HAL_RCC_OscConfig+0x7bc>)
 80047ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d118      	bne.n	800480a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80047d8:	4b31      	ldr	r3, [pc, #196]	; (80048a0 <HAL_RCC_OscConfig+0x7bc>)
 80047da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047dc:	4a30      	ldr	r2, [pc, #192]	; (80048a0 <HAL_RCC_OscConfig+0x7bc>)
 80047de:	f043 0301 	orr.w	r3, r3, #1
 80047e2:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047e4:	f7fd fb2c 	bl	8001e40 <HAL_GetTick>
 80047e8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ec:	f7fd fb28 	bl	8001e40 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e347      	b.n	8004e8e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80047fe:	4b28      	ldr	r3, [pc, #160]	; (80048a0 <HAL_RCC_OscConfig+0x7bc>)
 8004800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0f0      	beq.n	80047ec <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d01f      	beq.n	8004856 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 0304 	and.w	r3, r3, #4
 800481e:	2b00      	cmp	r3, #0
 8004820:	d010      	beq.n	8004844 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004822:	4b1e      	ldr	r3, [pc, #120]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 8004824:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004828:	4a1c      	ldr	r2, [pc, #112]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 800482a:	f043 0304 	orr.w	r3, r3, #4
 800482e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004832:	4b1a      	ldr	r3, [pc, #104]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 8004834:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004838:	4a18      	ldr	r2, [pc, #96]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 800483a:	f043 0301 	orr.w	r3, r3, #1
 800483e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004842:	e018      	b.n	8004876 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004844:	4b15      	ldr	r3, [pc, #84]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 8004846:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800484a:	4a14      	ldr	r2, [pc, #80]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 800484c:	f043 0301 	orr.w	r3, r3, #1
 8004850:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004854:	e00f      	b.n	8004876 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004856:	4b11      	ldr	r3, [pc, #68]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 8004858:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800485c:	4a0f      	ldr	r2, [pc, #60]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 800485e:	f023 0301 	bic.w	r3, r3, #1
 8004862:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004866:	4b0d      	ldr	r3, [pc, #52]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 8004868:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800486c:	4a0b      	ldr	r2, [pc, #44]	; (800489c <HAL_RCC_OscConfig+0x7b8>)
 800486e:	f023 0304 	bic.w	r3, r3, #4
 8004872:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d057      	beq.n	800492e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800487e:	f7fd fadf 	bl	8001e40 <HAL_GetTick>
 8004882:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004884:	e00e      	b.n	80048a4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004886:	f7fd fadb 	bl	8001e40 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	f241 3288 	movw	r2, #5000	; 0x1388
 8004894:	4293      	cmp	r3, r2
 8004896:	d905      	bls.n	80048a4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e2f8      	b.n	8004e8e <HAL_RCC_OscConfig+0xdaa>
 800489c:	46020c00 	.word	0x46020c00
 80048a0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048a4:	4b9c      	ldr	r3, [pc, #624]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 80048a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0e9      	beq.n	8004886 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d01b      	beq.n	80048f6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80048be:	4b96      	ldr	r3, [pc, #600]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 80048c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048c4:	4a94      	ldr	r2, [pc, #592]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 80048c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80048ce:	e00a      	b.n	80048e6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d0:	f7fd fab6 	bl	8001e40 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	f241 3288 	movw	r2, #5000	; 0x1388
 80048de:	4293      	cmp	r3, r2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e2d3      	b.n	8004e8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80048e6:	4b8c      	ldr	r3, [pc, #560]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 80048e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0ed      	beq.n	80048d0 <HAL_RCC_OscConfig+0x7ec>
 80048f4:	e053      	b.n	800499e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80048f6:	4b88      	ldr	r3, [pc, #544]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 80048f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048fc:	4a86      	ldr	r2, [pc, #536]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 80048fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004902:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004906:	e00a      	b.n	800491e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004908:	f7fd fa9a 	bl	8001e40 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	f241 3288 	movw	r2, #5000	; 0x1388
 8004916:	4293      	cmp	r3, r2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e2b7      	b.n	8004e8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800491e:	4b7e      	ldr	r3, [pc, #504]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 8004920:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1ed      	bne.n	8004908 <HAL_RCC_OscConfig+0x824>
 800492c:	e037      	b.n	800499e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800492e:	f7fd fa87 	bl	8001e40 <HAL_GetTick>
 8004932:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004934:	e00a      	b.n	800494c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004936:	f7fd fa83 	bl	8001e40 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	f241 3288 	movw	r2, #5000	; 0x1388
 8004944:	4293      	cmp	r3, r2
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e2a0      	b.n	8004e8e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800494c:	4b72      	ldr	r3, [pc, #456]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 800494e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1ed      	bne.n	8004936 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800495a:	4b6f      	ldr	r3, [pc, #444]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 800495c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004964:	2b00      	cmp	r3, #0
 8004966:	d01a      	beq.n	800499e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004968:	4b6b      	ldr	r3, [pc, #428]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 800496a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800496e:	4a6a      	ldr	r2, [pc, #424]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 8004970:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004974:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004978:	e00a      	b.n	8004990 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800497a:	f7fd fa61 	bl	8001e40 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	f241 3288 	movw	r2, #5000	; 0x1388
 8004988:	4293      	cmp	r3, r2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e27e      	b.n	8004e8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004990:	4b61      	ldr	r3, [pc, #388]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 8004992:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1ed      	bne.n	800497a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800499e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d107      	bne.n	80049b6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049a6:	4b5c      	ldr	r3, [pc, #368]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 80049a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ac:	4a5a      	ldr	r2, [pc, #360]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 80049ae:	f023 0304 	bic.w	r3, r3, #4
 80049b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0320 	and.w	r3, r3, #32
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d036      	beq.n	8004a30 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d019      	beq.n	80049fe <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80049ca:	4b53      	ldr	r3, [pc, #332]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a52      	ldr	r2, [pc, #328]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 80049d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049d4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80049d6:	f7fd fa33 	bl	8001e40 <HAL_GetTick>
 80049da:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80049dc:	e008      	b.n	80049f0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049de:	f7fd fa2f 	bl	8001e40 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d901      	bls.n	80049f0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e24e      	b.n	8004e8e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80049f0:	4b49      	ldr	r3, [pc, #292]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0f0      	beq.n	80049de <HAL_RCC_OscConfig+0x8fa>
 80049fc:	e018      	b.n	8004a30 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80049fe:	4b46      	ldr	r3, [pc, #280]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a45      	ldr	r2, [pc, #276]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 8004a04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a08:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004a0a:	f7fd fa19 	bl	8001e40 <HAL_GetTick>
 8004a0e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004a10:	e008      	b.n	8004a24 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a12:	f7fd fa15 	bl	8001e40 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e234      	b.n	8004e8e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004a24:	4b3c      	ldr	r3, [pc, #240]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1f0      	bne.n	8004a12 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d036      	beq.n	8004aaa <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d019      	beq.n	8004a78 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004a44:	4b34      	ldr	r3, [pc, #208]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a33      	ldr	r2, [pc, #204]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 8004a4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a4e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004a50:	f7fd f9f6 	bl	8001e40 <HAL_GetTick>
 8004a54:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004a58:	f7fd f9f2 	bl	8001e40 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e211      	b.n	8004e8e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004a6a:	4b2b      	ldr	r3, [pc, #172]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d0f0      	beq.n	8004a58 <HAL_RCC_OscConfig+0x974>
 8004a76:	e018      	b.n	8004aaa <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004a78:	4b27      	ldr	r3, [pc, #156]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a26      	ldr	r2, [pc, #152]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 8004a7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a82:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004a84:	f7fd f9dc 	bl	8001e40 <HAL_GetTick>
 8004a88:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004a8c:	f7fd f9d8 	bl	8001e40 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e1f7      	b.n	8004e8e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004a9e:	4b1e      	ldr	r3, [pc, #120]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1f0      	bne.n	8004a8c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d07f      	beq.n	8004bb6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d062      	beq.n	8004b84 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8004abe:	4b16      	ldr	r3, [pc, #88]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	4a15      	ldr	r2, [pc, #84]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 8004ac4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ac8:	6093      	str	r3, [r2, #8]
 8004aca:	4b13      	ldr	r3, [pc, #76]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad6:	4910      	ldr	r1, [pc, #64]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004ae4:	d309      	bcc.n	8004afa <HAL_RCC_OscConfig+0xa16>
 8004ae6:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	f023 021f 	bic.w	r2, r3, #31
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	4909      	ldr	r1, [pc, #36]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	60cb      	str	r3, [r1, #12]
 8004af8:	e02a      	b.n	8004b50 <HAL_RCC_OscConfig+0xa6c>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	da0c      	bge.n	8004b1c <HAL_RCC_OscConfig+0xa38>
 8004b02:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	015b      	lsls	r3, r3, #5
 8004b10:	4901      	ldr	r1, [pc, #4]	; (8004b18 <HAL_RCC_OscConfig+0xa34>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60cb      	str	r3, [r1, #12]
 8004b16:	e01b      	b.n	8004b50 <HAL_RCC_OscConfig+0xa6c>
 8004b18:	46020c00 	.word	0x46020c00
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b24:	d30a      	bcc.n	8004b3c <HAL_RCC_OscConfig+0xa58>
 8004b26:	4ba1      	ldr	r3, [pc, #644]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	029b      	lsls	r3, r3, #10
 8004b34:	499d      	ldr	r1, [pc, #628]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60cb      	str	r3, [r1, #12]
 8004b3a:	e009      	b.n	8004b50 <HAL_RCC_OscConfig+0xa6c>
 8004b3c:	4b9b      	ldr	r3, [pc, #620]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	03db      	lsls	r3, r3, #15
 8004b4a:	4998      	ldr	r1, [pc, #608]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004b50:	4b96      	ldr	r3, [pc, #600]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a95      	ldr	r2, [pc, #596]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004b56:	f043 0310 	orr.w	r3, r3, #16
 8004b5a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004b5c:	f7fd f970 	bl	8001e40 <HAL_GetTick>
 8004b60:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004b62:	e008      	b.n	8004b76 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004b64:	f7fd f96c 	bl	8001e40 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e18b      	b.n	8004e8e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004b76:	4b8d      	ldr	r3, [pc, #564]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0320 	and.w	r3, r3, #32
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d0f0      	beq.n	8004b64 <HAL_RCC_OscConfig+0xa80>
 8004b82:	e018      	b.n	8004bb6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004b84:	4b89      	ldr	r3, [pc, #548]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a88      	ldr	r2, [pc, #544]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004b8a:	f023 0310 	bic.w	r3, r3, #16
 8004b8e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004b90:	f7fd f956 	bl	8001e40 <HAL_GetTick>
 8004b94:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004b96:	e008      	b.n	8004baa <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004b98:	f7fd f952 	bl	8001e40 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e171      	b.n	8004e8e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004baa:	4b80      	ldr	r3, [pc, #512]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0320 	and.w	r3, r3, #32
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1f0      	bne.n	8004b98 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f000 8166 	beq.w	8004e8c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bc6:	4b79      	ldr	r3, [pc, #484]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	f003 030c 	and.w	r3, r3, #12
 8004bce:	2b0c      	cmp	r3, #12
 8004bd0:	f000 80f2 	beq.w	8004db8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	f040 80c5 	bne.w	8004d68 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004bde:	4b73      	ldr	r3, [pc, #460]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a72      	ldr	r2, [pc, #456]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004be4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004be8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004bea:	f7fd f929 	bl	8001e40 <HAL_GetTick>
 8004bee:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004bf0:	e008      	b.n	8004c04 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf2:	f7fd f925 	bl	8001e40 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e144      	b.n	8004e8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004c04:	4b69      	ldr	r3, [pc, #420]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1f0      	bne.n	8004bf2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c10:	4b66      	ldr	r3, [pc, #408]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c16:	f003 0304 	and.w	r3, r3, #4
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d111      	bne.n	8004c42 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004c1e:	4b63      	ldr	r3, [pc, #396]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c24:	4a61      	ldr	r2, [pc, #388]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004c26:	f043 0304 	orr.w	r3, r3, #4
 8004c2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004c2e:	4b5f      	ldr	r3, [pc, #380]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	60fb      	str	r3, [r7, #12]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004c42:	4b5b      	ldr	r3, [pc, #364]	; (8004db0 <HAL_RCC_OscConfig+0xccc>)
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c4e:	d102      	bne.n	8004c56 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004c50:	2301      	movs	r3, #1
 8004c52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004c56:	4b56      	ldr	r3, [pc, #344]	; (8004db0 <HAL_RCC_OscConfig+0xccc>)
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	4a55      	ldr	r2, [pc, #340]	; (8004db0 <HAL_RCC_OscConfig+0xccc>)
 8004c5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c60:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004c62:	4b52      	ldr	r3, [pc, #328]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c6a:	f023 0303 	bic.w	r3, r3, #3
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c76:	3a01      	subs	r2, #1
 8004c78:	0212      	lsls	r2, r2, #8
 8004c7a:	4311      	orrs	r1, r2
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004c80:	430a      	orrs	r2, r1
 8004c82:	494a      	ldr	r1, [pc, #296]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	628b      	str	r3, [r1, #40]	; 0x28
 8004c88:	4b48      	ldr	r3, [pc, #288]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004c8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c8c:	4b49      	ldr	r3, [pc, #292]	; (8004db4 <HAL_RCC_OscConfig+0xcd0>)
 8004c8e:	4013      	ands	r3, r2
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c94:	3a01      	subs	r2, #1
 8004c96:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004c9e:	3a01      	subs	r2, #1
 8004ca0:	0252      	lsls	r2, r2, #9
 8004ca2:	b292      	uxth	r2, r2
 8004ca4:	4311      	orrs	r1, r2
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004caa:	3a01      	subs	r2, #1
 8004cac:	0412      	lsls	r2, r2, #16
 8004cae:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004cb2:	4311      	orrs	r1, r2
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004cb8:	3a01      	subs	r2, #1
 8004cba:	0612      	lsls	r2, r2, #24
 8004cbc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	493a      	ldr	r1, [pc, #232]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004cc8:	4b38      	ldr	r3, [pc, #224]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ccc:	4a37      	ldr	r2, [pc, #220]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004cce:	f023 0310 	bic.w	r3, r3, #16
 8004cd2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd8:	4a34      	ldr	r2, [pc, #208]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004cde:	4b33      	ldr	r3, [pc, #204]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce2:	4a32      	ldr	r2, [pc, #200]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004ce4:	f043 0310 	orr.w	r3, r3, #16
 8004ce8:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004cea:	4b30      	ldr	r3, [pc, #192]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cee:	f023 020c 	bic.w	r2, r3, #12
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf6:	492d      	ldr	r1, [pc, #180]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8004cfc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d105      	bne.n	8004d10 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004d04:	4b2a      	ldr	r3, [pc, #168]	; (8004db0 <HAL_RCC_OscConfig+0xccc>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	4a29      	ldr	r2, [pc, #164]	; (8004db0 <HAL_RCC_OscConfig+0xccc>)
 8004d0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d0e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004d10:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d107      	bne.n	8004d28 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004d18:	4b24      	ldr	r3, [pc, #144]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d1e:	4a23      	ldr	r2, [pc, #140]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004d20:	f023 0304 	bic.w	r3, r3, #4
 8004d24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004d28:	4b20      	ldr	r3, [pc, #128]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2c:	4a1f      	ldr	r2, [pc, #124]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004d2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d32:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004d34:	4b1d      	ldr	r3, [pc, #116]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a1c      	ldr	r2, [pc, #112]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004d3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d3e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004d40:	f7fd f87e 	bl	8001e40 <HAL_GetTick>
 8004d44:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d48:	f7fd f87a 	bl	8001e40 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e099      	b.n	8004e8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004d5a:	4b14      	ldr	r3, [pc, #80]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f0      	beq.n	8004d48 <HAL_RCC_OscConfig+0xc64>
 8004d66:	e091      	b.n	8004e8c <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004d68:	4b10      	ldr	r3, [pc, #64]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a0f      	ldr	r2, [pc, #60]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004d6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d72:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004d74:	f7fd f864 	bl	8001e40 <HAL_GetTick>
 8004d78:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d7c:	f7fd f860 	bl	8001e40 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e07f      	b.n	8004e8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004d8e:	4b07      	ldr	r3, [pc, #28]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f0      	bne.n	8004d7c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004d9a:	4b04      	ldr	r3, [pc, #16]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9e:	4a03      	ldr	r2, [pc, #12]	; (8004dac <HAL_RCC_OscConfig+0xcc8>)
 8004da0:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004da4:	f023 0303 	bic.w	r3, r3, #3
 8004da8:	6293      	str	r3, [r2, #40]	; 0x28
 8004daa:	e06f      	b.n	8004e8c <HAL_RCC_OscConfig+0xda8>
 8004dac:	46020c00 	.word	0x46020c00
 8004db0:	46020800 	.word	0x46020800
 8004db4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004db8:	4b37      	ldr	r3, [pc, #220]	; (8004e98 <HAL_RCC_OscConfig+0xdb4>)
 8004dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbc:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004dbe:	4b36      	ldr	r3, [pc, #216]	; (8004e98 <HAL_RCC_OscConfig+0xdb4>)
 8004dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d039      	beq.n	8004e40 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	f003 0203 	and.w	r2, r3, #3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d132      	bne.n	8004e40 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	0a1b      	lsrs	r3, r3, #8
 8004dde:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d129      	bne.n	8004e40 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d122      	bne.n	8004e40 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e04:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d11a      	bne.n	8004e40 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	0a5b      	lsrs	r3, r3, #9
 8004e0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e16:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d111      	bne.n	8004e40 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	0c1b      	lsrs	r3, r3, #16
 8004e20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e28:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d108      	bne.n	8004e40 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	0e1b      	lsrs	r3, r3, #24
 8004e32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d001      	beq.n	8004e44 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e024      	b.n	8004e8e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004e44:	4b14      	ldr	r3, [pc, #80]	; (8004e98 <HAL_RCC_OscConfig+0xdb4>)
 8004e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e48:	08db      	lsrs	r3, r3, #3
 8004e4a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d01a      	beq.n	8004e8c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004e56:	4b10      	ldr	r3, [pc, #64]	; (8004e98 <HAL_RCC_OscConfig+0xdb4>)
 8004e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5a:	4a0f      	ldr	r2, [pc, #60]	; (8004e98 <HAL_RCC_OscConfig+0xdb4>)
 8004e5c:	f023 0310 	bic.w	r3, r3, #16
 8004e60:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e62:	f7fc ffed 	bl	8001e40 <HAL_GetTick>
 8004e66:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004e68:	bf00      	nop
 8004e6a:	f7fc ffe9 	bl	8001e40 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d0f9      	beq.n	8004e6a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e7a:	4a07      	ldr	r2, [pc, #28]	; (8004e98 <HAL_RCC_OscConfig+0xdb4>)
 8004e7c:	00db      	lsls	r3, r3, #3
 8004e7e:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004e80:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <HAL_RCC_OscConfig+0xdb4>)
 8004e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e84:	4a04      	ldr	r2, [pc, #16]	; (8004e98 <HAL_RCC_OscConfig+0xdb4>)
 8004e86:	f043 0310 	orr.w	r3, r3, #16
 8004e8a:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3738      	adds	r7, #56	; 0x38
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	46020c00 	.word	0x46020c00

08004e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e1d9      	b.n	8005264 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004eb0:	4b9b      	ldr	r3, [pc, #620]	; (8005120 <HAL_RCC_ClockConfig+0x284>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 030f 	and.w	r3, r3, #15
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d910      	bls.n	8004ee0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ebe:	4b98      	ldr	r3, [pc, #608]	; (8005120 <HAL_RCC_ClockConfig+0x284>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f023 020f 	bic.w	r2, r3, #15
 8004ec6:	4996      	ldr	r1, [pc, #600]	; (8005120 <HAL_RCC_ClockConfig+0x284>)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ece:	4b94      	ldr	r3, [pc, #592]	; (8005120 <HAL_RCC_ClockConfig+0x284>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d001      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e1c1      	b.n	8005264 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0310 	and.w	r3, r3, #16
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d010      	beq.n	8004f0e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	695a      	ldr	r2, [r3, #20]
 8004ef0:	4b8c      	ldr	r3, [pc, #560]	; (8005124 <HAL_RCC_ClockConfig+0x288>)
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d908      	bls.n	8004f0e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004efc:	4b89      	ldr	r3, [pc, #548]	; (8005124 <HAL_RCC_ClockConfig+0x288>)
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	4986      	ldr	r1, [pc, #536]	; (8005124 <HAL_RCC_ClockConfig+0x288>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0308 	and.w	r3, r3, #8
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d012      	beq.n	8004f40 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691a      	ldr	r2, [r3, #16]
 8004f1e:	4b81      	ldr	r3, [pc, #516]	; (8005124 <HAL_RCC_ClockConfig+0x288>)
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	091b      	lsrs	r3, r3, #4
 8004f24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d909      	bls.n	8004f40 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004f2c:	4b7d      	ldr	r3, [pc, #500]	; (8005124 <HAL_RCC_ClockConfig+0x288>)
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	011b      	lsls	r3, r3, #4
 8004f3a:	497a      	ldr	r1, [pc, #488]	; (8005124 <HAL_RCC_ClockConfig+0x288>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d010      	beq.n	8004f6e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68da      	ldr	r2, [r3, #12]
 8004f50:	4b74      	ldr	r3, [pc, #464]	; (8005124 <HAL_RCC_ClockConfig+0x288>)
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d908      	bls.n	8004f6e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004f5c:	4b71      	ldr	r3, [pc, #452]	; (8005124 <HAL_RCC_ClockConfig+0x288>)
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	496e      	ldr	r1, [pc, #440]	; (8005124 <HAL_RCC_ClockConfig+0x288>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d010      	beq.n	8004f9c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	689a      	ldr	r2, [r3, #8]
 8004f7e:	4b69      	ldr	r3, [pc, #420]	; (8005124 <HAL_RCC_ClockConfig+0x288>)
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	f003 030f 	and.w	r3, r3, #15
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d908      	bls.n	8004f9c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004f8a:	4b66      	ldr	r3, [pc, #408]	; (8005124 <HAL_RCC_ClockConfig+0x288>)
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	f023 020f 	bic.w	r2, r3, #15
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	4963      	ldr	r1, [pc, #396]	; (8005124 <HAL_RCC_ClockConfig+0x288>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 80d2 	beq.w	800514e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004faa:	2300      	movs	r3, #0
 8004fac:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b03      	cmp	r3, #3
 8004fb4:	d143      	bne.n	800503e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fb6:	4b5b      	ldr	r3, [pc, #364]	; (8005124 <HAL_RCC_ClockConfig+0x288>)
 8004fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d110      	bne.n	8004fe6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004fc4:	4b57      	ldr	r3, [pc, #348]	; (8005124 <HAL_RCC_ClockConfig+0x288>)
 8004fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fca:	4a56      	ldr	r2, [pc, #344]	; (8005124 <HAL_RCC_ClockConfig+0x288>)
 8004fcc:	f043 0304 	orr.w	r3, r3, #4
 8004fd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004fd4:	4b53      	ldr	r3, [pc, #332]	; (8005124 <HAL_RCC_ClockConfig+0x288>)
 8004fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fda:	f003 0304 	and.w	r3, r3, #4
 8004fde:	60bb      	str	r3, [r7, #8]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004fe6:	f7fc ff2b 	bl	8001e40 <HAL_GetTick>
 8004fea:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004fec:	4b4e      	ldr	r3, [pc, #312]	; (8005128 <HAL_RCC_ClockConfig+0x28c>)
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00f      	beq.n	8005018 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004ff8:	e008      	b.n	800500c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004ffa:	f7fc ff21 	bl	8001e40 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d901      	bls.n	800500c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e12b      	b.n	8005264 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800500c:	4b46      	ldr	r3, [pc, #280]	; (8005128 <HAL_RCC_ClockConfig+0x28c>)
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d0f0      	beq.n	8004ffa <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005018:	7dfb      	ldrb	r3, [r7, #23]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d107      	bne.n	800502e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800501e:	4b41      	ldr	r3, [pc, #260]	; (8005124 <HAL_RCC_ClockConfig+0x288>)
 8005020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005024:	4a3f      	ldr	r2, [pc, #252]	; (8005124 <HAL_RCC_ClockConfig+0x288>)
 8005026:	f023 0304 	bic.w	r3, r3, #4
 800502a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800502e:	4b3d      	ldr	r3, [pc, #244]	; (8005124 <HAL_RCC_ClockConfig+0x288>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d121      	bne.n	800507e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e112      	b.n	8005264 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	2b02      	cmp	r3, #2
 8005044:	d107      	bne.n	8005056 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005046:	4b37      	ldr	r3, [pc, #220]	; (8005124 <HAL_RCC_ClockConfig+0x288>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d115      	bne.n	800507e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e106      	b.n	8005264 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d107      	bne.n	800506e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800505e:	4b31      	ldr	r3, [pc, #196]	; (8005124 <HAL_RCC_ClockConfig+0x288>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0304 	and.w	r3, r3, #4
 8005066:	2b00      	cmp	r3, #0
 8005068:	d109      	bne.n	800507e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e0fa      	b.n	8005264 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800506e:	4b2d      	ldr	r3, [pc, #180]	; (8005124 <HAL_RCC_ClockConfig+0x288>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e0f2      	b.n	8005264 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800507e:	4b29      	ldr	r3, [pc, #164]	; (8005124 <HAL_RCC_ClockConfig+0x288>)
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	f023 0203 	bic.w	r2, r3, #3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	4926      	ldr	r1, [pc, #152]	; (8005124 <HAL_RCC_ClockConfig+0x288>)
 800508c:	4313      	orrs	r3, r2
 800508e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005090:	f7fc fed6 	bl	8001e40 <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	2b03      	cmp	r3, #3
 800509c:	d112      	bne.n	80050c4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800509e:	e00a      	b.n	80050b6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050a0:	f7fc fece 	bl	8001e40 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e0d6      	b.n	8005264 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050b6:	4b1b      	ldr	r3, [pc, #108]	; (8005124 <HAL_RCC_ClockConfig+0x288>)
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	f003 030c 	and.w	r3, r3, #12
 80050be:	2b0c      	cmp	r3, #12
 80050c0:	d1ee      	bne.n	80050a0 <HAL_RCC_ClockConfig+0x204>
 80050c2:	e044      	b.n	800514e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d112      	bne.n	80050f2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80050cc:	e00a      	b.n	80050e4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ce:	f7fc feb7 	bl	8001e40 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050dc:	4293      	cmp	r3, r2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e0bf      	b.n	8005264 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80050e4:	4b0f      	ldr	r3, [pc, #60]	; (8005124 <HAL_RCC_ClockConfig+0x288>)
 80050e6:	69db      	ldr	r3, [r3, #28]
 80050e8:	f003 030c 	and.w	r3, r3, #12
 80050ec:	2b08      	cmp	r3, #8
 80050ee:	d1ee      	bne.n	80050ce <HAL_RCC_ClockConfig+0x232>
 80050f0:	e02d      	b.n	800514e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d123      	bne.n	8005142 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80050fa:	e00a      	b.n	8005112 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050fc:	f7fc fea0 	bl	8001e40 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	f241 3288 	movw	r2, #5000	; 0x1388
 800510a:	4293      	cmp	r3, r2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e0a8      	b.n	8005264 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005112:	4b04      	ldr	r3, [pc, #16]	; (8005124 <HAL_RCC_ClockConfig+0x288>)
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	f003 030c 	and.w	r3, r3, #12
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1ee      	bne.n	80050fc <HAL_RCC_ClockConfig+0x260>
 800511e:	e016      	b.n	800514e <HAL_RCC_ClockConfig+0x2b2>
 8005120:	40022000 	.word	0x40022000
 8005124:	46020c00 	.word	0x46020c00
 8005128:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800512c:	f7fc fe88 	bl	8001e40 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	f241 3288 	movw	r2, #5000	; 0x1388
 800513a:	4293      	cmp	r3, r2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e090      	b.n	8005264 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005142:	4b4a      	ldr	r3, [pc, #296]	; (800526c <HAL_RCC_ClockConfig+0x3d0>)
 8005144:	69db      	ldr	r3, [r3, #28]
 8005146:	f003 030c 	and.w	r3, r3, #12
 800514a:	2b04      	cmp	r3, #4
 800514c:	d1ee      	bne.n	800512c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d010      	beq.n	800517c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689a      	ldr	r2, [r3, #8]
 800515e:	4b43      	ldr	r3, [pc, #268]	; (800526c <HAL_RCC_ClockConfig+0x3d0>)
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	429a      	cmp	r2, r3
 8005168:	d208      	bcs.n	800517c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800516a:	4b40      	ldr	r3, [pc, #256]	; (800526c <HAL_RCC_ClockConfig+0x3d0>)
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	f023 020f 	bic.w	r2, r3, #15
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	493d      	ldr	r1, [pc, #244]	; (800526c <HAL_RCC_ClockConfig+0x3d0>)
 8005178:	4313      	orrs	r3, r2
 800517a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800517c:	4b3c      	ldr	r3, [pc, #240]	; (8005270 <HAL_RCC_ClockConfig+0x3d4>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 030f 	and.w	r3, r3, #15
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	429a      	cmp	r2, r3
 8005188:	d210      	bcs.n	80051ac <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800518a:	4b39      	ldr	r3, [pc, #228]	; (8005270 <HAL_RCC_ClockConfig+0x3d4>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f023 020f 	bic.w	r2, r3, #15
 8005192:	4937      	ldr	r1, [pc, #220]	; (8005270 <HAL_RCC_ClockConfig+0x3d4>)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	4313      	orrs	r3, r2
 8005198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800519a:	4b35      	ldr	r3, [pc, #212]	; (8005270 <HAL_RCC_ClockConfig+0x3d4>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 030f 	and.w	r3, r3, #15
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d001      	beq.n	80051ac <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e05b      	b.n	8005264 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d010      	beq.n	80051da <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68da      	ldr	r2, [r3, #12]
 80051bc:	4b2b      	ldr	r3, [pc, #172]	; (800526c <HAL_RCC_ClockConfig+0x3d0>)
 80051be:	6a1b      	ldr	r3, [r3, #32]
 80051c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d208      	bcs.n	80051da <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80051c8:	4b28      	ldr	r3, [pc, #160]	; (800526c <HAL_RCC_ClockConfig+0x3d0>)
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	4925      	ldr	r1, [pc, #148]	; (800526c <HAL_RCC_ClockConfig+0x3d0>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0308 	and.w	r3, r3, #8
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d012      	beq.n	800520c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691a      	ldr	r2, [r3, #16]
 80051ea:	4b20      	ldr	r3, [pc, #128]	; (800526c <HAL_RCC_ClockConfig+0x3d0>)
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	091b      	lsrs	r3, r3, #4
 80051f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d209      	bcs.n	800520c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80051f8:	4b1c      	ldr	r3, [pc, #112]	; (800526c <HAL_RCC_ClockConfig+0x3d0>)
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	4919      	ldr	r1, [pc, #100]	; (800526c <HAL_RCC_ClockConfig+0x3d0>)
 8005208:	4313      	orrs	r3, r2
 800520a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0310 	and.w	r3, r3, #16
 8005214:	2b00      	cmp	r3, #0
 8005216:	d010      	beq.n	800523a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	695a      	ldr	r2, [r3, #20]
 800521c:	4b13      	ldr	r3, [pc, #76]	; (800526c <HAL_RCC_ClockConfig+0x3d0>)
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005224:	429a      	cmp	r2, r3
 8005226:	d208      	bcs.n	800523a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005228:	4b10      	ldr	r3, [pc, #64]	; (800526c <HAL_RCC_ClockConfig+0x3d0>)
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	490d      	ldr	r1, [pc, #52]	; (800526c <HAL_RCC_ClockConfig+0x3d0>)
 8005236:	4313      	orrs	r3, r2
 8005238:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800523a:	f000 f821 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 800523e:	4602      	mov	r2, r0
 8005240:	4b0a      	ldr	r3, [pc, #40]	; (800526c <HAL_RCC_ClockConfig+0x3d0>)
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	f003 030f 	and.w	r3, r3, #15
 8005248:	490a      	ldr	r1, [pc, #40]	; (8005274 <HAL_RCC_ClockConfig+0x3d8>)
 800524a:	5ccb      	ldrb	r3, [r1, r3]
 800524c:	fa22 f303 	lsr.w	r3, r2, r3
 8005250:	4a09      	ldr	r2, [pc, #36]	; (8005278 <HAL_RCC_ClockConfig+0x3dc>)
 8005252:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005254:	4b09      	ldr	r3, [pc, #36]	; (800527c <HAL_RCC_ClockConfig+0x3e0>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4618      	mov	r0, r3
 800525a:	f7fc fda7 	bl	8001dac <HAL_InitTick>
 800525e:	4603      	mov	r3, r0
 8005260:	73fb      	strb	r3, [r7, #15]

  return status;
 8005262:	7bfb      	ldrb	r3, [r7, #15]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	46020c00 	.word	0x46020c00
 8005270:	40022000 	.word	0x40022000
 8005274:	0800a5e8 	.word	0x0800a5e8
 8005278:	20000000 	.word	0x20000000
 800527c:	20000004 	.word	0x20000004

08005280 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005280:	b480      	push	{r7}
 8005282:	b08b      	sub	sp, #44	; 0x2c
 8005284:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005286:	2300      	movs	r3, #0
 8005288:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800528a:	2300      	movs	r3, #0
 800528c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800528e:	4b78      	ldr	r3, [pc, #480]	; (8005470 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	f003 030c 	and.w	r3, r3, #12
 8005296:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005298:	4b75      	ldr	r3, [pc, #468]	; (8005470 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800529a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529c:	f003 0303 	and.w	r3, r3, #3
 80052a0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d005      	beq.n	80052b4 <HAL_RCC_GetSysClockFreq+0x34>
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	2b0c      	cmp	r3, #12
 80052ac:	d121      	bne.n	80052f2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d11e      	bne.n	80052f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80052b4:	4b6e      	ldr	r3, [pc, #440]	; (8005470 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d107      	bne.n	80052d0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80052c0:	4b6b      	ldr	r3, [pc, #428]	; (8005470 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80052c6:	0b1b      	lsrs	r3, r3, #12
 80052c8:	f003 030f 	and.w	r3, r3, #15
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
 80052ce:	e005      	b.n	80052dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80052d0:	4b67      	ldr	r3, [pc, #412]	; (8005470 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	0f1b      	lsrs	r3, r3, #28
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80052dc:	4a65      	ldr	r2, [pc, #404]	; (8005474 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052e4:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d110      	bne.n	800530e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80052f0:	e00d      	b.n	800530e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052f2:	4b5f      	ldr	r3, [pc, #380]	; (8005470 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	f003 030c 	and.w	r3, r3, #12
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d102      	bne.n	8005304 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052fe:	4b5e      	ldr	r3, [pc, #376]	; (8005478 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005300:	623b      	str	r3, [r7, #32]
 8005302:	e004      	b.n	800530e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	2b08      	cmp	r3, #8
 8005308:	d101      	bne.n	800530e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800530a:	4b5b      	ldr	r3, [pc, #364]	; (8005478 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800530c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	2b0c      	cmp	r3, #12
 8005312:	f040 80a5 	bne.w	8005460 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005316:	4b56      	ldr	r3, [pc, #344]	; (8005470 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005320:	4b53      	ldr	r3, [pc, #332]	; (8005470 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005324:	0a1b      	lsrs	r3, r3, #8
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	3301      	adds	r3, #1
 800532c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800532e:	4b50      	ldr	r3, [pc, #320]	; (8005470 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005332:	091b      	lsrs	r3, r3, #4
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800533a:	4b4d      	ldr	r3, [pc, #308]	; (8005470 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800533c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533e:	08db      	lsrs	r3, r3, #3
 8005340:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	fb02 f303 	mul.w	r3, r2, r3
 800534a:	ee07 3a90 	vmov	s15, r3
 800534e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005352:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	2b02      	cmp	r3, #2
 800535a:	d003      	beq.n	8005364 <HAL_RCC_GetSysClockFreq+0xe4>
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	2b03      	cmp	r3, #3
 8005360:	d022      	beq.n	80053a8 <HAL_RCC_GetSysClockFreq+0x128>
 8005362:	e043      	b.n	80053ec <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	ee07 3a90 	vmov	s15, r3
 800536a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800536e:	eddf 6a43 	vldr	s13, [pc, #268]	; 800547c <HAL_RCC_GetSysClockFreq+0x1fc>
 8005372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005376:	4b3e      	ldr	r3, [pc, #248]	; (8005470 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800537a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800537e:	ee07 3a90 	vmov	s15, r3
 8005382:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005386:	ed97 6a01 	vldr	s12, [r7, #4]
 800538a:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8005480 <HAL_RCC_GetSysClockFreq+0x200>
 800538e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005392:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800539a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800539e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053a6:	e046      	b.n	8005436 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	ee07 3a90 	vmov	s15, r3
 80053ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b2:	eddf 6a32 	vldr	s13, [pc, #200]	; 800547c <HAL_RCC_GetSysClockFreq+0x1fc>
 80053b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ba:	4b2d      	ldr	r3, [pc, #180]	; (8005470 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80053bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c2:	ee07 3a90 	vmov	s15, r3
 80053c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80053ca:	ed97 6a01 	vldr	s12, [r7, #4]
 80053ce:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8005480 <HAL_RCC_GetSysClockFreq+0x200>
 80053d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80053da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053de:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053ea:	e024      	b.n	8005436 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ee:	ee07 3a90 	vmov	s15, r3
 80053f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	ee07 3a90 	vmov	s15, r3
 80053fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005400:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005404:	4b1a      	ldr	r3, [pc, #104]	; (8005470 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800540c:	ee07 3a90 	vmov	s15, r3
 8005410:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005414:	ed97 6a01 	vldr	s12, [r7, #4]
 8005418:	eddf 5a19 	vldr	s11, [pc, #100]	; 8005480 <HAL_RCC_GetSysClockFreq+0x200>
 800541c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005420:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005424:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005428:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800542c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005430:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005434:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005436:	4b0e      	ldr	r3, [pc, #56]	; (8005470 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800543a:	0e1b      	lsrs	r3, r3, #24
 800543c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005440:	3301      	adds	r3, #1
 8005442:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	ee07 3a90 	vmov	s15, r3
 800544a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800544e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005452:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005456:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800545a:	ee17 3a90 	vmov	r3, s15
 800545e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8005460:	6a3b      	ldr	r3, [r7, #32]
}
 8005462:	4618      	mov	r0, r3
 8005464:	372c      	adds	r7, #44	; 0x2c
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	46020c00 	.word	0x46020c00
 8005474:	0800a600 	.word	0x0800a600
 8005478:	00f42400 	.word	0x00f42400
 800547c:	4b742400 	.word	0x4b742400
 8005480:	46000000 	.word	0x46000000

08005484 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005488:	f7ff fefa 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 800548c:	4602      	mov	r2, r0
 800548e:	4b07      	ldr	r3, [pc, #28]	; (80054ac <HAL_RCC_GetHCLKFreq+0x28>)
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	f003 030f 	and.w	r3, r3, #15
 8005496:	4906      	ldr	r1, [pc, #24]	; (80054b0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005498:	5ccb      	ldrb	r3, [r1, r3]
 800549a:	fa22 f303 	lsr.w	r3, r2, r3
 800549e:	4a05      	ldr	r2, [pc, #20]	; (80054b4 <HAL_RCC_GetHCLKFreq+0x30>)
 80054a0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80054a2:	4b04      	ldr	r3, [pc, #16]	; (80054b4 <HAL_RCC_GetHCLKFreq+0x30>)
 80054a4:	681b      	ldr	r3, [r3, #0]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	46020c00 	.word	0x46020c00
 80054b0:	0800a5e8 	.word	0x0800a5e8
 80054b4:	20000000 	.word	0x20000000

080054b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80054bc:	f7ff ffe2 	bl	8005484 <HAL_RCC_GetHCLKFreq>
 80054c0:	4602      	mov	r2, r0
 80054c2:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	091b      	lsrs	r3, r3, #4
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	4903      	ldr	r1, [pc, #12]	; (80054dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80054ce:	5ccb      	ldrb	r3, [r1, r3]
 80054d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	46020c00 	.word	0x46020c00
 80054dc:	0800a5f8 	.word	0x0800a5f8

080054e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80054e4:	f7ff ffce 	bl	8005484 <HAL_RCC_GetHCLKFreq>
 80054e8:	4602      	mov	r2, r0
 80054ea:	4b05      	ldr	r3, [pc, #20]	; (8005500 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	0a1b      	lsrs	r3, r3, #8
 80054f0:	f003 0307 	and.w	r3, r3, #7
 80054f4:	4903      	ldr	r1, [pc, #12]	; (8005504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054f6:	5ccb      	ldrb	r3, [r1, r3]
 80054f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	46020c00 	.word	0x46020c00
 8005504:	0800a5f8 	.word	0x0800a5f8

08005508 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800550c:	f7ff ffba 	bl	8005484 <HAL_RCC_GetHCLKFreq>
 8005510:	4602      	mov	r2, r0
 8005512:	4b05      	ldr	r3, [pc, #20]	; (8005528 <HAL_RCC_GetPCLK3Freq+0x20>)
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	091b      	lsrs	r3, r3, #4
 8005518:	f003 0307 	and.w	r3, r3, #7
 800551c:	4903      	ldr	r1, [pc, #12]	; (800552c <HAL_RCC_GetPCLK3Freq+0x24>)
 800551e:	5ccb      	ldrb	r3, [r1, r3]
 8005520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005524:	4618      	mov	r0, r3
 8005526:	bd80      	pop	{r7, pc}
 8005528:	46020c00 	.word	0x46020c00
 800552c:	0800a5f8 	.word	0x0800a5f8

08005530 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005538:	4b3e      	ldr	r3, [pc, #248]	; (8005634 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800553a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800553e:	f003 0304 	and.w	r3, r3, #4
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005546:	f7fe fd3f 	bl	8003fc8 <HAL_PWREx_GetVoltageRange>
 800554a:	6178      	str	r0, [r7, #20]
 800554c:	e019      	b.n	8005582 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800554e:	4b39      	ldr	r3, [pc, #228]	; (8005634 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005550:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005554:	4a37      	ldr	r2, [pc, #220]	; (8005634 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005556:	f043 0304 	orr.w	r3, r3, #4
 800555a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800555e:	4b35      	ldr	r3, [pc, #212]	; (8005634 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005560:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005564:	f003 0304 	and.w	r3, r3, #4
 8005568:	60fb      	str	r3, [r7, #12]
 800556a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800556c:	f7fe fd2c 	bl	8003fc8 <HAL_PWREx_GetVoltageRange>
 8005570:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005572:	4b30      	ldr	r3, [pc, #192]	; (8005634 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005578:	4a2e      	ldr	r2, [pc, #184]	; (8005634 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800557a:	f023 0304 	bic.w	r3, r3, #4
 800557e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005588:	d003      	beq.n	8005592 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005590:	d109      	bne.n	80055a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005598:	d202      	bcs.n	80055a0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800559a:	2301      	movs	r3, #1
 800559c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800559e:	e033      	b.n	8005608 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80055a0:	2300      	movs	r3, #0
 80055a2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80055a4:	e030      	b.n	8005608 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055ac:	d208      	bcs.n	80055c0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b4:	d102      	bne.n	80055bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80055b6:	2303      	movs	r3, #3
 80055b8:	613b      	str	r3, [r7, #16]
 80055ba:	e025      	b.n	8005608 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e035      	b.n	800562c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055c6:	d90f      	bls.n	80055e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d109      	bne.n	80055e2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80055d4:	d902      	bls.n	80055dc <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80055d6:	2300      	movs	r3, #0
 80055d8:	613b      	str	r3, [r7, #16]
 80055da:	e015      	b.n	8005608 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80055dc:	2301      	movs	r3, #1
 80055de:	613b      	str	r3, [r7, #16]
 80055e0:	e012      	b.n	8005608 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80055e2:	2300      	movs	r3, #0
 80055e4:	613b      	str	r3, [r7, #16]
 80055e6:	e00f      	b.n	8005608 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055ee:	d109      	bne.n	8005604 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055f6:	d102      	bne.n	80055fe <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80055f8:	2301      	movs	r3, #1
 80055fa:	613b      	str	r3, [r7, #16]
 80055fc:	e004      	b.n	8005608 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80055fe:	2302      	movs	r3, #2
 8005600:	613b      	str	r3, [r7, #16]
 8005602:	e001      	b.n	8005608 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005604:	2301      	movs	r3, #1
 8005606:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005608:	4b0b      	ldr	r3, [pc, #44]	; (8005638 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f023 020f 	bic.w	r2, r3, #15
 8005610:	4909      	ldr	r1, [pc, #36]	; (8005638 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	4313      	orrs	r3, r2
 8005616:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005618:	4b07      	ldr	r3, [pc, #28]	; (8005638 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 030f 	and.w	r3, r3, #15
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	429a      	cmp	r2, r3
 8005624:	d001      	beq.n	800562a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e000      	b.n	800562c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3718      	adds	r7, #24
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	46020c00 	.word	0x46020c00
 8005638:	40022000 	.word	0x40022000

0800563c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800563c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005640:	b0b8      	sub	sp, #224	; 0xe0
 8005642:	af00      	add	r7, sp, #0
 8005644:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005648:	2300      	movs	r3, #0
 800564a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800564e:	2300      	movs	r3, #0
 8005650:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005654:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565c:	f002 0401 	and.w	r4, r2, #1
 8005660:	2500      	movs	r5, #0
 8005662:	ea54 0305 	orrs.w	r3, r4, r5
 8005666:	d00b      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005668:	4bca      	ldr	r3, [pc, #808]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800566a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800566e:	f023 0103 	bic.w	r1, r3, #3
 8005672:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005678:	4ac6      	ldr	r2, [pc, #792]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800567a:	430b      	orrs	r3, r1
 800567c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005680:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005688:	f002 0802 	and.w	r8, r2, #2
 800568c:	f04f 0900 	mov.w	r9, #0
 8005690:	ea58 0309 	orrs.w	r3, r8, r9
 8005694:	d00b      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005696:	4bbf      	ldr	r3, [pc, #764]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800569c:	f023 010c 	bic.w	r1, r3, #12
 80056a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80056a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a6:	4abb      	ldr	r2, [pc, #748]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80056a8:	430b      	orrs	r3, r1
 80056aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80056b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b6:	f002 0a04 	and.w	sl, r2, #4
 80056ba:	f04f 0b00 	mov.w	fp, #0
 80056be:	ea5a 030b 	orrs.w	r3, sl, fp
 80056c2:	d00b      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80056c4:	4bb3      	ldr	r3, [pc, #716]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80056c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056ca:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80056ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80056d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d4:	4aaf      	ldr	r2, [pc, #700]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80056d6:	430b      	orrs	r3, r1
 80056d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80056e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e4:	f002 0308 	and.w	r3, r2, #8
 80056e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056ec:	2300      	movs	r3, #0
 80056ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056f2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80056f6:	460b      	mov	r3, r1
 80056f8:	4313      	orrs	r3, r2
 80056fa:	d00b      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80056fc:	4ba5      	ldr	r3, [pc, #660]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80056fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005702:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005706:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800570a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800570c:	4aa1      	ldr	r2, [pc, #644]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800570e:	430b      	orrs	r3, r1
 8005710:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005714:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571c:	f002 0310 	and.w	r3, r2, #16
 8005720:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005724:	2300      	movs	r3, #0
 8005726:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800572a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800572e:	460b      	mov	r3, r1
 8005730:	4313      	orrs	r3, r2
 8005732:	d00b      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005734:	4b97      	ldr	r3, [pc, #604]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800573a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800573e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005744:	4a93      	ldr	r2, [pc, #588]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005746:	430b      	orrs	r3, r1
 8005748:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800574c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005754:	f002 0320 	and.w	r3, r2, #32
 8005758:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800575c:	2300      	movs	r3, #0
 800575e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005762:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005766:	460b      	mov	r3, r1
 8005768:	4313      	orrs	r3, r2
 800576a:	d00b      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800576c:	4b89      	ldr	r3, [pc, #548]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800576e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005772:	f023 0107 	bic.w	r1, r3, #7
 8005776:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800577a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800577c:	4a85      	ldr	r2, [pc, #532]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800577e:	430b      	orrs	r3, r1
 8005780:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005784:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578c:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005790:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005794:	2300      	movs	r3, #0
 8005796:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800579a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800579e:	460b      	mov	r3, r1
 80057a0:	4313      	orrs	r3, r2
 80057a2:	d00b      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80057a4:	4b7b      	ldr	r3, [pc, #492]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80057a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057aa:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80057ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057b4:	4a77      	ldr	r2, [pc, #476]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80057b6:	430b      	orrs	r3, r1
 80057b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80057c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80057cc:	2300      	movs	r3, #0
 80057ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80057d2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80057d6:	460b      	mov	r3, r1
 80057d8:	4313      	orrs	r3, r2
 80057da:	d00b      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80057dc:	4b6d      	ldr	r3, [pc, #436]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80057de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ec:	4a69      	ldr	r2, [pc, #420]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80057ee:	430b      	orrs	r3, r1
 80057f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fc:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8005800:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005804:	2300      	movs	r3, #0
 8005806:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800580a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800580e:	460b      	mov	r3, r1
 8005810:	4313      	orrs	r3, r2
 8005812:	d00b      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005814:	4b5f      	ldr	r3, [pc, #380]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005816:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800581a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800581e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005824:	4a5b      	ldr	r2, [pc, #364]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005826:	430b      	orrs	r3, r1
 8005828:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800582c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005834:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005838:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800583c:	2300      	movs	r3, #0
 800583e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005842:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005846:	460b      	mov	r3, r1
 8005848:	4313      	orrs	r3, r2
 800584a:	d00b      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800584c:	4b51      	ldr	r3, [pc, #324]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800584e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005852:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8005856:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800585a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800585c:	4a4d      	ldr	r2, [pc, #308]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800585e:	430b      	orrs	r3, r1
 8005860:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005864:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586c:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8005870:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005874:	2300      	movs	r3, #0
 8005876:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800587a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800587e:	460b      	mov	r3, r1
 8005880:	4313      	orrs	r3, r2
 8005882:	d00b      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005884:	4b43      	ldr	r3, [pc, #268]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005886:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800588a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800588e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005892:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005894:	4a3f      	ldr	r2, [pc, #252]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005896:	430b      	orrs	r3, r1
 8005898:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800589c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80058a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a4:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80058a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058ac:	2300      	movs	r3, #0
 80058ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058b2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80058b6:	460b      	mov	r3, r1
 80058b8:	4313      	orrs	r3, r2
 80058ba:	d00b      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80058bc:	4b35      	ldr	r3, [pc, #212]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80058be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80058c2:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 80058c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80058ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058cc:	4a31      	ldr	r2, [pc, #196]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80058ce:	430b      	orrs	r3, r1
 80058d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80058d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80058d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058dc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80058e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80058e2:	2300      	movs	r3, #0
 80058e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80058e6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80058ea:	460b      	mov	r3, r1
 80058ec:	4313      	orrs	r3, r2
 80058ee:	d00c      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80058f0:	4b28      	ldr	r3, [pc, #160]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80058f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80058fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80058fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005902:	4a24      	ldr	r2, [pc, #144]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005904:	430b      	orrs	r3, r1
 8005906:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800590a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800590e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005912:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005916:	673b      	str	r3, [r7, #112]	; 0x70
 8005918:	2300      	movs	r3, #0
 800591a:	677b      	str	r3, [r7, #116]	; 0x74
 800591c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005920:	460b      	mov	r3, r1
 8005922:	4313      	orrs	r3, r2
 8005924:	d04f      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005926:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800592a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800592e:	2b80      	cmp	r3, #128	; 0x80
 8005930:	d02d      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x352>
 8005932:	2b80      	cmp	r3, #128	; 0x80
 8005934:	d827      	bhi.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005936:	2b60      	cmp	r3, #96	; 0x60
 8005938:	d02e      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800593a:	2b60      	cmp	r3, #96	; 0x60
 800593c:	d823      	bhi.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800593e:	2b40      	cmp	r3, #64	; 0x40
 8005940:	d006      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8005942:	2b40      	cmp	r3, #64	; 0x40
 8005944:	d81f      	bhi.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005946:	2b00      	cmp	r3, #0
 8005948:	d009      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x322>
 800594a:	2b20      	cmp	r3, #32
 800594c:	d011      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800594e:	e01a      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005950:	4b10      	ldr	r3, [pc, #64]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005954:	4a0f      	ldr	r2, [pc, #60]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800595a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800595c:	e01d      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800595e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005962:	3308      	adds	r3, #8
 8005964:	4618      	mov	r0, r3
 8005966:	f002 f9d1 	bl	8007d0c <RCCEx_PLL2_Config>
 800596a:	4603      	mov	r3, r0
 800596c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005970:	e013      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005972:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005976:	332c      	adds	r3, #44	; 0x2c
 8005978:	4618      	mov	r0, r3
 800597a:	f002 fa5f 	bl	8007e3c <RCCEx_PLL3_Config>
 800597e:	4603      	mov	r3, r0
 8005980:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005984:	e009      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800598c:	e005      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 800598e:	bf00      	nop
 8005990:	e003      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8005992:	bf00      	nop
 8005994:	46020c00 	.word	0x46020c00
        break;
 8005998:	bf00      	nop
    }

    if (ret == HAL_OK)
 800599a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10d      	bne.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80059a2:	4bb6      	ldr	r3, [pc, #728]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80059a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80059a8:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 80059ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80059b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b4:	4ab1      	ldr	r2, [pc, #708]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80059b6:	430b      	orrs	r3, r1
 80059b8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80059bc:	e003      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059be:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80059c2:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80059c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80059ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ce:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80059d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80059d4:	2300      	movs	r3, #0
 80059d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059d8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80059dc:	460b      	mov	r3, r1
 80059de:	4313      	orrs	r3, r2
 80059e0:	d053      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80059e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80059e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ee:	d033      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80059f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059f4:	d82c      	bhi.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80059f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059fa:	d02f      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x420>
 80059fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a00:	d826      	bhi.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a06:	d008      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a0c:	d820      	bhi.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00a      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a16:	d011      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005a18:	e01a      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a1a:	4b98      	ldr	r3, [pc, #608]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1e:	4a97      	ldr	r2, [pc, #604]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a24:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005a26:	e01a      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a2c:	3308      	adds	r3, #8
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f002 f96c 	bl	8007d0c <RCCEx_PLL2_Config>
 8005a34:	4603      	mov	r3, r0
 8005a36:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005a3a:	e010      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a40:	332c      	adds	r3, #44	; 0x2c
 8005a42:	4618      	mov	r0, r3
 8005a44:	f002 f9fa 	bl	8007e3c <RCCEx_PLL3_Config>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005a4e:	e006      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005a56:	e002      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8005a58:	bf00      	nop
 8005a5a:	e000      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8005a5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a5e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10d      	bne.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005a66:	4b85      	ldr	r3, [pc, #532]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005a68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005a6c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005a70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a78:	4a80      	ldr	r2, [pc, #512]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005a7a:	430b      	orrs	r3, r1
 8005a7c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005a80:	e003      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a82:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005a86:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005a8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a92:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005a96:	663b      	str	r3, [r7, #96]	; 0x60
 8005a98:	2300      	movs	r3, #0
 8005a9a:	667b      	str	r3, [r7, #100]	; 0x64
 8005a9c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	d046      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005aa6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005aaa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005aae:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005ab2:	d028      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005ab4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005ab8:	d821      	bhi.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005aba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005abe:	d022      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005ac0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ac4:	d81b      	bhi.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005ac6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005aca:	d01c      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005acc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ad0:	d815      	bhi.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ad6:	d008      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005adc:	d80f      	bhi.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d011      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae6:	d00e      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005ae8:	e009      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005aea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005aee:	3308      	adds	r3, #8
 8005af0:	4618      	mov	r0, r3
 8005af2:	f002 f90b 	bl	8007d0c <RCCEx_PLL2_Config>
 8005af6:	4603      	mov	r3, r0
 8005af8:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005afc:	e004      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005b04:	e000      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8005b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b08:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10d      	bne.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005b10:	4b5a      	ldr	r3, [pc, #360]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005b12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b16:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005b1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b22:	4a56      	ldr	r2, [pc, #344]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005b24:	430b      	orrs	r3, r1
 8005b26:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005b2a:	e003      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b2c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005b30:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005b34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005b40:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b42:	2300      	movs	r3, #0
 8005b44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b46:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	d03f      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005b50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b58:	2b04      	cmp	r3, #4
 8005b5a:	d81e      	bhi.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8005b5c:	a201      	add	r2, pc, #4	; (adr r2, 8005b64 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8005b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b62:	bf00      	nop
 8005b64:	08005ba3 	.word	0x08005ba3
 8005b68:	08005b79 	.word	0x08005b79
 8005b6c:	08005b87 	.word	0x08005b87
 8005b70:	08005ba3 	.word	0x08005ba3
 8005b74:	08005ba3 	.word	0x08005ba3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005b78:	4b40      	ldr	r3, [pc, #256]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7c:	4a3f      	ldr	r2, [pc, #252]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b82:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005b84:	e00e      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b8a:	332c      	adds	r3, #44	; 0x2c
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f002 f955 	bl	8007e3c <RCCEx_PLL3_Config>
 8005b92:	4603      	mov	r3, r0
 8005b94:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005b98:	e004      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005ba0:	e000      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8005ba2:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005ba4:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10d      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005bac:	4b33      	ldr	r3, [pc, #204]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005bae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005bb2:	f023 0107 	bic.w	r1, r3, #7
 8005bb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bbe:	4a2f      	ldr	r2, [pc, #188]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005bc0:	430b      	orrs	r3, r1
 8005bc2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005bc6:	e003      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005bcc:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005bd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd8:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005bdc:	653b      	str	r3, [r7, #80]	; 0x50
 8005bde:	2300      	movs	r3, #0
 8005be0:	657b      	str	r3, [r7, #84]	; 0x54
 8005be2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005be6:	460b      	mov	r3, r1
 8005be8:	4313      	orrs	r3, r2
 8005bea:	d04d      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005bec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bf4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bf8:	d028      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x610>
 8005bfa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bfe:	d821      	bhi.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005c00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c04:	d024      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005c06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c0a:	d81b      	bhi.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005c0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c10:	d00e      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8005c12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c16:	d815      	bhi.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d01b      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8005c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c20:	d110      	bne.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005c22:	4b16      	ldr	r3, [pc, #88]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c26:	4a15      	ldr	r2, [pc, #84]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c2c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005c2e:	e012      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c34:	332c      	adds	r3, #44	; 0x2c
 8005c36:	4618      	mov	r0, r3
 8005c38:	f002 f900 	bl	8007e3c <RCCEx_PLL3_Config>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005c42:	e008      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005c4a:	e004      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005c4c:	bf00      	nop
 8005c4e:	e002      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005c50:	bf00      	nop
 8005c52:	e000      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005c54:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005c56:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d110      	bne.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005c5e:	4b07      	ldr	r3, [pc, #28]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005c60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c64:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005c68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c70:	4a02      	ldr	r2, [pc, #8]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005c72:	430b      	orrs	r3, r1
 8005c74:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005c78:	e006      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005c7a:	bf00      	nop
 8005c7c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c80:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005c84:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c90:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005c94:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c96:	2300      	movs	r3, #0
 8005c98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c9a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	f000 80b5 	beq.w	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cac:	4b9d      	ldr	r3, [pc, #628]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cb2:	f003 0304 	and.w	r3, r3, #4
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d113      	bne.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cba:	4b9a      	ldr	r3, [pc, #616]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cc0:	4a98      	ldr	r2, [pc, #608]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005cc2:	f043 0304 	orr.w	r3, r3, #4
 8005cc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005cca:	4b96      	ldr	r3, [pc, #600]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cd0:	f003 0304 	and.w	r3, r3, #4
 8005cd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cd8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
      pwrclkchanged = SET;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005ce2:	4b91      	ldr	r3, [pc, #580]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce6:	4a90      	ldr	r2, [pc, #576]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005ce8:	f043 0301 	orr.w	r3, r3, #1
 8005cec:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005cee:	f7fc f8a7 	bl	8001e40 <HAL_GetTick>
 8005cf2:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005cf6:	e00b      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cf8:	f7fc f8a2 	bl	8001e40 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d903      	bls.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005d0e:	e005      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005d10:	4b85      	ldr	r3, [pc, #532]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d0ed      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8005d1c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d165      	bne.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d24:	4b7f      	ldr	r3, [pc, #508]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005d26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005d32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d023      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x746>
 8005d3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d3e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8005d42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d01b      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d4a:	4b76      	ldr	r3, [pc, #472]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005d4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d54:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d58:	4b72      	ldr	r3, [pc, #456]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005d5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d5e:	4a71      	ldr	r2, [pc, #452]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d64:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d68:	4b6e      	ldr	r3, [pc, #440]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005d6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d6e:	4a6d      	ldr	r2, [pc, #436]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d74:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d78:	4a6a      	ldr	r2, [pc, #424]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005d7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d7e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d019      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d8e:	f7fc f857 	bl	8001e40 <HAL_GetTick>
 8005d92:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d96:	e00d      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d98:	f7fc f852 	bl	8001e40 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005da2:	1ad2      	subs	r2, r2, r3
 8005da4:	f241 3388 	movw	r3, #5000	; 0x1388
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d903      	bls.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
            break;
 8005db2:	e006      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005db4:	4b5b      	ldr	r3, [pc, #364]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005db6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005dba:	f003 0302 	and.w	r3, r3, #2
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d0ea      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8005dc2:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10d      	bne.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005dca:	4b56      	ldr	r3, [pc, #344]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005dcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005dd0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005dd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005dd8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005ddc:	4a51      	ldr	r2, [pc, #324]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005dde:	430b      	orrs	r3, r1
 8005de0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005de4:	e008      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005de6:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005dea:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 8005dee:	e003      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df0:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005df4:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005df8:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d107      	bne.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e00:	4b48      	ldr	r3, [pc, #288]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e06:	4a47      	ldr	r2, [pc, #284]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005e08:	f023 0304 	bic.w	r3, r3, #4
 8005e0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005e10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e18:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005e1c:	643b      	str	r3, [r7, #64]	; 0x40
 8005e1e:	2300      	movs	r3, #0
 8005e20:	647b      	str	r3, [r7, #68]	; 0x44
 8005e22:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005e26:	460b      	mov	r3, r1
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	d042      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005e2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e34:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005e38:	d022      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8005e3a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005e3e:	d81b      	bhi.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005e40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e44:	d011      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8005e46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e4a:	d815      	bhi.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d019      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005e50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e54:	d110      	bne.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e5a:	3308      	adds	r3, #8
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f001 ff55 	bl	8007d0c <RCCEx_PLL2_Config>
 8005e62:	4603      	mov	r3, r0
 8005e64:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005e68:	e00d      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e6a:	4b2e      	ldr	r3, [pc, #184]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6e:	4a2d      	ldr	r2, [pc, #180]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e74:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005e76:	e006      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005e7e:	e002      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005e80:	bf00      	nop
 8005e82:	e000      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005e84:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005e86:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10d      	bne.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005e8e:	4b25      	ldr	r3, [pc, #148]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e94:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005e98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ea0:	4a20      	ldr	r2, [pc, #128]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005ea2:	430b      	orrs	r3, r1
 8005ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005ea8:	e003      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eaa:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005eae:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005eb2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eba:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005ebe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ec4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005ec8:	460b      	mov	r3, r1
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	d032      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005ece:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ed2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eda:	d00b      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ee0:	d804      	bhi.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d008      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eea:	d007      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005ef2:	e004      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005ef4:	bf00      	nop
 8005ef6:	e002      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005ef8:	bf00      	nop
 8005efa:	e000      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005efc:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005efe:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d112      	bne.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005f06:	4b07      	ldr	r3, [pc, #28]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005f08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005f0c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f18:	4a02      	ldr	r2, [pc, #8]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005f1a:	430b      	orrs	r3, r1
 8005f1c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005f20:	e008      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8005f22:	bf00      	nop
 8005f24:	46020c00 	.word	0x46020c00
 8005f28:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f2c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005f30:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005f34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005f40:	633b      	str	r3, [r7, #48]	; 0x30
 8005f42:	2300      	movs	r3, #0
 8005f44:	637b      	str	r3, [r7, #52]	; 0x34
 8005f46:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	d019      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005f50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f5c:	d105      	bne.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005f5e:	4b88      	ldr	r3, [pc, #544]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f62:	4a87      	ldr	r2, [pc, #540]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f68:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005f6a:	4b85      	ldr	r3, [pc, #532]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005f6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005f70:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005f74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f7c:	4a80      	ldr	r2, [pc, #512]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005f7e:	430b      	orrs	r3, r1
 8005f80:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005f84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005f90:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f92:	2300      	movs	r3, #0
 8005f94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f96:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	d00c      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005fa0:	4b77      	ldr	r3, [pc, #476]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fa6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005faa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005fae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005fb2:	4973      	ldr	r1, [pc, #460]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005fba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc2:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005fc6:	623b      	str	r3, [r7, #32]
 8005fc8:	2300      	movs	r3, #0
 8005fca:	627b      	str	r3, [r7, #36]	; 0x24
 8005fcc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	d00c      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005fd6:	4b6a      	ldr	r3, [pc, #424]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005fe0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005fe4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005fe8:	4965      	ldr	r1, [pc, #404]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005ff0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005ffc:	61bb      	str	r3, [r7, #24]
 8005ffe:	2300      	movs	r3, #0
 8006000:	61fb      	str	r3, [r7, #28]
 8006002:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006006:	460b      	mov	r3, r1
 8006008:	4313      	orrs	r3, r2
 800600a:	d00c      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800600c:	4b5c      	ldr	r3, [pc, #368]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800600e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006012:	f023 0218 	bic.w	r2, r3, #24
 8006016:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800601a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800601e:	4958      	ldr	r1, [pc, #352]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006020:	4313      	orrs	r3, r2
 8006022:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006026:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800602a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602e:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8006032:	613b      	str	r3, [r7, #16]
 8006034:	2300      	movs	r3, #0
 8006036:	617b      	str	r3, [r7, #20]
 8006038:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800603c:	460b      	mov	r3, r1
 800603e:	4313      	orrs	r3, r2
 8006040:	d032      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006042:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006046:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800604a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800604e:	d105      	bne.n	800605c <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006050:	4b4b      	ldr	r3, [pc, #300]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006054:	4a4a      	ldr	r2, [pc, #296]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800605a:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800605c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006060:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006064:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006068:	d108      	bne.n	800607c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800606a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800606e:	3308      	adds	r3, #8
 8006070:	4618      	mov	r0, r3
 8006072:	f001 fe4b 	bl	8007d0c <RCCEx_PLL2_Config>
 8006076:	4603      	mov	r3, r0
 8006078:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    }
    if (ret == HAL_OK)
 800607c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10d      	bne.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006084:	4b3e      	ldr	r3, [pc, #248]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006086:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800608a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800608e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006092:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006096:	493a      	ldr	r1, [pc, #232]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006098:	4313      	orrs	r3, r2
 800609a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800609e:	e003      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a0:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80060a4:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80060a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b0:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80060b4:	60bb      	str	r3, [r7, #8]
 80060b6:	2300      	movs	r3, #0
 80060b8:	60fb      	str	r3, [r7, #12]
 80060ba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80060be:	460b      	mov	r3, r1
 80060c0:	4313      	orrs	r3, r2
 80060c2:	d03a      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80060c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060d0:	d00e      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80060d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060d6:	d815      	bhi.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d017      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0xad0>
 80060dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060e0:	d110      	bne.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060e2:	4b27      	ldr	r3, [pc, #156]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80060e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e6:	4a26      	ldr	r2, [pc, #152]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80060e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060ec:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80060ee:	e00e      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80060f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060f4:	3308      	adds	r3, #8
 80060f6:	4618      	mov	r0, r3
 80060f8:	f001 fe08 	bl	8007d0c <RCCEx_PLL2_Config>
 80060fc:	4603      	mov	r3, r0
 80060fe:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006102:	e004      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800610a:	e000      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 800610c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800610e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10d      	bne.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006116:	4b1a      	ldr	r3, [pc, #104]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800611c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006120:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006128:	4915      	ldr	r1, [pc, #84]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800612a:	4313      	orrs	r3, r2
 800612c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8006130:	e003      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006132:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006136:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800613a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800613e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006142:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006146:	603b      	str	r3, [r7, #0]
 8006148:	2300      	movs	r3, #0
 800614a:	607b      	str	r3, [r7, #4]
 800614c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006150:	460b      	mov	r3, r1
 8006152:	4313      	orrs	r3, r2
 8006154:	d00c      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006156:	4b0a      	ldr	r3, [pc, #40]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006158:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800615c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006160:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006164:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006168:	4905      	ldr	r1, [pc, #20]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800616a:	4313      	orrs	r3, r2
 800616c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006170:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
}
 8006174:	4618      	mov	r0, r3
 8006176:	37e0      	adds	r7, #224	; 0xe0
 8006178:	46bd      	mov	sp, r7
 800617a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800617e:	bf00      	nop
 8006180:	46020c00 	.word	0x46020c00

08006184 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006184:	b480      	push	{r7}
 8006186:	b089      	sub	sp, #36	; 0x24
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800618c:	4ba6      	ldr	r3, [pc, #664]	; (8006428 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800618e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006194:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006196:	4ba4      	ldr	r3, [pc, #656]	; (8006428 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619a:	f003 0303 	and.w	r3, r3, #3
 800619e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80061a0:	4ba1      	ldr	r3, [pc, #644]	; (8006428 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80061a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a4:	0a1b      	lsrs	r3, r3, #8
 80061a6:	f003 030f 	and.w	r3, r3, #15
 80061aa:	3301      	adds	r3, #1
 80061ac:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80061ae:	4b9e      	ldr	r3, [pc, #632]	; (8006428 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80061b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b2:	091b      	lsrs	r3, r3, #4
 80061b4:	f003 0301 	and.w	r3, r3, #1
 80061b8:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80061ba:	4b9b      	ldr	r3, [pc, #620]	; (8006428 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80061bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061be:	08db      	lsrs	r3, r3, #3
 80061c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	fb02 f303 	mul.w	r3, r2, r3
 80061ca:	ee07 3a90 	vmov	s15, r3
 80061ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	2b03      	cmp	r3, #3
 80061da:	d062      	beq.n	80062a2 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	2b03      	cmp	r3, #3
 80061e0:	f200 8081 	bhi.w	80062e6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d024      	beq.n	8006234 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d17a      	bne.n	80062e6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	ee07 3a90 	vmov	s15, r3
 80061f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061fa:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800642c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80061fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006202:	4b89      	ldr	r3, [pc, #548]	; (8006428 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800620a:	ee07 3a90 	vmov	s15, r3
 800620e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006212:	ed97 6a02 	vldr	s12, [r7, #8]
 8006216:	eddf 5a86 	vldr	s11, [pc, #536]	; 8006430 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800621a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800621e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006226:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800622a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800622e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006232:	e08f      	b.n	8006354 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006234:	4b7c      	ldr	r3, [pc, #496]	; (8006428 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d005      	beq.n	800624c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006240:	4b79      	ldr	r3, [pc, #484]	; (8006428 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	0f1b      	lsrs	r3, r3, #28
 8006246:	f003 030f 	and.w	r3, r3, #15
 800624a:	e006      	b.n	800625a <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800624c:	4b76      	ldr	r3, [pc, #472]	; (8006428 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800624e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006252:	041b      	lsls	r3, r3, #16
 8006254:	0f1b      	lsrs	r3, r3, #28
 8006256:	f003 030f 	and.w	r3, r3, #15
 800625a:	4a76      	ldr	r2, [pc, #472]	; (8006434 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800625c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006260:	ee07 3a90 	vmov	s15, r3
 8006264:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	ee07 3a90 	vmov	s15, r3
 800626e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	ee07 3a90 	vmov	s15, r3
 800627c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006280:	ed97 6a02 	vldr	s12, [r7, #8]
 8006284:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8006430 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006288:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800628c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006290:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006294:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800629c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062a0:	e058      	b.n	8006354 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	ee07 3a90 	vmov	s15, r3
 80062a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ac:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800642c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80062b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062b4:	4b5c      	ldr	r3, [pc, #368]	; (8006428 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80062b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062bc:	ee07 3a90 	vmov	s15, r3
 80062c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80062c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80062c8:	eddf 5a59 	vldr	s11, [pc, #356]	; 8006430 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80062cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80062d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062e4:	e036      	b.n	8006354 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80062e6:	4b50      	ldr	r3, [pc, #320]	; (8006428 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d005      	beq.n	80062fe <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80062f2:	4b4d      	ldr	r3, [pc, #308]	; (8006428 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	0f1b      	lsrs	r3, r3, #28
 80062f8:	f003 030f 	and.w	r3, r3, #15
 80062fc:	e006      	b.n	800630c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80062fe:	4b4a      	ldr	r3, [pc, #296]	; (8006428 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006300:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006304:	041b      	lsls	r3, r3, #16
 8006306:	0f1b      	lsrs	r3, r3, #28
 8006308:	f003 030f 	and.w	r3, r3, #15
 800630c:	4a49      	ldr	r2, [pc, #292]	; (8006434 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800630e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006312:	ee07 3a90 	vmov	s15, r3
 8006316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	ee07 3a90 	vmov	s15, r3
 8006320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006324:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	ee07 3a90 	vmov	s15, r3
 800632e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006332:	ed97 6a02 	vldr	s12, [r7, #8]
 8006336:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006430 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800633a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800633e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006346:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800634a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800634e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006352:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006354:	4b34      	ldr	r3, [pc, #208]	; (8006428 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d017      	beq.n	8006390 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006360:	4b31      	ldr	r3, [pc, #196]	; (8006428 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006364:	0a5b      	lsrs	r3, r3, #9
 8006366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800636a:	ee07 3a90 	vmov	s15, r3
 800636e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006372:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006376:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800637a:	edd7 6a07 	vldr	s13, [r7, #28]
 800637e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006382:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006386:	ee17 2a90 	vmov	r2, s15
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	601a      	str	r2, [r3, #0]
 800638e:	e002      	b.n	8006396 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006396:	4b24      	ldr	r3, [pc, #144]	; (8006428 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d017      	beq.n	80063d2 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80063a2:	4b21      	ldr	r3, [pc, #132]	; (8006428 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80063a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a6:	0c1b      	lsrs	r3, r3, #16
 80063a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063ac:	ee07 3a90 	vmov	s15, r3
 80063b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80063b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063b8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80063bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80063c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063c8:	ee17 2a90 	vmov	r2, s15
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	605a      	str	r2, [r3, #4]
 80063d0:	e002      	b.n	80063d8 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80063d8:	4b13      	ldr	r3, [pc, #76]	; (8006428 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80063da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d017      	beq.n	8006414 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80063e4:	4b10      	ldr	r3, [pc, #64]	; (8006428 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80063e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e8:	0e1b      	lsrs	r3, r3, #24
 80063ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063ee:	ee07 3a90 	vmov	s15, r3
 80063f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80063f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063fa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80063fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006402:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006406:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800640a:	ee17 2a90 	vmov	r2, s15
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006412:	e002      	b.n	800641a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	609a      	str	r2, [r3, #8]
}
 800641a:	bf00      	nop
 800641c:	3724      	adds	r7, #36	; 0x24
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	46020c00 	.word	0x46020c00
 800642c:	4b742400 	.word	0x4b742400
 8006430:	46000000 	.word	0x46000000
 8006434:	0800a600 	.word	0x0800a600

08006438 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006438:	b480      	push	{r7}
 800643a:	b089      	sub	sp, #36	; 0x24
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006440:	4ba6      	ldr	r3, [pc, #664]	; (80066dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006448:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800644a:	4ba4      	ldr	r3, [pc, #656]	; (80066dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800644c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644e:	f003 0303 	and.w	r3, r3, #3
 8006452:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006454:	4ba1      	ldr	r3, [pc, #644]	; (80066dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006458:	0a1b      	lsrs	r3, r3, #8
 800645a:	f003 030f 	and.w	r3, r3, #15
 800645e:	3301      	adds	r3, #1
 8006460:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006462:	4b9e      	ldr	r3, [pc, #632]	; (80066dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006466:	091b      	lsrs	r3, r3, #4
 8006468:	f003 0301 	and.w	r3, r3, #1
 800646c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800646e:	4b9b      	ldr	r3, [pc, #620]	; (80066dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006472:	08db      	lsrs	r3, r3, #3
 8006474:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	fb02 f303 	mul.w	r3, r2, r3
 800647e:	ee07 3a90 	vmov	s15, r3
 8006482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006486:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	2b03      	cmp	r3, #3
 800648e:	d062      	beq.n	8006556 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	2b03      	cmp	r3, #3
 8006494:	f200 8081 	bhi.w	800659a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d024      	beq.n	80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d17a      	bne.n	800659a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	ee07 3a90 	vmov	s15, r3
 80064aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ae:	eddf 6a8c 	vldr	s13, [pc, #560]	; 80066e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80064b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064b6:	4b89      	ldr	r3, [pc, #548]	; (80066dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80064b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064be:	ee07 3a90 	vmov	s15, r3
 80064c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80064c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80064ca:	eddf 5a86 	vldr	s11, [pc, #536]	; 80066e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80064ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80064d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80064d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064da:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80064de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064e6:	e08f      	b.n	8006608 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80064e8:	4b7c      	ldr	r3, [pc, #496]	; (80066dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d005      	beq.n	8006500 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80064f4:	4b79      	ldr	r3, [pc, #484]	; (80066dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	0f1b      	lsrs	r3, r3, #28
 80064fa:	f003 030f 	and.w	r3, r3, #15
 80064fe:	e006      	b.n	800650e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8006500:	4b76      	ldr	r3, [pc, #472]	; (80066dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006502:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006506:	041b      	lsls	r3, r3, #16
 8006508:	0f1b      	lsrs	r3, r3, #28
 800650a:	f003 030f 	and.w	r3, r3, #15
 800650e:	4a76      	ldr	r2, [pc, #472]	; (80066e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006514:	ee07 3a90 	vmov	s15, r3
 8006518:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	ee07 3a90 	vmov	s15, r3
 8006522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	ee07 3a90 	vmov	s15, r3
 8006530:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006534:	ed97 6a02 	vldr	s12, [r7, #8]
 8006538:	eddf 5a6a 	vldr	s11, [pc, #424]	; 80066e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800653c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006540:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006544:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006548:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800654c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006550:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006554:	e058      	b.n	8006608 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	ee07 3a90 	vmov	s15, r3
 800655c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006560:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80066e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006564:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006568:	4b5c      	ldr	r3, [pc, #368]	; (80066dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800656a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800656c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006570:	ee07 3a90 	vmov	s15, r3
 8006574:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006578:	ed97 6a02 	vldr	s12, [r7, #8]
 800657c:	eddf 5a59 	vldr	s11, [pc, #356]	; 80066e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006580:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006584:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006588:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800658c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006594:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006598:	e036      	b.n	8006608 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800659a:	4b50      	ldr	r3, [pc, #320]	; (80066dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d005      	beq.n	80065b2 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80065a6:	4b4d      	ldr	r3, [pc, #308]	; (80066dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	0f1b      	lsrs	r3, r3, #28
 80065ac:	f003 030f 	and.w	r3, r3, #15
 80065b0:	e006      	b.n	80065c0 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80065b2:	4b4a      	ldr	r3, [pc, #296]	; (80066dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80065b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80065b8:	041b      	lsls	r3, r3, #16
 80065ba:	0f1b      	lsrs	r3, r3, #28
 80065bc:	f003 030f 	and.w	r3, r3, #15
 80065c0:	4a49      	ldr	r2, [pc, #292]	; (80066e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80065c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065c6:	ee07 3a90 	vmov	s15, r3
 80065ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	ee07 3a90 	vmov	s15, r3
 80065d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	ee07 3a90 	vmov	s15, r3
 80065e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80065ea:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80066e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80065ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80065fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006602:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006606:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006608:	4b34      	ldr	r3, [pc, #208]	; (80066dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800660a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d017      	beq.n	8006644 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006614:	4b31      	ldr	r3, [pc, #196]	; (80066dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006618:	0a5b      	lsrs	r3, r3, #9
 800661a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800661e:	ee07 3a90 	vmov	s15, r3
 8006622:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006626:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800662a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800662e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800663a:	ee17 2a90 	vmov	r2, s15
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	601a      	str	r2, [r3, #0]
 8006642:	e002      	b.n	800664a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800664a:	4b24      	ldr	r3, [pc, #144]	; (80066dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800664c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d017      	beq.n	8006686 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006656:	4b21      	ldr	r3, [pc, #132]	; (80066dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800665a:	0c1b      	lsrs	r3, r3, #16
 800665c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006660:	ee07 3a90 	vmov	s15, r3
 8006664:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006668:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800666c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006670:	edd7 6a07 	vldr	s13, [r7, #28]
 8006674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800667c:	ee17 2a90 	vmov	r2, s15
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	605a      	str	r2, [r3, #4]
 8006684:	e002      	b.n	800668c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800668c:	4b13      	ldr	r3, [pc, #76]	; (80066dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800668e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006690:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006694:	2b00      	cmp	r3, #0
 8006696:	d017      	beq.n	80066c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006698:	4b10      	ldr	r3, [pc, #64]	; (80066dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800669a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800669c:	0e1b      	lsrs	r3, r3, #24
 800669e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066a2:	ee07 3a90 	vmov	s15, r3
 80066a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80066aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066ae:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80066b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80066b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066be:	ee17 2a90 	vmov	r2, s15
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80066c6:	e002      	b.n	80066ce <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	609a      	str	r2, [r3, #8]
}
 80066ce:	bf00      	nop
 80066d0:	3724      	adds	r7, #36	; 0x24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	46020c00 	.word	0x46020c00
 80066e0:	4b742400 	.word	0x4b742400
 80066e4:	46000000 	.word	0x46000000
 80066e8:	0800a600 	.word	0x0800a600

080066ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b089      	sub	sp, #36	; 0x24
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80066f4:	4ba6      	ldr	r3, [pc, #664]	; (8006990 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80066f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066fc:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80066fe:	4ba4      	ldr	r3, [pc, #656]	; (8006990 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006702:	f003 0303 	and.w	r3, r3, #3
 8006706:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006708:	4ba1      	ldr	r3, [pc, #644]	; (8006990 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800670a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670c:	0a1b      	lsrs	r3, r3, #8
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	3301      	adds	r3, #1
 8006714:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8006716:	4b9e      	ldr	r3, [pc, #632]	; (8006990 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671a:	091b      	lsrs	r3, r3, #4
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006722:	4b9b      	ldr	r3, [pc, #620]	; (8006990 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006726:	08db      	lsrs	r3, r3, #3
 8006728:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	fb02 f303 	mul.w	r3, r2, r3
 8006732:	ee07 3a90 	vmov	s15, r3
 8006736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800673a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	2b03      	cmp	r3, #3
 8006742:	d062      	beq.n	800680a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	2b03      	cmp	r3, #3
 8006748:	f200 8081 	bhi.w	800684e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d024      	beq.n	800679c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	2b02      	cmp	r3, #2
 8006756:	d17a      	bne.n	800684e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	ee07 3a90 	vmov	s15, r3
 800675e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006762:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8006994 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8006766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800676a:	4b89      	ldr	r3, [pc, #548]	; (8006990 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800676c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800676e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006772:	ee07 3a90 	vmov	s15, r3
 8006776:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800677a:	ed97 6a02 	vldr	s12, [r7, #8]
 800677e:	eddf 5a86 	vldr	s11, [pc, #536]	; 8006998 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006782:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006786:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800678a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800678e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006796:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800679a:	e08f      	b.n	80068bc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800679c:	4b7c      	ldr	r3, [pc, #496]	; (8006990 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d005      	beq.n	80067b4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80067a8:	4b79      	ldr	r3, [pc, #484]	; (8006990 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	0f1b      	lsrs	r3, r3, #28
 80067ae:	f003 030f 	and.w	r3, r3, #15
 80067b2:	e006      	b.n	80067c2 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80067b4:	4b76      	ldr	r3, [pc, #472]	; (8006990 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80067b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80067ba:	041b      	lsls	r3, r3, #16
 80067bc:	0f1b      	lsrs	r3, r3, #28
 80067be:	f003 030f 	and.w	r3, r3, #15
 80067c2:	4a76      	ldr	r2, [pc, #472]	; (800699c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80067c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067c8:	ee07 3a90 	vmov	s15, r3
 80067cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	ee07 3a90 	vmov	s15, r3
 80067d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	ee07 3a90 	vmov	s15, r3
 80067e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80067ec:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8006998 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80067f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006804:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006808:	e058      	b.n	80068bc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	ee07 3a90 	vmov	s15, r3
 8006810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006814:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006994 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8006818:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800681c:	4b5c      	ldr	r3, [pc, #368]	; (8006990 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800681e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006824:	ee07 3a90 	vmov	s15, r3
 8006828:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800682c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006830:	eddf 5a59 	vldr	s11, [pc, #356]	; 8006998 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006834:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006838:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800683c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006840:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006848:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800684c:	e036      	b.n	80068bc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800684e:	4b50      	ldr	r3, [pc, #320]	; (8006990 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d005      	beq.n	8006866 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800685a:	4b4d      	ldr	r3, [pc, #308]	; (8006990 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	0f1b      	lsrs	r3, r3, #28
 8006860:	f003 030f 	and.w	r3, r3, #15
 8006864:	e006      	b.n	8006874 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8006866:	4b4a      	ldr	r3, [pc, #296]	; (8006990 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006868:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800686c:	041b      	lsls	r3, r3, #16
 800686e:	0f1b      	lsrs	r3, r3, #28
 8006870:	f003 030f 	and.w	r3, r3, #15
 8006874:	4a49      	ldr	r2, [pc, #292]	; (800699c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800687a:	ee07 3a90 	vmov	s15, r3
 800687e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	ee07 3a90 	vmov	s15, r3
 8006888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800688c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	ee07 3a90 	vmov	s15, r3
 8006896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800689a:	ed97 6a02 	vldr	s12, [r7, #8]
 800689e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006998 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80068a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80068b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068ba:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80068bc:	4b34      	ldr	r3, [pc, #208]	; (8006990 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80068be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d017      	beq.n	80068f8 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80068c8:	4b31      	ldr	r3, [pc, #196]	; (8006990 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80068ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068cc:	0a5b      	lsrs	r3, r3, #9
 80068ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068d2:	ee07 3a90 	vmov	s15, r3
 80068d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80068da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068de:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80068e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80068e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068ee:	ee17 2a90 	vmov	r2, s15
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	601a      	str	r2, [r3, #0]
 80068f6:	e002      	b.n	80068fe <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80068fe:	4b24      	ldr	r3, [pc, #144]	; (8006990 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d017      	beq.n	800693a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800690a:	4b21      	ldr	r3, [pc, #132]	; (8006990 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800690c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800690e:	0c1b      	lsrs	r3, r3, #16
 8006910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006914:	ee07 3a90 	vmov	s15, r3
 8006918:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800691c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006920:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006924:	edd7 6a07 	vldr	s13, [r7, #28]
 8006928:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800692c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006930:	ee17 2a90 	vmov	r2, s15
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	605a      	str	r2, [r3, #4]
 8006938:	e002      	b.n	8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006940:	4b13      	ldr	r3, [pc, #76]	; (8006990 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006944:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d017      	beq.n	800697c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800694c:	4b10      	ldr	r3, [pc, #64]	; (8006990 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800694e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006950:	0e1b      	lsrs	r3, r3, #24
 8006952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006956:	ee07 3a90 	vmov	s15, r3
 800695a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800695e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006962:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006966:	edd7 6a07 	vldr	s13, [r7, #28]
 800696a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800696e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006972:	ee17 2a90 	vmov	r2, s15
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800697a:	e002      	b.n	8006982 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	609a      	str	r2, [r3, #8]
}
 8006982:	bf00      	nop
 8006984:	3724      	adds	r7, #36	; 0x24
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	46020c00 	.word	0x46020c00
 8006994:	4b742400 	.word	0x4b742400
 8006998:	46000000 	.word	0x46000000
 800699c:	0800a600 	.word	0x0800a600

080069a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b08e      	sub	sp, #56	; 0x38
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80069aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069ae:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 80069b2:	430b      	orrs	r3, r1
 80069b4:	d145      	bne.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80069b6:	4baa      	ldr	r3, [pc, #680]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80069b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069c0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80069c2:	4ba7      	ldr	r3, [pc, #668]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80069c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069c8:	f003 0302 	and.w	r3, r3, #2
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d108      	bne.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80069d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069d6:	d104      	bne.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80069d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069dc:	637b      	str	r3, [r7, #52]	; 0x34
 80069de:	f001 b987 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80069e2:	4b9f      	ldr	r3, [pc, #636]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80069e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069f0:	d114      	bne.n	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80069f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069f8:	d110      	bne.n	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80069fa:	4b99      	ldr	r3, [pc, #612]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80069fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a08:	d103      	bne.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8006a0a:	23fa      	movs	r3, #250	; 0xfa
 8006a0c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a0e:	f001 b96f 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006a12:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006a16:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a18:	f001 b96a 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006a1c:	4b90      	ldr	r3, [pc, #576]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a28:	d107      	bne.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a30:	d103      	bne.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8006a32:	4b8c      	ldr	r3, [pc, #560]	; (8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8006a34:	637b      	str	r3, [r7, #52]	; 0x34
 8006a36:	f001 b95b 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a3e:	f001 b957 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006a42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a46:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006a4a:	430b      	orrs	r3, r1
 8006a4c:	d151      	bne.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006a4e:	4b84      	ldr	r3, [pc, #528]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006a50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006a54:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006a58:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5c:	2b80      	cmp	r3, #128	; 0x80
 8006a5e:	d035      	beq.n	8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8006a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a62:	2b80      	cmp	r3, #128	; 0x80
 8006a64:	d841      	bhi.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	2b60      	cmp	r3, #96	; 0x60
 8006a6a:	d02a      	beq.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6e:	2b60      	cmp	r3, #96	; 0x60
 8006a70:	d83b      	bhi.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a74:	2b40      	cmp	r3, #64	; 0x40
 8006a76:	d009      	beq.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7a:	2b40      	cmp	r3, #64	; 0x40
 8006a7c:	d835      	bhi.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00c      	beq.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a86:	2b20      	cmp	r3, #32
 8006a88:	d012      	beq.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006a8a:	e02e      	b.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7ff fb77 	bl	8006184 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a9a:	f001 b929 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a9e:	f107 0318 	add.w	r3, r7, #24
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7ff fcc8 	bl	8006438 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006aac:	f001 b920 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ab0:	f107 030c 	add.w	r3, r7, #12
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7ff fe19 	bl	80066ec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006abe:	f001 b917 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006ac2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006ac6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ac8:	f001 b912 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006acc:	4b64      	ldr	r3, [pc, #400]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ad8:	d103      	bne.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006ada:	4b63      	ldr	r3, [pc, #396]	; (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006adc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006ade:	f001 b907 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ae6:	f001 b903 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 8006aea:	2300      	movs	r3, #0
 8006aec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006aee:	f001 b8ff 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006af2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006af6:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006afa:	430b      	orrs	r3, r1
 8006afc:	d158      	bne.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006afe:	4b58      	ldr	r3, [pc, #352]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006b00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006b04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b08:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b10:	d03b      	beq.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b18:	d846      	bhi.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b20:	d02e      	beq.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8006b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b28:	d83e      	bhi.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b30:	d00b      	beq.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8006b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b38:	d836      	bhi.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00d      	beq.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b46:	d012      	beq.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006b48:	e02e      	b.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7ff fb18 	bl	8006184 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b58:	f001 b8ca 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b5c:	f107 0318 	add.w	r3, r7, #24
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7ff fc69 	bl	8006438 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b6a:	f001 b8c1 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b6e:	f107 030c 	add.w	r3, r7, #12
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7ff fdba 	bl	80066ec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b7c:	f001 b8b8 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006b80:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006b84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b86:	f001 b8b3 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b8a:	4b35      	ldr	r3, [pc, #212]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b96:	d103      	bne.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006b98:	4b33      	ldr	r3, [pc, #204]	; (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006b9a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b9c:	f001 b8a8 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ba4:	f001 b8a4 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bac:	f001 b8a0 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006bb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bb4:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8006bb8:	430b      	orrs	r3, r1
 8006bba:	d16e      	bne.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006bbc:	4b28      	ldr	r3, [pc, #160]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006bc2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006bc6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bca:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006bce:	d034      	beq.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006bd6:	d85c      	bhi.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8006bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bde:	d00b      	beq.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8006be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006be6:	d854      	bhi.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8006be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d016      	beq.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8006bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bf4:	d009      	beq.n	8006c0a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006bf6:	e04c      	b.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7ff fac1 	bl	8006184 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c06:	f001 b873 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c0a:	f107 0318 	add.w	r3, r7, #24
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7ff fc12 	bl	8006438 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c18:	f001 b86a 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006c1c:	4b10      	ldr	r3, [pc, #64]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c28:	d103      	bne.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8006c2a:	4b10      	ldr	r3, [pc, #64]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006c2c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006c2e:	f001 b85f 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006c32:	2300      	movs	r3, #0
 8006c34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c36:	f001 b85b 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006c3a:	4b09      	ldr	r3, [pc, #36]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0320 	and.w	r3, r3, #32
 8006c42:	2b20      	cmp	r3, #32
 8006c44:	d121      	bne.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c46:	4b06      	ldr	r3, [pc, #24]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00e      	beq.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8006c52:	4b03      	ldr	r3, [pc, #12]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	0e1b      	lsrs	r3, r3, #24
 8006c58:	f003 030f 	and.w	r3, r3, #15
 8006c5c:	e00f      	b.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8006c5e:	bf00      	nop
 8006c60:	46020c00 	.word	0x46020c00
 8006c64:	0007a120 	.word	0x0007a120
 8006c68:	00f42400 	.word	0x00f42400
 8006c6c:	02dc6c00 	.word	0x02dc6c00
 8006c70:	4ba7      	ldr	r3, [pc, #668]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006c72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c76:	041b      	lsls	r3, r3, #16
 8006c78:	0e1b      	lsrs	r3, r3, #24
 8006c7a:	f003 030f 	and.w	r3, r3, #15
 8006c7e:	4aa5      	ldr	r2, [pc, #660]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c84:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006c86:	f001 b833 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c8e:	f001 b82f 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8006c92:	2300      	movs	r3, #0
 8006c94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c96:	f001 b82b 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006c9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c9e:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8006ca2:	430b      	orrs	r3, r1
 8006ca4:	d17f      	bne.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006ca6:	4b9a      	ldr	r3, [pc, #616]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006ca8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cb0:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d165      	bne.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006cb8:	4b95      	ldr	r3, [pc, #596]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006cbe:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006cc2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006cca:	d034      	beq.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cce:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006cd2:	d853      	bhi.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cda:	d00b      	beq.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8006cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ce2:	d84b      	bhi.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d016      	beq.n	8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8006cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006cf0:	d009      	beq.n	8006d06 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8006cf2:	e043      	b.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7ff fa43 	bl	8006184 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d00:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006d02:	f000 bff5 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d06:	f107 0318 	add.w	r3, r7, #24
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7ff fb94 	bl	8006438 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006d14:	f000 bfec 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006d18:	4b7d      	ldr	r3, [pc, #500]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d24:	d103      	bne.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 8006d26:	4b7c      	ldr	r3, [pc, #496]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006d28:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006d2a:	f000 bfe1 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006d32:	f000 bfdd 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006d36:	4b76      	ldr	r3, [pc, #472]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0320 	and.w	r3, r3, #32
 8006d3e:	2b20      	cmp	r3, #32
 8006d40:	d118      	bne.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d42:	4b73      	ldr	r3, [pc, #460]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d005      	beq.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8006d4e:	4b70      	ldr	r3, [pc, #448]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	0e1b      	lsrs	r3, r3, #24
 8006d54:	f003 030f 	and.w	r3, r3, #15
 8006d58:	e006      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8006d5a:	4b6d      	ldr	r3, [pc, #436]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006d5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d60:	041b      	lsls	r3, r3, #16
 8006d62:	0e1b      	lsrs	r3, r3, #24
 8006d64:	f003 030f 	and.w	r3, r3, #15
 8006d68:	4a6a      	ldr	r2, [pc, #424]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d6e:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006d70:	f000 bfbe 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8006d74:	2300      	movs	r3, #0
 8006d76:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006d78:	f000 bfba 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006d80:	f000 bfb6 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d8a:	d108      	bne.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7ff f9f7 	bl	8006184 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	637b      	str	r3, [r7, #52]	; 0x34
 8006d9a:	f000 bfa9 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	637b      	str	r3, [r7, #52]	; 0x34
 8006da2:	f000 bfa5 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006da6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006daa:	1e51      	subs	r1, r2, #1
 8006dac:	430b      	orrs	r3, r1
 8006dae:	d136      	bne.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006db0:	4b57      	ldr	r3, [pc, #348]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006db6:	f003 0303 	and.w	r3, r3, #3
 8006dba:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d104      	bne.n	8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006dc2:	f7fe fb8d 	bl	80054e0 <HAL_RCC_GetPCLK2Freq>
 8006dc6:	6378      	str	r0, [r7, #52]	; 0x34
 8006dc8:	f000 bf92 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d104      	bne.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006dd2:	f7fe fa55 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 8006dd6:	6378      	str	r0, [r7, #52]	; 0x34
 8006dd8:	f000 bf8a 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006ddc:	4b4c      	ldr	r3, [pc, #304]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006de8:	d106      	bne.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8006dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d103      	bne.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8006df0:	4b4a      	ldr	r3, [pc, #296]	; (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006df2:	637b      	str	r3, [r7, #52]	; 0x34
 8006df4:	f000 bf7c 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006df8:	4b45      	ldr	r3, [pc, #276]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006dfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006dfe:	f003 0302 	and.w	r3, r3, #2
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d107      	bne.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8006e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e08:	2b03      	cmp	r3, #3
 8006e0a:	d104      	bne.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8006e0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e10:	637b      	str	r3, [r7, #52]	; 0x34
 8006e12:	f000 bf6d 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006e16:	2300      	movs	r3, #0
 8006e18:	637b      	str	r3, [r7, #52]	; 0x34
 8006e1a:	f000 bf69 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006e1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e22:	1e91      	subs	r1, r2, #2
 8006e24:	430b      	orrs	r3, r1
 8006e26:	d136      	bne.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006e28:	4b39      	ldr	r3, [pc, #228]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e2e:	f003 030c 	and.w	r3, r3, #12
 8006e32:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d104      	bne.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006e3a:	f7fe fb3d 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 8006e3e:	6378      	str	r0, [r7, #52]	; 0x34
 8006e40:	f000 bf56 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e46:	2b04      	cmp	r3, #4
 8006e48:	d104      	bne.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006e4a:	f7fe fa19 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 8006e4e:	6378      	str	r0, [r7, #52]	; 0x34
 8006e50:	f000 bf4e 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006e54:	4b2e      	ldr	r3, [pc, #184]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e60:	d106      	bne.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e64:	2b08      	cmp	r3, #8
 8006e66:	d103      	bne.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8006e68:	4b2c      	ldr	r3, [pc, #176]	; (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006e6a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e6c:	f000 bf40 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006e70:	4b27      	ldr	r3, [pc, #156]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006e72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d107      	bne.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e80:	2b0c      	cmp	r3, #12
 8006e82:	d104      	bne.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8006e84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e88:	637b      	str	r3, [r7, #52]	; 0x34
 8006e8a:	f000 bf31 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	637b      	str	r3, [r7, #52]	; 0x34
 8006e92:	f000 bf2d 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006e96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e9a:	1f11      	subs	r1, r2, #4
 8006e9c:	430b      	orrs	r3, r1
 8006e9e:	d13f      	bne.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006ea0:	4b1b      	ldr	r3, [pc, #108]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ea6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006eaa:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d104      	bne.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006eb2:	f7fe fb01 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 8006eb6:	6378      	str	r0, [r7, #52]	; 0x34
 8006eb8:	f000 bf1a 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebe:	2b10      	cmp	r3, #16
 8006ec0:	d104      	bne.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006ec2:	f7fe f9dd 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 8006ec6:	6378      	str	r0, [r7, #52]	; 0x34
 8006ec8:	f000 bf12 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006ecc:	4b10      	ldr	r3, [pc, #64]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ed8:	d106      	bne.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006edc:	2b20      	cmp	r3, #32
 8006ede:	d103      	bne.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8006ee0:	4b0e      	ldr	r3, [pc, #56]	; (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ee4:	f000 bf04 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006ee8:	4b09      	ldr	r3, [pc, #36]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006eea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006eee:	f003 0302 	and.w	r3, r3, #2
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d107      	bne.n	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef8:	2b30      	cmp	r3, #48	; 0x30
 8006efa:	d104      	bne.n	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8006efc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f00:	637b      	str	r3, [r7, #52]	; 0x34
 8006f02:	f000 bef5 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006f06:	2300      	movs	r3, #0
 8006f08:	637b      	str	r3, [r7, #52]	; 0x34
 8006f0a:	f000 bef1 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006f0e:	bf00      	nop
 8006f10:	46020c00 	.word	0x46020c00
 8006f14:	0800a600 	.word	0x0800a600
 8006f18:	02dc6c00 	.word	0x02dc6c00
 8006f1c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f24:	f1a2 0108 	sub.w	r1, r2, #8
 8006f28:	430b      	orrs	r3, r1
 8006f2a:	d136      	bne.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006f2c:	4ba4      	ldr	r3, [pc, #656]	; (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f36:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d104      	bne.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006f3e:	f7fe fabb 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 8006f42:	6378      	str	r0, [r7, #52]	; 0x34
 8006f44:	f000 bed4 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4a:	2b40      	cmp	r3, #64	; 0x40
 8006f4c:	d104      	bne.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006f4e:	f7fe f997 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 8006f52:	6378      	str	r0, [r7, #52]	; 0x34
 8006f54:	f000 becc 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006f58:	4b99      	ldr	r3, [pc, #612]	; (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f64:	d106      	bne.n	8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8006f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f68:	2b80      	cmp	r3, #128	; 0x80
 8006f6a:	d103      	bne.n	8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8006f6c:	4b95      	ldr	r3, [pc, #596]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006f6e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f70:	f000 bebe 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006f74:	4b92      	ldr	r3, [pc, #584]	; (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f7a:	f003 0302 	and.w	r3, r3, #2
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d107      	bne.n	8006f92 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8006f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f84:	2bc0      	cmp	r3, #192	; 0xc0
 8006f86:	d104      	bne.n	8006f92 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8006f88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f8c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f8e:	f000 beaf 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006f92:	2300      	movs	r3, #0
 8006f94:	637b      	str	r3, [r7, #52]	; 0x34
 8006f96:	f000 beab 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006f9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f9e:	f1a2 0110 	sub.w	r1, r2, #16
 8006fa2:	430b      	orrs	r3, r1
 8006fa4:	d139      	bne.n	800701a <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006fa6:	4b86      	ldr	r3, [pc, #536]	; (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fb0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d104      	bne.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006fb8:	f7fe fa7e 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 8006fbc:	6378      	str	r0, [r7, #52]	; 0x34
 8006fbe:	f000 be97 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fc8:	d104      	bne.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006fca:	f7fe f959 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 8006fce:	6378      	str	r0, [r7, #52]	; 0x34
 8006fd0:	f000 be8e 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006fd4:	4b7a      	ldr	r3, [pc, #488]	; (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fe0:	d107      	bne.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8006fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fe8:	d103      	bne.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 8006fea:	4b76      	ldr	r3, [pc, #472]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006fec:	637b      	str	r3, [r7, #52]	; 0x34
 8006fee:	f000 be7f 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006ff2:	4b73      	ldr	r3, [pc, #460]	; (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006ff4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ff8:	f003 0302 	and.w	r3, r3, #2
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d108      	bne.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8007000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007002:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007006:	d104      	bne.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8007008:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800700c:	637b      	str	r3, [r7, #52]	; 0x34
 800700e:	f000 be6f 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007012:	2300      	movs	r3, #0
 8007014:	637b      	str	r3, [r7, #52]	; 0x34
 8007016:	f000 be6b 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800701a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800701e:	f1a2 0120 	sub.w	r1, r2, #32
 8007022:	430b      	orrs	r3, r1
 8007024:	d158      	bne.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007026:	4b66      	ldr	r3, [pc, #408]	; (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007028:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800702c:	f003 0307 	and.w	r3, r3, #7
 8007030:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007034:	2b00      	cmp	r3, #0
 8007036:	d104      	bne.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007038:	f7fe fa66 	bl	8005508 <HAL_RCC_GetPCLK3Freq>
 800703c:	6378      	str	r0, [r7, #52]	; 0x34
 800703e:	f000 be57 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007044:	2b01      	cmp	r3, #1
 8007046:	d104      	bne.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007048:	f7fe f91a 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 800704c:	6378      	str	r0, [r7, #52]	; 0x34
 800704e:	f000 be4f 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007052:	4b5b      	ldr	r3, [pc, #364]	; (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800705a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800705e:	d106      	bne.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8007060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007062:	2b02      	cmp	r3, #2
 8007064:	d103      	bne.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8007066:	4b57      	ldr	r3, [pc, #348]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007068:	637b      	str	r3, [r7, #52]	; 0x34
 800706a:	f000 be41 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800706e:	4b54      	ldr	r3, [pc, #336]	; (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007070:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007074:	f003 0302 	and.w	r3, r3, #2
 8007078:	2b02      	cmp	r3, #2
 800707a:	d107      	bne.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 800707c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707e:	2b03      	cmp	r3, #3
 8007080:	d104      	bne.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8007082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007086:	637b      	str	r3, [r7, #52]	; 0x34
 8007088:	f000 be32 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800708c:	4b4c      	ldr	r3, [pc, #304]	; (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0320 	and.w	r3, r3, #32
 8007094:	2b20      	cmp	r3, #32
 8007096:	d11b      	bne.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8007098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709a:	2b04      	cmp	r3, #4
 800709c:	d118      	bne.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800709e:	4b48      	ldr	r3, [pc, #288]	; (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d005      	beq.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 80070aa:	4b45      	ldr	r3, [pc, #276]	; (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	0e1b      	lsrs	r3, r3, #24
 80070b0:	f003 030f 	and.w	r3, r3, #15
 80070b4:	e006      	b.n	80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80070b6:	4b42      	ldr	r3, [pc, #264]	; (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80070b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80070bc:	041b      	lsls	r3, r3, #16
 80070be:	0e1b      	lsrs	r3, r3, #24
 80070c0:	f003 030f 	and.w	r3, r3, #15
 80070c4:	4a40      	ldr	r2, [pc, #256]	; (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80070c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070ca:	637b      	str	r3, [r7, #52]	; 0x34
 80070cc:	f000 be10 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80070d0:	2300      	movs	r3, #0
 80070d2:	637b      	str	r3, [r7, #52]	; 0x34
 80070d4:	f000 be0c 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80070d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070dc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80070e0:	430b      	orrs	r3, r1
 80070e2:	d173      	bne.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80070e4:	4b36      	ldr	r3, [pc, #216]	; (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80070e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80070ea:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80070ee:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80070f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070f6:	d104      	bne.n	8007102 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80070f8:	f7fe f8c2 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 80070fc:	6378      	str	r0, [r7, #52]	; 0x34
 80070fe:	f000 bdf7 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007108:	d108      	bne.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800710a:	f107 0318 	add.w	r3, r7, #24
 800710e:	4618      	mov	r0, r3
 8007110:	f7ff f992 	bl	8006438 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007114:	6a3b      	ldr	r3, [r7, #32]
 8007116:	637b      	str	r3, [r7, #52]	; 0x34
 8007118:	f000 bdea 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800711c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711e:	2b00      	cmp	r3, #0
 8007120:	d104      	bne.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007122:	f7fe f9af 	bl	8005484 <HAL_RCC_GetHCLKFreq>
 8007126:	6378      	str	r0, [r7, #52]	; 0x34
 8007128:	f000 bde2 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800712c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007132:	d122      	bne.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007134:	4b22      	ldr	r3, [pc, #136]	; (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0320 	and.w	r3, r3, #32
 800713c:	2b20      	cmp	r3, #32
 800713e:	d118      	bne.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007140:	4b1f      	ldr	r3, [pc, #124]	; (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d005      	beq.n	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 800714c:	4b1c      	ldr	r3, [pc, #112]	; (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	0e1b      	lsrs	r3, r3, #24
 8007152:	f003 030f 	and.w	r3, r3, #15
 8007156:	e006      	b.n	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8007158:	4b19      	ldr	r3, [pc, #100]	; (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800715a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800715e:	041b      	lsls	r3, r3, #16
 8007160:	0e1b      	lsrs	r3, r3, #24
 8007162:	f003 030f 	and.w	r3, r3, #15
 8007166:	4a18      	ldr	r2, [pc, #96]	; (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8007168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800716c:	637b      	str	r3, [r7, #52]	; 0x34
 800716e:	f000 bdbf 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8007172:	2300      	movs	r3, #0
 8007174:	637b      	str	r3, [r7, #52]	; 0x34
 8007176:	f000 bdbb 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800717a:	4b11      	ldr	r3, [pc, #68]	; (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007182:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007186:	d107      	bne.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8007188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800718e:	d103      	bne.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8007190:	4b0c      	ldr	r3, [pc, #48]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007192:	637b      	str	r3, [r7, #52]	; 0x34
 8007194:	f000 bdac 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007198:	4b09      	ldr	r3, [pc, #36]	; (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071a4:	d107      	bne.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80071a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071ac:	d103      	bne.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 80071ae:	4b05      	ldr	r3, [pc, #20]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80071b0:	637b      	str	r3, [r7, #52]	; 0x34
 80071b2:	f000 bd9d 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80071b6:	2300      	movs	r3, #0
 80071b8:	637b      	str	r3, [r7, #52]	; 0x34
 80071ba:	f000 bd99 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80071be:	bf00      	nop
 80071c0:	46020c00 	.word	0x46020c00
 80071c4:	00f42400 	.word	0x00f42400
 80071c8:	0800a600 	.word	0x0800a600
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80071cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071d0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80071d4:	430b      	orrs	r3, r1
 80071d6:	d158      	bne.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80071d8:	4bad      	ldr	r3, [pc, #692]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80071da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80071de:	f003 0307 	and.w	r3, r3, #7
 80071e2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80071e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e6:	2b04      	cmp	r3, #4
 80071e8:	d84b      	bhi.n	8007282 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80071ea:	a201      	add	r2, pc, #4	; (adr r2, 80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80071ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f0:	08007229 	.word	0x08007229
 80071f4:	08007205 	.word	0x08007205
 80071f8:	08007217 	.word	0x08007217
 80071fc:	08007233 	.word	0x08007233
 8007200:	0800723d 	.word	0x0800723d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007208:	4618      	mov	r0, r3
 800720a:	f7fe ffbb 	bl	8006184 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007210:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007212:	f000 bd6d 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007216:	f107 030c 	add.w	r3, r7, #12
 800721a:	4618      	mov	r0, r3
 800721c:	f7ff fa66 	bl	80066ec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007224:	f000 bd64 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007228:	f7fe f92c 	bl	8005484 <HAL_RCC_GetHCLKFreq>
 800722c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800722e:	f000 bd5f 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007232:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007236:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007238:	f000 bd5a 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800723c:	4b94      	ldr	r3, [pc, #592]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0320 	and.w	r3, r3, #32
 8007244:	2b20      	cmp	r3, #32
 8007246:	d118      	bne.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007248:	4b91      	ldr	r3, [pc, #580]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007250:	2b00      	cmp	r3, #0
 8007252:	d005      	beq.n	8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8007254:	4b8e      	ldr	r3, [pc, #568]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	0e1b      	lsrs	r3, r3, #24
 800725a:	f003 030f 	and.w	r3, r3, #15
 800725e:	e006      	b.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8007260:	4b8b      	ldr	r3, [pc, #556]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007262:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007266:	041b      	lsls	r3, r3, #16
 8007268:	0e1b      	lsrs	r3, r3, #24
 800726a:	f003 030f 	and.w	r3, r3, #15
 800726e:	4a89      	ldr	r2, [pc, #548]	; (8007494 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007274:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007276:	f000 bd3b 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800727a:	2300      	movs	r3, #0
 800727c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800727e:	f000 bd37 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007282:	2300      	movs	r3, #0
 8007284:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007286:	f000 bd33 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800728a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800728e:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8007292:	430b      	orrs	r3, r1
 8007294:	d167      	bne.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007296:	4b7e      	ldr	r3, [pc, #504]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007298:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800729c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80072a0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80072a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072a8:	d036      	beq.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 80072aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072b0:	d855      	bhi.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80072b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80072b8:	d029      	beq.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80072ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80072c0:	d84d      	bhi.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80072c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072c8:	d013      	beq.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 80072ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072d0:	d845      	bhi.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80072d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d015      	beq.n	8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80072d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072de:	d13e      	bne.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7fe ff4d 	bl	8006184 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80072ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072ee:	f000 bcff 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072f2:	f107 030c 	add.w	r3, r7, #12
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7ff f9f8 	bl	80066ec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007300:	f000 bcf6 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007304:	f7fe f8be 	bl	8005484 <HAL_RCC_GetHCLKFreq>
 8007308:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800730a:	f000 bcf1 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800730e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007312:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007314:	f000 bcec 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007318:	4b5d      	ldr	r3, [pc, #372]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 0320 	and.w	r3, r3, #32
 8007320:	2b20      	cmp	r3, #32
 8007322:	d118      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007324:	4b5a      	ldr	r3, [pc, #360]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d005      	beq.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8007330:	4b57      	ldr	r3, [pc, #348]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	0e1b      	lsrs	r3, r3, #24
 8007336:	f003 030f 	and.w	r3, r3, #15
 800733a:	e006      	b.n	800734a <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800733c:	4b54      	ldr	r3, [pc, #336]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800733e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007342:	041b      	lsls	r3, r3, #16
 8007344:	0e1b      	lsrs	r3, r3, #24
 8007346:	f003 030f 	and.w	r3, r3, #15
 800734a:	4a52      	ldr	r2, [pc, #328]	; (8007494 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800734c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007350:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007352:	f000 bccd 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007356:	2300      	movs	r3, #0
 8007358:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800735a:	f000 bcc9 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007362:	f000 bcc5 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007366:	e9d7 2300 	ldrd	r2, r3, [r7]
 800736a:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800736e:	430b      	orrs	r3, r1
 8007370:	d14c      	bne.n	800740c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007372:	4b47      	ldr	r3, [pc, #284]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007378:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800737c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800737e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007380:	2b00      	cmp	r3, #0
 8007382:	d104      	bne.n	800738e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007384:	f7fe f898 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 8007388:	6378      	str	r0, [r7, #52]	; 0x34
 800738a:	f000 bcb1 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800738e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007394:	d104      	bne.n	80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007396:	f7fd ff73 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 800739a:	6378      	str	r0, [r7, #52]	; 0x34
 800739c:	f000 bca8 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80073a0:	4b3b      	ldr	r3, [pc, #236]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073ac:	d107      	bne.n	80073be <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 80073ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073b4:	d103      	bne.n	80073be <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 80073b6:	4b38      	ldr	r3, [pc, #224]	; (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80073b8:	637b      	str	r3, [r7, #52]	; 0x34
 80073ba:	f000 bc99 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80073be:	4b34      	ldr	r3, [pc, #208]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0320 	and.w	r3, r3, #32
 80073c6:	2b20      	cmp	r3, #32
 80073c8:	d11c      	bne.n	8007404 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80073ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073d0:	d118      	bne.n	8007404 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80073d2:	4b2f      	ldr	r3, [pc, #188]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d005      	beq.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80073de:	4b2c      	ldr	r3, [pc, #176]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	0e1b      	lsrs	r3, r3, #24
 80073e4:	f003 030f 	and.w	r3, r3, #15
 80073e8:	e006      	b.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 80073ea:	4b29      	ldr	r3, [pc, #164]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80073ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80073f0:	041b      	lsls	r3, r3, #16
 80073f2:	0e1b      	lsrs	r3, r3, #24
 80073f4:	f003 030f 	and.w	r3, r3, #15
 80073f8:	4a26      	ldr	r2, [pc, #152]	; (8007494 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80073fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007400:	f000 bc76 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007404:	2300      	movs	r3, #0
 8007406:	637b      	str	r3, [r7, #52]	; 0x34
 8007408:	f000 bc72 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800740c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007410:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8007414:	430b      	orrs	r3, r1
 8007416:	d152      	bne.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007418:	4b1d      	ldr	r3, [pc, #116]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800741a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800741e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007422:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007426:	2b00      	cmp	r3, #0
 8007428:	d104      	bne.n	8007434 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800742a:	f7fe f845 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 800742e:	6378      	str	r0, [r7, #52]	; 0x34
 8007430:	f000 bc5e 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800743a:	d104      	bne.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800743c:	f7fd ff20 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 8007440:	6378      	str	r0, [r7, #52]	; 0x34
 8007442:	f000 bc55 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007446:	4b12      	ldr	r3, [pc, #72]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800744e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007452:	d107      	bne.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8007454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800745a:	d103      	bne.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 800745c:	4b0e      	ldr	r3, [pc, #56]	; (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800745e:	637b      	str	r3, [r7, #52]	; 0x34
 8007460:	f000 bc46 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8007464:	4b0a      	ldr	r3, [pc, #40]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0320 	and.w	r3, r3, #32
 800746c:	2b20      	cmp	r3, #32
 800746e:	d122      	bne.n	80074b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8007470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007472:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007476:	d11e      	bne.n	80074b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007478:	4b05      	ldr	r3, [pc, #20]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00b      	beq.n	800749c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8007484:	4b02      	ldr	r3, [pc, #8]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	0e1b      	lsrs	r3, r3, #24
 800748a:	f003 030f 	and.w	r3, r3, #15
 800748e:	e00c      	b.n	80074aa <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8007490:	46020c00 	.word	0x46020c00
 8007494:	0800a600 	.word	0x0800a600
 8007498:	00f42400 	.word	0x00f42400
 800749c:	4ba1      	ldr	r3, [pc, #644]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800749e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80074a2:	041b      	lsls	r3, r3, #16
 80074a4:	0e1b      	lsrs	r3, r3, #24
 80074a6:	f003 030f 	and.w	r3, r3, #15
 80074aa:	4a9f      	ldr	r2, [pc, #636]	; (8007728 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80074ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074b0:	637b      	str	r3, [r7, #52]	; 0x34
 80074b2:	f000 bc1d 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80074b6:	2300      	movs	r3, #0
 80074b8:	637b      	str	r3, [r7, #52]	; 0x34
 80074ba:	f000 bc19 	b.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80074be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074c2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80074c6:	430b      	orrs	r3, r1
 80074c8:	d151      	bne.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80074ca:	4b96      	ldr	r3, [pc, #600]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80074cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80074d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80074d4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80074d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d8:	2bc0      	cmp	r3, #192	; 0xc0
 80074da:	d024      	beq.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 80074dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074de:	2bc0      	cmp	r3, #192	; 0xc0
 80074e0:	d842      	bhi.n	8007568 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80074e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e4:	2b80      	cmp	r3, #128	; 0x80
 80074e6:	d00d      	beq.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80074e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ea:	2b80      	cmp	r3, #128	; 0x80
 80074ec:	d83c      	bhi.n	8007568 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d003      	beq.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 80074f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f6:	2b40      	cmp	r3, #64	; 0x40
 80074f8:	d011      	beq.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 80074fa:	e035      	b.n	8007568 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80074fc:	f7fe f804 	bl	8005508 <HAL_RCC_GetPCLK3Freq>
 8007500:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007502:	e3f5      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007504:	4b87      	ldr	r3, [pc, #540]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800750c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007510:	d102      	bne.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 8007512:	4b86      	ldr	r3, [pc, #536]	; (800772c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007514:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007516:	e3eb      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007518:	2300      	movs	r3, #0
 800751a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800751c:	e3e8      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800751e:	f7fd feaf 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 8007522:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007524:	e3e4      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007526:	4b7f      	ldr	r3, [pc, #508]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 0320 	and.w	r3, r3, #32
 800752e:	2b20      	cmp	r3, #32
 8007530:	d117      	bne.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007532:	4b7c      	ldr	r3, [pc, #496]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800753a:	2b00      	cmp	r3, #0
 800753c:	d005      	beq.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 800753e:	4b79      	ldr	r3, [pc, #484]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	0e1b      	lsrs	r3, r3, #24
 8007544:	f003 030f 	and.w	r3, r3, #15
 8007548:	e006      	b.n	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 800754a:	4b76      	ldr	r3, [pc, #472]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800754c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007550:	041b      	lsls	r3, r3, #16
 8007552:	0e1b      	lsrs	r3, r3, #24
 8007554:	f003 030f 	and.w	r3, r3, #15
 8007558:	4a73      	ldr	r2, [pc, #460]	; (8007728 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800755a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800755e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007560:	e3c6      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007562:	2300      	movs	r3, #0
 8007564:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007566:	e3c3      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8007568:	2300      	movs	r3, #0
 800756a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800756c:	e3c0      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800756e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007572:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8007576:	430b      	orrs	r3, r1
 8007578:	d147      	bne.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800757a:	4b6a      	ldr	r3, [pc, #424]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800757c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007580:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007584:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007588:	2b00      	cmp	r3, #0
 800758a:	d103      	bne.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800758c:	f7fd ff94 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 8007590:	6378      	str	r0, [r7, #52]	; 0x34
 8007592:	e3ad      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007596:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800759a:	d103      	bne.n	80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800759c:	f7fd fe70 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 80075a0:	6378      	str	r0, [r7, #52]	; 0x34
 80075a2:	e3a5      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80075a4:	4b5f      	ldr	r3, [pc, #380]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075b0:	d106      	bne.n	80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 80075b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075b8:	d102      	bne.n	80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 80075ba:	4b5c      	ldr	r3, [pc, #368]	; (800772c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80075bc:	637b      	str	r3, [r7, #52]	; 0x34
 80075be:	e397      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80075c0:	4b58      	ldr	r3, [pc, #352]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0320 	and.w	r3, r3, #32
 80075c8:	2b20      	cmp	r3, #32
 80075ca:	d11b      	bne.n	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 80075cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80075d2:	d117      	bne.n	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80075d4:	4b53      	ldr	r3, [pc, #332]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d005      	beq.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 80075e0:	4b50      	ldr	r3, [pc, #320]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	0e1b      	lsrs	r3, r3, #24
 80075e6:	f003 030f 	and.w	r3, r3, #15
 80075ea:	e006      	b.n	80075fa <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 80075ec:	4b4d      	ldr	r3, [pc, #308]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80075ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80075f2:	041b      	lsls	r3, r3, #16
 80075f4:	0e1b      	lsrs	r3, r3, #24
 80075f6:	f003 030f 	and.w	r3, r3, #15
 80075fa:	4a4b      	ldr	r2, [pc, #300]	; (8007728 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80075fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007600:	637b      	str	r3, [r7, #52]	; 0x34
 8007602:	e375      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007604:	2300      	movs	r3, #0
 8007606:	637b      	str	r3, [r7, #52]	; 0x34
 8007608:	e372      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800760a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800760e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007612:	430b      	orrs	r3, r1
 8007614:	d164      	bne.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007616:	4b43      	ldr	r3, [pc, #268]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007618:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800761c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007620:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8007622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007624:	2b00      	cmp	r3, #0
 8007626:	d120      	bne.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007628:	4b3e      	ldr	r3, [pc, #248]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 0320 	and.w	r3, r3, #32
 8007630:	2b20      	cmp	r3, #32
 8007632:	d117      	bne.n	8007664 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007634:	4b3b      	ldr	r3, [pc, #236]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d005      	beq.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8007640:	4b38      	ldr	r3, [pc, #224]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	0e1b      	lsrs	r3, r3, #24
 8007646:	f003 030f 	and.w	r3, r3, #15
 800764a:	e006      	b.n	800765a <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 800764c:	4b35      	ldr	r3, [pc, #212]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800764e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007652:	041b      	lsls	r3, r3, #16
 8007654:	0e1b      	lsrs	r3, r3, #24
 8007656:	f003 030f 	and.w	r3, r3, #15
 800765a:	4a33      	ldr	r2, [pc, #204]	; (8007728 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800765c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007660:	637b      	str	r3, [r7, #52]	; 0x34
 8007662:	e345      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8007664:	2300      	movs	r3, #0
 8007666:	637b      	str	r3, [r7, #52]	; 0x34
 8007668:	e342      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800766a:	4b2e      	ldr	r3, [pc, #184]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800766c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007674:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007678:	d112      	bne.n	80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 800767a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007680:	d10e      	bne.n	80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007682:	4b28      	ldr	r3, [pc, #160]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800768c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007690:	d102      	bne.n	8007698 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8007692:	23fa      	movs	r3, #250	; 0xfa
 8007694:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007696:	e32b      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8007698:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800769c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800769e:	e327      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80076a0:	4b20      	ldr	r3, [pc, #128]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076ac:	d106      	bne.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 80076ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076b4:	d102      	bne.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 80076b6:	4b1d      	ldr	r3, [pc, #116]	; (800772c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80076b8:	637b      	str	r3, [r7, #52]	; 0x34
 80076ba:	e319      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80076bc:	4b19      	ldr	r3, [pc, #100]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80076be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076c2:	f003 0302 	and.w	r3, r3, #2
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d107      	bne.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 80076ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076d0:	d103      	bne.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 80076d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076d6:	637b      	str	r3, [r7, #52]	; 0x34
 80076d8:	e30a      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80076da:	2300      	movs	r3, #0
 80076dc:	637b      	str	r3, [r7, #52]	; 0x34
 80076de:	e307      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80076e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076e4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80076e8:	430b      	orrs	r3, r1
 80076ea:	d16b      	bne.n	80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80076ec:	4b0d      	ldr	r3, [pc, #52]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80076ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80076f2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80076f6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80076f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d127      	bne.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80076fe:	4b09      	ldr	r3, [pc, #36]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0320 	and.w	r3, r3, #32
 8007706:	2b20      	cmp	r3, #32
 8007708:	d11e      	bne.n	8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800770a:	4b06      	ldr	r3, [pc, #24]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00c      	beq.n	8007730 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8007716:	4b03      	ldr	r3, [pc, #12]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	0e1b      	lsrs	r3, r3, #24
 800771c:	f003 030f 	and.w	r3, r3, #15
 8007720:	e00d      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8007722:	bf00      	nop
 8007724:	46020c00 	.word	0x46020c00
 8007728:	0800a600 	.word	0x0800a600
 800772c:	00f42400 	.word	0x00f42400
 8007730:	4b94      	ldr	r3, [pc, #592]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007732:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007736:	041b      	lsls	r3, r3, #16
 8007738:	0e1b      	lsrs	r3, r3, #24
 800773a:	f003 030f 	and.w	r3, r3, #15
 800773e:	4a92      	ldr	r2, [pc, #584]	; (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8007740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007744:	637b      	str	r3, [r7, #52]	; 0x34
 8007746:	e2d3      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8007748:	2300      	movs	r3, #0
 800774a:	637b      	str	r3, [r7, #52]	; 0x34
 800774c:	e2d0      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800774e:	4b8d      	ldr	r3, [pc, #564]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007750:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007754:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007758:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800775c:	d112      	bne.n	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 800775e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007764:	d10e      	bne.n	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007766:	4b87      	ldr	r3, [pc, #540]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007768:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800776c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007770:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007774:	d102      	bne.n	800777c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 8007776:	23fa      	movs	r3, #250	; 0xfa
 8007778:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800777a:	e2b9      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800777c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007780:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007782:	e2b5      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007784:	4b7f      	ldr	r3, [pc, #508]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800778c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007790:	d106      	bne.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8007792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007794:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007798:	d102      	bne.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 800779a:	4b7c      	ldr	r3, [pc, #496]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800779c:	637b      	str	r3, [r7, #52]	; 0x34
 800779e:	e2a7      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80077a0:	4b78      	ldr	r3, [pc, #480]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80077a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077a6:	f003 0302 	and.w	r3, r3, #2
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d107      	bne.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 80077ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80077b4:	d103      	bne.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 80077b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077ba:	637b      	str	r3, [r7, #52]	; 0x34
 80077bc:	e298      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80077be:	2300      	movs	r3, #0
 80077c0:	637b      	str	r3, [r7, #52]	; 0x34
 80077c2:	e295      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80077c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077c8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80077cc:	430b      	orrs	r3, r1
 80077ce:	d147      	bne.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80077d0:	4b6c      	ldr	r3, [pc, #432]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80077d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80077d6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80077da:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80077dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d103      	bne.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80077e2:	f7fd fe69 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 80077e6:	6378      	str	r0, [r7, #52]	; 0x34
 80077e8:	e282      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80077ea:	4b66      	ldr	r3, [pc, #408]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80077ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077f8:	d112      	bne.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 80077fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007800:	d10e      	bne.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007802:	4b60      	ldr	r3, [pc, #384]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007804:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800780c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007810:	d102      	bne.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8007812:	23fa      	movs	r3, #250	; 0xfa
 8007814:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007816:	e26b      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8007818:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800781c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800781e:	e267      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8007820:	4b58      	ldr	r3, [pc, #352]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800782c:	d106      	bne.n	800783c <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 800782e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007830:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007834:	d102      	bne.n	800783c <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8007836:	4b55      	ldr	r3, [pc, #340]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007838:	637b      	str	r3, [r7, #52]	; 0x34
 800783a:	e259      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800783c:	4b51      	ldr	r3, [pc, #324]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800783e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007842:	f003 0302 	and.w	r3, r3, #2
 8007846:	2b02      	cmp	r3, #2
 8007848:	d107      	bne.n	800785a <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 800784a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007850:	d103      	bne.n	800785a <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8007852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007856:	637b      	str	r3, [r7, #52]	; 0x34
 8007858:	e24a      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800785a:	2300      	movs	r3, #0
 800785c:	637b      	str	r3, [r7, #52]	; 0x34
 800785e:	e247      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8007860:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007864:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8007868:	430b      	orrs	r3, r1
 800786a:	d12d      	bne.n	80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800786c:	4b45      	ldr	r3, [pc, #276]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800786e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007872:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8007876:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007878:	4b42      	ldr	r3, [pc, #264]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007880:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007884:	d105      	bne.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8007886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007888:	2b00      	cmp	r3, #0
 800788a:	d102      	bne.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 800788c:	4b3f      	ldr	r3, [pc, #252]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800788e:	637b      	str	r3, [r7, #52]	; 0x34
 8007890:	e22e      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8007892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007898:	d107      	bne.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800789a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800789e:	4618      	mov	r0, r3
 80078a0:	f7fe fc70 	bl	8006184 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80078a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a6:	637b      	str	r3, [r7, #52]	; 0x34
 80078a8:	e222      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80078aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078b0:	d107      	bne.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078b2:	f107 0318 	add.w	r3, r7, #24
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7fe fdbe 	bl	8006438 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	637b      	str	r3, [r7, #52]	; 0x34
 80078c0:	e216      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80078c2:	2300      	movs	r3, #0
 80078c4:	637b      	str	r3, [r7, #52]	; 0x34
 80078c6:	e213      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80078c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078cc:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 80078d0:	430b      	orrs	r3, r1
 80078d2:	d15d      	bne.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80078d4:	4b2b      	ldr	r3, [pc, #172]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80078d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078da:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80078de:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80078e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80078e6:	d028      	beq.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 80078e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80078ee:	d845      	bhi.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80078f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078f6:	d013      	beq.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 80078f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078fe:	d83d      	bhi.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007902:	2b00      	cmp	r3, #0
 8007904:	d004      	beq.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8007906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007908:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800790c:	d004      	beq.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 800790e:	e035      	b.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8007910:	f7fd fde6 	bl	80054e0 <HAL_RCC_GetPCLK2Freq>
 8007914:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007916:	e1eb      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007918:	f7fd fcb2 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 800791c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800791e:	e1e7      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007920:	4b18      	ldr	r3, [pc, #96]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800792c:	d102      	bne.n	8007934 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 800792e:	4b17      	ldr	r3, [pc, #92]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007930:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007932:	e1dd      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007934:	2300      	movs	r3, #0
 8007936:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007938:	e1da      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800793a:	4b12      	ldr	r3, [pc, #72]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 0320 	and.w	r3, r3, #32
 8007942:	2b20      	cmp	r3, #32
 8007944:	d117      	bne.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007946:	4b0f      	ldr	r3, [pc, #60]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800794e:	2b00      	cmp	r3, #0
 8007950:	d005      	beq.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8007952:	4b0c      	ldr	r3, [pc, #48]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	0e1b      	lsrs	r3, r3, #24
 8007958:	f003 030f 	and.w	r3, r3, #15
 800795c:	e006      	b.n	800796c <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 800795e:	4b09      	ldr	r3, [pc, #36]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007960:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007964:	041b      	lsls	r3, r3, #16
 8007966:	0e1b      	lsrs	r3, r3, #24
 8007968:	f003 030f 	and.w	r3, r3, #15
 800796c:	4a06      	ldr	r2, [pc, #24]	; (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800796e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007972:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007974:	e1bc      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800797a:	e1b9      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800797c:	2300      	movs	r3, #0
 800797e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007980:	e1b6      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8007982:	bf00      	nop
 8007984:	46020c00 	.word	0x46020c00
 8007988:	0800a600 	.word	0x0800a600
 800798c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007990:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007994:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8007998:	430b      	orrs	r3, r1
 800799a:	d156      	bne.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800799c:	4ba5      	ldr	r3, [pc, #660]	; (8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800799e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80079a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80079a6:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80079a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80079ae:	d028      	beq.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 80079b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80079b6:	d845      	bhi.n	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 80079b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079be:	d013      	beq.n	80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 80079c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079c6:	d83d      	bhi.n	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 80079c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d004      	beq.n	80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 80079ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079d4:	d004      	beq.n	80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 80079d6:	e035      	b.n	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80079d8:	f7fd fd6e 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 80079dc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80079de:	e187      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80079e0:	f7fd fc4e 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 80079e4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80079e6:	e183      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079e8:	4b92      	ldr	r3, [pc, #584]	; (8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079f4:	d102      	bne.n	80079fc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 80079f6:	4b90      	ldr	r3, [pc, #576]	; (8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 80079f8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80079fa:	e179      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a00:	e176      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007a02:	4b8c      	ldr	r3, [pc, #560]	; (8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f003 0320 	and.w	r3, r3, #32
 8007a0a:	2b20      	cmp	r3, #32
 8007a0c:	d117      	bne.n	8007a3e <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a0e:	4b89      	ldr	r3, [pc, #548]	; (8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d005      	beq.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 8007a1a:	4b86      	ldr	r3, [pc, #536]	; (8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	0e1b      	lsrs	r3, r3, #24
 8007a20:	f003 030f 	and.w	r3, r3, #15
 8007a24:	e006      	b.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 8007a26:	4b83      	ldr	r3, [pc, #524]	; (8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007a28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a2c:	041b      	lsls	r3, r3, #16
 8007a2e:	0e1b      	lsrs	r3, r3, #24
 8007a30:	f003 030f 	and.w	r3, r3, #15
 8007a34:	4a81      	ldr	r2, [pc, #516]	; (8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8007a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a3a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a3c:	e158      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a42:	e155      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007a44:	2300      	movs	r3, #0
 8007a46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a48:	e152      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007a4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a4e:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8007a52:	430b      	orrs	r3, r1
 8007a54:	d177      	bne.n	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007a56:	4b77      	ldr	r3, [pc, #476]	; (8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007a58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007a5c:	f003 0318 	and.w	r3, r3, #24
 8007a60:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8007a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a64:	2b18      	cmp	r3, #24
 8007a66:	d86b      	bhi.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8007a68:	a201      	add	r2, pc, #4	; (adr r2, 8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 8007a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6e:	bf00      	nop
 8007a70:	08007ad5 	.word	0x08007ad5
 8007a74:	08007b41 	.word	0x08007b41
 8007a78:	08007b41 	.word	0x08007b41
 8007a7c:	08007b41 	.word	0x08007b41
 8007a80:	08007b41 	.word	0x08007b41
 8007a84:	08007b41 	.word	0x08007b41
 8007a88:	08007b41 	.word	0x08007b41
 8007a8c:	08007b41 	.word	0x08007b41
 8007a90:	08007add 	.word	0x08007add
 8007a94:	08007b41 	.word	0x08007b41
 8007a98:	08007b41 	.word	0x08007b41
 8007a9c:	08007b41 	.word	0x08007b41
 8007aa0:	08007b41 	.word	0x08007b41
 8007aa4:	08007b41 	.word	0x08007b41
 8007aa8:	08007b41 	.word	0x08007b41
 8007aac:	08007b41 	.word	0x08007b41
 8007ab0:	08007ae5 	.word	0x08007ae5
 8007ab4:	08007b41 	.word	0x08007b41
 8007ab8:	08007b41 	.word	0x08007b41
 8007abc:	08007b41 	.word	0x08007b41
 8007ac0:	08007b41 	.word	0x08007b41
 8007ac4:	08007b41 	.word	0x08007b41
 8007ac8:	08007b41 	.word	0x08007b41
 8007acc:	08007b41 	.word	0x08007b41
 8007ad0:	08007aff 	.word	0x08007aff
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007ad4:	f7fd fd18 	bl	8005508 <HAL_RCC_GetPCLK3Freq>
 8007ad8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007ada:	e109      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007adc:	f7fd fbd0 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 8007ae0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007ae2:	e105      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ae4:	4b53      	ldr	r3, [pc, #332]	; (8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007af0:	d102      	bne.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 8007af2:	4b51      	ldr	r3, [pc, #324]	; (8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8007af4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007af6:	e0fb      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007af8:	2300      	movs	r3, #0
 8007afa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007afc:	e0f8      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007afe:	4b4d      	ldr	r3, [pc, #308]	; (8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 0320 	and.w	r3, r3, #32
 8007b06:	2b20      	cmp	r3, #32
 8007b08:	d117      	bne.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b0a:	4b4a      	ldr	r3, [pc, #296]	; (8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d005      	beq.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 8007b16:	4b47      	ldr	r3, [pc, #284]	; (8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	0e1b      	lsrs	r3, r3, #24
 8007b1c:	f003 030f 	and.w	r3, r3, #15
 8007b20:	e006      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8007b22:	4b44      	ldr	r3, [pc, #272]	; (8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007b24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b28:	041b      	lsls	r3, r3, #16
 8007b2a:	0e1b      	lsrs	r3, r3, #24
 8007b2c:	f003 030f 	and.w	r3, r3, #15
 8007b30:	4a42      	ldr	r2, [pc, #264]	; (8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8007b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b36:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007b38:	e0da      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b3e:	e0d7      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007b40:	2300      	movs	r3, #0
 8007b42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b44:	e0d4      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8007b46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b4a:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8007b4e:	430b      	orrs	r3, r1
 8007b50:	d155      	bne.n	8007bfe <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007b52:	4b38      	ldr	r3, [pc, #224]	; (8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007b54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007b58:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007b5c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b64:	d013      	beq.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 8007b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b6c:	d844      	bhi.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b74:	d013      	beq.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 8007b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b7c:	d83c      	bhi.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8007b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d014      	beq.n	8007bae <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8007b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b8a:	d014      	beq.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8007b8c:	e034      	b.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b8e:	f107 0318 	add.w	r3, r7, #24
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7fe fc50 	bl	8006438 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b9c:	e0a8      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7fe faee 	bl	8006184 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007baa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bac:	e0a0      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007bae:	f7fd fb67 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 8007bb2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007bb4:	e09c      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007bb6:	4b1f      	ldr	r3, [pc, #124]	; (8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0320 	and.w	r3, r3, #32
 8007bbe:	2b20      	cmp	r3, #32
 8007bc0:	d117      	bne.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007bc2:	4b1c      	ldr	r3, [pc, #112]	; (8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d005      	beq.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007bce:	4b19      	ldr	r3, [pc, #100]	; (8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	0e1b      	lsrs	r3, r3, #24
 8007bd4:	f003 030f 	and.w	r3, r3, #15
 8007bd8:	e006      	b.n	8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8007bda:	4b16      	ldr	r3, [pc, #88]	; (8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007bdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007be0:	041b      	lsls	r3, r3, #16
 8007be2:	0e1b      	lsrs	r3, r3, #24
 8007be4:	f003 030f 	and.w	r3, r3, #15
 8007be8:	4a14      	ldr	r2, [pc, #80]	; (8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8007bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bee:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007bf0:	e07e      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bf6:	e07b      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bfc:	e078      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8007bfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c02:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8007c06:	430b      	orrs	r3, r1
 8007c08:	d138      	bne.n	8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007c0a:	4b0a      	ldr	r3, [pc, #40]	; (8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007c0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007c10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c14:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007c16:	4b07      	ldr	r3, [pc, #28]	; (8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007c18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c1c:	f003 0302 	and.w	r3, r3, #2
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d10d      	bne.n	8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8007c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d10a      	bne.n	8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 8007c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c30:	e05e      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8007c32:	bf00      	nop
 8007c34:	46020c00 	.word	0x46020c00
 8007c38:	00f42400 	.word	0x00f42400
 8007c3c:	0800a600 	.word	0x0800a600
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007c40:	4b2e      	ldr	r3, [pc, #184]	; (8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007c42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c4e:	d112      	bne.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8007c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c56:	d10e      	bne.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007c58:	4b28      	ldr	r3, [pc, #160]	; (8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007c5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c66:	d102      	bne.n	8007c6e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8007c68:	23fa      	movs	r3, #250	; 0xfa
 8007c6a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007c6c:	e040      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8007c6e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007c72:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007c74:	e03c      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8007c76:	2300      	movs	r3, #0
 8007c78:	637b      	str	r3, [r7, #52]	; 0x34
 8007c7a:	e039      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8007c7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c80:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007c84:	430b      	orrs	r3, r1
 8007c86:	d131      	bne.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007c88:	4b1c      	ldr	r3, [pc, #112]	; (8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007c8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007c8e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007c92:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007c94:	4b19      	ldr	r3, [pc, #100]	; (8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ca0:	d105      	bne.n	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d102      	bne.n	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8007ca8:	4b15      	ldr	r3, [pc, #84]	; (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 8007caa:	637b      	str	r3, [r7, #52]	; 0x34
 8007cac:	e020      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8007cae:	4b13      	ldr	r3, [pc, #76]	; (8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cba:	d106      	bne.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8007cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cc2:	d102      	bne.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007cc4:	4b0f      	ldr	r3, [pc, #60]	; (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 8007cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8007cc8:	e012      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8007cca:	4b0c      	ldr	r3, [pc, #48]	; (8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cd6:	d106      	bne.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8007cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cde:	d102      	bne.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8007ce0:	4b09      	ldr	r3, [pc, #36]	; (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007ce2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ce4:	e004      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	637b      	str	r3, [r7, #52]	; 0x34
 8007cea:	e001      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8007cec:	2300      	movs	r3, #0
 8007cee:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8007cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3738      	adds	r7, #56	; 0x38
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	46020c00 	.word	0x46020c00
 8007d00:	02dc6c00 	.word	0x02dc6c00
 8007d04:	016e3600 	.word	0x016e3600
 8007d08:	00f42400 	.word	0x00f42400

08007d0c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007d14:	4b47      	ldr	r3, [pc, #284]	; (8007e34 <RCCEx_PLL2_Config+0x128>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a46      	ldr	r2, [pc, #280]	; (8007e34 <RCCEx_PLL2_Config+0x128>)
 8007d1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d1e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007d20:	f7fa f88e 	bl	8001e40 <HAL_GetTick>
 8007d24:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d26:	e008      	b.n	8007d3a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007d28:	f7fa f88a 	bl	8001e40 <HAL_GetTick>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d901      	bls.n	8007d3a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007d36:	2303      	movs	r3, #3
 8007d38:	e077      	b.n	8007e2a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d3a:	4b3e      	ldr	r3, [pc, #248]	; (8007e34 <RCCEx_PLL2_Config+0x128>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d1f0      	bne.n	8007d28 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007d46:	4b3b      	ldr	r3, [pc, #236]	; (8007e34 <RCCEx_PLL2_Config+0x128>)
 8007d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007d4e:	f023 0303 	bic.w	r3, r3, #3
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	6811      	ldr	r1, [r2, #0]
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	6852      	ldr	r2, [r2, #4]
 8007d5a:	3a01      	subs	r2, #1
 8007d5c:	0212      	lsls	r2, r2, #8
 8007d5e:	430a      	orrs	r2, r1
 8007d60:	4934      	ldr	r1, [pc, #208]	; (8007e34 <RCCEx_PLL2_Config+0x128>)
 8007d62:	4313      	orrs	r3, r2
 8007d64:	62cb      	str	r3, [r1, #44]	; 0x2c
 8007d66:	4b33      	ldr	r3, [pc, #204]	; (8007e34 <RCCEx_PLL2_Config+0x128>)
 8007d68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d6a:	4b33      	ldr	r3, [pc, #204]	; (8007e38 <RCCEx_PLL2_Config+0x12c>)
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	6892      	ldr	r2, [r2, #8]
 8007d72:	3a01      	subs	r2, #1
 8007d74:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	68d2      	ldr	r2, [r2, #12]
 8007d7c:	3a01      	subs	r2, #1
 8007d7e:	0252      	lsls	r2, r2, #9
 8007d80:	b292      	uxth	r2, r2
 8007d82:	4311      	orrs	r1, r2
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	6912      	ldr	r2, [r2, #16]
 8007d88:	3a01      	subs	r2, #1
 8007d8a:	0412      	lsls	r2, r2, #16
 8007d8c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007d90:	4311      	orrs	r1, r2
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	6952      	ldr	r2, [r2, #20]
 8007d96:	3a01      	subs	r2, #1
 8007d98:	0612      	lsls	r2, r2, #24
 8007d9a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007d9e:	430a      	orrs	r2, r1
 8007da0:	4924      	ldr	r1, [pc, #144]	; (8007e34 <RCCEx_PLL2_Config+0x128>)
 8007da2:	4313      	orrs	r3, r2
 8007da4:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007da6:	4b23      	ldr	r3, [pc, #140]	; (8007e34 <RCCEx_PLL2_Config+0x128>)
 8007da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007daa:	f023 020c 	bic.w	r2, r3, #12
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	4920      	ldr	r1, [pc, #128]	; (8007e34 <RCCEx_PLL2_Config+0x128>)
 8007db4:	4313      	orrs	r3, r2
 8007db6:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007db8:	4b1e      	ldr	r3, [pc, #120]	; (8007e34 <RCCEx_PLL2_Config+0x128>)
 8007dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6a1b      	ldr	r3, [r3, #32]
 8007dc0:	491c      	ldr	r1, [pc, #112]	; (8007e34 <RCCEx_PLL2_Config+0x128>)
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007dc6:	4b1b      	ldr	r3, [pc, #108]	; (8007e34 <RCCEx_PLL2_Config+0x128>)
 8007dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dca:	4a1a      	ldr	r2, [pc, #104]	; (8007e34 <RCCEx_PLL2_Config+0x128>)
 8007dcc:	f023 0310 	bic.w	r3, r3, #16
 8007dd0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007dd2:	4b18      	ldr	r3, [pc, #96]	; (8007e34 <RCCEx_PLL2_Config+0x128>)
 8007dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007dda:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	69d2      	ldr	r2, [r2, #28]
 8007de2:	00d2      	lsls	r2, r2, #3
 8007de4:	4913      	ldr	r1, [pc, #76]	; (8007e34 <RCCEx_PLL2_Config+0x128>)
 8007de6:	4313      	orrs	r3, r2
 8007de8:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007dea:	4b12      	ldr	r3, [pc, #72]	; (8007e34 <RCCEx_PLL2_Config+0x128>)
 8007dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dee:	4a11      	ldr	r2, [pc, #68]	; (8007e34 <RCCEx_PLL2_Config+0x128>)
 8007df0:	f043 0310 	orr.w	r3, r3, #16
 8007df4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007df6:	4b0f      	ldr	r3, [pc, #60]	; (8007e34 <RCCEx_PLL2_Config+0x128>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a0e      	ldr	r2, [pc, #56]	; (8007e34 <RCCEx_PLL2_Config+0x128>)
 8007dfc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e00:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007e02:	f7fa f81d 	bl	8001e40 <HAL_GetTick>
 8007e06:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e08:	e008      	b.n	8007e1c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007e0a:	f7fa f819 	bl	8001e40 <HAL_GetTick>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	1ad3      	subs	r3, r2, r3
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d901      	bls.n	8007e1c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	e006      	b.n	8007e2a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e1c:	4b05      	ldr	r3, [pc, #20]	; (8007e34 <RCCEx_PLL2_Config+0x128>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d0f0      	beq.n	8007e0a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007e28:	2300      	movs	r3, #0

}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	46020c00 	.word	0x46020c00
 8007e38:	80800000 	.word	0x80800000

08007e3c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007e44:	4b47      	ldr	r3, [pc, #284]	; (8007f64 <RCCEx_PLL3_Config+0x128>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a46      	ldr	r2, [pc, #280]	; (8007f64 <RCCEx_PLL3_Config+0x128>)
 8007e4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e4e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007e50:	f7f9 fff6 	bl	8001e40 <HAL_GetTick>
 8007e54:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e56:	e008      	b.n	8007e6a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007e58:	f7f9 fff2 	bl	8001e40 <HAL_GetTick>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d901      	bls.n	8007e6a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007e66:	2303      	movs	r3, #3
 8007e68:	e077      	b.n	8007f5a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e6a:	4b3e      	ldr	r3, [pc, #248]	; (8007f64 <RCCEx_PLL3_Config+0x128>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1f0      	bne.n	8007e58 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007e76:	4b3b      	ldr	r3, [pc, #236]	; (8007f64 <RCCEx_PLL3_Config+0x128>)
 8007e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007e7e:	f023 0303 	bic.w	r3, r3, #3
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	6811      	ldr	r1, [r2, #0]
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	6852      	ldr	r2, [r2, #4]
 8007e8a:	3a01      	subs	r2, #1
 8007e8c:	0212      	lsls	r2, r2, #8
 8007e8e:	430a      	orrs	r2, r1
 8007e90:	4934      	ldr	r1, [pc, #208]	; (8007f64 <RCCEx_PLL3_Config+0x128>)
 8007e92:	4313      	orrs	r3, r2
 8007e94:	630b      	str	r3, [r1, #48]	; 0x30
 8007e96:	4b33      	ldr	r3, [pc, #204]	; (8007f64 <RCCEx_PLL3_Config+0x128>)
 8007e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e9a:	4b33      	ldr	r3, [pc, #204]	; (8007f68 <RCCEx_PLL3_Config+0x12c>)
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	6892      	ldr	r2, [r2, #8]
 8007ea2:	3a01      	subs	r2, #1
 8007ea4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	68d2      	ldr	r2, [r2, #12]
 8007eac:	3a01      	subs	r2, #1
 8007eae:	0252      	lsls	r2, r2, #9
 8007eb0:	b292      	uxth	r2, r2
 8007eb2:	4311      	orrs	r1, r2
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	6912      	ldr	r2, [r2, #16]
 8007eb8:	3a01      	subs	r2, #1
 8007eba:	0412      	lsls	r2, r2, #16
 8007ebc:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007ec0:	4311      	orrs	r1, r2
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	6952      	ldr	r2, [r2, #20]
 8007ec6:	3a01      	subs	r2, #1
 8007ec8:	0612      	lsls	r2, r2, #24
 8007eca:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	4924      	ldr	r1, [pc, #144]	; (8007f64 <RCCEx_PLL3_Config+0x128>)
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007ed6:	4b23      	ldr	r3, [pc, #140]	; (8007f64 <RCCEx_PLL3_Config+0x128>)
 8007ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eda:	f023 020c 	bic.w	r2, r3, #12
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	4920      	ldr	r1, [pc, #128]	; (8007f64 <RCCEx_PLL3_Config+0x128>)
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007ee8:	4b1e      	ldr	r3, [pc, #120]	; (8007f64 <RCCEx_PLL3_Config+0x128>)
 8007eea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a1b      	ldr	r3, [r3, #32]
 8007ef0:	491c      	ldr	r1, [pc, #112]	; (8007f64 <RCCEx_PLL3_Config+0x128>)
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007ef6:	4b1b      	ldr	r3, [pc, #108]	; (8007f64 <RCCEx_PLL3_Config+0x128>)
 8007ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007efa:	4a1a      	ldr	r2, [pc, #104]	; (8007f64 <RCCEx_PLL3_Config+0x128>)
 8007efc:	f023 0310 	bic.w	r3, r3, #16
 8007f00:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007f02:	4b18      	ldr	r3, [pc, #96]	; (8007f64 <RCCEx_PLL3_Config+0x128>)
 8007f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f0a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	69d2      	ldr	r2, [r2, #28]
 8007f12:	00d2      	lsls	r2, r2, #3
 8007f14:	4913      	ldr	r1, [pc, #76]	; (8007f64 <RCCEx_PLL3_Config+0x128>)
 8007f16:	4313      	orrs	r3, r2
 8007f18:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007f1a:	4b12      	ldr	r3, [pc, #72]	; (8007f64 <RCCEx_PLL3_Config+0x128>)
 8007f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f1e:	4a11      	ldr	r2, [pc, #68]	; (8007f64 <RCCEx_PLL3_Config+0x128>)
 8007f20:	f043 0310 	orr.w	r3, r3, #16
 8007f24:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007f26:	4b0f      	ldr	r3, [pc, #60]	; (8007f64 <RCCEx_PLL3_Config+0x128>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a0e      	ldr	r2, [pc, #56]	; (8007f64 <RCCEx_PLL3_Config+0x128>)
 8007f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f30:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007f32:	f7f9 ff85 	bl	8001e40 <HAL_GetTick>
 8007f36:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f38:	e008      	b.n	8007f4c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007f3a:	f7f9 ff81 	bl	8001e40 <HAL_GetTick>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d901      	bls.n	8007f4c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e006      	b.n	8007f5a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f4c:	4b05      	ldr	r3, [pc, #20]	; (8007f64 <RCCEx_PLL3_Config+0x128>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d0f0      	beq.n	8007f3a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	46020c00 	.word	0x46020c00
 8007f68:	80800000 	.word	0x80800000

08007f6c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d101      	bne.n	8007f7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e0fb      	b.n	8008176 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a7f      	ldr	r2, [pc, #508]	; (8008180 <HAL_SPI_Init+0x214>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d004      	beq.n	8007f92 <HAL_SPI_Init+0x26>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a7d      	ldr	r2, [pc, #500]	; (8008184 <HAL_SPI_Init+0x218>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	e000      	b.n	8007f94 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8007f92:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a78      	ldr	r2, [pc, #480]	; (8008180 <HAL_SPI_Init+0x214>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d004      	beq.n	8007fae <HAL_SPI_Init+0x42>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a76      	ldr	r2, [pc, #472]	; (8008184 <HAL_SPI_Init+0x218>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d105      	bne.n	8007fba <HAL_SPI_Init+0x4e>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	2b0f      	cmp	r3, #15
 8007fb4:	d901      	bls.n	8007fba <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e0dd      	b.n	8008176 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fbf8 	bl	80087b0 <SPI_GetPacketSize>
 8007fc0:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a6e      	ldr	r2, [pc, #440]	; (8008180 <HAL_SPI_Init+0x214>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d004      	beq.n	8007fd6 <HAL_SPI_Init+0x6a>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a6c      	ldr	r2, [pc, #432]	; (8008184 <HAL_SPI_Init+0x218>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d102      	bne.n	8007fdc <HAL_SPI_Init+0x70>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2b08      	cmp	r3, #8
 8007fda:	d816      	bhi.n	800800a <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007fe0:	4a69      	ldr	r2, [pc, #420]	; (8008188 <HAL_SPI_Init+0x21c>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d00e      	beq.n	8008004 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a68      	ldr	r2, [pc, #416]	; (800818c <HAL_SPI_Init+0x220>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d009      	beq.n	8008004 <HAL_SPI_Init+0x98>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a66      	ldr	r2, [pc, #408]	; (8008190 <HAL_SPI_Init+0x224>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d004      	beq.n	8008004 <HAL_SPI_Init+0x98>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a65      	ldr	r2, [pc, #404]	; (8008194 <HAL_SPI_Init+0x228>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d104      	bne.n	800800e <HAL_SPI_Init+0xa2>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2b10      	cmp	r3, #16
 8008008:	d901      	bls.n	800800e <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	e0b3      	b.n	8008176 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2b00      	cmp	r3, #0
 8008018:	d106      	bne.n	8008028 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f7f9 fc72 	bl	800190c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2202      	movs	r2, #2
 800802c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f022 0201 	bic.w	r2, r2, #1
 800803e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800804a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	699b      	ldr	r3, [r3, #24]
 8008050:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008054:	d119      	bne.n	800808a <HAL_SPI_Init+0x11e>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800805e:	d103      	bne.n	8008068 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008064:	2b00      	cmp	r3, #0
 8008066:	d008      	beq.n	800807a <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800806c:	2b00      	cmp	r3, #0
 800806e:	d10c      	bne.n	800808a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008074:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008078:	d107      	bne.n	800808a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008088:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00f      	beq.n	80080b6 <HAL_SPI_Init+0x14a>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	2b06      	cmp	r3, #6
 800809c:	d90b      	bls.n	80080b6 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	430a      	orrs	r2, r1
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	e007      	b.n	80080c6 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80080c4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	69da      	ldr	r2, [r3, #28]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ce:	431a      	orrs	r2, r3
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	431a      	orrs	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080d8:	ea42 0103 	orr.w	r1, r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	68da      	ldr	r2, [r3, #12]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	430a      	orrs	r2, r1
 80080e6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f0:	431a      	orrs	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f6:	431a      	orrs	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	431a      	orrs	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	431a      	orrs	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	695b      	ldr	r3, [r3, #20]
 8008108:	431a      	orrs	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a1b      	ldr	r3, [r3, #32]
 800810e:	431a      	orrs	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	431a      	orrs	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800811a:	431a      	orrs	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	431a      	orrs	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008126:	431a      	orrs	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800812c:	431a      	orrs	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008132:	ea42 0103 	orr.w	r1, r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	430a      	orrs	r2, r1
 8008140:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00a      	beq.n	8008164 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	430a      	orrs	r2, r1
 8008162:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	46002000 	.word	0x46002000
 8008184:	56002000 	.word	0x56002000
 8008188:	40013000 	.word	0x40013000
 800818c:	50013000 	.word	0x50013000
 8008190:	40003800 	.word	0x40003800
 8008194:	50003800 	.word	0x50003800

08008198 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b08c      	sub	sp, #48	; 0x30
 800819c:	af02      	add	r7, sp, #8
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	607a      	str	r2, [r7, #4]
 80081a4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80081a6:	2300      	movs	r3, #0
 80081a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	3320      	adds	r3, #32
 80081b2:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	3330      	adds	r3, #48	; 0x30
 80081ba:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d101      	bne.n	80081ca <HAL_SPI_TransmitReceive+0x32>
 80081c6:	2302      	movs	r3, #2
 80081c8:	e21f      	b.n	800860a <HAL_SPI_TransmitReceive+0x472>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081d2:	f7f9 fe35 	bl	8001e40 <HAL_GetTick>
 80081d6:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 80081d8:	887b      	ldrh	r3, [r7, #2]
 80081da:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 80081dc:	887b      	ldrh	r3, [r7, #2]
 80081de:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d009      	beq.n	8008200 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 80081ec:	2302      	movs	r3, #2
 80081ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80081fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081fe:	e204      	b.n	800860a <HAL_SPI_TransmitReceive+0x472>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d005      	beq.n	8008212 <HAL_SPI_TransmitReceive+0x7a>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d002      	beq.n	8008212 <HAL_SPI_TransmitReceive+0x7a>
 800820c:	887b      	ldrh	r3, [r7, #2]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d109      	bne.n	8008226 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2200      	movs	r2, #0
 800821c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8008220:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008224:	e1f1      	b.n	800860a <HAL_SPI_TransmitReceive+0x472>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2205      	movs	r2, #5
 800822a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2200      	movs	r2, #0
 8008232:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferCount = Size;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	887a      	ldrh	r2, [r7, #2]
 8008240:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->RxXferSize  = Size;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	887a      	ldrh	r2, [r7, #2]
 8008248:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	68ba      	ldr	r2, [r7, #8]
 8008250:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferCount = Size;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	887a      	ldrh	r2, [r7, #2]
 8008256:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferSize  = Size;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	887a      	ldrh	r2, [r7, #2]
 800825e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68da      	ldr	r2, [r3, #12]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 800827c:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	0c1b      	lsrs	r3, r3, #16
 8008286:	041b      	lsls	r3, r3, #16
 8008288:	8879      	ldrh	r1, [r7, #2]
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	6812      	ldr	r2, [r2, #0]
 800828e:	430b      	orrs	r3, r1
 8008290:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f042 0201 	orr.w	r2, r2, #1
 80082a0:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	69db      	ldr	r3, [r3, #28]
 80082a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d10c      	bne.n	80082ca <HAL_SPI_TransmitReceive+0x132>
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082b8:	d107      	bne.n	80082ca <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	2b0f      	cmp	r3, #15
 80082d0:	f240 8085 	bls.w	80083de <HAL_SPI_TransmitReceive+0x246>
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a7b      	ldr	r2, [pc, #492]	; (80084c8 <HAL_SPI_TransmitReceive+0x330>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d078      	beq.n	80083d0 <HAL_SPI_TransmitReceive+0x238>
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a7a      	ldr	r2, [pc, #488]	; (80084cc <HAL_SPI_TransmitReceive+0x334>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d073      	beq.n	80083d0 <HAL_SPI_TransmitReceive+0x238>
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a78      	ldr	r2, [pc, #480]	; (80084d0 <HAL_SPI_TransmitReceive+0x338>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d06e      	beq.n	80083d0 <HAL_SPI_TransmitReceive+0x238>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a77      	ldr	r2, [pc, #476]	; (80084d4 <HAL_SPI_TransmitReceive+0x33c>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d170      	bne.n	80083de <HAL_SPI_TransmitReceive+0x246>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80082fc:	e068      	b.n	80083d0 <HAL_SPI_TransmitReceive+0x238>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	695b      	ldr	r3, [r3, #20]
 8008304:	f003 0302 	and.w	r3, r3, #2
 8008308:	2b02      	cmp	r3, #2
 800830a:	d11a      	bne.n	8008342 <HAL_SPI_TransmitReceive+0x1aa>
 800830c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800830e:	2b00      	cmp	r3, #0
 8008310:	d017      	beq.n	8008342 <HAL_SPI_TransmitReceive+0x1aa>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	6812      	ldr	r2, [r2, #0]
 800831c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008322:	1d1a      	adds	r2, r3, #4
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount --;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800832e:	b29b      	uxth	r3, r3
 8008330:	3b01      	subs	r3, #1
 8008332:	b29a      	uxth	r2, r3
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008340:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	695a      	ldr	r2, [r3, #20]
 8008348:	f248 0308 	movw	r3, #32776	; 0x8008
 800834c:	4013      	ands	r3, r2
 800834e:	2b00      	cmp	r3, #0
 8008350:	d01a      	beq.n	8008388 <HAL_SPI_TransmitReceive+0x1f0>
 8008352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008354:	2b00      	cmp	r3, #0
 8008356:	d017      	beq.n	8008388 <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008360:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008362:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008368:	1d1a      	adds	r2, r3, #4
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount --;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008374:	b29b      	uxth	r3, r3
 8008376:	3b01      	subs	r3, #1
 8008378:	b29a      	uxth	r2, r3
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008386:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008388:	f7f9 fd5a 	bl	8001e40 <HAL_GetTick>
 800838c:	4602      	mov	r2, r0
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008394:	429a      	cmp	r2, r3
 8008396:	d803      	bhi.n	80083a0 <HAL_SPI_TransmitReceive+0x208>
 8008398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800839e:	d102      	bne.n	80083a6 <HAL_SPI_TransmitReceive+0x20e>
 80083a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d114      	bne.n	80083d0 <HAL_SPI_TransmitReceive+0x238>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f000 f934 	bl	8008614 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 80083cc:	2303      	movs	r3, #3
 80083ce:	e11c      	b.n	800860a <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80083d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d193      	bne.n	80082fe <HAL_SPI_TransmitReceive+0x166>
 80083d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d190      	bne.n	80082fe <HAL_SPI_TransmitReceive+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80083dc:	e0ee      	b.n	80085bc <HAL_SPI_TransmitReceive+0x424>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	2b07      	cmp	r3, #7
 80083e4:	f240 80e4 	bls.w	80085b0 <HAL_SPI_TransmitReceive+0x418>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80083e8:	e066      	b.n	80084b8 <HAL_SPI_TransmitReceive+0x320>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	695b      	ldr	r3, [r3, #20]
 80083f0:	f003 0302 	and.w	r3, r3, #2
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	d119      	bne.n	800842c <HAL_SPI_TransmitReceive+0x294>
 80083f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d016      	beq.n	800842c <HAL_SPI_TransmitReceive+0x294>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008402:	881a      	ldrh	r2, [r3, #0]
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800840c:	1c9a      	adds	r2, r3, #2
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008418:	b29b      	uxth	r3, r3
 800841a:	3b01      	subs	r3, #1
 800841c:	b29a      	uxth	r2, r3
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800842a:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	695b      	ldr	r3, [r3, #20]
 8008432:	f003 0301 	and.w	r3, r3, #1
 8008436:	2b01      	cmp	r3, #1
 8008438:	d11a      	bne.n	8008470 <HAL_SPI_TransmitReceive+0x2d8>
 800843a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800843c:	2b00      	cmp	r3, #0
 800843e:	d017      	beq.n	8008470 <HAL_SPI_TransmitReceive+0x2d8>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008444:	69ba      	ldr	r2, [r7, #24]
 8008446:	8812      	ldrh	r2, [r2, #0]
 8008448:	b292      	uxth	r2, r2
 800844a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008450:	1c9a      	adds	r2, r3, #2
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800845c:	b29b      	uxth	r3, r3
 800845e:	3b01      	subs	r3, #1
 8008460:	b29a      	uxth	r2, r3
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800846e:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008470:	f7f9 fce6 	bl	8001e40 <HAL_GetTick>
 8008474:	4602      	mov	r2, r0
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800847c:	429a      	cmp	r2, r3
 800847e:	d803      	bhi.n	8008488 <HAL_SPI_TransmitReceive+0x2f0>
 8008480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008486:	d102      	bne.n	800848e <HAL_SPI_TransmitReceive+0x2f6>
 8008488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848a:	2b00      	cmp	r3, #0
 800848c:	d114      	bne.n	80084b8 <HAL_SPI_TransmitReceive+0x320>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f000 f8c0 	bl	8008614 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 80084b4:	2303      	movs	r3, #3
 80084b6:	e0a8      	b.n	800860a <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80084b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d195      	bne.n	80083ea <HAL_SPI_TransmitReceive+0x252>
 80084be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d192      	bne.n	80083ea <HAL_SPI_TransmitReceive+0x252>
 80084c4:	e07a      	b.n	80085bc <HAL_SPI_TransmitReceive+0x424>
 80084c6:	bf00      	nop
 80084c8:	40013000 	.word	0x40013000
 80084cc:	50013000 	.word	0x50013000
 80084d0:	40003800 	.word	0x40003800
 80084d4:	50003800 	.word	0x50003800
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	695b      	ldr	r3, [r3, #20]
 80084de:	f003 0302 	and.w	r3, r3, #2
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d11b      	bne.n	800851e <HAL_SPI_TransmitReceive+0x386>
 80084e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d018      	beq.n	800851e <HAL_SPI_TransmitReceive+0x386>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3320      	adds	r3, #32
 80084f6:	7812      	ldrb	r2, [r2, #0]
 80084f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084fe:	1c5a      	adds	r2, r3, #1
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800850a:	b29b      	uxth	r3, r3
 800850c:	3b01      	subs	r3, #1
 800850e:	b29a      	uxth	r2, r3
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800851c:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	695b      	ldr	r3, [r3, #20]
 8008524:	f003 0301 	and.w	r3, r3, #1
 8008528:	2b01      	cmp	r3, #1
 800852a:	d11d      	bne.n	8008568 <HAL_SPI_TransmitReceive+0x3d0>
 800852c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800852e:	2b00      	cmp	r3, #0
 8008530:	d01a      	beq.n	8008568 <HAL_SPI_TransmitReceive+0x3d0>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800853e:	7812      	ldrb	r2, [r2, #0]
 8008540:	b2d2      	uxtb	r2, r2
 8008542:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008548:	1c5a      	adds	r2, r3, #1
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008554:	b29b      	uxth	r3, r3
 8008556:	3b01      	subs	r3, #1
 8008558:	b29a      	uxth	r2, r3
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008566:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008568:	f7f9 fc6a 	bl	8001e40 <HAL_GetTick>
 800856c:	4602      	mov	r2, r0
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008574:	429a      	cmp	r2, r3
 8008576:	d803      	bhi.n	8008580 <HAL_SPI_TransmitReceive+0x3e8>
 8008578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800857e:	d102      	bne.n	8008586 <HAL_SPI_TransmitReceive+0x3ee>
 8008580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008582:	2b00      	cmp	r3, #0
 8008584:	d114      	bne.n	80085b0 <HAL_SPI_TransmitReceive+0x418>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f000 f844 	bl	8008614 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2200      	movs	r2, #0
 8008590:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800859a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e02c      	b.n	800860a <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80085b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d190      	bne.n	80084d8 <HAL_SPI_TransmitReceive+0x340>
 80085b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d18d      	bne.n	80084d8 <HAL_SPI_TransmitReceive+0x340>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c2:	2200      	movs	r2, #0
 80085c4:	2108      	movs	r1, #8
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	f000 f8c4 	bl	8008754 <SPI_WaitOnFlagUntilTimeout>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d007      	beq.n	80085e2 <HAL_SPI_TransmitReceive+0x44a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085d8:	f043 0220 	orr.w	r2, r3, #32
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f000 f816 	bl	8008614 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d001      	beq.n	8008606 <HAL_SPI_TransmitReceive+0x46e>
  {
    return HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	e001      	b.n	800860a <HAL_SPI_TransmitReceive+0x472>
  }
  return errorcode;
 8008606:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800860a:	4618      	mov	r0, r3
 800860c:	3728      	adds	r7, #40	; 0x28
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop

08008614 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	695b      	ldr	r3, [r3, #20]
 8008622:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	699a      	ldr	r2, [r3, #24]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f042 0208 	orr.w	r2, r2, #8
 8008632:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	699a      	ldr	r2, [r3, #24]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f042 0210 	orr.w	r2, r2, #16
 8008642:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f022 0201 	bic.w	r2, r2, #1
 8008652:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	6812      	ldr	r2, [r2, #0]
 800865e:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8008662:	f023 0303 	bic.w	r3, r3, #3
 8008666:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	689a      	ldr	r2, [r3, #8]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008676:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800867e:	b2db      	uxtb	r3, r3
 8008680:	2b04      	cmp	r3, #4
 8008682:	d014      	beq.n	80086ae <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f003 0320 	and.w	r3, r3, #32
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00f      	beq.n	80086ae <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008694:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	699a      	ldr	r2, [r3, #24]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f042 0220 	orr.w	r2, r2, #32
 80086ac:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	2b03      	cmp	r3, #3
 80086b8:	d014      	beq.n	80086e4 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00f      	beq.n	80086e4 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086ca:	f043 0204 	orr.w	r2, r3, #4
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	699a      	ldr	r2, [r3, #24]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086e2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00f      	beq.n	800870e <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086f4:	f043 0201 	orr.w	r2, r3, #1
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	699a      	ldr	r2, [r3, #24]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800870c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008714:	2b00      	cmp	r3, #0
 8008716:	d00f      	beq.n	8008738 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800871e:	f043 0208 	orr.w	r2, r3, #8
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	699a      	ldr	r2, [r3, #24]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008736:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8008748:	bf00      	nop
 800874a:	3714      	adds	r7, #20
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	603b      	str	r3, [r7, #0]
 8008760:	4613      	mov	r3, r2
 8008762:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008764:	e010      	b.n	8008788 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008766:	f7f9 fb6b 	bl	8001e40 <HAL_GetTick>
 800876a:	4602      	mov	r2, r0
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	1ad3      	subs	r3, r2, r3
 8008770:	683a      	ldr	r2, [r7, #0]
 8008772:	429a      	cmp	r2, r3
 8008774:	d803      	bhi.n	800877e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800877c:	d102      	bne.n	8008784 <SPI_WaitOnFlagUntilTimeout+0x30>
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d101      	bne.n	8008788 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	e00f      	b.n	80087a8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	695a      	ldr	r2, [r3, #20]
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	4013      	ands	r3, r2
 8008792:	68ba      	ldr	r2, [r7, #8]
 8008794:	429a      	cmp	r2, r3
 8008796:	bf0c      	ite	eq
 8008798:	2301      	moveq	r3, #1
 800879a:	2300      	movne	r3, #0
 800879c:	b2db      	uxtb	r3, r3
 800879e:	461a      	mov	r2, r3
 80087a0:	79fb      	ldrb	r3, [r7, #7]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d0df      	beq.n	8008766 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3710      	adds	r7, #16
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087bc:	095b      	lsrs	r3, r3, #5
 80087be:	3301      	adds	r3, #1
 80087c0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	3301      	adds	r3, #1
 80087c8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	3307      	adds	r3, #7
 80087ce:	08db      	lsrs	r3, r3, #3
 80087d0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	fb02 f303 	mul.w	r3, r2, r3
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3714      	adds	r7, #20
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr

080087e6 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 80087e6:	b480      	push	{r7}
 80087e8:	b083      	sub	sp, #12
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
 80087ee:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d12e      	bne.n	800885a <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008802:	2b01      	cmp	r3, #1
 8008804:	d101      	bne.n	800880a <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8008806:	2302      	movs	r3, #2
 8008808:	e028      	b.n	800885c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2201      	movs	r2, #1
 800880e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2202      	movs	r2, #2
 8008816:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f022 0201 	bic.w	r2, r2, #1
 8008828:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8008836:	ea42 0103 	orr.w	r1, r2, r3
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	689a      	ldr	r2, [r3, #8]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	430a      	orrs	r2, r1
 8008844:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2201      	movs	r2, #1
 800884a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008856:	2300      	movs	r3, #0
 8008858:	e000      	b.n	800885c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800885a:	2301      	movs	r3, #1
  }
}
 800885c:	4618      	mov	r0, r3
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d101      	bne.n	800887a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e042      	b.n	8008900 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008880:	2b00      	cmp	r3, #0
 8008882:	d106      	bne.n	8008892 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f7f9 f8cd 	bl	8001a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2224      	movs	r2, #36	; 0x24
 8008896:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f022 0201 	bic.w	r2, r2, #1
 80088a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d002      	beq.n	80088b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 fb40 	bl	8008f38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 f99b 	bl	8008bf4 <UART_SetConfig>
 80088be:	4603      	mov	r3, r0
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d101      	bne.n	80088c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	e01b      	b.n	8008900 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	685a      	ldr	r2, [r3, #4]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80088d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	689a      	ldr	r2, [r3, #8]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80088e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f042 0201 	orr.w	r2, r2, #1
 80088f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 fbbf 	bl	800907c <UART_CheckIdleState>
 80088fe:	4603      	mov	r3, r0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3708      	adds	r7, #8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b08a      	sub	sp, #40	; 0x28
 800890c:	af02      	add	r7, sp, #8
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	603b      	str	r3, [r7, #0]
 8008914:	4613      	mov	r3, r2
 8008916:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800891e:	2b20      	cmp	r3, #32
 8008920:	f040 808b 	bne.w	8008a3a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d002      	beq.n	8008930 <HAL_UART_Transmit+0x28>
 800892a:	88fb      	ldrh	r3, [r7, #6]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d101      	bne.n	8008934 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008930:	2301      	movs	r3, #1
 8008932:	e083      	b.n	8008a3c <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800893e:	2b80      	cmp	r3, #128	; 0x80
 8008940:	d107      	bne.n	8008952 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	689a      	ldr	r2, [r3, #8]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008950:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2200      	movs	r2, #0
 8008956:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2221      	movs	r2, #33	; 0x21
 800895e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008962:	f7f9 fa6d 	bl	8001e40 <HAL_GetTick>
 8008966:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	88fa      	ldrh	r2, [r7, #6]
 800896c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	88fa      	ldrh	r2, [r7, #6]
 8008974:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008980:	d108      	bne.n	8008994 <HAL_UART_Transmit+0x8c>
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d104      	bne.n	8008994 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800898a:	2300      	movs	r3, #0
 800898c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	61bb      	str	r3, [r7, #24]
 8008992:	e003      	b.n	800899c <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008998:	2300      	movs	r3, #0
 800899a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800899c:	e030      	b.n	8008a00 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	9300      	str	r3, [sp, #0]
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	2200      	movs	r2, #0
 80089a6:	2180      	movs	r1, #128	; 0x80
 80089a8:	68f8      	ldr	r0, [r7, #12]
 80089aa:	f000 fc11 	bl	80091d0 <UART_WaitOnFlagUntilTimeout>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d005      	beq.n	80089c0 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2220      	movs	r2, #32
 80089b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80089bc:	2303      	movs	r3, #3
 80089be:	e03d      	b.n	8008a3c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d10b      	bne.n	80089de <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	881b      	ldrh	r3, [r3, #0]
 80089ca:	461a      	mov	r2, r3
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	3302      	adds	r3, #2
 80089da:	61bb      	str	r3, [r7, #24]
 80089dc:	e007      	b.n	80089ee <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	781a      	ldrb	r2, [r3, #0]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	3301      	adds	r3, #1
 80089ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	3b01      	subs	r3, #1
 80089f8:	b29a      	uxth	r2, r3
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d1c8      	bne.n	800899e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	9300      	str	r3, [sp, #0]
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	2200      	movs	r2, #0
 8008a14:	2140      	movs	r1, #64	; 0x40
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f000 fbda 	bl	80091d0 <UART_WaitOnFlagUntilTimeout>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d005      	beq.n	8008a2e <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2220      	movs	r2, #32
 8008a26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008a2a:	2303      	movs	r3, #3
 8008a2c:	e006      	b.n	8008a3c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2220      	movs	r2, #32
 8008a32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008a36:	2300      	movs	r3, #0
 8008a38:	e000      	b.n	8008a3c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8008a3a:	2302      	movs	r3, #2
  }
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3720      	adds	r7, #32
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b08a      	sub	sp, #40	; 0x28
 8008a48:	af02      	add	r7, sp, #8
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	603b      	str	r3, [r7, #0]
 8008a50:	4613      	mov	r3, r2
 8008a52:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a5a:	2b20      	cmp	r3, #32
 8008a5c:	f040 80c4 	bne.w	8008be8 <HAL_UART_Receive+0x1a4>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d002      	beq.n	8008a6c <HAL_UART_Receive+0x28>
 8008a66:	88fb      	ldrh	r3, [r7, #6]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d101      	bne.n	8008a70 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e0bc      	b.n	8008bea <HAL_UART_Receive+0x1a6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a7a:	2b40      	cmp	r3, #64	; 0x40
 8008a7c:	d107      	bne.n	8008a8e <HAL_UART_Receive+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	689a      	ldr	r2, [r3, #8]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a8c:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2222      	movs	r2, #34	; 0x22
 8008a9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008aa4:	f7f9 f9cc 	bl	8001e40 <HAL_GetTick>
 8008aa8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	88fa      	ldrh	r2, [r7, #6]
 8008aae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	88fa      	ldrh	r2, [r7, #6]
 8008ab6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ac2:	d10e      	bne.n	8008ae2 <HAL_UART_Receive+0x9e>
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d105      	bne.n	8008ad8 <HAL_UART_Receive+0x94>
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008ad2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ad6:	e02d      	b.n	8008b34 <HAL_UART_Receive+0xf0>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	22ff      	movs	r2, #255	; 0xff
 8008adc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ae0:	e028      	b.n	8008b34 <HAL_UART_Receive+0xf0>
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d10d      	bne.n	8008b06 <HAL_UART_Receive+0xc2>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d104      	bne.n	8008afc <HAL_UART_Receive+0xb8>
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	22ff      	movs	r2, #255	; 0xff
 8008af6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008afa:	e01b      	b.n	8008b34 <HAL_UART_Receive+0xf0>
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	227f      	movs	r2, #127	; 0x7f
 8008b00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008b04:	e016      	b.n	8008b34 <HAL_UART_Receive+0xf0>
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b0e:	d10d      	bne.n	8008b2c <HAL_UART_Receive+0xe8>
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	691b      	ldr	r3, [r3, #16]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d104      	bne.n	8008b22 <HAL_UART_Receive+0xde>
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	227f      	movs	r2, #127	; 0x7f
 8008b1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008b20:	e008      	b.n	8008b34 <HAL_UART_Receive+0xf0>
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	223f      	movs	r2, #63	; 0x3f
 8008b26:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008b2a:	e003      	b.n	8008b34 <HAL_UART_Receive+0xf0>
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008b3a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b44:	d108      	bne.n	8008b58 <HAL_UART_Receive+0x114>
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	691b      	ldr	r3, [r3, #16]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d104      	bne.n	8008b58 <HAL_UART_Receive+0x114>
    {
      pdata8bits  = NULL;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	61bb      	str	r3, [r7, #24]
 8008b56:	e003      	b.n	8008b60 <HAL_UART_Receive+0x11c>
    }
    else
    {
      pdata8bits  = pData;
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008b60:	e036      	b.n	8008bd0 <HAL_UART_Receive+0x18c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	9300      	str	r3, [sp, #0]
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	2120      	movs	r1, #32
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f000 fb2f 	bl	80091d0 <UART_WaitOnFlagUntilTimeout>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d005      	beq.n	8008b84 <HAL_UART_Receive+0x140>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2220      	movs	r2, #32
 8008b7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8008b80:	2303      	movs	r3, #3
 8008b82:	e032      	b.n	8008bea <HAL_UART_Receive+0x1a6>
      }
      if (pdata8bits == NULL)
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10c      	bne.n	8008ba4 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b90:	b29a      	uxth	r2, r3
 8008b92:	8a7b      	ldrh	r3, [r7, #18]
 8008b94:	4013      	ands	r3, r2
 8008b96:	b29a      	uxth	r2, r3
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	3302      	adds	r3, #2
 8008ba0:	61bb      	str	r3, [r7, #24]
 8008ba2:	e00c      	b.n	8008bbe <HAL_UART_Receive+0x17a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	8a7b      	ldrh	r3, [r7, #18]
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	b2da      	uxtb	r2, r3
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	3b01      	subs	r3, #1
 8008bc8:	b29a      	uxth	r2, r3
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d1c2      	bne.n	8008b62 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2220      	movs	r2, #32
 8008be0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8008be4:	2300      	movs	r3, #0
 8008be6:	e000      	b.n	8008bea <HAL_UART_Receive+0x1a6>
  }
  else
  {
    return HAL_BUSY;
 8008be8:	2302      	movs	r3, #2
  }
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3720      	adds	r7, #32
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
	...

08008bf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bf8:	b094      	sub	sp, #80	; 0x50
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	4b7e      	ldr	r3, [pc, #504]	; (8008e04 <UART_SetConfig+0x210>)
 8008c0a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0e:	689a      	ldr	r2, [r3, #8]
 8008c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c12:	691b      	ldr	r3, [r3, #16]
 8008c14:	431a      	orrs	r2, r3
 8008c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c18:	695b      	ldr	r3, [r3, #20]
 8008c1a:	431a      	orrs	r2, r3
 8008c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1e:	69db      	ldr	r3, [r3, #28]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4977      	ldr	r1, [pc, #476]	; (8008e08 <UART_SetConfig+0x214>)
 8008c2c:	4019      	ands	r1, r3
 8008c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c34:	430b      	orrs	r3, r1
 8008c36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c44:	68d9      	ldr	r1, [r3, #12]
 8008c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	ea40 0301 	orr.w	r3, r0, r1
 8008c4e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c52:	699b      	ldr	r3, [r3, #24]
 8008c54:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	4b6a      	ldr	r3, [pc, #424]	; (8008e04 <UART_SetConfig+0x210>)
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d009      	beq.n	8008c74 <UART_SetConfig+0x80>
 8008c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	4b69      	ldr	r3, [pc, #420]	; (8008e0c <UART_SetConfig+0x218>)
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d004      	beq.n	8008c74 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6c:	6a1a      	ldr	r2, [r3, #32]
 8008c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c70:	4313      	orrs	r3, r2
 8008c72:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8008c7e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8008c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c88:	430b      	orrs	r3, r1
 8008c8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c92:	f023 000f 	bic.w	r0, r3, #15
 8008c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c98:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	ea40 0301 	orr.w	r3, r0, r1
 8008ca2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	4b59      	ldr	r3, [pc, #356]	; (8008e10 <UART_SetConfig+0x21c>)
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d102      	bne.n	8008cb4 <UART_SetConfig+0xc0>
 8008cae:	2301      	movs	r3, #1
 8008cb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cb2:	e029      	b.n	8008d08 <UART_SetConfig+0x114>
 8008cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	4b56      	ldr	r3, [pc, #344]	; (8008e14 <UART_SetConfig+0x220>)
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d102      	bne.n	8008cc4 <UART_SetConfig+0xd0>
 8008cbe:	2302      	movs	r3, #2
 8008cc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cc2:	e021      	b.n	8008d08 <UART_SetConfig+0x114>
 8008cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	4b53      	ldr	r3, [pc, #332]	; (8008e18 <UART_SetConfig+0x224>)
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d102      	bne.n	8008cd4 <UART_SetConfig+0xe0>
 8008cce:	2304      	movs	r3, #4
 8008cd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cd2:	e019      	b.n	8008d08 <UART_SetConfig+0x114>
 8008cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	4b50      	ldr	r3, [pc, #320]	; (8008e1c <UART_SetConfig+0x228>)
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d102      	bne.n	8008ce4 <UART_SetConfig+0xf0>
 8008cde:	2308      	movs	r3, #8
 8008ce0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ce2:	e011      	b.n	8008d08 <UART_SetConfig+0x114>
 8008ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	4b4d      	ldr	r3, [pc, #308]	; (8008e20 <UART_SetConfig+0x22c>)
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d102      	bne.n	8008cf4 <UART_SetConfig+0x100>
 8008cee:	2310      	movs	r3, #16
 8008cf0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cf2:	e009      	b.n	8008d08 <UART_SetConfig+0x114>
 8008cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	4b42      	ldr	r3, [pc, #264]	; (8008e04 <UART_SetConfig+0x210>)
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d102      	bne.n	8008d04 <UART_SetConfig+0x110>
 8008cfe:	2320      	movs	r3, #32
 8008d00:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d02:	e001      	b.n	8008d08 <UART_SetConfig+0x114>
 8008d04:	2300      	movs	r3, #0
 8008d06:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	4b3d      	ldr	r3, [pc, #244]	; (8008e04 <UART_SetConfig+0x210>)
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d005      	beq.n	8008d1e <UART_SetConfig+0x12a>
 8008d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	4b3d      	ldr	r3, [pc, #244]	; (8008e0c <UART_SetConfig+0x218>)
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	f040 8085 	bne.w	8008e28 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d20:	2200      	movs	r2, #0
 8008d22:	623b      	str	r3, [r7, #32]
 8008d24:	627a      	str	r2, [r7, #36]	; 0x24
 8008d26:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008d2a:	f7fd fe39 	bl	80069a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008d2e:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f000 80e8 	beq.w	8008f08 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3c:	4a39      	ldr	r2, [pc, #228]	; (8008e24 <UART_SetConfig+0x230>)
 8008d3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d42:	461a      	mov	r2, r3
 8008d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d46:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d4a:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4e:	685a      	ldr	r2, [r3, #4]
 8008d50:	4613      	mov	r3, r2
 8008d52:	005b      	lsls	r3, r3, #1
 8008d54:	4413      	add	r3, r2
 8008d56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d305      	bcc.n	8008d68 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d903      	bls.n	8008d70 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008d6e:	e048      	b.n	8008e02 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d72:	2200      	movs	r2, #0
 8008d74:	61bb      	str	r3, [r7, #24]
 8008d76:	61fa      	str	r2, [r7, #28]
 8008d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7c:	4a29      	ldr	r2, [pc, #164]	; (8008e24 <UART_SetConfig+0x230>)
 8008d7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	2200      	movs	r2, #0
 8008d86:	613b      	str	r3, [r7, #16]
 8008d88:	617a      	str	r2, [r7, #20]
 8008d8a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008d8e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008d92:	f7f7 fa79 	bl	8000288 <__aeabi_uldivmod>
 8008d96:	4602      	mov	r2, r0
 8008d98:	460b      	mov	r3, r1
 8008d9a:	4610      	mov	r0, r2
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	f04f 0200 	mov.w	r2, #0
 8008da2:	f04f 0300 	mov.w	r3, #0
 8008da6:	020b      	lsls	r3, r1, #8
 8008da8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008dac:	0202      	lsls	r2, r0, #8
 8008dae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008db0:	6849      	ldr	r1, [r1, #4]
 8008db2:	0849      	lsrs	r1, r1, #1
 8008db4:	2000      	movs	r0, #0
 8008db6:	460c      	mov	r4, r1
 8008db8:	4605      	mov	r5, r0
 8008dba:	eb12 0804 	adds.w	r8, r2, r4
 8008dbe:	eb43 0905 	adc.w	r9, r3, r5
 8008dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	60bb      	str	r3, [r7, #8]
 8008dca:	60fa      	str	r2, [r7, #12]
 8008dcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008dd0:	4640      	mov	r0, r8
 8008dd2:	4649      	mov	r1, r9
 8008dd4:	f7f7 fa58 	bl	8000288 <__aeabi_uldivmod>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	460b      	mov	r3, r1
 8008ddc:	4613      	mov	r3, r2
 8008dde:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008de2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008de6:	d308      	bcc.n	8008dfa <UART_SetConfig+0x206>
 8008de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dee:	d204      	bcs.n	8008dfa <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8008df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008df6:	60da      	str	r2, [r3, #12]
 8008df8:	e003      	b.n	8008e02 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8008e00:	e082      	b.n	8008f08 <UART_SetConfig+0x314>
 8008e02:	e081      	b.n	8008f08 <UART_SetConfig+0x314>
 8008e04:	46002400 	.word	0x46002400
 8008e08:	cfff69f3 	.word	0xcfff69f3
 8008e0c:	56002400 	.word	0x56002400
 8008e10:	40013800 	.word	0x40013800
 8008e14:	40004400 	.word	0x40004400
 8008e18:	40004800 	.word	0x40004800
 8008e1c:	40004c00 	.word	0x40004c00
 8008e20:	40005000 	.word	0x40005000
 8008e24:	0800a6c0 	.word	0x0800a6c0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2a:	69db      	ldr	r3, [r3, #28]
 8008e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e30:	d13c      	bne.n	8008eac <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e34:	2200      	movs	r2, #0
 8008e36:	603b      	str	r3, [r7, #0]
 8008e38:	607a      	str	r2, [r7, #4]
 8008e3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e3e:	f7fd fdaf 	bl	80069a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008e42:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d05e      	beq.n	8008f08 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4e:	4a39      	ldr	r2, [pc, #228]	; (8008f34 <UART_SetConfig+0x340>)
 8008e50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e54:	461a      	mov	r2, r3
 8008e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e58:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e5c:	005a      	lsls	r2, r3, #1
 8008e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	085b      	lsrs	r3, r3, #1
 8008e64:	441a      	add	r2, r3
 8008e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e72:	2b0f      	cmp	r3, #15
 8008e74:	d916      	bls.n	8008ea4 <UART_SetConfig+0x2b0>
 8008e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e7c:	d212      	bcs.n	8008ea4 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	f023 030f 	bic.w	r3, r3, #15
 8008e86:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e8a:	085b      	lsrs	r3, r3, #1
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	f003 0307 	and.w	r3, r3, #7
 8008e92:	b29a      	uxth	r2, r3
 8008e94:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008e96:	4313      	orrs	r3, r2
 8008e98:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8008e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8008ea0:	60da      	str	r2, [r3, #12]
 8008ea2:	e031      	b.n	8008f08 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008eaa:	e02d      	b.n	8008f08 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008eae:	2200      	movs	r2, #0
 8008eb0:	469a      	mov	sl, r3
 8008eb2:	4693      	mov	fp, r2
 8008eb4:	4650      	mov	r0, sl
 8008eb6:	4659      	mov	r1, fp
 8008eb8:	f7fd fd72 	bl	80069a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008ebc:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8008ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d021      	beq.n	8008f08 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec8:	4a1a      	ldr	r2, [pc, #104]	; (8008f34 <UART_SetConfig+0x340>)
 8008eca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ece:	461a      	mov	r2, r3
 8008ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ed2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	085b      	lsrs	r3, r3, #1
 8008edc:	441a      	add	r2, r3
 8008ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eea:	2b0f      	cmp	r3, #15
 8008eec:	d909      	bls.n	8008f02 <UART_SetConfig+0x30e>
 8008eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ef4:	d205      	bcs.n	8008f02 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ef8:	b29a      	uxth	r2, r3
 8008efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	60da      	str	r2, [r3, #12]
 8008f00:	e002      	b.n	8008f08 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f12:	2201      	movs	r2, #1
 8008f14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f20:	2200      	movs	r2, #0
 8008f22:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008f24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3750      	adds	r7, #80	; 0x50
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f32:	bf00      	nop
 8008f34:	0800a6c0 	.word	0x0800a6c0

08008f38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f44:	f003 0308 	and.w	r3, r3, #8
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00a      	beq.n	8008f62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	430a      	orrs	r2, r1
 8008f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f66:	f003 0301 	and.w	r3, r3, #1
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00a      	beq.n	8008f84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	430a      	orrs	r2, r1
 8008f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f88:	f003 0302 	and.w	r3, r3, #2
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d00a      	beq.n	8008fa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	430a      	orrs	r2, r1
 8008fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008faa:	f003 0304 	and.w	r3, r3, #4
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00a      	beq.n	8008fc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	430a      	orrs	r2, r1
 8008fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fcc:	f003 0310 	and.w	r3, r3, #16
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d00a      	beq.n	8008fea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	430a      	orrs	r2, r1
 8008fe8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fee:	f003 0320 	and.w	r3, r3, #32
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00a      	beq.n	800900c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	430a      	orrs	r2, r1
 800900a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009014:	2b00      	cmp	r3, #0
 8009016:	d01a      	beq.n	800904e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	430a      	orrs	r2, r1
 800902c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009032:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009036:	d10a      	bne.n	800904e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	430a      	orrs	r2, r1
 800904c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00a      	beq.n	8009070 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	430a      	orrs	r2, r1
 800906e:	605a      	str	r2, [r3, #4]
  }
}
 8009070:	bf00      	nop
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b098      	sub	sp, #96	; 0x60
 8009080:	af02      	add	r7, sp, #8
 8009082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800908c:	f7f8 fed8 	bl	8001e40 <HAL_GetTick>
 8009090:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 0308 	and.w	r3, r3, #8
 800909c:	2b08      	cmp	r3, #8
 800909e:	d12f      	bne.n	8009100 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090a4:	9300      	str	r3, [sp, #0]
 80090a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090a8:	2200      	movs	r2, #0
 80090aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f88e 	bl	80091d0 <UART_WaitOnFlagUntilTimeout>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d022      	beq.n	8009100 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c2:	e853 3f00 	ldrex	r3, [r3]
 80090c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80090c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090ce:	653b      	str	r3, [r7, #80]	; 0x50
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	461a      	mov	r2, r3
 80090d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090d8:	647b      	str	r3, [r7, #68]	; 0x44
 80090da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80090de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090e0:	e841 2300 	strex	r3, r2, [r1]
 80090e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80090e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d1e6      	bne.n	80090ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2220      	movs	r2, #32
 80090f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090fc:	2303      	movs	r3, #3
 80090fe:	e063      	b.n	80091c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 0304 	and.w	r3, r3, #4
 800910a:	2b04      	cmp	r3, #4
 800910c:	d149      	bne.n	80091a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800910e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009112:	9300      	str	r3, [sp, #0]
 8009114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009116:	2200      	movs	r2, #0
 8009118:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 f857 	bl	80091d0 <UART_WaitOnFlagUntilTimeout>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d03c      	beq.n	80091a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009130:	e853 3f00 	ldrex	r3, [r3]
 8009134:	623b      	str	r3, [r7, #32]
   return(result);
 8009136:	6a3b      	ldr	r3, [r7, #32]
 8009138:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800913c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	461a      	mov	r2, r3
 8009144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009146:	633b      	str	r3, [r7, #48]	; 0x30
 8009148:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800914c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800914e:	e841 2300 	strex	r3, r2, [r1]
 8009152:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1e6      	bne.n	8009128 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	3308      	adds	r3, #8
 8009160:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	e853 3f00 	ldrex	r3, [r3]
 8009168:	60fb      	str	r3, [r7, #12]
   return(result);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f023 0301 	bic.w	r3, r3, #1
 8009170:	64bb      	str	r3, [r7, #72]	; 0x48
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	3308      	adds	r3, #8
 8009178:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800917a:	61fa      	str	r2, [r7, #28]
 800917c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917e:	69b9      	ldr	r1, [r7, #24]
 8009180:	69fa      	ldr	r2, [r7, #28]
 8009182:	e841 2300 	strex	r3, r2, [r1]
 8009186:	617b      	str	r3, [r7, #20]
   return(result);
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d1e5      	bne.n	800915a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2220      	movs	r2, #32
 8009192:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800919e:	2303      	movs	r3, #3
 80091a0:	e012      	b.n	80091c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2220      	movs	r2, #32
 80091a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2220      	movs	r2, #32
 80091ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80091c6:	2300      	movs	r3, #0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3758      	adds	r7, #88	; 0x58
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	603b      	str	r3, [r7, #0]
 80091dc:	4613      	mov	r3, r2
 80091de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091e0:	e049      	b.n	8009276 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e8:	d045      	beq.n	8009276 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091ea:	f7f8 fe29 	bl	8001e40 <HAL_GetTick>
 80091ee:	4602      	mov	r2, r0
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	1ad3      	subs	r3, r2, r3
 80091f4:	69ba      	ldr	r2, [r7, #24]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d302      	bcc.n	8009200 <UART_WaitOnFlagUntilTimeout+0x30>
 80091fa:	69bb      	ldr	r3, [r7, #24]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d101      	bne.n	8009204 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009200:	2303      	movs	r3, #3
 8009202:	e048      	b.n	8009296 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f003 0304 	and.w	r3, r3, #4
 800920e:	2b00      	cmp	r3, #0
 8009210:	d031      	beq.n	8009276 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	69db      	ldr	r3, [r3, #28]
 8009218:	f003 0308 	and.w	r3, r3, #8
 800921c:	2b08      	cmp	r3, #8
 800921e:	d110      	bne.n	8009242 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2208      	movs	r2, #8
 8009226:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009228:	68f8      	ldr	r0, [r7, #12]
 800922a:	f000 f838 	bl	800929e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2208      	movs	r2, #8
 8009232:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	e029      	b.n	8009296 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	69db      	ldr	r3, [r3, #28]
 8009248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800924c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009250:	d111      	bne.n	8009276 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800925a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f000 f81e 	bl	800929e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2220      	movs	r2, #32
 8009266:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009272:	2303      	movs	r3, #3
 8009274:	e00f      	b.n	8009296 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	69da      	ldr	r2, [r3, #28]
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	4013      	ands	r3, r2
 8009280:	68ba      	ldr	r2, [r7, #8]
 8009282:	429a      	cmp	r2, r3
 8009284:	bf0c      	ite	eq
 8009286:	2301      	moveq	r3, #1
 8009288:	2300      	movne	r3, #0
 800928a:	b2db      	uxtb	r3, r3
 800928c:	461a      	mov	r2, r3
 800928e:	79fb      	ldrb	r3, [r7, #7]
 8009290:	429a      	cmp	r2, r3
 8009292:	d0a6      	beq.n	80091e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3710      	adds	r7, #16
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800929e:	b480      	push	{r7}
 80092a0:	b095      	sub	sp, #84	; 0x54
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ae:	e853 3f00 	ldrex	r3, [r3]
 80092b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80092b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	461a      	mov	r2, r3
 80092c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092c4:	643b      	str	r3, [r7, #64]	; 0x40
 80092c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092cc:	e841 2300 	strex	r3, r2, [r1]
 80092d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d1e6      	bne.n	80092a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	3308      	adds	r3, #8
 80092de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e0:	6a3b      	ldr	r3, [r7, #32]
 80092e2:	e853 3f00 	ldrex	r3, [r3]
 80092e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092ee:	f023 0301 	bic.w	r3, r3, #1
 80092f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	3308      	adds	r3, #8
 80092fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80092fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009300:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009304:	e841 2300 	strex	r3, r2, [r1]
 8009308:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800930a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930c:	2b00      	cmp	r3, #0
 800930e:	d1e3      	bne.n	80092d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009314:	2b01      	cmp	r3, #1
 8009316:	d118      	bne.n	800934a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	e853 3f00 	ldrex	r3, [r3]
 8009324:	60bb      	str	r3, [r7, #8]
   return(result);
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	f023 0310 	bic.w	r3, r3, #16
 800932c:	647b      	str	r3, [r7, #68]	; 0x44
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	461a      	mov	r2, r3
 8009334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009336:	61bb      	str	r3, [r7, #24]
 8009338:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933a:	6979      	ldr	r1, [r7, #20]
 800933c:	69ba      	ldr	r2, [r7, #24]
 800933e:	e841 2300 	strex	r3, r2, [r1]
 8009342:	613b      	str	r3, [r7, #16]
   return(result);
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d1e6      	bne.n	8009318 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2220      	movs	r2, #32
 800934e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800935e:	bf00      	nop
 8009360:	3754      	adds	r7, #84	; 0x54
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr

0800936a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800936a:	b480      	push	{r7}
 800936c:	b085      	sub	sp, #20
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009378:	2b01      	cmp	r3, #1
 800937a:	d101      	bne.n	8009380 <HAL_UARTEx_DisableFifoMode+0x16>
 800937c:	2302      	movs	r3, #2
 800937e:	e027      	b.n	80093d0 <HAL_UARTEx_DisableFifoMode+0x66>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2201      	movs	r2, #1
 8009384:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2224      	movs	r2, #36	; 0x24
 800938c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f022 0201 	bic.w	r2, r2, #1
 80093a6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80093ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2220      	movs	r2, #32
 80093c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3714      	adds	r7, #20
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d101      	bne.n	80093f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80093f0:	2302      	movs	r3, #2
 80093f2:	e02d      	b.n	8009450 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2201      	movs	r2, #1
 80093f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2224      	movs	r2, #36	; 0x24
 8009400:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f022 0201 	bic.w	r2, r2, #1
 800941a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	683a      	ldr	r2, [r7, #0]
 800942c:	430a      	orrs	r2, r1
 800942e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 f84f 	bl	80094d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2220      	movs	r2, #32
 8009442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009468:	2b01      	cmp	r3, #1
 800946a:	d101      	bne.n	8009470 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800946c:	2302      	movs	r3, #2
 800946e:	e02d      	b.n	80094cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2224      	movs	r2, #36	; 0x24
 800947c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f022 0201 	bic.w	r2, r2, #1
 8009496:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	683a      	ldr	r2, [r7, #0]
 80094a8:	430a      	orrs	r2, r1
 80094aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 f811 	bl	80094d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2220      	movs	r2, #32
 80094be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80094ca:	2300      	movs	r3, #0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b085      	sub	sp, #20
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d108      	bne.n	80094f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2201      	movs	r2, #1
 80094e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2201      	movs	r2, #1
 80094f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80094f4:	e031      	b.n	800955a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80094f6:	2308      	movs	r3, #8
 80094f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80094fa:	2308      	movs	r3, #8
 80094fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	0e5b      	lsrs	r3, r3, #25
 8009506:	b2db      	uxtb	r3, r3
 8009508:	f003 0307 	and.w	r3, r3, #7
 800950c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	0f5b      	lsrs	r3, r3, #29
 8009516:	b2db      	uxtb	r3, r3
 8009518:	f003 0307 	and.w	r3, r3, #7
 800951c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800951e:	7bbb      	ldrb	r3, [r7, #14]
 8009520:	7b3a      	ldrb	r2, [r7, #12]
 8009522:	4911      	ldr	r1, [pc, #68]	; (8009568 <UARTEx_SetNbDataToProcess+0x94>)
 8009524:	5c8a      	ldrb	r2, [r1, r2]
 8009526:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800952a:	7b3a      	ldrb	r2, [r7, #12]
 800952c:	490f      	ldr	r1, [pc, #60]	; (800956c <UARTEx_SetNbDataToProcess+0x98>)
 800952e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009530:	fb93 f3f2 	sdiv	r3, r3, r2
 8009534:	b29a      	uxth	r2, r3
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800953c:	7bfb      	ldrb	r3, [r7, #15]
 800953e:	7b7a      	ldrb	r2, [r7, #13]
 8009540:	4909      	ldr	r1, [pc, #36]	; (8009568 <UARTEx_SetNbDataToProcess+0x94>)
 8009542:	5c8a      	ldrb	r2, [r1, r2]
 8009544:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009548:	7b7a      	ldrb	r2, [r7, #13]
 800954a:	4908      	ldr	r1, [pc, #32]	; (800956c <UARTEx_SetNbDataToProcess+0x98>)
 800954c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800954e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009552:	b29a      	uxth	r2, r3
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800955a:	bf00      	nop
 800955c:	3714      	adds	r7, #20
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop
 8009568:	0800a6d8 	.word	0x0800a6d8
 800956c:	0800a6e0 	.word	0x0800a6e0

08009570 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8009570:	b480      	push	{r7}
 8009572:	b08b      	sub	sp, #44	; 0x2c
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	fa93 f3a3 	rbit	r3, r3
 800958a:	613b      	str	r3, [r7, #16]
  return result;
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d101      	bne.n	800959a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8009596:	2320      	movs	r3, #32
 8009598:	e003      	b.n	80095a2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	fab3 f383 	clz	r3, r3
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	005b      	lsls	r3, r3, #1
 80095a4:	2103      	movs	r1, #3
 80095a6:	fa01 f303 	lsl.w	r3, r1, r3
 80095aa:	43db      	mvns	r3, r3
 80095ac:	401a      	ands	r2, r3
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095b2:	6a3b      	ldr	r3, [r7, #32]
 80095b4:	fa93 f3a3 	rbit	r3, r3
 80095b8:	61fb      	str	r3, [r7, #28]
  return result;
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80095be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d101      	bne.n	80095c8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80095c4:	2320      	movs	r3, #32
 80095c6:	e003      	b.n	80095d0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80095c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ca:	fab3 f383 	clz	r3, r3
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	005b      	lsls	r3, r3, #1
 80095d2:	6879      	ldr	r1, [r7, #4]
 80095d4:	fa01 f303 	lsl.w	r3, r1, r3
 80095d8:	431a      	orrs	r2, r3
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	601a      	str	r2, [r3, #0]
}
 80095de:	bf00      	nop
 80095e0:	372c      	adds	r7, #44	; 0x2c
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr

080095ea <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80095ea:	b480      	push	{r7}
 80095ec:	b085      	sub	sp, #20
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	60f8      	str	r0, [r7, #12]
 80095f2:	60b9      	str	r1, [r7, #8]
 80095f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	685a      	ldr	r2, [r3, #4]
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	43db      	mvns	r3, r3
 80095fe:	401a      	ands	r2, r3
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	6879      	ldr	r1, [r7, #4]
 8009604:	fb01 f303 	mul.w	r3, r1, r3
 8009608:	431a      	orrs	r2, r3
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	605a      	str	r2, [r3, #4]
}
 800960e:	bf00      	nop
 8009610:	3714      	adds	r7, #20
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr

0800961a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800961a:	b480      	push	{r7}
 800961c:	b08b      	sub	sp, #44	; 0x2c
 800961e:	af00      	add	r7, sp, #0
 8009620:	60f8      	str	r0, [r7, #12]
 8009622:	60b9      	str	r1, [r7, #8]
 8009624:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	689a      	ldr	r2, [r3, #8]
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	fa93 f3a3 	rbit	r3, r3
 8009634:	613b      	str	r3, [r7, #16]
  return result;
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d101      	bne.n	8009644 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8009640:	2320      	movs	r3, #32
 8009642:	e003      	b.n	800964c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8009644:	69bb      	ldr	r3, [r7, #24]
 8009646:	fab3 f383 	clz	r3, r3
 800964a:	b2db      	uxtb	r3, r3
 800964c:	005b      	lsls	r3, r3, #1
 800964e:	2103      	movs	r1, #3
 8009650:	fa01 f303 	lsl.w	r3, r1, r3
 8009654:	43db      	mvns	r3, r3
 8009656:	401a      	ands	r2, r3
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800965c:	6a3b      	ldr	r3, [r7, #32]
 800965e:	fa93 f3a3 	rbit	r3, r3
 8009662:	61fb      	str	r3, [r7, #28]
  return result;
 8009664:	69fb      	ldr	r3, [r7, #28]
 8009666:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966a:	2b00      	cmp	r3, #0
 800966c:	d101      	bne.n	8009672 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800966e:	2320      	movs	r3, #32
 8009670:	e003      	b.n	800967a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8009672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009674:	fab3 f383 	clz	r3, r3
 8009678:	b2db      	uxtb	r3, r3
 800967a:	005b      	lsls	r3, r3, #1
 800967c:	6879      	ldr	r1, [r7, #4]
 800967e:	fa01 f303 	lsl.w	r3, r1, r3
 8009682:	431a      	orrs	r2, r3
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8009688:	bf00      	nop
 800968a:	372c      	adds	r7, #44	; 0x2c
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8009694:	b480      	push	{r7}
 8009696:	b08b      	sub	sp, #44	; 0x2c
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	68da      	ldr	r2, [r3, #12]
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	fa93 f3a3 	rbit	r3, r3
 80096ae:	613b      	str	r3, [r7, #16]
  return result;
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d101      	bne.n	80096be <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80096ba:	2320      	movs	r3, #32
 80096bc:	e003      	b.n	80096c6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	fab3 f383 	clz	r3, r3
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	005b      	lsls	r3, r3, #1
 80096c8:	2103      	movs	r1, #3
 80096ca:	fa01 f303 	lsl.w	r3, r1, r3
 80096ce:	43db      	mvns	r3, r3
 80096d0:	401a      	ands	r2, r3
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096d6:	6a3b      	ldr	r3, [r7, #32]
 80096d8:	fa93 f3a3 	rbit	r3, r3
 80096dc:	61fb      	str	r3, [r7, #28]
  return result;
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80096e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d101      	bne.n	80096ec <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80096e8:	2320      	movs	r3, #32
 80096ea:	e003      	b.n	80096f4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80096ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ee:	fab3 f383 	clz	r3, r3
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	005b      	lsls	r3, r3, #1
 80096f6:	6879      	ldr	r1, [r7, #4]
 80096f8:	fa01 f303 	lsl.w	r3, r1, r3
 80096fc:	431a      	orrs	r2, r3
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	60da      	str	r2, [r3, #12]
}
 8009702:	bf00      	nop
 8009704:	372c      	adds	r7, #44	; 0x2c
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr

0800970e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800970e:	b480      	push	{r7}
 8009710:	b08b      	sub	sp, #44	; 0x2c
 8009712:	af00      	add	r7, sp, #0
 8009714:	60f8      	str	r0, [r7, #12]
 8009716:	60b9      	str	r1, [r7, #8]
 8009718:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	6a1a      	ldr	r2, [r3, #32]
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	fa93 f3a3 	rbit	r3, r3
 8009728:	613b      	str	r3, [r7, #16]
  return result;
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800972e:	69bb      	ldr	r3, [r7, #24]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d101      	bne.n	8009738 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8009734:	2320      	movs	r3, #32
 8009736:	e003      	b.n	8009740 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8009738:	69bb      	ldr	r3, [r7, #24]
 800973a:	fab3 f383 	clz	r3, r3
 800973e:	b2db      	uxtb	r3, r3
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	210f      	movs	r1, #15
 8009744:	fa01 f303 	lsl.w	r3, r1, r3
 8009748:	43db      	mvns	r3, r3
 800974a:	401a      	ands	r2, r3
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009750:	6a3b      	ldr	r3, [r7, #32]
 8009752:	fa93 f3a3 	rbit	r3, r3
 8009756:	61fb      	str	r3, [r7, #28]
  return result;
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800975c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975e:	2b00      	cmp	r3, #0
 8009760:	d101      	bne.n	8009766 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8009762:	2320      	movs	r3, #32
 8009764:	e003      	b.n	800976e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8009766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009768:	fab3 f383 	clz	r3, r3
 800976c:	b2db      	uxtb	r3, r3
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	6879      	ldr	r1, [r7, #4]
 8009772:	fa01 f303 	lsl.w	r3, r1, r3
 8009776:	431a      	orrs	r2, r3
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800977c:	bf00      	nop
 800977e:	372c      	adds	r7, #44	; 0x2c
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009788:	b480      	push	{r7}
 800978a:	b08b      	sub	sp, #44	; 0x2c
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	0a1b      	lsrs	r3, r3, #8
 800979c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	fa93 f3a3 	rbit	r3, r3
 80097a4:	613b      	str	r3, [r7, #16]
  return result;
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d101      	bne.n	80097b4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80097b0:	2320      	movs	r3, #32
 80097b2:	e003      	b.n	80097bc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80097b4:	69bb      	ldr	r3, [r7, #24]
 80097b6:	fab3 f383 	clz	r3, r3
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	210f      	movs	r1, #15
 80097c0:	fa01 f303 	lsl.w	r3, r1, r3
 80097c4:	43db      	mvns	r3, r3
 80097c6:	401a      	ands	r2, r3
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	0a1b      	lsrs	r3, r3, #8
 80097cc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097ce:	6a3b      	ldr	r3, [r7, #32]
 80097d0:	fa93 f3a3 	rbit	r3, r3
 80097d4:	61fb      	str	r3, [r7, #28]
  return result;
 80097d6:	69fb      	ldr	r3, [r7, #28]
 80097d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80097da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d101      	bne.n	80097e4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80097e0:	2320      	movs	r3, #32
 80097e2:	e003      	b.n	80097ec <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80097e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e6:	fab3 f383 	clz	r3, r3
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	6879      	ldr	r1, [r7, #4]
 80097f0:	fa01 f303 	lsl.w	r3, r1, r3
 80097f4:	431a      	orrs	r2, r3
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80097fa:	bf00      	nop
 80097fc:	372c      	adds	r7, #44	; 0x2c
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr

08009806 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009806:	b580      	push	{r7, lr}
 8009808:	b08a      	sub	sp, #40	; 0x28
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
 800980e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	fa93 f3a3 	rbit	r3, r3
 800981c:	617b      	str	r3, [r7, #20]
  return result;
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d101      	bne.n	800982c <LL_GPIO_Init+0x26>
    return 32U;
 8009828:	2320      	movs	r3, #32
 800982a:	e003      	b.n	8009834 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	fab3 f383 	clz	r3, r3
 8009832:	b2db      	uxtb	r3, r3
 8009834:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8009836:	e058      	b.n	80098ea <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	2101      	movs	r1, #1
 800983e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009840:	fa01 f303 	lsl.w	r3, r1, r3
 8009844:	4013      	ands	r3, r2
 8009846:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 8009848:	6a3b      	ldr	r3, [r7, #32]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d04a      	beq.n	80098e4 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	2b01      	cmp	r3, #1
 8009854:	d003      	beq.n	800985e <LL_GPIO_Init+0x58>
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	2b02      	cmp	r3, #2
 800985c:	d10e      	bne.n	800987c <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	461a      	mov	r2, r3
 8009864:	6a39      	ldr	r1, [r7, #32]
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f7ff fed7 	bl	800961a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	6819      	ldr	r1, [r3, #0]
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	461a      	mov	r2, r3
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f7ff feb7 	bl	80095ea <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	461a      	mov	r2, r3
 8009882:	6a39      	ldr	r1, [r7, #32]
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f7ff ff05 	bl	8009694 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	2b02      	cmp	r3, #2
 8009890:	d121      	bne.n	80098d6 <LL_GPIO_Init+0xd0>
 8009892:	6a3b      	ldr	r3, [r7, #32]
 8009894:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	fa93 f3a3 	rbit	r3, r3
 800989c:	60bb      	str	r3, [r7, #8]
  return result;
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d101      	bne.n	80098ac <LL_GPIO_Init+0xa6>
    return 32U;
 80098a8:	2320      	movs	r3, #32
 80098aa:	e003      	b.n	80098b4 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	fab3 f383 	clz	r3, r3
 80098b2:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 80098b4:	2b07      	cmp	r3, #7
 80098b6:	d807      	bhi.n	80098c8 <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	695b      	ldr	r3, [r3, #20]
 80098bc:	461a      	mov	r2, r3
 80098be:	6a39      	ldr	r1, [r7, #32]
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f7ff ff24 	bl	800970e <LL_GPIO_SetAFPin_0_7>
 80098c6:	e006      	b.n	80098d6 <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	695b      	ldr	r3, [r3, #20]
 80098cc:	461a      	mov	r2, r3
 80098ce:	6a39      	ldr	r1, [r7, #32]
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f7ff ff59 	bl	8009788 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	461a      	mov	r2, r3
 80098dc:	6a39      	ldr	r1, [r7, #32]
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f7ff fe46 	bl	8009570 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80098e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e6:	3301      	adds	r3, #1
 80098e8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f0:	fa22 f303 	lsr.w	r3, r2, r3
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d19f      	bne.n	8009838 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3728      	adds	r7, #40	; 0x28
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009902:	b084      	sub	sp, #16
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	f107 001c 	add.w	r0, r7, #28
 8009910:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 fd85 	bl	800a430 <USB_CoreReset>
 8009926:	4603      	mov	r3, r0
 8009928:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800992a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800992c:	2b00      	cmp	r3, #0
 800992e:	d106      	bne.n	800993e <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009934:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	639a      	str	r2, [r3, #56]	; 0x38
 800993c:	e005      	b.n	800994a <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009942:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 800994a:	7bfb      	ldrb	r3, [r7, #15]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3710      	adds	r7, #16
 8009950:	46bd      	mov	sp, r7
 8009952:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009956:	b004      	add	sp, #16
 8009958:	4770      	bx	lr
	...

0800995c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800995c:	b480      	push	{r7}
 800995e:	b087      	sub	sp, #28
 8009960:	af00      	add	r7, sp, #0
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	4613      	mov	r3, r2
 8009968:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800996a:	79fb      	ldrb	r3, [r7, #7]
 800996c:	2b02      	cmp	r3, #2
 800996e:	d165      	bne.n	8009a3c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	4a41      	ldr	r2, [pc, #260]	; (8009a78 <USB_SetTurnaroundTime+0x11c>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d906      	bls.n	8009986 <USB_SetTurnaroundTime+0x2a>
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	4a40      	ldr	r2, [pc, #256]	; (8009a7c <USB_SetTurnaroundTime+0x120>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d202      	bcs.n	8009986 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009980:	230f      	movs	r3, #15
 8009982:	617b      	str	r3, [r7, #20]
 8009984:	e062      	b.n	8009a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	4a3c      	ldr	r2, [pc, #240]	; (8009a7c <USB_SetTurnaroundTime+0x120>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d306      	bcc.n	800999c <USB_SetTurnaroundTime+0x40>
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	4a3b      	ldr	r2, [pc, #236]	; (8009a80 <USB_SetTurnaroundTime+0x124>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d202      	bcs.n	800999c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009996:	230e      	movs	r3, #14
 8009998:	617b      	str	r3, [r7, #20]
 800999a:	e057      	b.n	8009a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	4a38      	ldr	r2, [pc, #224]	; (8009a80 <USB_SetTurnaroundTime+0x124>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d306      	bcc.n	80099b2 <USB_SetTurnaroundTime+0x56>
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	4a37      	ldr	r2, [pc, #220]	; (8009a84 <USB_SetTurnaroundTime+0x128>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d202      	bcs.n	80099b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80099ac:	230d      	movs	r3, #13
 80099ae:	617b      	str	r3, [r7, #20]
 80099b0:	e04c      	b.n	8009a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	4a33      	ldr	r2, [pc, #204]	; (8009a84 <USB_SetTurnaroundTime+0x128>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d306      	bcc.n	80099c8 <USB_SetTurnaroundTime+0x6c>
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	4a32      	ldr	r2, [pc, #200]	; (8009a88 <USB_SetTurnaroundTime+0x12c>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d802      	bhi.n	80099c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80099c2:	230c      	movs	r3, #12
 80099c4:	617b      	str	r3, [r7, #20]
 80099c6:	e041      	b.n	8009a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	4a2f      	ldr	r2, [pc, #188]	; (8009a88 <USB_SetTurnaroundTime+0x12c>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d906      	bls.n	80099de <USB_SetTurnaroundTime+0x82>
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	4a2e      	ldr	r2, [pc, #184]	; (8009a8c <USB_SetTurnaroundTime+0x130>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d802      	bhi.n	80099de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80099d8:	230b      	movs	r3, #11
 80099da:	617b      	str	r3, [r7, #20]
 80099dc:	e036      	b.n	8009a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	4a2a      	ldr	r2, [pc, #168]	; (8009a8c <USB_SetTurnaroundTime+0x130>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d906      	bls.n	80099f4 <USB_SetTurnaroundTime+0x98>
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	4a29      	ldr	r2, [pc, #164]	; (8009a90 <USB_SetTurnaroundTime+0x134>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d802      	bhi.n	80099f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80099ee:	230a      	movs	r3, #10
 80099f0:	617b      	str	r3, [r7, #20]
 80099f2:	e02b      	b.n	8009a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	4a26      	ldr	r2, [pc, #152]	; (8009a90 <USB_SetTurnaroundTime+0x134>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d906      	bls.n	8009a0a <USB_SetTurnaroundTime+0xae>
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	4a25      	ldr	r2, [pc, #148]	; (8009a94 <USB_SetTurnaroundTime+0x138>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d202      	bcs.n	8009a0a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009a04:	2309      	movs	r3, #9
 8009a06:	617b      	str	r3, [r7, #20]
 8009a08:	e020      	b.n	8009a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	4a21      	ldr	r2, [pc, #132]	; (8009a94 <USB_SetTurnaroundTime+0x138>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d306      	bcc.n	8009a20 <USB_SetTurnaroundTime+0xc4>
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	4a20      	ldr	r2, [pc, #128]	; (8009a98 <USB_SetTurnaroundTime+0x13c>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d802      	bhi.n	8009a20 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009a1a:	2308      	movs	r3, #8
 8009a1c:	617b      	str	r3, [r7, #20]
 8009a1e:	e015      	b.n	8009a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	4a1d      	ldr	r2, [pc, #116]	; (8009a98 <USB_SetTurnaroundTime+0x13c>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d906      	bls.n	8009a36 <USB_SetTurnaroundTime+0xda>
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	4a1c      	ldr	r2, [pc, #112]	; (8009a9c <USB_SetTurnaroundTime+0x140>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d202      	bcs.n	8009a36 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009a30:	2307      	movs	r3, #7
 8009a32:	617b      	str	r3, [r7, #20]
 8009a34:	e00a      	b.n	8009a4c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009a36:	2306      	movs	r3, #6
 8009a38:	617b      	str	r3, [r7, #20]
 8009a3a:	e007      	b.n	8009a4c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009a3c:	79fb      	ldrb	r3, [r7, #7]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d102      	bne.n	8009a48 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009a42:	2309      	movs	r3, #9
 8009a44:	617b      	str	r3, [r7, #20]
 8009a46:	e001      	b.n	8009a4c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009a48:	2309      	movs	r3, #9
 8009a4a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	68da      	ldr	r2, [r3, #12]
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	029b      	lsls	r3, r3, #10
 8009a60:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009a64:	431a      	orrs	r2, r3
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	371c      	adds	r7, #28
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr
 8009a78:	00d8acbf 	.word	0x00d8acbf
 8009a7c:	00e4e1c0 	.word	0x00e4e1c0
 8009a80:	00f42400 	.word	0x00f42400
 8009a84:	01067380 	.word	0x01067380
 8009a88:	011a499f 	.word	0x011a499f
 8009a8c:	01312cff 	.word	0x01312cff
 8009a90:	014ca43f 	.word	0x014ca43f
 8009a94:	016e3600 	.word	0x016e3600
 8009a98:	01a6ab1f 	.word	0x01a6ab1f
 8009a9c:	01e84800 	.word	0x01e84800

08009aa0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	689b      	ldr	r3, [r3, #8]
 8009aac:	f023 0201 	bic.w	r2, r3, #1
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	370c      	adds	r7, #12
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr

08009ac2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b084      	sub	sp, #16
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
 8009aca:	460b      	mov	r3, r1
 8009acc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	68db      	ldr	r3, [r3, #12]
 8009ad6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009ade:	78fb      	ldrb	r3, [r7, #3]
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d115      	bne.n	8009b10 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009af0:	2001      	movs	r0, #1
 8009af2:	f7f8 f9b1 	bl	8001e58 <HAL_Delay>
      ms++;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	3301      	adds	r3, #1
 8009afa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 fc07 	bl	800a310 <USB_GetMode>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d01e      	beq.n	8009b46 <USB_SetCurrentMode+0x84>
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2b31      	cmp	r3, #49	; 0x31
 8009b0c:	d9f0      	bls.n	8009af0 <USB_SetCurrentMode+0x2e>
 8009b0e:	e01a      	b.n	8009b46 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009b10:	78fb      	ldrb	r3, [r7, #3]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d115      	bne.n	8009b42 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009b22:	2001      	movs	r0, #1
 8009b24:	f7f8 f998 	bl	8001e58 <HAL_Delay>
      ms++;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 fbee 	bl	800a310 <USB_GetMode>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d005      	beq.n	8009b46 <USB_SetCurrentMode+0x84>
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2b31      	cmp	r3, #49	; 0x31
 8009b3e:	d9f0      	bls.n	8009b22 <USB_SetCurrentMode+0x60>
 8009b40:	e001      	b.n	8009b46 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009b42:	2301      	movs	r3, #1
 8009b44:	e005      	b.n	8009b52 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2b32      	cmp	r3, #50	; 0x32
 8009b4a:	d101      	bne.n	8009b50 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	e000      	b.n	8009b52 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009b50:	2300      	movs	r3, #0
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
	...

08009b5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009b5c:	b084      	sub	sp, #16
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b086      	sub	sp, #24
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
 8009b66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009b6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009b76:	2300      	movs	r3, #0
 8009b78:	613b      	str	r3, [r7, #16]
 8009b7a:	e009      	b.n	8009b90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	3340      	adds	r3, #64	; 0x40
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	4413      	add	r3, r2
 8009b86:	2200      	movs	r2, #0
 8009b88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	613b      	str	r3, [r7, #16]
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	2b0e      	cmp	r3, #14
 8009b94:	d9f2      	bls.n	8009b7c <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d11c      	bne.n	8009bd6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	68fa      	ldr	r2, [r7, #12]
 8009ba6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009baa:	f043 0302 	orr.w	r3, r3, #2
 8009bae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	601a      	str	r2, [r3, #0]
 8009bd4:	e005      	b.n	8009be2 <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009be8:	461a      	mov	r2, r3
 8009bea:	2300      	movs	r3, #0
 8009bec:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009bee:	2103      	movs	r1, #3
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 f95b 	bl	8009eac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009bf6:	2110      	movs	r1, #16
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 f8f3 	bl	8009de4 <USB_FlushTxFifo>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d001      	beq.n	8009c08 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8009c04:	2301      	movs	r3, #1
 8009c06:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 f91f 	bl	8009e4c <USB_FlushRxFifo>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d001      	beq.n	8009c18 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8009c14:	2301      	movs	r3, #1
 8009c16:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c1e:	461a      	mov	r2, r3
 8009c20:	2300      	movs	r3, #0
 8009c22:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c36:	461a      	mov	r2, r3
 8009c38:	2300      	movs	r3, #0
 8009c3a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	613b      	str	r3, [r7, #16]
 8009c40:	e043      	b.n	8009cca <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	015a      	lsls	r2, r3, #5
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	4413      	add	r3, r2
 8009c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c58:	d118      	bne.n	8009c8c <USB_DevInit+0x130>
    {
      if (i == 0U)
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d10a      	bne.n	8009c76 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	015a      	lsls	r2, r3, #5
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	4413      	add	r3, r2
 8009c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009c72:	6013      	str	r3, [r2, #0]
 8009c74:	e013      	b.n	8009c9e <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	015a      	lsls	r2, r3, #5
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c82:	461a      	mov	r2, r3
 8009c84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009c88:	6013      	str	r3, [r2, #0]
 8009c8a:	e008      	b.n	8009c9e <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	015a      	lsls	r2, r3, #5
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	4413      	add	r3, r2
 8009c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c98:	461a      	mov	r2, r3
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	015a      	lsls	r2, r3, #5
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	4413      	add	r3, r2
 8009ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009caa:	461a      	mov	r2, r3
 8009cac:	2300      	movs	r3, #0
 8009cae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	015a      	lsls	r2, r3, #5
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009cc2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	613b      	str	r3, [r7, #16]
 8009cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ccc:	693a      	ldr	r2, [r7, #16]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d3b7      	bcc.n	8009c42 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	613b      	str	r3, [r7, #16]
 8009cd6:	e043      	b.n	8009d60 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	015a      	lsls	r2, r3, #5
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	4413      	add	r3, r2
 8009ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009cea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009cee:	d118      	bne.n	8009d22 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d10a      	bne.n	8009d0c <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	015a      	lsls	r2, r3, #5
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d02:	461a      	mov	r2, r3
 8009d04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009d08:	6013      	str	r3, [r2, #0]
 8009d0a:	e013      	b.n	8009d34 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	015a      	lsls	r2, r3, #5
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	4413      	add	r3, r2
 8009d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d18:	461a      	mov	r2, r3
 8009d1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009d1e:	6013      	str	r3, [r2, #0]
 8009d20:	e008      	b.n	8009d34 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	015a      	lsls	r2, r3, #5
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	4413      	add	r3, r2
 8009d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d2e:	461a      	mov	r2, r3
 8009d30:	2300      	movs	r3, #0
 8009d32:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	015a      	lsls	r2, r3, #5
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	4413      	add	r3, r2
 8009d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d40:	461a      	mov	r2, r3
 8009d42:	2300      	movs	r3, #0
 8009d44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	015a      	lsls	r2, r3, #5
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d52:	461a      	mov	r2, r3
 8009d54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009d58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	613b      	str	r3, [r7, #16]
 8009d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d62:	693a      	ldr	r2, [r7, #16]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d3b7      	bcc.n	8009cd8 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d6e:	691b      	ldr	r3, [r3, #16]
 8009d70:	68fa      	ldr	r2, [r7, #12]
 8009d72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d7a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009d88:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d105      	bne.n	8009d9c <USB_DevInit+0x240>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	699b      	ldr	r3, [r3, #24]
 8009d94:	f043 0210 	orr.w	r2, r3, #16
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	699a      	ldr	r2, [r3, #24]
 8009da0:	4b0f      	ldr	r3, [pc, #60]	; (8009de0 <USB_DevInit+0x284>)
 8009da2:	4313      	orrs	r3, r2
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d005      	beq.n	8009dba <USB_DevInit+0x25e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	699b      	ldr	r3, [r3, #24]
 8009db2:	f043 0208 	orr.w	r2, r3, #8
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d107      	bne.n	8009dd0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	699b      	ldr	r3, [r3, #24]
 8009dc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009dc8:	f043 0304 	orr.w	r3, r3, #4
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3718      	adds	r7, #24
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ddc:	b004      	add	sp, #16
 8009dde:	4770      	bx	lr
 8009de0:	803c3800 	.word	0x803c3800

08009de4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009dee:	2300      	movs	r3, #0
 8009df0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	3301      	adds	r3, #1
 8009df6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	4a13      	ldr	r2, [pc, #76]	; (8009e48 <USB_FlushTxFifo+0x64>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d901      	bls.n	8009e04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009e00:	2303      	movs	r3, #3
 8009e02:	e01b      	b.n	8009e3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	691b      	ldr	r3, [r3, #16]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	daf2      	bge.n	8009df2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	019b      	lsls	r3, r3, #6
 8009e14:	f043 0220 	orr.w	r2, r3, #32
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	3301      	adds	r3, #1
 8009e20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	4a08      	ldr	r2, [pc, #32]	; (8009e48 <USB_FlushTxFifo+0x64>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d901      	bls.n	8009e2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009e2a:	2303      	movs	r3, #3
 8009e2c:	e006      	b.n	8009e3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	691b      	ldr	r3, [r3, #16]
 8009e32:	f003 0320 	and.w	r3, r3, #32
 8009e36:	2b20      	cmp	r3, #32
 8009e38:	d0f0      	beq.n	8009e1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3714      	adds	r7, #20
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr
 8009e48:	00030d40 	.word	0x00030d40

08009e4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009e54:	2300      	movs	r3, #0
 8009e56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	4a11      	ldr	r2, [pc, #68]	; (8009ea8 <USB_FlushRxFifo+0x5c>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d901      	bls.n	8009e6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009e66:	2303      	movs	r3, #3
 8009e68:	e018      	b.n	8009e9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	691b      	ldr	r3, [r3, #16]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	daf2      	bge.n	8009e58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009e72:	2300      	movs	r3, #0
 8009e74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2210      	movs	r2, #16
 8009e7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	3301      	adds	r3, #1
 8009e80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	4a08      	ldr	r2, [pc, #32]	; (8009ea8 <USB_FlushRxFifo+0x5c>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d901      	bls.n	8009e8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009e8a:	2303      	movs	r3, #3
 8009e8c:	e006      	b.n	8009e9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	f003 0310 	and.w	r3, r3, #16
 8009e96:	2b10      	cmp	r3, #16
 8009e98:	d0f0      	beq.n	8009e7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009e9a:	2300      	movs	r3, #0
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3714      	adds	r7, #20
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr
 8009ea8:	00030d40 	.word	0x00030d40

08009eac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b085      	sub	sp, #20
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	78fb      	ldrb	r3, [r7, #3]
 8009ec6:	68f9      	ldr	r1, [r7, #12]
 8009ec8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009ed0:	2300      	movs	r3, #0
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3714      	adds	r7, #20
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr

08009ede <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009ede:	b480      	push	{r7}
 8009ee0:	b087      	sub	sp, #28
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	f003 0306 	and.w	r3, r3, #6
 8009ef6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d102      	bne.n	8009f04 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009efe:	2300      	movs	r3, #0
 8009f00:	75fb      	strb	r3, [r7, #23]
 8009f02:	e00a      	b.n	8009f1a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2b02      	cmp	r3, #2
 8009f08:	d002      	beq.n	8009f10 <USB_GetDevSpeed+0x32>
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2b06      	cmp	r3, #6
 8009f0e:	d102      	bne.n	8009f16 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009f10:	2302      	movs	r3, #2
 8009f12:	75fb      	strb	r3, [r7, #23]
 8009f14:	e001      	b.n	8009f1a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009f16:	230f      	movs	r3, #15
 8009f18:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	371c      	adds	r7, #28
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr

08009f28 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b087      	sub	sp, #28
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009f32:	2300      	movs	r3, #0
 8009f34:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009f36:	2300      	movs	r3, #0
 8009f38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	785b      	ldrb	r3, [r3, #1]
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d14a      	bne.n	8009fdc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	015a      	lsls	r2, r3, #5
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	4413      	add	r3, r2
 8009f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f5e:	f040 8086 	bne.w	800a06e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	015a      	lsls	r2, r3, #5
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	683a      	ldr	r2, [r7, #0]
 8009f74:	7812      	ldrb	r2, [r2, #0]
 8009f76:	0151      	lsls	r1, r2, #5
 8009f78:	693a      	ldr	r2, [r7, #16]
 8009f7a:	440a      	add	r2, r1
 8009f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f84:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	015a      	lsls	r2, r3, #5
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	4413      	add	r3, r2
 8009f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	683a      	ldr	r2, [r7, #0]
 8009f98:	7812      	ldrb	r2, [r2, #0]
 8009f9a:	0151      	lsls	r1, r2, #5
 8009f9c:	693a      	ldr	r2, [r7, #16]
 8009f9e:	440a      	add	r2, r1
 8009fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fa8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	3301      	adds	r3, #1
 8009fae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f242 7210 	movw	r2, #10000	; 0x2710
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d902      	bls.n	8009fc0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	75fb      	strb	r3, [r7, #23]
          break;
 8009fbe:	e056      	b.n	800a06e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	015a      	lsls	r2, r3, #5
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	4413      	add	r3, r2
 8009fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fd8:	d0e7      	beq.n	8009faa <USB_EPStopXfer+0x82>
 8009fda:	e048      	b.n	800a06e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	781b      	ldrb	r3, [r3, #0]
 8009fe0:	015a      	lsls	r2, r3, #5
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ff0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ff4:	d13b      	bne.n	800a06e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	015a      	lsls	r2, r3, #5
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	4413      	add	r3, r2
 800a000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	683a      	ldr	r2, [r7, #0]
 800a008:	7812      	ldrb	r2, [r2, #0]
 800a00a:	0151      	lsls	r1, r2, #5
 800a00c:	693a      	ldr	r2, [r7, #16]
 800a00e:	440a      	add	r2, r1
 800a010:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a014:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a018:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	015a      	lsls	r2, r3, #5
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	4413      	add	r3, r2
 800a024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	683a      	ldr	r2, [r7, #0]
 800a02c:	7812      	ldrb	r2, [r2, #0]
 800a02e:	0151      	lsls	r1, r2, #5
 800a030:	693a      	ldr	r2, [r7, #16]
 800a032:	440a      	add	r2, r1
 800a034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a038:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a03c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	3301      	adds	r3, #1
 800a042:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f242 7210 	movw	r2, #10000	; 0x2710
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d902      	bls.n	800a054 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	75fb      	strb	r3, [r7, #23]
          break;
 800a052:	e00c      	b.n	800a06e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	015a      	lsls	r2, r3, #5
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	4413      	add	r3, r2
 800a05e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a068:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a06c:	d0e7      	beq.n	800a03e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a06e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a070:	4618      	mov	r0, r3
 800a072:	371c      	adds	r7, #28
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr

0800a07c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b089      	sub	sp, #36	; 0x24
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	4611      	mov	r1, r2
 800a088:	461a      	mov	r2, r3
 800a08a:	460b      	mov	r3, r1
 800a08c:	71fb      	strb	r3, [r7, #7]
 800a08e:	4613      	mov	r3, r2
 800a090:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a09a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d123      	bne.n	800a0ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a0a2:	88bb      	ldrh	r3, [r7, #4]
 800a0a4:	3303      	adds	r3, #3
 800a0a6:	089b      	lsrs	r3, r3, #2
 800a0a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	61bb      	str	r3, [r7, #24]
 800a0ae:	e018      	b.n	800a0e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a0b0:	79fb      	ldrb	r3, [r7, #7]
 800a0b2:	031a      	lsls	r2, r3, #12
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0bc:	461a      	mov	r2, r3
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a0ca:	69fb      	ldr	r3, [r7, #28]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a0d6:	69fb      	ldr	r3, [r7, #28]
 800a0d8:	3301      	adds	r3, #1
 800a0da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	61bb      	str	r3, [r7, #24]
 800a0e2:	69ba      	ldr	r2, [r7, #24]
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d3e2      	bcc.n	800a0b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a0ea:	2300      	movs	r3, #0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3724      	adds	r7, #36	; 0x24
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b08b      	sub	sp, #44	; 0x2c
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	4613      	mov	r3, r2
 800a104:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a10e:	88fb      	ldrh	r3, [r7, #6]
 800a110:	089b      	lsrs	r3, r3, #2
 800a112:	b29b      	uxth	r3, r3
 800a114:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a116:	88fb      	ldrh	r3, [r7, #6]
 800a118:	f003 0303 	and.w	r3, r3, #3
 800a11c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a11e:	2300      	movs	r3, #0
 800a120:	623b      	str	r3, [r7, #32]
 800a122:	e014      	b.n	800a14e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a124:	69bb      	ldr	r3, [r7, #24]
 800a126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a132:	3301      	adds	r3, #1
 800a134:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a138:	3301      	adds	r3, #1
 800a13a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13e:	3301      	adds	r3, #1
 800a140:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a144:	3301      	adds	r3, #1
 800a146:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a148:	6a3b      	ldr	r3, [r7, #32]
 800a14a:	3301      	adds	r3, #1
 800a14c:	623b      	str	r3, [r7, #32]
 800a14e:	6a3a      	ldr	r2, [r7, #32]
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	429a      	cmp	r2, r3
 800a154:	d3e6      	bcc.n	800a124 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a156:	8bfb      	ldrh	r3, [r7, #30]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d01e      	beq.n	800a19a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a15c:	2300      	movs	r3, #0
 800a15e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a166:	461a      	mov	r2, r3
 800a168:	f107 0310 	add.w	r3, r7, #16
 800a16c:	6812      	ldr	r2, [r2, #0]
 800a16e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a170:	693a      	ldr	r2, [r7, #16]
 800a172:	6a3b      	ldr	r3, [r7, #32]
 800a174:	b2db      	uxtb	r3, r3
 800a176:	00db      	lsls	r3, r3, #3
 800a178:	fa22 f303 	lsr.w	r3, r2, r3
 800a17c:	b2da      	uxtb	r2, r3
 800a17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a180:	701a      	strb	r2, [r3, #0]
      i++;
 800a182:	6a3b      	ldr	r3, [r7, #32]
 800a184:	3301      	adds	r3, #1
 800a186:	623b      	str	r3, [r7, #32]
      pDest++;
 800a188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18a:	3301      	adds	r3, #1
 800a18c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a18e:	8bfb      	ldrh	r3, [r7, #30]
 800a190:	3b01      	subs	r3, #1
 800a192:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a194:	8bfb      	ldrh	r3, [r7, #30]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d1ea      	bne.n	800a170 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	372c      	adds	r7, #44	; 0x2c
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b085      	sub	sp, #20
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a1c2:	f023 0303 	bic.w	r3, r3, #3
 800a1c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	68fa      	ldr	r2, [r7, #12]
 800a1d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1d6:	f043 0302 	orr.w	r3, r3, #2
 800a1da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a1dc:	2300      	movs	r3, #0
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3714      	adds	r7, #20
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr

0800a1ea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a1ea:	b480      	push	{r7}
 800a1ec:	b085      	sub	sp, #20
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	695b      	ldr	r3, [r3, #20]
 800a1f6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	699b      	ldr	r3, [r3, #24]
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	4013      	ands	r3, r2
 800a200:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a202:	68fb      	ldr	r3, [r7, #12]
}
 800a204:	4618      	mov	r0, r3
 800a206:	3714      	adds	r7, #20
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a210:	b480      	push	{r7}
 800a212:	b085      	sub	sp, #20
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a222:	699b      	ldr	r3, [r3, #24]
 800a224:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a22c:	69db      	ldr	r3, [r3, #28]
 800a22e:	68ba      	ldr	r2, [r7, #8]
 800a230:	4013      	ands	r3, r2
 800a232:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	0c1b      	lsrs	r3, r3, #16
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3714      	adds	r7, #20
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a244:	b480      	push	{r7}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a256:	699b      	ldr	r3, [r3, #24]
 800a258:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a260:	69db      	ldr	r3, [r3, #28]
 800a262:	68ba      	ldr	r2, [r7, #8]
 800a264:	4013      	ands	r3, r2
 800a266:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	b29b      	uxth	r3, r3
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3714      	adds	r7, #20
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a278:	b480      	push	{r7}
 800a27a:	b085      	sub	sp, #20
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	460b      	mov	r3, r1
 800a282:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a288:	78fb      	ldrb	r3, [r7, #3]
 800a28a:	015a      	lsls	r2, r3, #5
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	4413      	add	r3, r2
 800a290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a29e:	695b      	ldr	r3, [r3, #20]
 800a2a0:	68ba      	ldr	r2, [r7, #8]
 800a2a2:	4013      	ands	r3, r2
 800a2a4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a2a6:	68bb      	ldr	r3, [r7, #8]
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3714      	adds	r7, #20
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr

0800a2b4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b087      	sub	sp, #28
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	460b      	mov	r3, r1
 800a2be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2ca:	691b      	ldr	r3, [r3, #16]
 800a2cc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2d6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a2d8:	78fb      	ldrb	r3, [r7, #3]
 800a2da:	f003 030f 	and.w	r3, r3, #15
 800a2de:	68fa      	ldr	r2, [r7, #12]
 800a2e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a2e4:	01db      	lsls	r3, r3, #7
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	693a      	ldr	r2, [r7, #16]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a2ee:	78fb      	ldrb	r3, [r7, #3]
 800a2f0:	015a      	lsls	r2, r3, #5
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	693a      	ldr	r2, [r7, #16]
 800a2fe:	4013      	ands	r3, r2
 800a300:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a302:	68bb      	ldr	r3, [r7, #8]
}
 800a304:	4618      	mov	r0, r3
 800a306:	371c      	adds	r7, #28
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	695b      	ldr	r3, [r3, #20]
 800a31c:	f003 0301 	and.w	r3, r3, #1
}
 800a320:	4618      	mov	r0, r3
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b085      	sub	sp, #20
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a346:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a34a:	f023 0307 	bic.w	r3, r3, #7
 800a34e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a35e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a362:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a364:	2300      	movs	r3, #0
}
 800a366:	4618      	mov	r0, r3
 800a368:	3714      	adds	r7, #20
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr
	...

0800a374 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a374:	b480      	push	{r7}
 800a376:	b087      	sub	sp, #28
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	460b      	mov	r3, r1
 800a37e:	607a      	str	r2, [r7, #4]
 800a380:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	333c      	adds	r3, #60	; 0x3c
 800a38a:	3304      	adds	r3, #4
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	4a26      	ldr	r2, [pc, #152]	; (800a42c <USB_EP0_OutStart+0xb8>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d90a      	bls.n	800a3ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a3a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a3a8:	d101      	bne.n	800a3ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	e037      	b.n	800a41e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3c0:	691b      	ldr	r3, [r3, #16]
 800a3c2:	697a      	ldr	r2, [r7, #20]
 800a3c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a3cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	697a      	ldr	r2, [r7, #20]
 800a3d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3dc:	f043 0318 	orr.w	r3, r3, #24
 800a3e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3e8:	691b      	ldr	r3, [r3, #16]
 800a3ea:	697a      	ldr	r2, [r7, #20]
 800a3ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3f0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a3f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a3f6:	7afb      	ldrb	r3, [r7, #11]
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d10f      	bne.n	800a41c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a402:	461a      	mov	r2, r3
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	697a      	ldr	r2, [r7, #20]
 800a412:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a416:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a41a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a41c:	2300      	movs	r3, #0
}
 800a41e:	4618      	mov	r0, r3
 800a420:	371c      	adds	r7, #28
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr
 800a42a:	bf00      	nop
 800a42c:	4f54300a 	.word	0x4f54300a

0800a430 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a430:	b480      	push	{r7}
 800a432:	b085      	sub	sp, #20
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a438:	2300      	movs	r3, #0
 800a43a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	3301      	adds	r3, #1
 800a440:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	4a13      	ldr	r2, [pc, #76]	; (800a494 <USB_CoreReset+0x64>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d901      	bls.n	800a44e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a44a:	2303      	movs	r3, #3
 800a44c:	e01b      	b.n	800a486 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	691b      	ldr	r3, [r3, #16]
 800a452:	2b00      	cmp	r3, #0
 800a454:	daf2      	bge.n	800a43c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a456:	2300      	movs	r3, #0
 800a458:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	691b      	ldr	r3, [r3, #16]
 800a45e:	f043 0201 	orr.w	r2, r3, #1
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	3301      	adds	r3, #1
 800a46a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	4a09      	ldr	r2, [pc, #36]	; (800a494 <USB_CoreReset+0x64>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d901      	bls.n	800a478 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a474:	2303      	movs	r3, #3
 800a476:	e006      	b.n	800a486 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	691b      	ldr	r3, [r3, #16]
 800a47c:	f003 0301 	and.w	r3, r3, #1
 800a480:	2b01      	cmp	r3, #1
 800a482:	d0f0      	beq.n	800a466 <USB_CoreReset+0x36>

  return HAL_OK;
 800a484:	2300      	movs	r3, #0
}
 800a486:	4618      	mov	r0, r3
 800a488:	3714      	adds	r7, #20
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	00030d40 	.word	0x00030d40

0800a498 <memset>:
 800a498:	4402      	add	r2, r0
 800a49a:	4603      	mov	r3, r0
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d100      	bne.n	800a4a2 <memset+0xa>
 800a4a0:	4770      	bx	lr
 800a4a2:	f803 1b01 	strb.w	r1, [r3], #1
 800a4a6:	e7f9      	b.n	800a49c <memset+0x4>

0800a4a8 <__libc_init_array>:
 800a4a8:	b570      	push	{r4, r5, r6, lr}
 800a4aa:	4d0d      	ldr	r5, [pc, #52]	; (800a4e0 <__libc_init_array+0x38>)
 800a4ac:	2600      	movs	r6, #0
 800a4ae:	4c0d      	ldr	r4, [pc, #52]	; (800a4e4 <__libc_init_array+0x3c>)
 800a4b0:	1b64      	subs	r4, r4, r5
 800a4b2:	10a4      	asrs	r4, r4, #2
 800a4b4:	42a6      	cmp	r6, r4
 800a4b6:	d109      	bne.n	800a4cc <__libc_init_array+0x24>
 800a4b8:	4d0b      	ldr	r5, [pc, #44]	; (800a4e8 <__libc_init_array+0x40>)
 800a4ba:	2600      	movs	r6, #0
 800a4bc:	4c0b      	ldr	r4, [pc, #44]	; (800a4ec <__libc_init_array+0x44>)
 800a4be:	f000 f817 	bl	800a4f0 <_init>
 800a4c2:	1b64      	subs	r4, r4, r5
 800a4c4:	10a4      	asrs	r4, r4, #2
 800a4c6:	42a6      	cmp	r6, r4
 800a4c8:	d105      	bne.n	800a4d6 <__libc_init_array+0x2e>
 800a4ca:	bd70      	pop	{r4, r5, r6, pc}
 800a4cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4d0:	3601      	adds	r6, #1
 800a4d2:	4798      	blx	r3
 800a4d4:	e7ee      	b.n	800a4b4 <__libc_init_array+0xc>
 800a4d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4da:	3601      	adds	r6, #1
 800a4dc:	4798      	blx	r3
 800a4de:	e7f2      	b.n	800a4c6 <__libc_init_array+0x1e>
 800a4e0:	0800a6f0 	.word	0x0800a6f0
 800a4e4:	0800a6f0 	.word	0x0800a6f0
 800a4e8:	0800a6f0 	.word	0x0800a6f0
 800a4ec:	0800a6f4 	.word	0x0800a6f4

0800a4f0 <_init>:
 800a4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4f2:	bf00      	nop
 800a4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4f6:	bc08      	pop	{r3}
 800a4f8:	469e      	mov	lr, r3
 800a4fa:	4770      	bx	lr

0800a4fc <_fini>:
 800a4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4fe:	bf00      	nop
 800a500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a502:	bc08      	pop	{r3}
 800a504:	469e      	mov	lr, r3
 800a506:	4770      	bx	lr
